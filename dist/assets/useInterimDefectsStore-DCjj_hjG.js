import{d as C}from"./pinia-BjOS2_Ao.js";import{G as v,b as F,c as A,d as O,U as D,u as N,e as c}from"./useInterimEngineStore-Ctq4w8Oq.js";import{c as d,s as u,a as l}from"./index-BuVmIl8K.js";import{D as S,C as V}from"./CrackNoClass-0DSU7BAn.js";import{D as I}from"./urls-CvqtYZA-.js";import{C as g}from"./CrackYesClass-COntz77m.js";import{u as k}from"./useCameraStore-BwXVJhPe.js";import{u as m}from"./authentication-handler-Pueb_EI7.js";import{u as E}from"./useGlobalConnectionStore-DV9B81de.js";import{D as P}from"./DefectNoClass-BqGKOkzR.js";import{e as f}from"./lodash-DrHMlsdo.js";import{m as y}from"./helpers-wUOLw-dU.js";const J="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/attachment/upload",w="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/attachment/download_by_url",h=C({id:"InterimAttachment",state:()=>({stateLoading:!1}),getters:{globalConnectionStore:()=>E()},actions:{async uploadAttachment(e,r){const t={ver:"v1",userAccount:r};try{return(await d.post(`${J}?${new URLSearchParams(t).toString()}`,e)).data.result.content}catch(a){const s=this.globalConnectionStore.checkIsErrorNoNetwork(a);return this.globalConnectionStore.setSubmitConnectionError(s),m(a),console.log(a),u("IRONS",a),!1}},async downloadAttachment(e){const r={ver:"v1",fileUrl:e};try{return(await d.get(w,"",new URLSearchParams(r).toString())).data}catch(t){m(t),u("IRONS",t),console.log(t)}return""}}}),W=C({id:"InterimDefects",state:()=>({stateLoading:!1,stateComments:[],stateData:new S,stateDefectFormData:new I,stateDefectNoFormData:new P,stateCrackFormData:new g,stateCrackSimpleFormData:new V,stateIsError:!1,stateHeaderId:"",stateDetailId:"",stateHeaderStatus:"",stateDefectFetched:!1,stateLoadDefectImages:!1,stateApproveBy:void 0,stateApproveDate:void 0,stateDefectPictures:{},stateDefectKey:1,stateDefectSMU:{},stateErrorMessage:"",stateCurrentUserGroup:"",stateErrorByNetwork:!1}),getters:{Loading:e=>e.stateLoading,ApprovalData:e=>e.stateData,DefectKey:e=>e.stateDefectKey,DefectFormData:e=>e.stateDefectFormData,CrackFormData:e=>e.stateCrackFormData,ImagesDefect:()=>k().ImageObjects.find(r=>r.Id==="defect"),ImagesCrack:()=>k().ImageObjects.find(r=>r.Id==="crack"),IsError:e=>e.stateIsError,ErrorMessage:e=>e.stateErrorMessage,HeaderId:e=>e.stateHeaderId,DetailId:e=>e.stateDetailId,DataFetched:e=>e.stateDefectFetched,HeaderStatus:e=>e.stateHeaderStatus,DefectPictures:e=>e.stateDefectPictures,LoadDefectImages:e=>e.stateLoadDefectImages,Comments:e=>e.stateComments,ApproveBy:e=>e.stateApproveBy,ApproveDate:e=>e.stateApproveDate,DefectSMUHeader:e=>e.stateData.SMUDefectHeaders.find(r=>r.defectType=="machineSMU")??{},DefectSMUDetail:e=>e.stateDefectSMU,DefectSMUDetailDetail:e=>e.stateData.SMUDefectDetails.find(r=>r.defectHeaderId==e.stateDetailId),globalConnectionStore:()=>E()},actions:{setCurrentUserGroup(e){this.stateCurrentUserGroup=e},setHeaderId(e){this.stateHeaderId=e},setDefectFetched(e){this.stateDefectFetched=e},setDetailId(e){this.stateDetailId=e},createRequestBody(e){return{workorder:e}},async getDefectsDataHeader(e){const r=this.createRequestBody(e),t=await d.post(`${v}`,r);this.stateData.setHeaders(t.data.result.content)},async getDefectsDataDetail(e){const r=this.createRequestBody(e),t=await d.post(`${F}`,r);this.stateData.setDetails(t.data.result.content)},toggleErrorByNetwork(e){this.stateErrorByNetwork=e},async getDefectsDataAll(e){var t,a,s,i,n;const r={workOrder:e,ver:"v1"};try{const p=await d.get(`${A}`,"",new URLSearchParams(r).toString());this.stateData.setHeaders(((t=p.data.result.content)==null?void 0:t.defectHeader)||[]),this.stateData.setDetails(((a=p.data.result.content)==null?void 0:a.defectDetail)||[]),this.stateComments=((s=p.data.result.content)==null?void 0:s.comment)||[],this.stateApproveBy=(i=p.data.result.content)==null?void 0:i.approveBy,this.stateApproveDate=(n=p.data.result.content)==null?void 0:n.approveDate}catch(p){const o=this.globalConnectionStore.checkIsErrorNoNetwork(p);this.stateErrorByNetwork=o,u("IRONS",p)}},async getDefectsData(e){this.stateLoading=!0;try{this.setDefectFetched(!1),await this.getDefectsDataAll(e),this.setDefectFetched(!0)}catch(r){m(r),console.error(r)}this.stateLoading=!1},setDefectData(e){const r=h(),t=this.ApprovalData.DefectHeaders.find(s=>s.id===e),a=this.ApprovalData.DefectDetails.find(s=>s.defectHeaderId==e);if(a){this.setHeaderId(e),this.setDetailId(a.id),this.stateHeaderStatus=t==null?void 0:t.status,a.detail.type=="YES"?(this.stateDefectFormData.setAssetNumber(a.detail.assetNumber),this.stateDefectFormData.setDescription(a.detail.description),this.stateDefectFormData.setRaisedBy(a.detail.raisedBy),this.stateDefectFormData.setDate(a.detail.date),this.stateDefectFormData.setPlannedDuration(a.detail.plannedDuration),this.stateDefectFormData.setInstruction(a.detail.instruction),this.stateDefectFormData.setPriority(a.detail.priority),this.stateDefectFormData.setTitle((t==null?void 0:t.taskDesc)||""),this.stateDefectFormData.importParts(...JSON.parse(a.detail.parts)),this.stateDefectFormData.importLabours(...JSON.parse(a.detail.labours)),this.stateDefectFormData.importResources(...JSON.parse(a.detail.resources)),this.stateDefectFormData.importSymptoms(...JSON.parse(a.detail.symptoms)),this.stateDefectFormData.importCauses(...JSON.parse(a.detail.causes)),this.ImagesDefect.ImageInfos.push(...JSON.parse(a.detail.images))):a.detail.type=="NO"?(this.stateDefectNoFormData.setAssetNumber(a.detail.assetNumber),this.stateDefectNoFormData.setDescription(a.detail.description),this.stateDefectNoFormData.setRaisedBy(a.detail.raisedBy),this.stateDefectNoFormData.setDate(a.detail.date),this.stateDefectNoFormData.setTitle((t==null?void 0:t.taskDesc)||""),this.stateDefectNoFormData.importActions(...JSON.parse(a.detail.actions)),this.ImagesDefect.ImageInfos.push(...JSON.parse(a.detail.images))):a.detail.type=="machineSMU"?this.stateDefectSMU=a.detail:(this.stateDefectNoFormData.setAssetNumber(a.detail.assetNumber),this.stateDefectNoFormData.setDescription(a.detail.description),this.stateDefectNoFormData.setRaisedBy(a.detail.raisedBy),this.stateDefectNoFormData.setDate(a.detail.date),this.stateDefectNoFormData.setTitle((t==null?void 0:t.taskDesc)||""));const s=[];return this.ImagesDefect.ImageInfos.forEach(i=>{let n="";typeof i=="string"?n=i:n=i.filename,s.push(r.downloadAttachment(n))}),Promise.all(s).then(i=>{i.forEach(n=>{const p=new Blob([n],{type:"image/png"});this.ImagesDefect.ImageBlobs.push(p)})}),a.detail.type}},setSMUDefectData(e){let r=!1;const t=h(),a=this.ApprovalData.SMUDefectHeaders.find(i=>i.id===e),s=this.ApprovalData.SMUDefectDetails.find(i=>i.defectHeaderId==e);if(s){r=!0,this.setHeaderId(e),this.setDetailId(s.id),this.stateHeaderStatus=a==null?void 0:a.status,this.stateDefectSMU=s.detail;const i=[];this.ImagesDefect.ImageInfos.forEach(n=>{let p="";typeof n=="string"?p=n:p=n.filename,i.push(t.downloadAttachment(p))}),Promise.all(i).then(n=>{n.forEach(p=>{const o=new Blob([p],{type:"image/png"});this.ImagesDefect.ImageBlobs.push(o)})})}return r},async getDefectImages(e,r,t){const a={id:e,keyValue:r,propertyName:t},s={ver:"v1"};let i=[];const n=await d.post(`${O}?${new URLSearchParams(s).toString()}`,a);return f.isUndefined(n.data.result.content)||(i=n.data.result.content),i},setLoadingImages(e){this.stateLoadDefectImages=e},setNewDefectKey(){this.stateDefectKey+=1},async getDefectPictures(e){const r=this.ApprovalData.DefectDetails.find(t=>t.defectHeaderId==e);r&&(this.stateDefectPictures[e]=JSON.parse(r.detail.images))},getCrackPictures(e){const r=this.ApprovalData.CrackDetails.find(t=>t.defectHeaderId==e);r&&(this.stateDefectPictures[e]=JSON.parse(r.detail.images))},setDefectNewData(e=!0){const r=this.ApprovalData.DefectDetails.find(a=>a.id===this.stateDetailId);r&&(r.detail.description=this.DefectFormData.Description.value,r.detail.plannedDuration=this.DefectFormData.PlannedDuration.value,r.detail.instruction=this.DefectFormData.Instruction.value,r.detail.priority=this.DefectFormData.Priority,r.detail.parts=JSON.stringify(this.DefectFormData.Parts),r.detail.labours=JSON.stringify(this.DefectFormData.Labours),r.detail.resources=JSON.stringify(this.DefectFormData.Resources.map(a=>a.value)),r.detail.symptoms=JSON.stringify(this.DefectFormData.Symptoms.map(a=>a.value)),r.detail.causes=JSON.stringify(this.DefectFormData.Causes.map(a=>a.value)));const t=this.ApprovalData.DefectHeaders.find(a=>a.id===this.stateHeaderId);t&&e&&(t.status="Acknowledge")},createDefectDetail(){var r;const e=((r=this.ImagesDefect)==null?void 0:r.ImageInfos)??[];return{type:"YES",assetNumber:this.DefectFormData.AssetNumber,description:this.DefectFormData.Description.value,title:this.DefectFormData.Title,raisedBy:this.DefectFormData.RaisedBy,date:this.DefectFormData.Date,plannedDuration:this.DefectFormData.PlannedDuration.value,instruction:this.DefectFormData.Instruction.value,priority:this.DefectFormData.Priority,parts:JSON.stringify(this.DefectFormData.Parts),labours:JSON.stringify(this.DefectFormData.Labours),resources:JSON.stringify(this.DefectFormData.Resources.map(t=>t.value)),symptoms:JSON.stringify(this.DefectFormData.Symptoms.map(t=>t.value)),causes:JSON.stringify(this.DefectFormData.Causes.map(t=>t.value)),images:JSON.stringify(e)}},async updateDefectDetail(){const e=l(),r=this.ApprovalData.DefectDetails.find(s=>s.id===this.stateDetailId),t=this.createDefectDetail(),a={id:this.DetailId,updateParams:[{keyValue:r.key,propertyParams:[{propertyName:"detail",propertyValue:JSON.stringify(t)},{propertyName:"updatedBy",propertyValue:JSON.stringify({id:e.user.EmployeeId,name:e.user.Name})},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}],employee:{id:e.user.EmployeeId,name:e.user.Name}};try{this.stateIsError=!1,await d.post(`${D}`,a)}catch(s){m(s),console.log(s),this.stateIsError=!0,N().toggleTaskAlreadyUpdatedStatus(!0),u("IRONS",s)}},async updateDefectAcknowledge(e=!1,r=""){var i,n,p;const t=l();let a;e?a=this.ApprovalData.SMUDefectHeaders.find(o=>o.id===this.stateHeaderId):a=this.ApprovalData.DefectHeaders.find(o=>o.id===this.stateHeaderId);const s={id:a.id,updateParams:[{keyValue:a.key,propertyParams:[{propertyName:"status",propertyValue:"Acknowledge"},{propertyName:"updatedBy",propertyValue:JSON.stringify({id:t.user.EmployeeId,name:t.user.Name})},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}],employee:{id:t.user.EmployeeId,name:t.user.Name},userGroup:this.stateCurrentUserGroup};r&&s.updateParams[0].propertyParams.push({propertyName:"taskDesc",propertyValue:r});try{this.stateIsError=!1,await d.post(`${c}`,s),a.status="Acknowledge"}catch(o){m(o),console.log(o),this.stateIsError=!0,this.stateErrorMessage=y(((p=(n=(i=o==null?void 0:o.response)==null?void 0:i.data)==null?void 0:n.result)==null?void 0:p.message)??`${o}`),u("IRONS",o)}},async updatePlannerDefectAcknowledge(e=!1,r=""){var i,n,p;const t=l();let a;e?a=this.ApprovalData.SMUDefectHeaders.find(o=>o.id===this.stateHeaderId):a=this.ApprovalData.DefectHeaders.find(o=>o.id===this.stateHeaderId);const s={id:a.id,updateParams:[{keyValue:a.key,propertyParams:[{propertyName:"plannerStatus",propertyValue:"Acknowledge"},{propertyName:"updatedBy",propertyValue:JSON.stringify({id:t.user.EmployeeId,name:t.user.Name})},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}],employee:{id:t.user.EmployeeId,name:t.user.Name},userGroup:this.stateCurrentUserGroup};r&&s.updateParams[0].propertyParams.push({propertyName:"taskDesc",propertyValue:r});try{this.stateIsError=!1,await d.post(`${c}`,s),a.plannerStatus="Acknowledge"}catch(o){m(o),console.log(o),this.stateIsError=!0,this.stateErrorMessage=y(((p=(n=(i=o==null?void 0:o.response)==null?void 0:i.data)==null?void 0:n.result)==null?void 0:p.message)??`${o}`),u("IRONS",o)}},async updateDefectOnly(e){const r=this.ApprovalData.DefectDetails.find(s=>s.id===this.stateDetailId),t=this.createDefectDetail(),a={id:this.DetailId,updateParams:[{keyValue:r.key,propertyParams:[{propertyName:"detail",propertyValue:JSON.stringify(t)},{propertyName:"updatedBy",propertyValue:e},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}],employee:JSON.parse(e)};try{this.stateIsError=!1,await d.post(`${D}`,a)}catch(s){m(s),console.log(s),this.stateIsError=!0,N().toggleTaskAlreadyUpdatedStatus(!0),u("IRONS",s)}},async updateDefectMO(e,r){const t=l(),a=this.ApprovalData.DefectHeaders.find(i=>i.id===e),s={id:a.id,updateParams:[{keyValue:a.key,propertyParams:[{propertyName:"defectWorkorder",propertyValue:r},{propertyName:"updatedBy",propertyValue:JSON.stringify({id:t.user.EmployeeId,name:t.user.Name})},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}],employee:{id:t.user.EmployeeId,name:t.user.Name}};try{this.stateIsError=!1,await d.post(`${c}`,s),a.defectWorkorder=r}catch(i){m(i),console.log(i),this.stateIsError=!0,u("IRONS",i)}},async updateDefectDetailSMU(e={}){var s,i,n;const r=l();let t=this.stateDefectSMU;f.isEmpty(e)||(t=e);const a={id:this.DetailId,updateParams:[{keyValue:this.DetailId,propertyParams:[{propertyName:"detail",propertyValue:JSON.stringify(t)},{propertyName:"updatedBy",propertyValue:JSON.stringify({id:r.user.EmployeeId,name:r.user.Name})},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}],employee:{id:r.user.EmployeeId,name:r.user.Name},userGroup:this.stateCurrentUserGroup};try{this.stateIsError=!1,await d.post(`${D}`,a)}catch(p){m(p),console.log(p),this.stateIsError=!0,this.stateErrorMessage=y(((n=(i=(s=p==null?void 0:p.response)==null?void 0:s.data)==null?void 0:i.result)==null?void 0:n.message)??`${p}`),u("IRONS",p)}},async updateRepairedStatus(e){const r=l(),t=this.ApprovalData.DefectHeaders.find(s=>s.id===e),a={id:t.id,updateParams:[{keyValue:t.key,propertyParams:[{propertyName:"repairedStatus",propertyValue:"Repaired"},{propertyName:"updatedBy",propertyValue:JSON.stringify({id:r.user.EmployeeId,name:r.user.Name})},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}],employee:{id:r.user.EmployeeId,name:r.user.Name}};try{this.stateIsError=!1,await d.post(`${c}`,a),t.repairedStatus="Repaired"}catch(s){m(s),console.log(s),this.stateIsError=!0,u("IRONS",s)}},async updateDefectConfirmedStatus(e,r=""){var i,n,p;const t=l(),a=this.ApprovalData.DefectNAHeaders.find(o=>o.id===e),s={id:a.id,updateParams:[{keyValue:a.key,propertyParams:[{propertyName:"cbmNAStatus",propertyValue:"Confirmed"},{propertyName:"approveReason",propertyValue:r},{propertyName:"updatedBy",propertyValue:JSON.stringify({id:t.user.EmployeeId,name:t.user.Name})},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"},{propertyName:"approvedBy",propertyValue:JSON.stringify({id:t.user.EmployeeId,name:t.user.Name})},{propertyName:"approvedDate",propertyValue:"<<ServerDateTime>>"}]}],employee:{id:t.user.EmployeeId,name:t.user.Name},userGroup:this.stateCurrentUserGroup};try{this.stateIsError=!1,await d.post(`${c}`,s),a.cbmNAStatus="Confirmed"}catch(o){m(o),console.log(o),this.stateIsError=!0,this.stateErrorMessage=y(((p=(n=(i=o==null?void 0:o.response)==null?void 0:i.data)==null?void 0:n.result)==null?void 0:p.message)??`${o}`),u("IRONS",o)}},async updatePlannerDefectConfirmedStatus(e){var s,i,n;const r=l(),t=this.ApprovalData.DefectNAHeaders.find(p=>p.id===e),a={id:t.id,updateParams:[{keyValue:t.key,propertyParams:[{propertyName:"plannerCbmNAStatus",propertyValue:"Confirmed"},{propertyName:"updatedBy",propertyValue:JSON.stringify({id:r.user.EmployeeId,name:r.user.Name})},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}],employee:{id:r.user.EmployeeId,name:r.user.Name},userGroup:this.stateCurrentUserGroup};try{this.stateIsError=!1,await d.post(`${c}`,a),t.plannerCbmNAStatus="Confirmed"}catch(p){m(p),console.log(p),this.stateIsError=!0,this.stateErrorMessage=y(((n=(i=(s=p==null?void 0:p.response)==null?void 0:s.data)==null?void 0:i.result)==null?void 0:n.message)??`${p}`),u("IRONS",p)}},async updateCrackConfirmedStatus(e){const r=l(),t=this.ApprovalData.CrackNAHeaders.find(s=>s.id===e),a={id:t.id,updateParams:[{keyValue:t.key,propertyParams:[{propertyName:"cbmNAStatus",propertyValue:"Confirmed"},{propertyName:"updatedBy",propertyValue:JSON.stringify({id:r.user.EmployeeId,name:r.user.Name})},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"},{propertyName:"approvedBy",propertyValue:JSON.stringify({id:r.user.EmployeeId,name:r.user.Name})},{propertyName:"approvedDate",propertyValue:"<<ServerDateTime>>"}]}],employee:{id:r.user.EmployeeId,name:r.user.Name}};try{this.stateIsError=!1,await d.post(`${c}`,a),t.cbmNAStatus="Confirmed"}catch(s){m(s),console.log(s),this.stateIsError=!0,u("IRONS",s)}},async updatePlannerCrackConfirmedStatus(e){const r=l(),t=this.ApprovalData.CrackNAHeaders.find(s=>s.id===e),a={id:t.id,updateParams:[{keyValue:t.key,propertyParams:[{propertyName:"plannerCbmNAStatus",propertyValue:"Confirmed"},{propertyName:"updatedBy",propertyValue:JSON.stringify({id:r.user.EmployeeId,name:r.user.Name})},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}],employee:{id:r.user.EmployeeId,name:r.user.Name}};try{this.stateIsError=!1,await d.post(`${c}`,a),t.plannerCbmNAStatus="Confirmed"}catch(s){m(s),console.log(s),this.stateIsError=!0,u("IRONS",s)}},async updateCBMConfirmedStatus(e,r){var i,n,p;const t=l(),a=this.ApprovalData.CBMHeaders.find(o=>o.id===e),s={id:a.id,updateParams:[{keyValue:a.key,propertyParams:[{propertyName:"cbmNAStatus",propertyValue:"Confirmed"},{propertyName:"approveReason",propertyValue:r},{propertyName:"updatedBy",propertyValue:JSON.stringify({id:t.user.EmployeeId,name:t.user.Name})},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"},{propertyName:"appSPVBy",propertyValue:JSON.stringify({id:t.user.EmployeeId,name:t.user.Name})},{propertyName:"appSPVDate",propertyValue:"<<ServerDateTime>>"}]}],employee:{id:t.user.EmployeeId,name:t.user.Name},userGroup:this.stateCurrentUserGroup};try{this.stateIsError=!1,await d.post(`${c}`,s),a.cbmNAStatus="Confirmed"}catch(o){m(o),console.log(o),this.stateIsError=!0,this.stateErrorMessage=y(((p=(n=(i=o==null?void 0:o.response)==null?void 0:i.data)==null?void 0:n.result)==null?void 0:p.message)??`${o}`),u("IRONS",o)}},async updatePlannerCBMConfirmedStatus(e,r){var i,n,p;const t=l(),a=this.ApprovalData.CBMHeaders.find(o=>o.id===e),s={id:a.id,updateParams:[{keyValue:a.key,propertyParams:[{propertyName:"plannerCbmNAStatus",propertyValue:"Confirmed"},{propertyName:"plannerApproveReason",propertyValue:r},{propertyName:"updatedBy",propertyValue:JSON.stringify({id:t.user.EmployeeId,name:t.user.Name})},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"},{propertyName:"appPlannerBy",propertyValue:JSON.stringify({id:t.user.EmployeeId,name:t.user.Name})},{propertyName:"appPlannerDate",propertyValue:"<<ServerDateTime>>"}]}],employee:{id:t.user.EmployeeId,name:t.user.Name},userGroup:this.stateCurrentUserGroup};try{this.stateIsError=!1,await d.post(`${c}`,s),a.plannerCbmNAStatus="Confirmed"}catch(o){m(o),console.log(o),this.stateIsError=!0,this.stateErrorMessage=y(((p=(n=(i=o==null?void 0:o.response)==null?void 0:i.data)==null?void 0:n.result)==null?void 0:p.message)??`${o}`),u("IRONS",o)}},async updateDefectDeclineStatus(e,r){var i,n,p;const t=l(),a=this.ApprovalData.DefectNAHeaders.find(o=>o.id===e),s={id:a.id,updateParams:[{keyValue:a.key,propertyParams:[{propertyName:"cbmNAStatus",propertyValue:"Decline"},{propertyName:"declineReason",propertyValue:r},{propertyName:"updatedBy",propertyValue:JSON.stringify({id:t.user.EmployeeId,name:t.user.Name})},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"},{propertyName:"declineBy",propertyValue:JSON.stringify({id:t.user.EmployeeId,name:t.user.Name})},{propertyName:"declineDate",propertyValue:"<<ServerDateTime>>"}]}],employee:{id:t.user.EmployeeId,name:t.user.Name}};try{this.stateIsError=!1,await d.post(`${c}`,s),a.cbmNAStatus="Decline"}catch(o){m(o),console.log(o),this.stateIsError=!0,this.stateErrorMessage=y(((p=(n=(i=o==null?void 0:o.response)==null?void 0:i.data)==null?void 0:n.result)==null?void 0:p.message)??`${o}`),u("IRONS",o)}},async updatePlannerDefectDeclineStatus(e,r){var i,n,p;const t=l(),a=this.ApprovalData.DefectNAHeaders.find(o=>o.id===e),s={id:a.id,updateParams:[{keyValue:a.key,propertyParams:[{propertyName:"plannerCbmNAStatus",propertyValue:"Decline"},{propertyName:"declineReason",propertyValue:r},{propertyName:"updatedBy",propertyValue:JSON.stringify({id:t.user.EmployeeId,name:t.user.Name})},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"},{propertyName:"declineBy",propertyValue:JSON.stringify({id:t.user.EmployeeId,name:t.user.Name})},{propertyName:"declineDate",propertyValue:"<<ServerDateTime>>"}]}],employee:{id:t.user.EmployeeId,name:t.user.Name}};try{this.stateIsError=!1,await d.post(`${c}`,s),a.plannerCbmNAStatus="Decline"}catch(o){m(o),console.log(o),this.stateIsError=!0,this.stateErrorMessage=y(((p=(n=(i=o==null?void 0:o.response)==null?void 0:i.data)==null?void 0:n.result)==null?void 0:p.message)??`${o}`),u("IRONS",o)}},setCrackData(e){const r=h(),t=this.ApprovalData.CrackHeaders.find(s=>s.id===e),a=this.ApprovalData.CrackDetails.find(s=>s.defectHeaderId==e);if(a){this.setHeaderId(e),this.setDetailId(a.id),this.stateHeaderStatus=t==null?void 0:t.status,a.detail.type!="NO"?(this.stateCrackFormData.setAssetNumber(a.detail.assetNumber),this.stateCrackFormData.setDescription(a.detail.description),this.stateCrackFormData.setRaisedBy(a.detail.raisedBy),this.stateCrackFormData.setDate(a.detail.date),this.stateCrackFormData.setPlannedDuration(a.detail.plannedDuration),this.stateCrackFormData.setInstruction(a.detail.instruction),this.stateCrackFormData.setPriority(a.detail.priority),this.stateCrackFormData.setTitle((t==null?void 0:t.taskDesc)||""),this.stateCrackFormData.importParts(...JSON.parse(a.detail.parts)),this.stateCrackFormData.importLabours(...JSON.parse(a.detail.labours)),this.stateCrackFormData.importResources(...JSON.parse(a.detail.resources)),this.stateCrackFormData.importSymptoms(...JSON.parse(a.detail.symptoms)),this.stateCrackFormData.importCauses(...JSON.parse(a.detail.causes)),this.stateCrackFormData.importPreviousCrack(...JSON.parse(a.detail.previousCracks))):(this.stateCrackSimpleFormData.setAssetNumber(a.detail.assetNumber),this.stateCrackSimpleFormData.setDescription(a.detail.description),this.stateCrackSimpleFormData.setRaisedBy(a.detail.raisedBy),this.stateCrackSimpleFormData.setDate(a.detail.date),this.stateCrackSimpleFormData.setInstruction(a.detail.instruction),this.stateCrackSimpleFormData.setTitle((t==null?void 0:t.taskDesc)||""),this.stateCrackSimpleFormData.importPreviousCrack(...JSON.parse(a.detail.previousCracks))),this.ImagesCrack.ImageInfos.push(...JSON.parse(a.detail.images));const s=[];return this.ImagesCrack.ImageInfos.forEach(i=>{let n="";typeof i=="string"?n=i:n=i.filename,s.push(r.downloadAttachment(n))}),Promise.all(s).then(i=>{i.forEach(n=>{const p=new Blob([n],{type:"image/png"});this.ImagesCrack.ImageBlobs.push(p)})}),a.detail.type}},setCrackNewData(){const e=this.ApprovalData.CrackDetails.find(r=>r.id===this.stateDetailId);e&&(e.detail.description=this.CrackFormData.Description.value,e.detail.plannedDuration=this.CrackFormData.PlannedDuration.value,e.detail.instruction=this.CrackFormData.Instruction.value,e.detail.priority=this.CrackFormData.Priority,e.detail.parts=JSON.stringify(this.CrackFormData.Parts),e.detail.labours=JSON.stringify(this.CrackFormData.Labours),e.detail.resources=JSON.stringify(this.CrackFormData.Resources.map(r=>r.value)),e.detail.symptoms=JSON.stringify(this.CrackFormData.Symptoms.map(r=>r.value)),e.detail.causes=JSON.stringify(this.CrackFormData.Causes.map(r=>r.value)),e.detail.previousCracks=JSON.stringify(this.CrackFormData.CrackLength))},createCrackDetail(){var r;const e=((r=this.ImagesCrack)==null?void 0:r.ImageInfos)??[];return{type:"YES",assetNumber:this.CrackFormData.AssetNumber,description:this.CrackFormData.Description.value,title:this.CrackFormData.Title,raisedBy:this.CrackFormData.RaisedBy,date:this.CrackFormData.Date,plannedDuration:this.CrackFormData.PlannedDuration.value,instruction:this.CrackFormData.Instruction.value,priority:this.CrackFormData.Priority,parts:JSON.stringify(this.CrackFormData.Parts),labours:JSON.stringify(this.CrackFormData.Labours),resources:JSON.stringify(this.CrackFormData.Resources.map(t=>t.value)),symptoms:JSON.stringify(this.CrackFormData.Symptoms.map(t=>t.value)),causes:JSON.stringify(this.CrackFormData.Causes.map(t=>t.value)),images:JSON.stringify(e),previousCracks:JSON.stringify(this.CrackFormData.CrackLength)}},async updateCrackDetail(){const e=l(),r=this.ApprovalData.CrackDetails.find(s=>s.id===this.stateDetailId),t=this.createCrackDetail(),a={id:this.DetailId,updateParams:[{keyValue:r.key,propertyParams:[{propertyName:"detail",propertyValue:JSON.stringify(t)},{propertyName:"updatedBy",propertyValue:JSON.stringify({id:e.user.EmployeeId,name:e.user.Name})},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}],employee:{id:e.user.EmployeeId,name:e.user.Name}};try{this.stateIsError=!1,await d.post(`${D}`,a)}catch(s){m(s),console.log(s),this.stateIsError=!0,u("IRONS",s)}},async updateCrackOnly(e){const r=this.ApprovalData.CrackDetails.find(s=>s.id===this.stateDetailId),t=this.createCrackDetail(),a={id:this.DetailId,updateParams:[{keyValue:r.key,propertyParams:[{propertyName:"detail",propertyValue:JSON.stringify(t)},{propertyName:"updatedBy",propertyValue:e},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}],employee:JSON.parse(e)};try{this.stateIsError=!1,await d.post(`${D}`,a)}catch(s){m(s),console.log(s),this.stateIsError=!0,u("IRONS",s)}},async updateCrackAcknowledge(){const e=l(),r=this.ApprovalData.CrackHeaders.find(a=>a.id===this.stateHeaderId),t={id:r.id,updateParams:[{keyValue:r.key,propertyParams:[{propertyName:"status",propertyValue:"Acknowledge"},{propertyName:"updatedBy",propertyValue:JSON.stringify({id:e.user.EmployeeId,name:e.user.Name})},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}],employee:{id:e.user.EmployeeId,name:e.user.Name}};try{this.stateIsError=!1,await d.post(`${c}`,t),r.status="Acknowledge"}catch(a){m(a),console.log(a),this.stateIsError=!0,u("IRONS",a)}},async updatePlannerCrackAcknowledge(){const e=l(),r=this.ApprovalData.CrackHeaders.find(a=>a.id===this.stateHeaderId),t={id:r.id,updateParams:[{keyValue:r.key,propertyParams:[{propertyName:"plannerStatus",propertyValue:"Acknowledge"},{propertyName:"updatedBy",propertyValue:JSON.stringify({id:e.user.EmployeeId,name:e.user.Name})},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}],employee:{id:e.user.EmployeeId,name:e.user.Name}};try{this.stateIsError=!1,await d.post(`${c}`,t),r.plannerStatus="Acknowledge"}catch(a){m(a),console.log(a),this.stateIsError=!0,u("IRONS",a)}},async updateCrackMO(e,r){const t=l(),a=this.ApprovalData.CrackHeaders.find(i=>i.id===e),s={id:a.id,updateParams:[{keyValue:a.key,propertyParams:[{propertyName:"defectWorkorder",propertyValue:r},{propertyName:"updatedBy",propertyValue:JSON.stringify({id:t.user.EmployeeId,name:t.user.Name})},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}],employee:{id:t.user.EmployeeId,name:t.user.Name}};try{this.stateIsError=!1,await d.post(`${c}`,s),a.defectWorkorder=r}catch(i){m(i),console.log(i),this.stateIsError=!0,u("IRONS",i)}},async updateCrackRepairedStatus(e){const r=l(),t=this.ApprovalData.CrackHeaders.find(s=>s.id===e),a={id:t.id,updateParams:[{keyValue:t.key,propertyParams:[{propertyName:"repairedStatus",propertyValue:"Repaired"},{propertyName:"updatedBy",propertyValue:JSON.stringify({id:r.user.EmployeeId,name:r.user.Name})},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}],employee:{id:r.user.EmployeeId,name:r.user.Name}};try{this.stateIsError=!1,await d.post(`${c}`,a),t.repairedStatus="Repaired"}catch(s){m(s),console.log(s),this.stateIsError=!0,u("IRONS",s)}},reset(){this.stateLoading=!1,this.stateData=new S,this.stateDefectFormData=new I,this.stateCrackFormData=new g,this.stateIsError=!1,this.stateHeaderId="",this.stateDetailId="",this.stateDefectFetched=!1,this.stateHeaderStatus="",this.stateLoadDefectImages=!1,this.stateDefectKey=1},updateHeaderDefect(e){const r=this.ApprovalData.DefectHeaders.find(t=>t.id===e);this.stateHeaderStatus=f.isUndefined(r.plannerStatus)?"":r.plannerStatus},updateHeaderDefectSMU(e){const r=this.ApprovalData.SMUDefectHeaders.find(t=>t.id===e);this.stateHeaderStatus=f.isUndefined(r.plannerStatus)?"":r.plannerStatus},updateHeaderCrack(e){const r=this.ApprovalData.CrackHeaders.find(t=>t.id===e);this.stateHeaderStatus=f.isUndefined(r.plannerStatus)?"":r.plannerStatus},resetErrorStatus(){this.stateIsError=!1,this.stateErrorMessage=""}}});export{h as a,W as u};
