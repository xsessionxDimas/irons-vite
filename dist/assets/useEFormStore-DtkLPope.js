import{a as G,c as y,s as g,f as d}from"./index-BuVmIl8K.js";import{d as Q}from"./pinia-BjOS2_Ao.js";import{e as m}from"./lodash-DrHMlsdo.js";import{s as D,u as oe,T as Z,c as H,C as I,J as b,a as he,I as te,b as fe,B as Le,S as ge}from"./prev-val-handler-DvA3D_kF.js";import{C as ie,a as Se}from"./list-pcxkCnQg.js";import{A as _,i as P,o as Oe,g as Be,p as Me}from"./date-format-8-IvfSl3.js";import{C as $e}from"./urls-B0Rq9QQ3.js";import{a as Fe}from"./element-plus-BeWdvTRa.js";import{u as N}from"./authentication-handler-Pueb_EI7.js";import{u as de}from"./useGlobalConnectionStore-DV9B81de.js";import{G as He,c as Ae,d as Ke,P as je,e as xe,f as Je,L as We,g as qe,i as Ye}from"./urls-CPQ2HRXU.js";import{u as ee}from"./@vueuse-DFoNmIyu.js";import{b as Ze,c as ze,d as Re,e as Xe,f as Qe,a as et,g as tt,D as rt,h as X,P as at,i as st,j as ot,C as it}from"./urls-CvqtYZA-.js";import{u as ce}from"./useOfflineCameraStore-BBsMm6DV.js";import{t as nt,m as lt,u as pt,w as ct}from"./helpers-wUOLw-dU.js";import{S as A}from"./number-format-BdMuQVyW.js";import{i as S}from"./internet-connection-CnLQPjRt.js";import{M as j}from"./MachineSMUEnum-CgiCo9nf.js";import{a as dt,d as ut}from"./methods-bliey5hF.js";import{v as U}from"./uuid-SoommWqA.js";import{I as mt}from"./IronformConfig-BWypCgSI.js";import{C as yt}from"./urls-hWHEBXep.js";import{C as ht}from"./urls-D8F5Tyyp.js";import{s as ke}from"./string-to-imageinfo-converter-Cdr1iOkP.js";import{i as ne}from"./disabled-state-O9W-ZY8y.js";const Te={MECHANICAL_SERVICE:"MECHANICAL_SERVICE",PRE_SERVICE_OPERATIONAL_CHECK:"PRE_SERVICE_OPERATIONAL_CHECK"},ve={MECHANICAL_SERVICE:"MECHANICAL_SERVICE",PRE_SERVICE_OPERATIONAL_CHECK:"PRE_SERVICE_OPERATIONAL_CHECK"},ue="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/service_sheet_header",me="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/service_sheet_detail",Ge="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/service_sheet_header_offline",ft="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/service_sheet_detail_offline",Ie=`${ue}/service_sheet`,B=`${ft}/update_task`,Pe=`${me}/get_task_progress`,gt=`${me}/get_data_by_param`,St="https://digital-bumaau-dev-apm-001.azure-api.net/amadm/api/master_data/parameter_ehms/rating",$=`${Ge}/update`,kt=`${Ge}/update`,Tt=`${ue}/update_task`,vt=`${me}/get_field_value`,le=`${ue}/get_field_value`,It="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/master_setting/get_server_time",De="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/master_setting/get_data_by_param",ye="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/defect_header",we=`${ye}/get_data_by_param`,Ne=`${ye}/update`,x=`${ye}/update_with_service_detail_id`,Pt="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/calibration_header",Dt=`${Pt}/calibration_payload`,wt="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/calibration_detail/update_task",Nt="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/calibration_header/update",Ce="https://digital-bumaau-dev-apm-001.azure-api.net/ironlake-asset/api/ironlake/equipment/get_hm_offset",J=(e,t)=>{let r;switch(e.operatorMin){case"=":r=Number(t)==e.minValue;break;case"<":r=Number(t)<e.minValue;break;case">":r=Number(t)>e.minValue;break;case"<>":r=Number(t)>=e.minValue;break;case">=":r=Number(t)>=e.minValue;break;case"<=":r=Number(t)<=e.minValue;break}return r},W=(e,t)=>{let r;switch(e.operatorMax){case"=":r=Number(t)==e.maxValue;break;case"<":r=Number(t)<e.maxValue;break;case">":r=Number(t)>e.maxValue;break;case"<>":r=Number(t)<=e.maxValue;break;case">=":r=Number(t)>=e.maxValue;break;case"<=":r=Number(t)<=e.maxValue;break}return r},q=(e,t,r)=>{let a="";const s=r.operatorMin,o=r.operatorMax,n=s=="<>",i=s==">"&&o=="<=",p=s==">="&&o=="<",c=s==">"&&o=="<";return n||i||p||c?e&&t&&(a=r.cbmRating):(e||t)&&(a=r.cbmRating),a},Ee="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/service_sheet_detail/update_task_with_defect",mr="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect//api/defect_detail/get_data_by_param/",z=Q({id:"offlineGeneralForm",state:()=>({statePayload:{},stateUpdateParams:{},statePropertyParams:{},stateImageInfos:[],stateImageBlobs:[],statePreRiskImageInfos:[],statePreRiskImageBlobs:[],stateGeneralUpdated:!1,stateGeneralForm:{},initPreriskImages:[],stateSMUActual:0,stateSMUTolerance:{},stateSMUToleranceNotMapped:!1,stateIsSmuCameraDisabled:!1,stateIsSwingHourCameraDisabled:!1,stateIsTravelHourCameraDisabled:!1,stateIsRiskAssesmentPhotoTaken:!1,stateSelectedFitterShift:{},stateTimeStamp:"",stateShiftList:[],stateTimeZone:"+10.00",stateTimeZoneDesc:"AEST",stateIsSelectedFitterAlreadyLoggedIn:!1,stateFitterInfo:{},stateIsFitterLoggedInExist:!1,stateIsTruckAlreadyCheckedByOtherFitter:!1,stateCurrentPersoneel:{},stateHmOffset:0,stateSkipWash:"false",stateReasonUpdated:!1}),getters:{payload:e=>e.statePayload,generalUpdated:e=>e.stateGeneralUpdated,smuActual:e=>e.stateSMUActual,generalForm:e=>e.stateGeneralForm,smuTolerance:e=>e.stateSMUTolerance,SMUToleranceNotMapped:e=>e.stateSMUToleranceNotMapped,IsRiskAssesmentPhotoTaken:e=>e.stateIsRiskAssesmentPhotoTaken,IsSelectedFitterAlreadyLoggedIn:e=>e.stateIsSelectedFitterAlreadyLoggedIn,FitterInfo:e=>e.stateFitterInfo,IsFitterLoggedInExist:e=>e.stateIsFitterLoggedInExist,CurrentPersoneel:e=>e.stateCurrentPersoneel,eformStore:()=>C(),onlineStatus:()=>ee(),HmOffset:e=>e.stateHmOffset,SkipWash:e=>e.stateSkipWash,AllWashChecked:e=>e.stateGeneralForm&&e.stateGeneralForm.checkBeforeTruck&&e.stateGeneralForm.checkBeforeTruck.items.every(t=>t.category=="skipOtherWash"?!0:t.value=="true"),ReasonUpdated:e=>e.stateReasonUpdated,globalConnectionStore:()=>de()},actions:{setSkipWash(e){this.stateSkipWash=e},setReasonUpdated(e){this.stateReasonUpdated=e},setCurrentPersoneel(e){this.stateCurrentPersoneel=e},setIsFitterLoggedInExist(e){this.stateIsFitterLoggedInExist=e},setFitterInfo(e){this.stateFitterInfo=m.cloneDeep(e)},setFitterInfoFitter(e,t,r){this.stateFitterInfo.id=U(),this.stateFitterInfo.employee={id:e.value,name:e.label},this.stateFitterInfo.timeLoggedIn=t,this.stateFitterInfo.shift=r},setFitterInfoIsIHaveReadChecked(e){this.stateFitterInfo.isIHaveReadChecked=e},setFitterInfoRiskPhotos(e){m.isUndefined(this.stateFitterInfo.riskPhotos)&&(this.stateFitterInfo.riskPhotos=[]),this.stateFitterInfo.riskPhotos=[...ke(this.stateFitterInfo.riskPhotos),e],this.setGeneralFitterInfoToIndexedDB()},deleteFitterInfoRiskPhotos(e){this.stateFitterInfo.riskPhotos=ke(this.stateFitterInfo.riskPhotos),this.stateFitterInfo.riskPhotos=this.stateFitterInfo.riskPhotos.filter(t=>e!=t.filename),this.setGeneralFitterInfoToIndexedDB()},async setGeneralFitterInfoToIndexedDB(){const e=m.cloneDeep(this.generalForm.log);e.push(this.stateFitterInfo);const t=G(),r={id:this.generalForm.id,updateParams:[{keyValue:"GENERAL",propertyParams:[{propertyName:"log",propertyValue:JSON.stringify(this.stateFitterInfo)}]}],employee:{id:t.user.EmployeeId,name:t.user.Name},localStatus:this.stateGeneralForm.status},a={ver:"v1"};if(S())await d.pendingTask.add({module:"serviceForm",section:"E-Form",type:"General",workorder:this.stateGeneralForm.workOrder,key:this.stateGeneralForm.key,bindingKey:this.stateGeneralForm.key,payload:JSON.stringify(r),syncDate:_(),syncStatus:"Pending"});else try{await y.post(`${$}?${new URLSearchParams(a).toString()}`,r)}catch(s){D("fe_event_error_post_fitter_log_data",{errorMessage:s}),g("IRONS",s),console.log("update log",s)}this.generalForm.log=e,await d.serviceSheetDetail.put(m.cloneDeep({id:this.generalForm.workOrder,general:this.stateGeneralForm,serviceSheet:this.eformStore.stateServiceSheets}))},async deleteGeneralFitterInfoFromIndexedDB(){try{this.stateIsFitterLoggedInExist=!1,this.stateFitterInfo={}}catch(e){console.log("error at indexeddb",e)}},setIsSelectedFitterAlreadyLoggedIn(e){this.stateIsSelectedFitterAlreadyLoggedIn=e},setPayloadId(e,t,r){this.statePayload.id=e,this.statePayload.updateParams=[],this.statePayload.employee={},this.statePayload.employee.id=t,this.statePayload.employee.name=r,this.statePayload.localStatus=this.stateGeneralForm.status},addPropertyParam(e,t,r){const a=this.statePayload.updateParams.find(o=>o.keyValue===e);if(a)this.stateUpdateParams=a;else{const o={keyValue:e,propertyParams:[]};this.statePayload.updateParams.push(o),this.stateUpdateParams=o}const s=this.stateUpdateParams.propertyParams.find(o=>o.propertyName===t);if(s){s.propertyValue=r;return}this.stateUpdateParams.propertyParams.push({propertyName:t,propertyValue:r})},addUpdatedByAndDate(e,t){const r={id:e,name:t};this.addPropertyParam("GENERAL","updatedBy",JSON.stringify(r)),this.addPropertyParam("GENERAL","updatedDate","<<ServerDateTime>>"),this.addPropertyParam("GENERAL","status","On Progress"),this.generalForm.serviceStart==""&&this.generalForm.tsServiceStart==""&&(this.addPropertyParam("GENERAL","serviceStart","<<ServerDateTime>>"),this.addPropertyParam("GENERAL","tsServiceStart","<<ServerTimeStamp>>"))},async updateGeneralForm(){const e={ver:"v1"};this.statePayload.id=this.generalForm.id;const t=C(),r=t.groups;let a=!0;if(r.forEach(s=>{s.doneTask<s.totalTask&&(a=!1)}),t.generalForm.riskAssesment[0].value.length>0&&this.addPropertyParam(this.generalForm.riskAssesment[0].key,"value",JSON.stringify(t.generalForm.riskAssesment[0].value)),this.generalForm.imageEquipment.length>0&&this.addPropertyParam("GENERAL","imageEquipment",JSON.stringify(this.generalForm.imageEquipment)),this.generalForm.travelHourImages&&this.generalForm.travelHourImages.length>0&&this.addPropertyParam("GENERAL","travelHourImages",JSON.stringify(this.generalForm.travelHourImages)),this.generalForm.swingHourImages&&this.generalForm.swingHourImages.length>0&&this.addPropertyParam("GENERAL","swingHourImages",JSON.stringify(this.generalForm.swingHourImages)),a){let s=this.stateGeneralForm.status;if(S()||(s=await this.getServiceSheetHeaderKeyValue("status")),s.toString().toLowerCase()=="open"||s.toString().toLowerCase()=="on progress")try{let o;return S()?(this.stateGeneralForm.status="On Progress",this.stateGeneralForm.serviceStart=P(),o=await this.updateGeneralFormToLocalDB(this.statePayload)):(o=await y.post(`${$}?${new URLSearchParams(e).toString()}`,this.statePayload),this.stateGeneralForm.status="On Progress",o.data.result.content.updateParams.forEach(n=>{n.keyValue=="GENERAL"&&n.propertyParams.forEach(i=>{i.propertyName=="serviceStart"&&(this.stateGeneralForm.serviceStart=i.propertyValue)})})),this.stateGeneralUpdated=!0,this.stateIsFitterLoggedInExist||this.setGeneralFitterInfoToIndexedDB(),!1}catch(o){D("fe_event_error_post_data_enter_service_form",{errorMessage:o}),N(o),g("IRONS",o),console.log(o)}else return!0}else try{let s;return S()?(this.stateGeneralForm.status="On Progress",this.stateGeneralForm.serviceStart=P(),s=await this.updateGeneralFormToLocalDB(this.statePayload)):(s=await y.post(`${$}?${new URLSearchParams(e).toString()}`,this.statePayload),this.stateGeneralForm.status="On Progress",s.data.result.content.updateParams.forEach(o=>{o.keyValue=="GENERAL"&&o.propertyParams.forEach(n=>{n.propertyName=="serviceStart"&&(this.stateGeneralForm.serviceStart=n.propertyValue)})})),this.stateGeneralUpdated=!0,this.stateIsFitterLoggedInExist||this.setGeneralFitterInfoToIndexedDB(),!1}catch(s){D("fe_event_error_post_data_enter_service_form",{errorMessage:s}),N(s),g("IRONS",s),console.log(s)}},async updateGeneralFormToLocalDB(e){await d.pendingTask.add({module:"serviceForm",section:"E-Form",type:"General",workorder:this.stateGeneralForm.workOrder,key:this.stateGeneralForm.key,bindingKey:this.stateGeneralForm.key,payload:JSON.stringify(e),syncDate:_(),syncStatus:"Pending"}),await d.serviceSheetDetail.put(m.cloneDeep({id:this.generalForm.workOrder,general:this.stateGeneralForm,serviceSheet:this.eformStore.stateServiceSheets}))},pushNewImageInfos(e){this.stateImageInfos.push(e)},pushNewImageBlob(e){this.stateImageBlobs.push(e)},pushNewPreRiskImageInfos(e){this.statePreRiskImageInfos.push(e)},pushNewPreRiskImageBlob(e){this.statePreRiskImageBlobs.push(e)},resetGeneral(){this.stateGeneralUpdated=!1},toggleIsSmuCameraDisabled(e){this.stateIsSmuCameraDisabled=e},setGeneralForm(e){if(this.stateReasonUpdated=!1,this.stateIsRiskAssesmentPhotoTaken=!1,this.statePreRiskImageInfos=[],this.stateIsSmuCameraDisabled=!1,this.stateIsSwingHourCameraDisabled=!1,this.stateIsTravelHourCameraDisabled=!1,this.stateGeneralForm=e,m.isUndefined(e)||m.isUndefined(e.riskAssesment)||m.isUndefined(e.riskAssesment[0].value)||(this.initPreriskImages=m.cloneDeep(e.riskAssesment[0].value)),!this.generalForm.id)return;const t=[this.generalForm.status,this.generalForm.imageEquipment],r=[this.generalForm.status,this.generalForm.swingHourImages],a=[this.generalForm.status,this.generalForm.travelHourImages];this.stateIsSmuCameraDisabled=ne(...t),this.stateIsSwingHourCameraDisabled=ne(...r),this.stateIsTravelHourCameraDisabled=ne(...a)},async getServiceSheetHeaderKeyVal(e,t){const r={id:this.stateGeneralForm.id,keyValue:"GENERAL",propertyName:e},a={ver:"v1"},s=Fe.service({lock:!0,text:`Check ${t} Value`,background:"rgba(0, 0, 0, 0.7)"});try{const o=await y.post(`${le}?${new URLSearchParams(a).toString()}`,r);return s.close(),o.data.result.content!=""?o.data.result.content:""}catch(o){return D(`fe_event_error_get_${t}_data`,{errorMessage:o}),N(o),console.log(o),s.close(),g("IRONS",o),""}},async getServiceSheetHeaderImages(e){const t={id:this.stateGeneralForm.id,keyValue:"GENERAL",propertyName:e},r={ver:"v1"};try{const a=await y.post(`${le}?${new URLSearchParams(r).toString()}`,t);return a.data.result.content!=""?a.data.result.content:""}catch(a){return g("IRONS",a),console.log(a),""}},async getServiceSheetHeaderKeyValue(e){const t={id:this.stateGeneralForm.id,keyValue:"GENERAL",propertyName:e},r={ver:"v1"};try{return(await y.post(`${le}?${new URLSearchParams(r).toString()}`,t)).data.result.content}catch(a){return D("fe_event_error_get_service_header_value",{errorMessage:a}),N(a),g("IRONS",a),console.log(a),"error"}},async UpdateServiceEndMechanic(e){const t={ver:"v1"},r=this.statePayload.updateParams[0].propertyParams.filter(s=>s.propertyName=="updatedDate"),a={id:this.payload.id,updateParams:[{keyValue:"GENERAL",propertyParams:[e,{propertyName:"updatedBy",propertyValue:JSON.stringify(this.CurrentPersoneel.mechanic)},...r]}],employee:this.payload.employee,localStatus:this.stateGeneralForm.status};try{S()?(await d.pendingTask.add({module:"serviceForm",section:"E-Form",type:"General",workorder:this.stateGeneralForm.workOrder,key:this.stateGeneralForm.key,bindingKey:this.stateGeneralForm.key,payload:JSON.stringify(a),syncDate:_(),syncStatus:"Pending"}),await d.serviceSheetDetail.put(m.cloneDeep({id:this.generalForm.workOrder,general:this.stateGeneralForm,serviceSheet:this.eformStore.stateServiceSheets}))):await y.post(`${$}?${new URLSearchParams(t).toString()}`,a),this.stateGeneralUpdated=!0}catch(s){D("fe_event_error_update_service_end_fitter",{errorMessage:s}),N(s),g("IRONS",s),console.log(s)}},setSMUActual(e){this.stateSMUActual=e},async getSMUTolerance(){this.stateSMUToleranceNotMapped=!1;const e={Parameter:"",ParameterTo:"",ValueMin:"",ValueMinTo:"",ValueMax:"",ValueMaxTo:"",Uom:"",UomTo:"",StartDate:"",StartDateTo:"",EndDate:"",EndDateTo:"",Page:"1",PageSize:"1",Order:"",ver:"v1"},t=async()=>{this.stateSMUTolerance={min:0,max:0},this.stateSMUToleranceNotMapped=!0;const r=m.clone(this.stateSMUTolerance);await d.smuTolerance.add(r),console.log("SMU tolerance not mapped on ADM")};try{const a=(await y.get(yt,"",new URLSearchParams(e).toString())).data.result.content[0];if(m.isUndefined(a))t();else if(a.isActive){this.stateSMUTolerance={min:Number(a.valueMin),max:Number(a.valueMax)};const s=m.clone(this.stateSMUTolerance);await d.smuTolerance.clear(),await d.smuTolerance.add(s)}else t()}catch(r){this.globalConnectionStore.checkIsErrorNoNetwork(r)?await this.getSMUToleranceFromLocalDB():(D("fe_event_error_get_smu_tolerance_data",{errorMessage:r}),g("IRONS",r),console.log("error get smu",r),N(r),t())}},async getSMUToleranceFromLocalDB(){const e=await d.smuTolerance.limit(1).first();e&&(this.stateSMUTolerance=e)},async getServerTimestamp(){const e={ver:"v1"};try{const t=await y.get(It,"",new URLSearchParams(e).toString());return this.stateTimeStamp=t.data.result.content,t.data.result.content}catch(t){return D("fe_event_error_get_time_stamp_data",{errorMessage:t}),N(t),g("IRONS",t),console.log(t),console.log("error get server time",t),""}},setTimeStamp(){this.stateTimeStamp=P()},async getShift(e){const t=this.stateShiftList.find(r=>r.shift==e);return this.stateSelectedFitterShift=t,t},updateSMUImages(e){this.stateGeneralForm.imageEquipment=e},updateSwingImages(e){let t=[];this.generalForm.swingHourImages&&this.generalForm.swingHourImages!=""&&(t=this.generalForm.swingHourImages),t=[...t,...e],this.stateGeneralForm.swingHourImages=t},updateTravelImages(e){let t=[];this.generalForm.travelHourImages&&this.generalForm.travelHourImages!=""&&(t=this.generalForm.travelHourImages),t=[...t,...e],this.stateGeneralForm.travelHourImages=t},deleteSMUPic(e){let t=this.generalForm.imageEquipment;t=t.filter(r=>r.filename!=e.filename),this.generalForm.imageEquipment=t},deleteSwingPic(e){let t=this.generalForm.swingHourImages;t=t.filter(r=>r.filename!=e.filename),this.generalForm.swingHourImages=t},deleteTravelPic(e){let t=this.generalForm.travelHourImages;t=t.filter(r=>r.filename!=e.filename),this.generalForm.travelHourImages=t},toggleChangeIsRiskAssesmentPhotoTaken(e){this.stateIsRiskAssesmentPhotoTaken=e},async updateServiceSheetHeaderToTrue(){const e=G(),t={id:this.generalForm.id,updateParams:[{keyValue:"GENERAL",propertyParams:[{propertyName:"isDeleted",propertyValue:"false"}]}],employee:{id:e.user.EmployeeId,name:e.user.Name},localStatus:this.stateGeneralForm.status},r={ver:"v1"};try{await y.post(`${$}?${new URLSearchParams(r).toString()}`,t)}catch(a){D("fe_event_error_update_service_sheet_is_deleted",{errorMessage:a}),g("IRONS",a),console.log("upload risk Assesment",a)}},updateSMUONGeneral(e){const{value:t,smuBy:r,smuDate:a}=e;this.generalForm.smu=t,this.generalForm.smuBy=r,this.generalForm.smuDate=a;const s=C();s.stateGeneralForm.smu=t,s.stateGeneralForm.smuBy=r,s.stateGeneralForm.smuDate=a},updateSwingHourONGeneral(e){this.generalForm.swingHour=e},updateTravelHourONGeneral(e){this.generalForm.travelHour=e},async getShiftListData(){const e={Shift:"",StartHour:"",StartHourType:"",EndHour:"",EndHourType:"",StartDate:"",EndDate:"",ver:"v1",Page:"1",PageSize:"999",Order:""};try{const t={key:"TimeZone"},r=await y.post(`${De}?${new URLSearchParams(e).toString()}`,t);this.stateTimeZone=`${r.data.result.content.value}`,await d.timeZone.clear(),await d.timeZone.add({timeZone:m.clone(r.data.result.content.value)});const a={key:"TimeZoneDesc"},s=await y.post(`${De}?${new URLSearchParams(e).toString()}`,a);this.stateTimeZoneDesc=`${s.data.result.content.value}`,await d.timeZoneDesc.clear(),await d.timeZoneDesc.add({timeZoneDesc:m.clone(s.data.result.content.value)});const o=await y.get(ht,"",new URLSearchParams(e).toString());this.stateShiftList=o.data.result.content,this.stateShiftList.forEach(async n=>{await d.shift.where("shift").equals(n.shift).first()||await d.shift.add(m.clone(n))})}catch(t){D("fe_event_error_get_fitter_time_zone_data",{errorMessage:t}),N(t),g("IRONS",t),console.log(t)}},async getShiftFromLocalDB(){const e=await d.timeZone.limit(1).first();this.stateTimeZone=e.timeZone;const t=await d.timeZoneDesc.limit(1).first();this.stateTimeZoneDesc=t.timeZoneDesc,this.stateShiftList=await d.shift.toArray()},async postCheckBeforeTruckItem(e,t,r){const a=C(),s=a.employee;let o=JSON.stringify(s);r&&(o=""),e.propertyParams.push({propertyName:"updatedBy",propertyValue:o});const n={ver:"v1"},i={id:this.generalForm.id,updateParams:[e],employee:s};try{const p=this.generalForm.checkBeforeTruck.items.find(l=>l.key==t),c=await y.post(`${Tt}?${new URLSearchParams(n).toString()}`,i);if(c.data.result.message==A.TASK_UPDATED_BY_OTHER&&this.toggleIsTruckAlreadyCheckedByOtherFitter(!0),c.data.result.isError)return!0;c.data.result.content.updateParams[0].propertyParams.forEach(l=>{l.propertyName=="updatedDate"&&(p.updatedDate=l.propertyValue),l.propertyName=="updatedBy"&&(p.updatedBy=JSON.parse(l.propertyValue))}),this.updateAllCheckBoxValue(c.data.result.content.checkBeforeTruck),a.setCheckTruckItems(this.generalForm.checkBeforeTruck.items)}catch(p){D("fe_event_error_post_check_before_truck",{errorMessage:p}),N(p),g("IRONS",p)}},async updateCheckBeforeTruckToLocalDB(e,t,r="",a){const s=C(),o=s.employee;let n=JSON.stringify(o);a&&(n=""),e.propertyParams.push({propertyName:"updatedBy",propertyValue:n});const i={id:this.generalForm.id,updateParams:[e],employee:this.eformStore.employee};await d.pendingTask.add({module:"serviceForm",section:"E-Form",type:"General",workorder:this.stateGeneralForm.workOrder,key:t,bindingKey:"GENERAL",payload:JSON.stringify(i),syncDate:_(),syncStatus:"Pending"});const p=this.generalForm.checkBeforeTruck.items.find(c=>c.key==t);p.value="true",p.updatedDate=P(),m.isUndefined(p==null?void 0:p.reason)||(p.reason=r),p.updatedBy=this.eformStore.employee,await d.serviceSheetDetail.put(m.cloneDeep({id:this.generalForm.workOrder,general:this.stateGeneralForm,serviceSheet:this.eformStore.stateServiceSheets})),s.setCheckTruckItems(this.generalForm.checkBeforeTruck.items)},updateAllCheckBoxValue(e){e.forEach(t=>{this.generalForm.checkBeforeTruck.items.forEach(r=>{t.keyValue==r.key&&t.propertyParams.forEach(a=>{a.propertyName=="updatedDate"&&a.propertyValue&&(r.updatedDate=a.propertyValue),a.propertyName=="updatedBy"&&a.propertyValue!="null"&&(r.updatedBy=JSON.parse(a.propertyValue)),a.propertyName=="value"&&(r.value=a.propertyValue)})})})},toggleIsTruckAlreadyCheckedByOtherFitter(e){this.stateIsTruckAlreadyCheckedByOtherFitter=e},updateGeneralUpdated(e){this.stateGeneralUpdated=e},async updateSwingTravelValueToBE(e,t){const r=G(),a={id:this.generalForm.id,updateParams:[{keyValue:"GENERAL",propertyParams:[{propertyName:e,propertyValue:t}]}],employee:{id:r.user.EmployeeId,name:r.user.Name},localStatus:this.stateGeneralForm.status},s={ver:"v1"};try{await y.post(`${$}?${new URLSearchParams(s).toString()}`,a)}catch(o){throw D("fe_event_error_post_swing_travel_data",{errorMessage:o}),g("IRONS",o),console.log("update swing/travel hour value",o),o}},async updateSMUValueToBE(e){const{smu:t,hmOffset:r,smuDate:a,smuBy:s}=e;let o={id:this.generalForm.id,localStatus:this.stateGeneralForm.status};e.generalData&&(o=e.generalData);const n=G(),i={id:o.id,updateParams:[{keyValue:"GENERAL",propertyParams:[{propertyName:"smu",propertyValue:t},{propertyName:"smuBy",propertyValue:t!==""?JSON.stringify(s):""},{propertyName:"smuDate",propertyValue:t!==""?a:""}]}],employee:{id:n.user.EmployeeId,name:n.user.Name},localStatus:o.localStatus};r!=""&&i.updateParams[0].propertyParams.push({propertyName:"hmOffset",propertyValue:r});const p={ver:"v1"};try{await y.post(`${$}?${new URLSearchParams(p).toString()}`,i)}catch(c){throw D("fe_event_error_post_smu_value",{errorMessage:c}),g("IRONS",c),c}},async updateSMUImageToBE(e={id:"",employee:{},localStatus:"",imageEquipment:""}){const t=G();let r={id:this.generalForm.id,employee:{id:t.user.EmployeeId,name:t.user.Name},localStatus:this.generalForm.status,imageEquipment:this.generalForm.imageEquipment};e.id!=""&&(r=e);const a={id:r.id,updateParams:[{keyValue:"GENERAL",propertyParams:[{propertyName:"imageEquipment",propertyValue:JSON.stringify(r.imageEquipment)}]}],employee:r.employee,localStatus:r.localStatus},s={ver:"v1"};try{return await y.post(`${$}?${new URLSearchParams(s).toString()}`,a)}catch(o){throw D("fe_event_error_post_smu_data",{errorMessage:o}),g("IRONS",o),console.log("update smu image value",o),o}},async updateTravelSwingImageToBE(e,t){const r=G(),a={id:this.generalForm.id,updateParams:[{keyValue:"GENERAL",propertyParams:[{propertyName:e,propertyValue:JSON.stringify(t)}]}],employee:{id:r.user.EmployeeId,name:r.user.Name},localStatus:this.generalForm.status},s={ver:"v1"};try{await y.post(`${$}?${new URLSearchParams(s).toString()}`,a)}catch(o){throw g("IRONS",o),console.log(`update ${e} image value`,o),o}},async updateTravelSwingImageToLocal(e,t){const r={employee:this.eformStore.stateEmployee,id:this.generalForm.id,updateParams:[{keyValue:"GENERAL",propertyParams:[{propertyName:e,propertyValue:JSON.stringify(t)}]}]};await d.pendingTask.add({module:"serviceForm",section:"E-Form",type:"General",workorder:this.stateGeneralForm.workOrder,key:this.stateGeneralForm.key,bindingKey:this.stateGeneralForm.key,payload:JSON.stringify(r),syncDate:_(),syncStatus:"Pending"}),await d.serviceSheetDetail.put(m.cloneDeep({id:this.generalForm.workOrder,general:this.stateGeneralForm,serviceSheet:this.eformStore.stateServiceSheets}))},async getHmOffsetValue(e){this.stateHmOffset=0;const t=C();if(t.generalForm.smu)m.isUndefined(t.generalForm.hmOffset)||m.isNull(t.generalForm.hmOffset)?this.stateHmOffset="Not Applicable":this.stateHmOffset=t.generalForm.hmOffset;else{const r={ver:"v1",equipmentNo:t.unitNumber,siteId:e,asIsDate:Oe()};try{const a=await y.get(`${Ce}`,"",new URLSearchParams(r).toString());a.data.result.content.totalData==0?this.stateHmOffset=0:a.data.result.content.totalData>0&&(this.stateHmOffset=a.data.result.content.hmOffsetList[0].hmOffset)}catch(a){D("fe_event_error_get_hm_offset",{errorMessage:a}),g("IRONS",a),console.log("error get hm offset",a)}}},async getHmOffsetValueFromLocalDB(){this.stateHmOffset=0;const e=C();if(e.generalForm.smu)m.isUndefined(e.generalForm.hmOffset)||m.isNull(e.generalForm.hmOffset)?this.stateHmOffset="Not Applicable":this.stateHmOffset=e.generalForm.hmOffset;else try{const t=await d.hmOffset.where({equipmentNo:e.unitNumber}).toArray();t.length==0?this.stateHmOffset=0:t.length>0&&(this.stateHmOffset=t[0].hmOffset)}catch(t){console.log("error get hm offset",t)}},async updateSMUValueToLocal(e){const{smu:t,hmOffset:r,smuDate:a,smuBy:s}=e,o={employee:this.eformStore.stateEmployee,id:this.generalForm.id,updateParams:[{keyValue:"GENERAL",propertyParams:[{propertyName:"smu",propertyValue:t},{propertyName:"smuBy",propertyValue:t!==""?JSON.stringify(s):""},{propertyName:"smuDate",propertyValue:t!==""?a:""}]}]};r!=""&&(this.stateGeneralForm.hmOffset=r,o.updateParams[0].propertyParams.push({propertyName:"hmOffset",propertyValue:r}));const n=d.pendingTask.where({module:"serviceForm",workorder:this.eformStore.stateGeneralForm.workOrder,syncStatus:"Pending",itemKey:`${this.eformStore.stateGeneralForm.workOrder}-SMU`});n&&await n.delete(),await d.pendingTask.add({module:"serviceForm",section:"E-Form",type:"General",workorder:this.stateGeneralForm.workOrder,key:this.stateGeneralForm.key,bindingKey:this.stateGeneralForm.key,payload:JSON.stringify(o),syncDate:_(),itemKey:`${this.eformStore.stateGeneralForm.workOrder}-SMU`,syncStatus:"Pending"}),await d.serviceSheetDetail.put(m.cloneDeep({id:this.generalForm.workOrder,general:this.stateGeneralForm,serviceSheet:this.eformStore.stateServiceSheets}))},async updateSMUImageToLocal(e,t=""){const r={employee:this.eformStore.stateEmployee,id:this.generalForm.id,updateParams:[{keyValue:"GENERAL",propertyParams:[{propertyName:"imageEquipment",propertyValue:JSON.stringify(this.generalForm.imageEquipment)}]}]};await d.pendingTask.add({module:"serviceForm",section:"E-Form",type:"General",workorder:this.stateGeneralForm.workOrder,key:this.stateGeneralForm.key,bindingKey:this.stateGeneralForm.key,payload:JSON.stringify(r),syncDate:_(),syncStatus:"Pending"}),await d.serviceSheetDetail.put(m.cloneDeep({id:this.generalForm.workOrder,general:this.stateGeneralForm,serviceSheet:this.eformStore.stateServiceSheets}))},async updateSwingValueToLocal(e,t){const r={employee:this.eformStore.stateEmployee,id:this.generalForm.id,updateParams:[{keyValue:"GENERAL",propertyParams:[{propertyName:t,propertyValue:e}]}]};await d.pendingTask.add({module:"serviceForm",section:"E-Form",type:"General",workorder:this.stateGeneralForm.workOrder,key:this.stateGeneralForm.key,bindingKey:this.stateGeneralForm.key,payload:JSON.stringify(r),syncDate:_(),syncStatus:"Pending"}),await d.serviceSheetDetail.put(m.cloneDeep({id:this.generalForm.workOrder,general:this.stateGeneralForm,serviceSheet:this.eformStore.stateServiceSheets}))}}}),Et="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/service_sheet_detail",Ve="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/service_sheet_detail/update_task_with_defect",Vt="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/defect_detail/get_data_by_param/",yr="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/defect_header/get_data_list_by_param?ver=v1",hr="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/defect_detail/get_data_list_by_param?ver=v1",fr="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/defect_header/update?ver=v1",gr="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/defect_detail/update?ver=v1",Sr=`${Et}/get_field_value`,_t=async(e,t)=>{const r=await d.serviceSheetDefect.where({workorder:e,taskId:t});r&&r.delete()},Ot=async(e,t,r)=>{const a=await d.serviceSheetDefect.where({workorder:e,id:t,isActive:"true"}).first();a&&(a.isActive=r,await d.serviceSheetDefect.update(Number(a.id),a))},Y=async(e,t,r)=>{const a=await d.serviceSheetDefect.where({workorder:e,taskId:t,isActive:"true"}).first();a&&(a.isActive=r,await d.serviceSheetDefect.update(Number(a.id),a))},Ft=async(e,t,r)=>{const a=await d.serviceSheetDefect.where({workorder:e,taskId:t,isActive:"true"}).toArray();if(a){for(const s in a)if(Object.prototype.hasOwnProperty.call(a,s)){const o=a[s];o.isActive=r,await d.serviceSheetDefect.update(Number(o.id),o)}}},At=async(e,t)=>{e.forEach(async(r,a)=>{const s=m.cloneDeep(t.find(i=>i.defectHeaderId==r.id)),o={...m.cloneDeep(r)};let n={};delete o.id,n={...o,defectDetailId:m.isUndefined(s)?"":s.id,defectData:m.isUndefined(s)?"":{...s.detail,createdBy:s.createdBy,createdDate:s.createdDate,updatedBy:s.updatedBy,updatedDate:s.updatedDate},defectHeaderId:r.id,defectDetailKey:s==null?void 0:s.key,statusSync:"Sync"},!m.isUndefined(s)&&s.otherFitterUpdatedBy&&(n.otherFitterUpdatedBy=s.otherFitterUpdatedBy,n.updatedDate=s.updatedDate),await d.serviceSheetDefect.add(n)})},Rt=async e=>{await d.serviceSheetDefect.where({workorder:e}).delete()},kr=async(e,t)=>{const r=await d.serviceSheetDefect.where({defectDetailId:e}).first();r&&(r.defectData=t,await d.serviceSheetDefect.update(Number(r.id),r))},Tr=async e=>{let t=!1;const r=await d.serviceSheetDefect.where({defectDetailId:e}).first();return r&&r.statusSync&&(t=!0),t},Gt=async e=>{const t=await d.serviceFormComment.where({workOrder:e});t&&t.delete()},Ct=async(e,t)=>{await Gt(t),await d.serviceFormComment.bulkAdd(m.cloneDeep(e))},bt=Q({id:"offlineSuspensionCylinderForm",state:()=>({stateShowSuspensionCylinderHeightForm:!1,stateShowPreviewSuspensionCylinderHeightForm:!1,stateSCCalibration:{},stateSCHeader:{},stateupdateParams:[],stateValidation:[]}),getters:{ShowSuspensionCylinderHeightForm:e=>e.stateShowSuspensionCylinderHeightForm,ShowPreviewSuspensionCylinderHeightForm:e=>e.stateShowPreviewSuspensionCylinderHeightForm,eformStore:()=>C(),generalFormStore:()=>z(),onlineStatus:()=>ee()},actions:{toggleShowPreviewSuspensionCylinderHeightForm(e){this.stateShowPreviewSuspensionCylinderHeightForm=e},toggleShowSuspensionCylinderHeightForm(e){this.stateShowSuspensionCylinderHeightForm=e,e||(this.stateupdateParams=[],this.stateValidation=[])},async getSuspensionCalibrationTemplate(e){try{const t=await y.post(`${Dt}?${new URLSearchParams(oe).toString()}`,e);return this.stateSCCalibration=t.data.result.content.detail,this.stateSCHeader=t.data.result.content.header,!0}catch(t){return g("IRONS",t),console.log("error getSuspensionCalibrationTemplate",t),!1}},async getSuspensionCalibrationTemplateFromLocalDB(e){const t=await d.serviceFormPayloadCalibration.where({id:e}).first();return t?(this.stateSCHeader=t.header,this.stateSCCalibration=t.detail,!0):!1},generatePreAnsweredInput(){const e=(t,r)=>({keyValue:r,propertyParams:[{propertyName:"value",propertyValue:t},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.eformStore.employee)},{propertyName:"updatedDate",propertyValue:_()}]});this.stateSCCalibration.subGroup.forEach(t=>{t.taskGroup.forEach(r=>{r.task.forEach(a=>{a.items.forEach(s=>{if(s.itemType=="inputWithPlaceholder"&&!m.isUndefined(s.style)&&!m.isUndefined(s.style.placeholder))switch(s.style.placeholder){case"Truck ID Number":s.value=this.stateSCHeader.equipment,this.addUpdateParams(e(s.value,s.key));break;case"Machine SMU":s.value=this.generalFormStore.generalForm.smu,this.addUpdateParams(e(s.value,s.key));break;case"Truck Serial Number":s.value=this.stateSCHeader.serialNumber,this.addUpdateParams(e(s.value,s.key));break;case"Calibration Date":s.value=`${Be(this.generalFormStore.stateTimeZone)} ${this.generalFormStore.stateTimeZoneDesc}`;break}})})})})},addUpdateParams(e){let t=this.stateupdateParams.find(r=>r.keyValue==e.keyValue);m.isUndefined(t)?this.stateupdateParams.push(e):(t=e,this.stateupdateParams.forEach(r=>{r.keyValue==e.keyValue&&(r.propertyParams=e.propertyParams)})),console.log("item after update",this.stateupdateParams)},deleteParams(e){this.stateupdateParams=this.stateupdateParams.filter(t=>t.keyValue!=e),console.log("item after delete",this.stateupdateParams)},generateValidateInput(){console.log("this.stateSCCalibration",this.stateSCCalibration),this.stateSCCalibration.subGroup.forEach(e=>{e.taskGroup.forEach(t=>{t.task.forEach(r=>{r.items.forEach(a=>{if(a.isTaskValue){const s={key:a.key,value:a.value};this.stateValidation.push(s)}})})})}),console.log("statevalidation",this.stateValidation)},updateValidationValue(e){this.stateValidation.forEach(t=>{t.key==e.key&&(t.value=e.value)})},async submitForm(){this.stateSCCalibration.subGroup.forEach(r=>{r.taskGroup.forEach(a=>{a.task.forEach(s=>{s.items.forEach(o=>{if(o.itemType=="inputWithPlaceholder"&&!m.isUndefined(o.style)&&!m.isUndefined(o.style.placeholder)&&o.style.placeholder=="Calibration Date"){const n={keyValue:o.key,propertyParams:[{propertyName:"value",propertyValue:_()},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.eformStore.employee)},{propertyName:"updatedDate",propertyValue:_()}]};this.addUpdateParams(n)}})})})});const e={headerId:this.stateSCCalibration.headerId,workorder:this.stateSCHeader.workOrder,id:this.stateSCCalibration.id,updateParams:this.stateupdateParams,employee:this.eformStore.employee};S()?await d.pendingTask.add({module:"serviceForm",section:"E-Form",type:"CalibrationDetail",workorder:this.eformStore.stateGeneralForm.workOrder,key:this.eformStore.stateGeneralForm.key,bindingKey:this.eformStore.stateGeneralForm.key,payload:JSON.stringify(e),syncDate:_(),syncStatus:"Pending"}):await y.post(`${wt}?${new URLSearchParams(oe).toString()}`,e);const t={id:this.stateSCHeader.id,updateParams:[{propertyParams:[{propertyName:"status",propertyValue:"Submitted"}]}],employee:this.eformStore.employee};if(!S())await y.post(`${Nt}?${new URLSearchParams(oe).toString()}`,t);else{this.stateSCHeader.status="Submitted";for(const r in this.stateSCCalibration.transactionCalibration)if(Object.prototype.hasOwnProperty.call(this.stateSCCalibration.transactionCalibration,r)){const a=this.stateSCCalibration.transactionCalibration[r],s=this.eformStore.getFieldValueByKey(a.key,"items");a.items=m.cloneDeep(s)}await d.pendingTask.add({module:"serviceForm",section:"E-Form",type:"CalibrationHeader",workorder:this.eformStore.stateGeneralForm.workOrder,key:this.eformStore.stateGeneralForm.key,bindingKey:this.eformStore.stateGeneralForm.key,payload:JSON.stringify(t),syncDate:_(),syncStatus:"Pending"}),await d.serviceFormPayloadCalibration.put({id:m.cloneDeep(this.eformStore.stateGeneralForm.workOrder),header:m.cloneDeep(this.stateSCHeader),detail:m.cloneDeep(this.stateSCCalibration)})}}}}),Ut=Q({id:"OfflineDailySchedule",state:()=>({stateDailySchedules:[],stateDailySchedulesInterim:[],stateDailyScheduleOptions:[],stateDailyScheduleInterimOptions:[],stateSelectedDailySchedule:{},stateSelectedDailyScheduleInterim:{}}),getters:{DailySchedules:e=>e.stateDailySchedules,DailyScheduleOptions:e=>e.stateDailyScheduleOptions,DailyScheduleInterimOptions:e=>e.stateDailyScheduleInterimOptions,SelectedDailySchedule:e=>e.stateSelectedDailySchedule,SelectedDailyScheduleInterim:e=>e.stateSelectedDailyScheduleInterim,AuthStore:()=>G(),onlineStatus:()=>ee(),suspensionCylinderFormStore:()=>bt(),offlineEformStore:()=>C()},actions:{async getDailySchedules(e){const t={ver:"v1",siteId:e};try{const r=await y.get(Ze,"",new URLSearchParams(t).toString());this.stateDailySchedules=r.data.result.content,this.saveDailyScheduleListToLocalDB(r.data.result.content),await this.formatDailyScheduleOptions();const a=await d.serviceSheetDetail.toArray();if(a.length>0){for(const s in a)if(Object.prototype.hasOwnProperty.call(a,s)){const o=a[s];if(!this.stateDailySchedules.find(i=>i.workOrder==o.id)){const i=d.serviceSheetDetail.where({id:o.id});i&&await i.delete();const p=d.serviceSheetDefect.where({workorder:o.id});p&&await p.delete();const c=d.pendingTask.where({workorder:o.id});c&&await c.delete();const l=d.pendingTaskFile.where({workorder:o.id});l&&await l.delete();const u=d.retryTask.where({workorder:o.id});u&&await u.delete();const f=d.serviceFormPreviousTandem.where({id:o.id});f&&await f.delete();const T=d.serviceFormPayloadCalibration.where({id:o.id});u&&await T.delete()}}}}catch(r){N(r),await this.saveDailyScheduleListToLocalDB([{id:"1930",smuDue:"4000",workOrder:"7779999981",unitNumber:"DT0700",psType:"4000",shift:"Day",equipmentModel:"KOM 930E-4 HPI",equipmentModelName:"930E-4 HPI",status:"Open"}]),await this.formatDailyScheduleOptions()}},async saveDailyScheduleListToLocalDB(e){for(const t of e)await d.serviceSheetHeader.put({id:Number(t.id),smuDue:t.smuDue,workOrder:t.workOrder,unitNumber:t.unitNumber,psType:t.psType,shift:t.shift,equipmentModel:t.equipmentModel,equipmentModelName:t.equipmentModelName,status:t.status,progress:t.progress,syncStatus:"Not Updated",date:new Date().toDateString(),label:t.label,value:t.value});this.stateDailySchedules=await d.serviceSheetHeader.reverse().sortBy("id")},async getDailyScheduleFromLocalDB(){this.stateDailySchedules=await d.serviceSheetHeader.reverse().sortBy("id"),await this.formatDailyScheduleOptions()},async getDailySchedulesInterim(){try{const e=await y.get(ze);this.stateDailySchedulesInterim=e.data.result.content,this.formatDailyScheduleInterimOptions()}catch(e){N(e),g("IRONS",e),console.log(e)}},async formatDailyScheduleOptions(){const e=await d.serviceSheetDetail.toArray();for(const t in e)if(Object.prototype.hasOwnProperty.call(e,t)){const r=e[t];this.stateDailySchedules.some(a=>{if(a.workOrder==r.id)return a.icon="Updated",!0})}this.stateDailyScheduleOptions=this.stateDailySchedules},formatDailyScheduleInterimOptions(){this.stateDailyScheduleInterimOptions=this.stateDailySchedulesInterim.map(e=>({label:`${e.unitNumber} - ${e.equipmentModel} - ${e.psType} Hour Service - ${e.workOrder}`,value:e.id.toString(),status:e.status,progress:e.progress}))},setSelectedDailySchedule(e){const t=this.DailySchedules.find(r=>r.id.toString()===e);t&&(this.stateSelectedDailySchedule=t)},setSelectedDailyScheduleInterim(e){const t=this.stateDailySchedulesInterim.find(r=>r.id.toString()===e);t&&(this.stateSelectedDailyScheduleInterim=t)},updateDailyScheduleSyncStatus(e){this.DailySchedules.forEach(t=>{t.workOrder==e&&(t.syncStatus="Updated")})},async handleServiceFormAccessibleOffline(e){let t=await this.getWorkOrderDetailById(e);if(t.id=e.workOrder,!m.isEmpty(t.general)){t=await this.updateTaskProgressFromDB(t),await d.serviceSheetDetail.put(t);const r=await d.serviceSheetHeader.get({workOrder:e.workOrder});await this.dumpImagesEachServiceDetail(t.general,t.serviceSheet),await this.dumpAttachmentEachServiceDetail(t),await this.saveDefectServiceFormToLocalDB(e.workOrder),await this.savePreviousCrackToLocalDB(e.workOrder),await this.getpayloadCalibration({employee:{id:this.AuthStore.user.EmployeeId,name:this.AuthStore.user.Name},modelId:t.general.modelId,psTypeId:t.general.psTypeId,unitNumber:t.general.equipment,workOrder:t.general.workOrder}),await this.offlineEformStore.handleGetAndUpdatePreviousTandem(t),await this.offlineEformStore.handleGetAndUpdatePreviousReplacement(t),await this.offlineEformStore.handleGetAndUpdatePreviousBrakePack(t),await this.offlineEformStore.getReplacementDefaultBulk({modelId:t.general.modelId,psTypeId:t.general.psTypeId},t.general.workOrder),r.syncStatus="Updated",await d.serviceSheetHeader.put(r),this.updateDailyScheduleSyncStatus(e.workOrder)}this.stateDailyScheduleOptions.forEach(r=>{if(r.workOrder==e.workOrder){console.log("element.workOrder",r.workOrder),r.icon="Updated";return}})},async savePreviousCrackToLocalDB(e){const t={workOrder:e,ver:"v1"};try{const r=await y.get(`${Re}`,"",new URLSearchParams(t).toString()),a=m.cloneDeep(r.data.result.content),s=await d.previousCrack.where({workOrder:e});s&&s.delete(),a.forEach(async o=>{await d.previousCrack.add({taskId:o.taskId,workOrder:e,previousCrack:o.previousCrack})})}catch(r){g("IRONS",r),console.log("error get previous each wo")}},async syncDetail(){let t=Promise.resolve();m.clone(this.stateDailySchedules).forEach(async a=>{t=t.then(async()=>{let s=await this.getWorkOrderDetailById(a);if(s.id=a.workOrder,!m.isEmpty(s.general)){s=await this.updateTaskProgressFromDB(s),await d.serviceSheetDetail.put(s);const o=await d.serviceSheetHeader.get({workOrder:a.workOrder});await this.dumpImagesEachServiceDetail(s.general,s.serviceSheet),await this.saveDefectServiceFormToLocalDB(a.workOrder),o.syncStatus="Updated",await d.serviceSheetHeader.put(o),await this.formatDailyScheduleOptions()}return new Promise(function(o){setTimeout(o,1e3)})})})},async saveDefectServiceFormToLocalDB(e){var n,i,p;const t={workOrder:e,ver:"v1"},r=await y.get(`${He}`,"",new URLSearchParams(t).toString()),a=((n=r.data.result.content)==null?void 0:n.defectDetail)||[],s=((i=r.data.result.content)==null?void 0:i.defectHeader)||[],o=((p=r.data.result.content)==null?void 0:p.comment)||[];o.forEach(c=>{c.workOrder=e}),Rt(e),At(s,a),Ct(o,e)},async getDefectHeaderList(e){try{return(await y.post(`${Ae}`,e)).data.result.content}catch(t){return g("IRONS",t),[]}},async getDefectDetailList(e){try{return(await y.post(`${Ke}`,e)).data.result.content}catch(t){return g("IRONS",t),[]}},async getWorkOrderDetailById(e){const t={employee:{id:this.AuthStore.user.EmployeeId,name:this.AuthStore.user.Name},modelId:e.equipmentModel,psTypeId:e.psType,workOrder:e.workOrder,unitNumber:e.unitNumber},r={ver:"v1"},a={id:e.workOrder,general:{},serviceSheet:[]};if(this.onlineStatus.value)try{return(await y.post(`${Xe}?${new URLSearchParams(r).toString()}`,t)).data.result.content}catch(s){return g("IRONS",s),console.log("error get data service sheet detail offline mode"),a}else return a},async getServiceSheetDetailFromLocalDB(e){return await d.serviceSheetDetail.where("id").equals(e).first()},async dumpAttachmentEachServiceDetail(e){const t=[],r=(c,l)=>{Array.from(c.getElementsByClassName(l)).forEach(f=>{t.includes(f.href)||t.push(f.href)})},a=c=>{const l=document.createElement("div");let u=c;c&&(u=u.replaceAll("{BLOB_URL}","https://digitaldevbumaausta001.blob.core.windows.net")),l.innerHTML=u,r(l,"show-pdf"),r(l,"spv-print-pdf")};e.general.safetyPrecaution.forEach(c=>{c.items.forEach(l=>{l.taskType=="html"&&a(l.value)})});const s=async c=>{c.itemType=="html"&&a(c.value)};for(const c in e.serviceSheet){const l=e.serviceSheet[c];for(const u in l.subGroup){const f=l.subGroup[u];for(const T in f.taskGroup){const E=f.taskGroup[T];for(const w in E.task){const k=E.task[w];if(k.taskType==="table"||k.taskType==="collapsibleTable")for(const V in k.items){const v=k.items[V];for(const R in v){const h=v[R];await s(h)}}for(const V in k.items){const v=k.items[V];await s(v)}}}}}const o=[];for(const c in t){const l=t[c],u=await d.taskReference.where({filename:l}).first();if(!u)o.push(l);else if(!u.createdDate)d.taskReference.where({filename:l}).delete(),o.push(l);else{const f=new Date,T=u.createdDate;(f.getTime()-T.getTime())/(1e3*60*60*24)>1&&(d.taskReference.where({filename:l}).delete(),o.push(l))}}const n=o.map(c=>`'${c}'`);if(o.length==0)return;(await y.post(`${Qe}`,n)).data.result.content.forEach(async c=>{const l=atob(c.dataFile),u=new Array(l.length);for(let E=0;E<l.length;E++)u[E]=l.charCodeAt(E);const f=new Uint8Array(u),T=new Blob([f],{type:c.file_type});await d.taskReference.add({workorder:e.general.workOrder,filename:`${c.file_url}`,file:T,fileType:"pdf",createdDate:new Date})})},async dumpImagesEachServiceDetail(e={},t){var n;const r={general:e,serviceSheet:t},a=[],s=((n=r.general.checkBeforeTruck)==null?void 0:n.items)||{};if(s){for(const i in s)if(Object.prototype.hasOwnProperty.call(s,i)){const p=s[i];p.itemType=="html"&&a.push(p.icon.value)}}const o=async i=>{if(i.itemType=="image"&&this.onlineStatus.value){const p=await d.taskReference.where({filename:i.value}).first();if(!p)a.includes(i.value)||a.push(i.value);else if(!p.createdDate)d.taskReference.where({filename:i.value}).delete(),a.includes(i.value)||a.push(i.value);else{const c=new Date,l=p.createdDate;(c.getTime()-l.getTime())/(1e3*60*60*24)>1&&(d.taskReference.where({filename:i.value}).delete(),a.includes(i.value)||a.push(i.value))}}};for(const i in r.serviceSheet){const p=r.serviceSheet[i];for(const c in p.subGroup){const l=p.subGroup[c];for(const u in l.taskGroup){const f=l.taskGroup[u];for(const T in f.task){const E=f.task[T];if(E.taskType==="table"||E.taskType==="collapsibleTable")for(const w in E.items){const k=E.items[w];for(const V in k){const v=k[V];await o(v)}}for(const w in E.items){const k=E.items[w];await o(k)}}}}}if(a.length!=0)for(const i in a){const p=a[i],c={ver:"v1",id:p},u=(await y.get(`${et}`,"",new URLSearchParams(c).toString())).data.result.content,f=await fetch(u.toString(),{headers:new Headers({})}).then(T=>T.blob()).then(T=>T);await d.taskReference.add({workorder:r.general.workOrder,filename:p,file:f,fileType:"image",createdDate:new Date})}},async getpayloadCalibration(e){await this.suspensionCylinderFormStore.getSuspensionCalibrationTemplate(e),this.suspensionCylinderFormStore.stateSCHeader&&(await d.serviceFormPayloadCalibration.put({id:m.cloneDeep(e.workOrder.toString()),header:m.cloneDeep(this.suspensionCylinderFormStore.stateSCHeader),detail:m.cloneDeep(this.suspensionCylinderFormStore.stateSCCalibration)}),await this.dumpImagesEachServiceDetail(this.suspensionCylinderFormStore.stateSCHeader,[this.suspensionCylinderFormStore.stateSCCalibration]))},async updateTaskProgressFromDB(e){if(this.onlineStatus.value){const t={ver:"v1"};try{const r={modelId:e.general.modelId,psTypeId:e.general.psTypeId,workOrder:e.general.workOrder,headerId:e.serviceSheet[0].headerId};return(await y.post(`${tt}?${new URLSearchParams(t).toString()}`,r)).data.result.content.forEach(s=>{const o=e.serviceSheet.find(n=>s.group===n.key);o&&(o.groupName=="DEFECT_IDENTIFIED_SERVICE"&&s.identifiedDefectCount?(o.doneTask=s.identifiedDefectCount,o.totalTask=s.identifiedDefectCount):(o.doneTask=s.doneTask,o.totalTask=s.totalTask))}),e}catch(r){return g("IRONS",r),console.log(r),e}}return e},async getHmOffset(e){const t={ver:"v1",equipmentNo:"",siteId:e,asIsDate:Oe()};try{await d.hmOffset.clear();const r=await y.get(`${Ce}`,"",new URLSearchParams(t).toString());for(const a in r.data.result.content.hmOffsetList){const s=r.data.result.content.hmOffsetList[a];await d.hmOffset.add(s)}}catch(r){g("IRONS",r),console.log("error get hm offset offline",r)}}}}),F=async(e,t)=>{const r=d.pendingTask.where({workorder:e,itemKey:t});r&&await r.delete()},Lt=Q({id:"offlineDefectsForm",state:()=>({stateIsYes:void 0,stateLoading:!1,stateCancelled:!1,stateDefectYesVisible:!1,stateDefectGenericVisible:!1,stateViewYesVisible:!1,stateIsValid:!0,stateItemKey:"",stateTask:{},stateDefectInfo:{},statePayload:{updateParams:[]},stateItem:{},stateUpdateTaskDefect:"",stateOpenDialogConfirmSubmitDefect:!1,stateDefectUpdate:void 0,stateOwnership:"",stateSerialNumber:"",stateIsNeed30Minutes:!1,stateApprovalDefectList:[],stateSelectedApprovalDefect:{},stateErrorMessage:"",statePredefinedPriority:"",statePartReference:{}}),getters:{Loading:e=>e.stateLoading,Cancelled:e=>e.stateCancelled,DefectGenericVisible:e=>e.stateDefectGenericVisible,DefectYesVisible:e=>e.stateDefectYesVisible,ViewYesVisible:e=>e.stateViewYesVisible,ItemKey:e=>e.stateItemKey,isValid:e=>e.stateIsValid,isYes:e=>e.stateIsYes,defectInfo:e=>e.stateDefectInfo,selectedGroup:()=>C().selectedGroup,eformStore:()=>C(),selectedFitter:()=>C().employee,supervisor:()=>{const e=G();return{id:e.user.EmployeeId,name:e.user.Name}},images:()=>ce().ImageObjects.find(t=>t.Id==="defect"),globalConnectionStore:()=>de(),UpdateTaskDefect:e=>e.stateUpdateTaskDefect,OpenDialogConfirmSubmitDefect:e=>e.stateOpenDialogConfirmSubmitDefect,OnlineStatus:()=>ee(),DefectUpdate:e=>e.stateDefectUpdate,Ownership:e=>e.stateOwnership,SerialNumber:e=>e.stateSerialNumber,ApprovalDefect:e=>e.stateSelectedApprovalDefect,dailyScheduleStore:()=>Ut(),PredefinedPriority:e=>e.statePredefinedPriority},actions:{toggleIsNeed30Minutes(e){this.stateIsNeed30Minutes=e},setItem(e){this.stateItem=e},setPredefinedPriority(e){this.statePredefinedPriority=e},setItemKey(e){this.stateItemKey=e},setCancelledState(e){this.stateCancelled=e},cretateInstance(e=!0){this.stateDefectInfo=new rt,this.stateIsYes=e,this.stateDefectInfo.setType(e?"YES":"NO")},setDefectRequirment(e){this.stateDefectInfo.setDefectRequirement(e)},setTask(e){this.stateTask=e},toggleGenericVisible(e){this.stateDefectGenericVisible=e,this.stateCancelled=!1},toggleYesVisible(e){this.stateDefectYesVisible=e,this.stateCancelled=!1},toggleViewYesVisible(e){this.stateViewYesVisible=e},createF55Payload(e){var n;const t=this.stateDefectInfo,r=((n=this.images)==null?void 0:n.ImageInfos)??[],a=t.Resources.filter(i=>i.value!==""),s=t.Parts.map(i=>{const p=i.qty?String(parseFloat(i.qty)):i.qty;return{...i,qty:p}}),o=t.Labours.map(i=>{const p=i.qty?String(parseFloat(i.qty)):i.qty,c=i.hireEach?String(parseFloat(i.hireEach)):i.hireEach;return{...i,qty:p,hireEach:c}});this.statePayload.defectDetail={isNeed30Minutes:t.IsNeed30Minutes,type:t.Type,title:e,assetNumber:t.AssetNumber,description:t.Description.value,raisedBy:this.selectedFitter.name,date:P(),plannedDuration:String(parseFloat(t.PlannedDuration.value)),instruction:t.Instruction.value,priority:t.Priority,parts:JSON.stringify(s),labours:JSON.stringify(o),resources:JSON.stringify(a.map(i=>i.value)),symptoms:JSON.stringify(t.Symptoms.map(i=>i.value)),causes:JSON.stringify(t.Causes.map(i=>i.value)),images:JSON.stringify(r),requirement:t.DefectRequirement,isComplete:t.IsComplete}},createPayload(e=!1,t=!0,r=!0){const a=C();this.statePayload.id=this.selectedGroup.id,this.statePayload.headerId=this.selectedGroup.headerId,this.statePayload.workorder=this.selectedGroup.workOrder,this.statePayload.updateParams=[];const s=this.stateTask.items.find(c=>c.itemType=="dropDown"&&c.isTaskValue==!0),o={keyValue:this.stateTask.key,propertyParams:[{propertyName:"taskValue",propertyValue:s&&s.value?String(s.value):"2"},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.selectedFitter)},{propertyName:"updatedDate",propertyValue:P()}]};e&&o.propertyParams.push({propertyName:"reason",propertyValue:a.reasonNA}),this.statePayload.updateParams.push(o),this.statePayload.updateParams.push({keyValue:this.ItemKey,propertyParams:[{propertyName:"value",propertyValue:s&&s.value?String(s.value):"2"},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.eformStore.employee)},{propertyName:"updatedDate",propertyValue:P()}]}),this.statePayload.employee=this.selectedFitter;const n=U(),i=U();this.statePayload.defectHeader={workorder:a.generalForm.workOrder,form:this.selectedGroup.modelId,serviceSheetDetailId:this.selectedGroup.id,category:this.stateTask.category,taskId:this.stateTask.key,taskNo:this.stateTask.description!=""?this.stateTask.description.split(";")[0]:this.stateTask.items[0].value,taskDesc:this.stateTask.description!=""?this.stateTask.description:this.stateTask.items[1].value,defectWorkorder:"",formDefect:"BA-PL-F55",defectType:this.stateIsYes?"YES":"NO",cbmMeasurement:"",cbmUom:"",cbmImageKey:"",cbmImageProp:"",isCbmAdjusment:"",cbmRatingType:this.stateTask.rating??"",taskValue:s&&s.value?String(s.value):"2",repairedStatus:t?"Repaired":"Not-Repaired",cbmNAStatus:"Not-Confirm",supervisor:this.supervisor,status:"Submited",defectStatus:"Submited",isActive:"true",defectHeaderId:n,defectDetailId:i,pic:this.selectedFitter.name,role:"Fitter",declineReason:"",approveReason:"",action:"Submitted"};const p=nt(this.stateTask);r&&this.createF55Payload(p)},createPayloadGeneric(e){const t=U(),r=U();this.statePayload.employee=this.selectedFitter,this.statePayload.defectHeader={workorder:e.workorder,form:e.form,serviceSheetDetailId:"",category:"NORMAL",taskId:"",taskNo:"",taskDesc:e.taskDesc,defectWorkorder:"",formDefect:"BA-PL-F55",defectType:"Generic",cbmMeasurement:"",cbmUom:"",cbmImageKey:"",cbmImageProp:"",isCbmAdjusment:"",taskValue:"",repairedStatus:"Not-Repaired",cbmNAStatus:"Not-Confirm",supervisor:this.supervisor,status:"Submited",defectStatus:"Submited",isActive:"true",defectHeaderId:t,defectDetailId:r},this.createF55Payload(e.taskDesc)},async setOpenDialogConfirmSubmitDefect(e){this.stateOpenDialogConfirmSubmitDefect=e},async setUpdateTaskDefect(e){this.stateUpdateTaskDefect=e},async createDefect(e=!1){this.stateLoading=!0;const t={ver:"v1"};try{const r=C();await this.updateDefectToLocalDB(e,!1),r.reasonNA!=""&&r.setReasonNA("");const a=await y.post(`${je}?${new URLSearchParams(t).toString()}`,this.statePayload);switch(this.stateUpdateTaskDefect=this.statePayload.updateParams[0].keyValue,this.setUpdateTaskDefect(this.statePayload.updateParams[0].keyValue),this.eformStore.updateLocalServiceSheetByParam(this.statePayload.updateParams),this.stateLoading=!1,a.data.result.message){case A.TASK_UPDATED_BY_OTHER:return r.toggleTaskAlreadyUpdatedStatus(!0),!1;case A.SUBMITTED:return r.toggleFormAlreadySubmitted(!0),!1;case A.CLOSE:return r.toggleFormAlreadyClose(!0),!1;default:if(a.data.statusCode==400)return r.toogleTaskErrorDialog(!0),r.stateErrorMessageTaskErrorDialog=a.data.result.message,!1;break}return!0}catch(r){D("fe_event_error_service_form_post_defect",{errorMessage:r});const a=this.globalConnectionStore.checkIsErrorNoNetwork(r);return this.stateLoading=!1,g("IRONS",r),a?(this.stateUpdateTaskDefect=this.statePayload.updateParams[0].keyValue,this.setUpdateTaskDefect(this.statePayload.updateParams[0].keyValue),this.eformStore.updateLocalServiceSheetByParam(this.statePayload.updateParams),this.eformStore.updateTaskProgressOnLocalDB2(),!0):(N(r),console.log(r),!1)}},async createSingleDefect(e=!1,t=!1){this.stateLoading=!0;const r={ver:"v1"};try{const a=C();await this.updateDefectToLocalDB(e,!1,!1,t),a.reasonNA!=""&&a.setReasonNA("");const s=await y.post(`${Ve}?${new URLSearchParams(r).toString()}`,this.statePayload);switch(this.stateUpdateTaskDefect=this.statePayload.updateParams[0].keyValue,this.setUpdateTaskDefect(this.statePayload.updateParams[0].keyValue),this.eformStore.updateLocalServiceSheetByParam(this.statePayload.updateParams),this.stateLoading=!1,s.data.result.message){case A.TASK_UPDATED_BY_OTHER:return a.toggleTaskAlreadyUpdatedStatus(!0),!1;case A.SUBMITTED:return a.toggleFormAlreadySubmitted(!0),!1;case A.CLOSE:return a.toggleFormAlreadyClose(!0),!1;default:if(s.data.statusCode==400)return a.toogleTaskErrorDialog(!0),a.stateErrorMessageTaskErrorDialog=s.data.result.message,!1;break}return!0}catch(a){D("fe_event_error_service_form_post_defect",{errorMessage:a});const s=this.globalConnectionStore.checkIsErrorNoNetwork(a);return g("IRONS",a),this.stateLoading=!1,s?(this.stateUpdateTaskDefect=this.statePayload.updateParams[0].keyValue,this.setUpdateTaskDefect(this.statePayload.updateParams[0].keyValue),this.eformStore.updateLocalServiceSheetByParam(this.statePayload.updateParams),this.eformStore.updateTaskProgressOnLocalDB2(),!0):(N(a),console.log(a),!1)}},async updateDefectToLocalDB(e=!1,t=!0,r=!0,a=!1){this.stateLoading=!0;const s=!a,o=a;this.createPayload(e,o,s);const n=m.clone(this.statePayload.defectHeader);delete n.supervisor,delete n.defectStatus;const i={...m.clone(n),defectData:JSON.stringify(this.statePayload.defectDetail),statusSync:S()?"":"Sync",key:"",assetNumber:"",imageAvailable:!0,createdBy:m.clone(this.selectedFitter),createdDate:P(),updatedBy:m.clone(this.selectedFitter),updatedDate:P()};try{const p=d.serviceSheetDefect.where({cbmRatingType:"SERVICE_CLEANED_AND_REPLACED",workorder:this.eformStore.generalForm.workOrder,taskId:this.stateTask.key});if(p&&await p.delete(),await d.serviceSheetDefect.add(i),t){const c=d.pendingTask.where({workorder:this.eformStore.stateGeneralForm.workOrder,itemKey:this.ItemKey});if(c){let l=!1;(await c.toArray()).forEach(u=>{u.type!="MultipleDefect"&&(l=!0)}),l&&await c.delete()}r||await F(this.eformStore.stateGeneralForm.workOrder,this.stateItemKey),await d.pendingTask.add({module:"serviceForm",section:"E-Form",type:r?"MultipleDefect":"Defect",workorder:this.eformStore.generalForm.workOrder,key:this.stateTask.key,bindingKey:this.stateTask.key,payload:JSON.stringify(this.statePayload),syncDate:_(),itemKey:this.ItemKey,syncStatus:"Pending"}),this.setUpdateTaskDefect(this.statePayload.updateParams[0].keyValue),this.eformStore.updateLocalServiceSheetByParam(this.statePayload.updateParams),this.eformStore.updateTaskProgressOnLocalDB2(),this.stateLoading=!1}return!0}catch(p){return console.log("error update defect to local",p),this.stateLoading=!1,!1}},async updateDefectSMUToLocalDB(e){const{val:t,hmOffset:r,range:a,smuDate:s,isInRange:o}=e;let n=j.STATUS_NOT_IN_RANGE;o&&(n=j.STATUS_IN_RANGE),this.stateLoading=!0;const i=z(),p={headerId:i.generalForm.id,defectHeaderId:i.generalForm.id,workorder:i.generalForm.workOrder,form:i.generalForm.form,category:"GENERAL",taskId:"",formDefect:"",defectType:"machineSMU",taskDesc:j.TITLE(n),supervisor:this.supervisor,employee:m.clone(this.selectedFitter),status:"Submited",defectStatus:"Submited",isActive:"true"},c={title:j.TITLE(n),machineSMU:t,minRange:a.MinRange,maxRange:a.MaxRange,smuDue:i.generalForm.psTypeId,assetNumber:i.generalForm.equipment,serialNumber:i.generalForm.serialNumber,type:"machineSMU",images:JSON.stringify(i.generalForm.imageEquipment??[])},l=[{keyValue:"GENERAL",propertyParams:[{propertyName:"smu",propertyValue:t},{propertyName:"smuBy",propertyValue:t!==""?JSON.stringify(this.selectedFitter):""},{propertyName:"smuDate",propertyValue:t!==""?s:""},{propertyName:"updatedBy",propertyValue:t!==""?JSON.stringify(this.selectedFitter):""},{propertyName:"updatedDate",propertyValue:t!==""?s:""}]}];r!=""&&(l[0].propertyParams.push({propertyName:"hmOffset",propertyValue:r}),c.hmOffset=r);const u={id:i.generalForm.id,updateParams:l,headerId:i.generalForm.id,workorder:i.generalForm.workOrder,employee:this.selectedFitter,defectHeader:p,defectDetail:c},f={...p,defectData:JSON.stringify({...c,createdBy:m.clone(this.selectedFitter),createdDate:P(),updatedBy:m.clone(this.selectedFitter),updatedDate:P()}),statusSync:S()?"":"Sync",key:"",assetNumber:"",imageAvailable:!0,createdBy:m.clone(this.selectedFitter),createdDate:P(),updatedBy:m.clone(this.selectedFitter),updatedDate:P()};try{const T=d.serviceSheetDefect.where({workorder:this.eformStore.stateGeneralForm.workOrder,defectType:"machineSMU"});T&&await T.delete(),await d.serviceSheetDefect.add(f);const E=d.pendingTask.where({module:"serviceForm",workorder:this.eformStore.stateGeneralForm.workOrder,itemKey:`${this.eformStore.stateGeneralForm.workOrder}-SMU-defect`,syncStatus:"Pending"});E&&await E.delete();const w=await d.pendingTask.add({module:"serviceForm",section:"E-Form",type:"Defect",workorder:this.eformStore.generalForm.workOrder,key:this.eformStore.generalForm.key,bindingKey:this.eformStore.generalForm.key,payload:JSON.stringify(u),syncDate:_(),itemKey:`${this.eformStore.stateGeneralForm.workOrder}-SMU-defect`,syncStatus:"Pending"});return console.log(w),this.eformStore.updateLocalServiceSheetByParam(l),this.eformStore.updateTaskProgressOnLocalDB2(),this.stateLoading=!1,!0}catch(T){return console.log("error update defect to local",T),this.stateLoading=!1,!1}},async createSMUDefect(e){var f,T,E,w,k;const{val:t,hmOffset:r,range:a,smuDate:s,isInRange:o}=e,n=z();let i={id:n.generalForm.id,workOrder:n.generalForm.workOrder,form:n.generalForm.form,smuDue:this.dailyScheduleStore.stateSelectedDailySchedule.smuDue,equipment:n.generalForm.equipment,serialNumber:n.generalForm.serialNumber,imageEquipment:n.generalForm.imageEquipment};e.generalData&&(i=e.generalData);let p=j.STATUS_NOT_IN_RANGE;o&&(p=j.STATUS_IN_RANGE);let c=this.selectedFitter;e.employee&&(c=e.employee);const l={id:i.id,updateParams:[{keyValue:"GENERAL",propertyParams:[{propertyName:"smu",propertyValue:t},{propertyName:"smuBy",propertyValue:t!==""?JSON.stringify(c):""},{propertyName:"smuDate",propertyValue:t!==""?s:""},{propertyName:"updatedBy",propertyValue:t!==""?JSON.stringify(c):""},{propertyName:"updatedDate",propertyValue:t!==""?s:""}]}],headerId:i.id,workorder:i.workOrder,employee:c,defectHeader:{workorder:i.workOrder,form:i.form,category:"GENERAL",taskId:"",formDefect:"",defectType:"machineSMU",taskDesc:j.TITLE(p),supervisor:this.supervisor,status:"Submited",defectStatus:"Submited"},defectDetail:{title:j.TITLE(p),machineSMU:t,minRange:a.MinRange,maxRange:a.MaxRange,smuDue:i.smuDue,assetNumber:i.equipment,serialNumber:i.serialNumber,images:JSON.stringify(i.imageEquipment??[])}};r!=""&&(l.updateParams[0].propertyParams.push({propertyName:"hmOffset",propertyValue:r}),l.defectDetail.hmOffset=r);const u={ver:"v1"};try{const V=await y.post(`${Ve}?${new URLSearchParams(u).toString()}`,l);V.data.statusCode==400&&(this.stateErrorMessage=(T=(f=V.data)==null?void 0:f.result)==null?void 0:T.message)}catch(V){throw D("fe_event_error_post_defect_smu_data",{errorMessage:V}),console.log("update defect smu/hmoffset value",V),this.stateErrorMessage=lt(((k=(w=(E=V==null?void 0:V.response)==null?void 0:E.data)==null?void 0:w.result)==null?void 0:k.message)??`${V}`),g("IRONS",V),V}},async createGenericDefectOffline(e=!0){const t=m.clone(this.statePayload.defectHeader);delete t.supervisor,delete t.defectStatus;const r={...m.clone(t),defectData:JSON.stringify(this.statePayload.defectDetail),statusSync:S()?"":"Sync",key:"",assetNumber:"",imageAvailable:!0,createdBy:m.clone(this.selectedFitter),createdDate:P(),updatedBy:m.clone(this.selectedFitter),updatedDate:P()};await d.serviceSheetDefect.add(r),e&&await d.pendingTask.add({module:"serviceForm",section:"E-Form",type:"GenericDefect",workorder:this.eformStore.generalForm.workOrder,key:this.statePayload.defectHeader.defectHeaderId,bindingKey:this.statePayload.defectHeader.defectHeaderId,payload:JSON.stringify(this.statePayload),syncDate:_(),syncStatus:"Pending"})},async createDefectGeneric(e){this.stateLoading=!0;const t={ver:"v1"};try{this.createPayloadGeneric(e),S()?await this.createGenericDefectOffline(!0):(await this.createGenericDefectOffline(!1),await y.post(`${xe}?${new URLSearchParams(t).toString()}`,this.statePayload)),this.stateLoading=!1}catch(r){const a=this.globalConnectionStore.checkIsErrorNoNetwork(r);this.globalConnectionStore.setSubmitConnectionError(a),N(r),console.log(r),this.stateLoading=!1,g("IRONS",r)}},async getDefectDetail(e,t){this.stateLoading=!0;const r={ver:"v1"},a={servicesheetDetailId:e,taskId:t};try{const o=(await y.post(`${Vt}?${new URLSearchParams(r).toString()}`,a)).data.result.content.detail;this.setDefectDetail(o),this.stateLoading=!1}catch(s){D("fe_event_error_service_form_get_defect_detail",{errorMessage:s}),N(s),console.log(s),this.stateLoading=!1,g("IRONS",s)}},async setDefectDetail(e){try{const t=ce();t.setCurrent("defect"),t.clearCurrent();const[r,a]=dt(e);this.stateDefectInfo=r,this.stateIsYes=a;const s=await ut(e.images,()=>{this.toggleViewYesVisible(!0)});this.images.ImageInfos=s.ImageInfos,this.images.ImageBlobs=s.ImageBlobs}catch(t){N(t),console.log(t)}},async getDefectFromLocalDB(e){const t=await d.serviceSheetDefect.where({workorder:this.eformStore.stateGeneralForm.workOrder,taskId:e,isActive:"true"}).first();let r;typeof(t==null?void 0:t.defectData)=="string"?r=JSON.parse(t.defectData):r=t.defectData;try{this.setDefectDetail(r),this.stateLoading=!1}catch(a){console.log("OFFLINE - error when showing Defect detail",a)}},async getMultipleDefectList(e,t,r){this.stateLoading=!0;const a={ver:"v1"},s={workorder:e,taskId:t,serviceSheetDetailId:r};try{const o=await this.eformStore.checkCurrentWoPendingOfflineTask();if(!S()&&!o){const n=await y.post(`${Je}?${new URLSearchParams(a).toString()}`,s);return this.stateLoading=!1,n.data.result.content||[]}else{const n=await d.serviceSheetDefect.where({workorder:e,taskId:t,isActive:"true"}).toArray();return n.forEach(i=>{let p=i.defectData;typeof p=="string"&&(p=JSON.parse(p)),i.detail=p}),n||[]}}catch(o){return D("fe_event_error_service_form_get_multiple_defect_list",{errorMessage:o}),N(o),console.log(o),this.stateLoading=!1,g("IRONS",o),[]}},async getOwnershipDefectForm(e){this.stateLoading=!0;const t={ver:"v1",EquipmentNumber:e,Page:"1",PageSize:"1"};try{const r=await y.get(We,"",new URLSearchParams(t).toString());r.data.result.content.length==0?this.stateOwnership="":r.data.result.content.length>0&&(this.stateOwnership=r.data.result.content[0].ownership||"",this.stateSerialNumber=r.data.result.content[0].serialNumber||"")}catch(r){D("fe_event_error_service_form_get_ownership_defect",{errorMessage:r}),N(r),console.log(r),g("IRONS",r),this.stateLoading=!1}},async getOwnershipDefectFormFromLocalDB(e){const t=await d.ownership.where({equipmentNumber:e}).first();t&&(this.stateOwnership=t.ownership,this.stateSerialNumber=t.serialNumber)},resetTaskUpdated(){this.stateDefectUpdate=void 0},SetTaskUpdated(){this.stateDefectUpdate=!0},async getApprovalDefect(e){const{defectHeaderId:t,taskId:r}=e;let a=null;if(this.stateApprovalDefectList.length!=0&&(a=pt(this.stateApprovalDefectList,o=>t?o.defectHeaderId==t:r?o.taskKey==r:!1),a&&(a.object.status=="Acknowledge"||a.object.status=="Decline"||a.object.cbmNAStatus=="Confirmed"||a.object.cbmNAStatus=="Decline")))return a.object;let s={};if(S())s=await d.serviceSheetDefect.where({...e,isActive:"true"}).first();else{const o={id:e.defectHeaderId,workorder:e.workorder,taskId:e.taskId};s=await this.getDefectsDataHeaderPerDefect(o)}if(s){e.defectHeaderId&&(s.id=e.defectHeaderId);const o={defectHeaderId:s.id,taskKey:s.taskId,approvedBy:s.approvedBy,approvedDate:s.approvedDate,status:s.status,cbmNAStatus:s.cbmNAStatus,declineReason:s.declineReason,declineBy:s.declineBy,declineDate:s.declineDate};return a?a.index>=0&&(this.stateApprovalDefectList[a.index]=o):this.stateApprovalDefectList.push(o),o}return null},async getDefectsDataHeaderPerDefect(e){const t=e;try{const r=await y.post(`${Ae}`,t);return r.data.result.content&&r.data.result.content[0]?r.data.result.content[0]:null}catch(r){return D("fe_event_error_get_defect_header",{errorMessage:r}),g("IRONS",r),null}},async setApprovalData(e){this.stateSelectedApprovalDefect=e},resetList(){this.stateApprovalDefectList=[],this.stateSelectedApprovalDefect={}},resetInstance(){this.stateLoading=!1,this.stateIsYes=void 0,this.stateDefectYesVisible=!1,this.stateDefectGenericVisible=!1,this.stateViewYesVisible=!1,this.stateIsValid=!0,this.stateItemKey="",this.setUpdateTaskDefect(""),this.stateTask={},this.stateDefectInfo={},this.statePayload={updateParams:[]}},resetErrorStatus(){this.stateErrorMessage=""},async getPartReference(e){const t={ver:"v1",unitNumber:e};try{const r=await y.get(qe,"",new URLSearchParams(t).toString());console.log("res.data.result.content",r.data.result.content),this.statePartReference=r.data.result.content}catch(r){N(r),g("IRONS",r),console.log(r),this.stateLoading=!1}}}}),pe=["CBM","NORMAL"],re=e=>{let t=e.key;if(pe.includes(e.category)&&e.rating=="CALIBRATION")if(e.groupTaskId)t=e.groupTaskId;else{const r=_e(e.key);t=r==null?void 0:r.groupTaskId}if(pe.includes(e.category)&&e.rating=="AUTOMATIC_PREVIOUS"&&(e.items.find(a=>a.categoryItemType=="dropdownTool"||a.categoryItemType=="dropdownToolDisc")&&(!e.parentGroupTaskId||e.childGroupTaskId)?t=e.key:t=e.groupTaskId),pe.includes(e.category)&&e.showParameter=="cylinderHeightNeedAdjustment"&&(t=e.groupTaskId),e.items.find(r=>r.categoryItemType=="resultParamRating")&&(t=e.groupTaskId),e.items.find(r=>r.category=="cbmCalculateAvg")){const r=e.items.find(s=>s.category=="cbmCalculateAvg"),a=Bt(r.targetCalculateKeyId);t=a==null?void 0:a.groupTaskId}if(e.items.find(r=>r.categoryItemType=="dropdownToolGroup"))if(e.groupTaskId)t=e.groupTaskId;else{const r=_e(e.key,!0);t=r==null?void 0:r.groupTaskId}return e.mappingToolGroup&&(t=e.groupTaskId),e.parentGroupTaskId&&(t=e.parentGroupTaskId),e.childGroupTaskId&&(t=e.childGroupTaskId),e.showParameter&&(e.rating==Z.OIL_COOLED||e.rating==Z.CALIPER)&&e.groupTaskId&&(t=e.groupTaskId),t},Bt=e=>{const t=C();let r;return t.stateServiceSheets.forEach(a=>{a.subGroup.forEach(s=>{s.taskGroup.forEach(o=>{o.task.forEach(n=>{n.items.forEach(i=>{if(i.key==e){r=n;return}})})})})}),r},_e=(e,t=!1)=>{const r=C();let a;return r.stateServiceSheets.forEach(s=>{s.subGroup.forEach(o=>{o.taskGroup.forEach(n=>{n.task.forEach((i,p)=>{if(i.key==e){const c=t?p+2:p-1;a=n.task[c];return}})})})}),a},Mt={PENDING:"Pending"},$t={SERVICE_FORM:"serviceForm"},C=Q({id:"offlineEForm",state:()=>({stateServiceSheets:[],stateGroups:[],stateSelectedSubGroups:[],stateGeneralForm:{},stateModelId:"",stateModelName:"",statePsTypeId:"",stateWorkOrder:"",stateUnitNumber:"",stateEmployee:{},stateMeasurementValue:"",stateImageKey:"",stateUOM:"",stateSelectedGroup:void 0,stateIsSet:!1,stateCBMFormulas:[],stateTaskUpdated:void 0,stateServiceStart:"",stateShift:"",stateCheckbeforeTruck:[],stateRatingNotMapped:!1,stateOilToleranceNotMapped:!1,stateOilTolerance:{},stateTaskAlreadyUpdated:!1,stateFormAlreadySubmitted:!1,stateTaskErrorDialog:!1,stateErrorMessageTaskErrorDialog:"",stateFormAlreadyClose:!1,stateIsFormSelectedByOtherSupervisor:!1,stateStoredDisableKeyValue:[],stateItemKey:"",stateFromHomePage:!0,stateAvgTargetKey:"",stateInputCameraMandatoryKey:"",stateStoredSuspensionCylinderValue:[],stateStoredAdjustedSuspensionCylinderValue:[],stateShowSCConfirmToSPC:!1,stateShowConfirmToCalibrateSC:!1,stateShowSCAdjustmentWarning:!1,stateStoredAdjustmentOptionValue:"",stateStoredBrakeTypeValue:[],stateIsShowCalibrationConfirm:!1,stateShowPreTaskNotComplete:!1,stateToggleExpandTaskGroup:!1,stateTaskGroupClosed:100,statePreviousTandemTasks:[],stateNewPreviousTandemTasks:[],stateTaskProgress:[],stateSkipPreService:!1,stateSkipPreServiceReasonOptions:[],stateMultiDefectList:{},stateCameraItemCBMTakePhotoCompleteRating:{},stateReasonNA:"",stateDropdownToolGroup:{},statePreviousCrackArr:[],stateGetDataByParam:!1,stateIsReplaceValue:!1,stateReplacementValue:null,statePreviousReplacement:[],stateCalculatingBrakeAvg:!1,stateSelectedUOMToolTaskKey:"",stateSelectedBrakeTypeDropdown:""}),getters:{serviceSheets:e=>e.stateServiceSheets,groups:e=>e.stateGroups,selectedSubGroups:e=>e.stateSelectedSubGroups,generalForm:e=>e.stateGeneralForm,employee:e=>e.stateEmployee,isSet:e=>e.stateIsSet,selectedGroup:e=>e.stateSelectedGroup,taskUpdated:e=>e.stateTaskUpdated,serviceStart:e=>e.stateServiceStart,shift:e=>e.stateShift,checkBeforeTruck:e=>e.stateCheckbeforeTruck,ratingNotMapped:e=>e.stateRatingNotMapped,taskAlreadyUpdated:e=>e.stateTaskAlreadyUpdated,unitNumber:e=>e.stateUnitNumber,oilTolerance:e=>e.stateOilTolerance,formAlreadySubmitted:e=>e.stateFormAlreadySubmitted,formAlreadyClose:e=>e.stateFormAlreadyClose,taskErrorDialog:e=>e.stateTaskErrorDialog,errorMessageTaskErrorDialog:e=>e.stateErrorMessageTaskErrorDialog,generalFormStore:()=>z(),isAllTaskDone:e=>{let t=!0;return e.stateGroups.forEach((r,a)=>{a!=0&&t&&r.totalTask!=r.doneTask&&(t=!1)}),t},percentageTaskProgressAllTab:e=>ct(e.stateGroups),globalConnectionStore:()=>de(),onlineStatus:()=>ee(),skipPreService:e=>e.stateSkipPreService,isAllPreServiceFinished:e=>{const t="PRE_SERVICE_OPERATIONAL_CHECK",r=e.stateGroups.find(a=>a.groupName==t);return(r==null?void 0:r.doneTask)==(r==null?void 0:r.totalTask)},multiDefectList:e=>e.stateMultiDefectList,CameraItemCBMTakePhotoCompleteRating:e=>e.stateCameraItemCBMTakePhotoCompleteRating,reasonNA:e=>e.stateReasonNA,dropdownToolGroup:e=>e.stateDropdownToolGroup,cameraStore:()=>ce(),useAuthenticationStore:()=>G(),SelectedBrakeTypeDropdown:e=>e.stateSelectedBrakeTypeDropdown},actions:{updateSelectedBrakeTypeDropdownValue(e){this.stateSelectedBrakeTypeDropdown=e},toggleSetSelectedUOMToolTaskKey(e){this.stateSelectedUOMToolTaskKey=e},toggleCalculatingBrakeAvg(e){this.stateCalculatingBrakeAvg=e},toggleIsReplaceValue(e){this.stateIsReplaceValue=e},setCheckTruckItems(e){this.generalForm.checkBeforeTruck.items=e},setSkipPreService(e){this.stateSkipPreService=e},setReasonNA(e){this.stateReasonNA=e},setInputCameraMandatoryKey(e){this.stateInputCameraMandatoryKey=e},setAvgTargetKey(e){this.stateAvgTargetKey=e},setFromHomePage(e){this.stateFromHomePage=e},setStateItemKey(e){this.stateItemKey=e},updateStoredDisableKeyValue(e){this.stateStoredDisableKeyValue=e},pushStoredDisabledItems(e){this.stateStoredDisableKeyValue.push(e)},updateAllItems(e,t){this.stateStoredDisableKeyValue.forEach(r=>{r.key==e&&(r.value=t)})},toggleFormAlreadySubmitted(e){this.stateFormAlreadySubmitted=e},toggleFormAlreadyClose(e){this.stateFormAlreadyClose=e},getGroups(){var t,r;let e=[{id:"1",modelId:"",psTypeId:"",workOrder:"",groupName:"General",groupSeq:1,key:"1",headerId:(t=this.serviceSheets[0])!=null&&t.headerId?(r=this.serviceSheets[0])==null?void 0:r.headerId:"g1",isActive:"",isDeleted:"",createdBy:{id:"",name:""},createdDate:"",updatedBy:"",updatedDate:"",_rid:"",_self:"",_etag:"",_attachments:"",_ts:0,isSelected:!0,groupLabel:"General",subGroup:[],totalTask:0,doneTask:0}];this.serviceSheets.forEach(a=>{if(a.groupName=="General")return;const s={id:a.id,modelId:a.modelId,psTypeId:a.psTypeId,workOrder:a.workOrder,groupName:a.groupName,groupSeq:a.groupSeq,key:a.key,headerId:a.headerId,isActive:a.isActive,isDeleted:a.isDeleted,createdBy:a.createdBy,createdDate:a.createdDate,updatedBy:a.updatedBy,updatedDate:a.updatedDate,_rid:a._rid,_self:a._self,_etag:a._etag,_attachments:a._attachments,_ts:a._ts,isSelected:!1,groupLabel:a.subGroup[0].name,subGroup:a.subGroup,totalTask:m.isUndefined(a.totalTask)?0:a.totalTask,doneTask:m.isUndefined(a.doneTask)?0:a.doneTask,isDisable:m.isUndefined(a.isDisable)?"false":a.isDisable};e.push(s)}),e=m.sortBy(e,"groupSeq"),this.stateGroups=e},getSubGroups(){const e=this.groups.find(t=>t.isSelected);if(e.groupSeq==1)this.stateSelectedSubGroups=[];else{const t=this.serviceSheets.find(r=>e.id===r.id);this.stateSelectedSubGroups=t.subGroup}},handleGenerateLeakMounting(){this.stateCameraItemCBMTakePhotoCompleteRating={};try{this.stateSelectedSubGroups.forEach(e=>{e.taskGroup.forEach(t=>{t.task.forEach(r=>{if(r.category=="CBM"&&r.rating=="MANUAL_MOUNTING_LEAK"){const a=r.mappingCamera;this.stateCameraItemCBMTakePhotoCompleteRating[a]||(this.stateCameraItemCBMTakePhotoCompleteRating[a]=[]),r.items.forEach(s=>{s.itemType=="dropDown"&&s.ratingType&&this.stateCameraItemCBMTakePhotoCompleteRating[a].push({key:s.key,value:s.value})})}r.category=="CBM"&&r.mappingToolGroup&&(this.stateDropdownToolGroup[r.mappingToolGroup]||(this.stateDropdownToolGroup[r.mappingToolGroup]={isFilled:!1,itemKeyDisabledReset:[],value:"",tasksReset:[]}),this.stateDropdownToolGroup[r.mappingToolGroup].tasksReset.indexOf(r.key)===-1&&this.stateDropdownToolGroup[r.mappingToolGroup].tasksReset.push(r.key),r.items.forEach(a=>{a.itemType=="input"&&a.categoryItemType=="paramRating"&&this.stateDropdownToolGroup[r.mappingToolGroup].itemKeyDisabledReset.indexOf(a.key)===-1&&this.stateDropdownToolGroup[r.mappingToolGroup].itemKeyDisabledReset.push(a.key),a.key==r.mappingToolGroup&&a.value!=""&&(this.stateDropdownToolGroup[r.mappingToolGroup].isFilled=!0,this.stateDropdownToolGroup[r.mappingToolGroup].value=a.value)}))})})})}catch(e){console.log("error",e)}},async setSelectedGroup(e){this.stateGroups.forEach(t=>{t.id===e?t.isSelected=!0:t.isSelected=!1}),this.stateSelectedGroup=this.groups.find(t=>t.isSelected),this.getSubGroups(),S()&&(this.updateAdjustmentRow(),await this.getMultiDefectList(),this.handleGenerateLeakMounting(),this.getPreviousTandemValue(),this.getPreviousBrakePackValue(),this.getPreviousReplacementValue(!1))},setMeasurementValueAndUOM(e,t,r){this.stateMeasurementValue=e,this.stateUOM=t,this.stateImageKey=r},setModelAndPsTypeId(e,t,r,a,s){this.stateModelId=e,this.statePsTypeId=t,this.stateWorkOrder=r,this.stateModelName=a,this.stateUnitNumber=s},resetTaskUpdated(){this.stateTaskUpdated=void 0},async refreshWash(e,t,r){this.generalFormStore.setSkipWash("false");const a={employee:{id:e,name:t},modelId:this.stateModelId,psTypeId:this.statePsTypeId,workOrder:this.stateWorkOrder,unitNumber:this.stateUnitNumber,siteId:r},s={ver:"v1"};try{const o=await y.post(`${Ie}?${new URLSearchParams(s).toString()}`,a);if(o.data.result.message=="Cannot Access With Different Supervisor")return this.stateIsFormSelectedByOtherSupervisor=!0,!1;try{return this.stateGeneralForm.checkBeforeTruck=o.data.result.content.general.checkBeforeTruck,this.stateGeneralForm.checkBeforeTruck.items.every(n=>n.category=="skipOtherWash"?(this.generalFormStore.setSkipWash(n.value),!1):!0),this.setCheckboxes(),!0}catch(n){g("IRONS",n);try{return N(n),console.log(n),!1}catch(i){console.log("error",i)}}}catch(o){D("fe_event_error_get_service_sheet_data",{errorMessage:o})}},async postGenerateServiceSheet(e,t,r){this.generalFormStore.setSkipWash("false");const a={employee:{id:e,name:t},modelId:this.stateModelId,psTypeId:this.statePsTypeId,workOrder:this.stateWorkOrder,unitNumber:this.stateUnitNumber,siteId:r},s={ver:"v1"};try{const o=await y.post(`${Ie}?${new URLSearchParams(s).toString()}`,a);if(o.data.result.message=="Cannot Access With Different Supervisor")return this.stateIsFormSelectedByOtherSupervisor=!0,!1;try{return this.stateGeneralForm=o.data.result.content.general,this.stateGeneralForm.checkBeforeTruck.items.every(n=>n.category=="skipOtherWash"?(this.generalFormStore.setSkipWash(n.value),!1):!0),this.setCheckboxes(),this.stateServiceSheets=o.data.result.content.serviceSheet,this.getGroups(),this.getTaskProgress(),this.stateSelectedGroup=this.groups[0],this.stateIsSet=!0,!0}catch(n){try{return N(n),console.log(n),!1}catch(i){g("IRONS",i),console.log("error",i)}}}catch(o){D("fe_event_error_get_service_sheet_data",{errorMessage:o})}},async postGenerateFromLocalDB(e){this.stateGeneralForm=e.general,this.stateServiceSheets=e.serviceSheet,this.getGroups(),this.stateSelectedGroup=this.groups[0],this.stateIsSet=!0;const t=[];for(const r in this.stateServiceSheets){const a=this.stateServiceSheets[r];t.push({group:a.groupName,totalTask:a.totalTask,doneTask:a.doneTask,workorder:this.stateGeneralForm.workOrder})}this.stateTaskProgress=t,this.stateGeneralForm.checkBeforeTruck.items.every(r=>r.category=="skipOtherWash"?(this.generalFormStore.setSkipWash(r.value),!1):!0)},async updateCBMRatingFromLocalDB(e){this.stateCBMFormulas=e},changeIsFormSelectedByOtherSupervisor(e){this.stateIsFormSelectedByOtherSupervisor=e},setCheckboxes(){this.stateCheckbeforeTruck=[],this.generalForm.checkBeforeTruck.items.forEach(e=>{this.stateCheckbeforeTruck.push({label:e.caption,value:!1})})},setTaskUpdated(){this.stateTaskUpdated=!0},clearTruckCheckBoxes(){this.stateCheckbeforeTruck.forEach(e=>{e.value=!1})},async updateServiceSheetTaskValue(e,t,r,a=!0,s="",o={}){let n=!1;const i={ver:"v1"};try{const p=this.groups.find(u=>u.isSelected),c={headerId:this.stateSelectedGroup.headerId,workorder:this.generalForm.workOrder,id:this.stateSelectedGroup.id,updateParams:e,employee:{id:this.employee.id,name:this.employee.name},localStatus:this.generalFormStore.stateGeneralForm.status};s&&(c.taskKey=s),this.stateTaskUpdated=!1;const l=await y.post(`${B}?${new URLSearchParams(i).toString()}`,c);switch(l.data.result.message){case A.SUBMITTED:this.stateFormAlreadySubmitted=!0;break;case A.CLOSE:this.stateFormAlreadyClose=!0;break;case A.TASK_UPDATED_BY_OTHER:this.stateTaskAlreadyUpdated=!0;break;default:l.data.statusCode==400&&(this.stateTaskErrorDialog=!0,this.stateErrorMessageTaskErrorDialog=l.data.result.message);break}this.updateLocalServiceSheetByParam(e),this.getTaskProgress(),a&&this.updateGroupByParam(this.stateSelectedGroup.groupName,!0),n=!0,this.setTaskUpdated()}catch(p){D("fe_event_error_post_service_sheet_task",{errorMessage:p}),S()||(this.getTaskProgress(),this.updateGroupByParam(this.stateSelectedGroup.groupName,!0));const c=this.globalConnectionStore.checkIsErrorNoNetwork(p);N(p),console.log(p),c&&m.isEmpty(o)&&(this.updateServiceSheetTaskOnLocalDB(e,o.taskKey,o.targetItem),n=!0),g("IRONS",p)}return this.stateTaskUpdated=!0,n},async getTaskProgress(){const e={ver:"v1"};try{const t={modelId:this.generalForm.modelId,psTypeId:this.generalForm.psTypeId,workOrder:this.generalForm.workOrder,headerId:this.serviceSheets[0].headerId};if(await this.checkCurrentWoPendingOfflineTask()){this.updateTaskProgressOnLocalDB2();return}const a=await y.post(`${Pe}?${new URLSearchParams(e).toString()}`,t);a.data.result.content.forEach(s=>{const o=this.groups.find(i=>s.group===i.key);o&&(o.doneTask=o.groupName=="DEFECT_IDENTIFIED_SERVICE"&&s.identifiedDefectCount?s.identifiedDefectCount:s.doneTask,o.totalTask=o.groupName=="DEFECT_IDENTIFIED_SERVICE"&&s.identifiedDefectCount?s.identifiedDefectCount:s.totalTask);const n=this.stateServiceSheets.find(i=>s.group===i.key);n&&(n.doneTask=s.doneTask,n.totalTask=n.groupName=="DEFECT_IDENTIFIED_SERVICE"&&s.identifiedDefectCount?s.identifiedDefectCount:s.totalTask)}),this.stateServiceSheets=m.cloneDeep(this.groups),await d.serviceSheetDetail.put(m.cloneDeep({id:this.generalForm.workOrder,general:this.stateGeneralForm,serviceSheet:this.stateServiceSheets})),this.stateTaskProgress=a.data.result.content}catch(t){D("fe_event_error_get_service_form_task_progress",{errorMessage:t}),g("IRONS",t),console.log(t)}},async getMultiDefectList(){const e=Lt(),t=[],r=[];this.stateSelectedSubGroups.forEach(a=>{a.taskGroup.forEach(s=>{s.task.forEach(o=>{o.category=="NORMAL"&&o.taskValue=="2"&&(r.push(o.key),t.push(new Promise(n=>{var i;e.getMultipleDefectList(this.stateGeneralForm.workOrder,o.key,(i=this.selectedGroup)==null?void 0:i.id).then(p=>{n(p)})})))})})}),await Promise.all(t).then(async a=>{a.forEach((s,o)=>{this.stateMultiDefectList[r[o]]=s})})},async checkCurrentWoPendingOfflineTask(){const e=await d.pendingTask.where({workorder:this.stateWorkOrder,module:"serviceForm"}).toArray();if(e.length>0){let t=!0;for(const r of e)r.syncStatus=="Pending"&&(t=!1);return!t}else return!1},updateCameraItemCBMTakePhotoCompleteRating(e,t,r){this.stateCameraItemCBMTakePhotoCompleteRating[e]&&this.stateCameraItemCBMTakePhotoCompleteRating[e].every(a=>a.key==t?(a.value=r,!0):!1)},async updateGroupByParam(e,t=!1){if(this.stateGetDataByParam=!1,e!=="General"){if(await this.checkCurrentWoPendingOfflineTask())return;try{const a={modelId:this.generalForm.modelId,psTypeId:this.generalForm.psTypeId,workOrder:this.generalForm.workOrder,groupName:e},s={ver:"v1"};if(S()){const o=this.stateServiceSheets.find(n=>n.groupName==e);this.stateSelectedSubGroups=o.subGroup}else if(this.stateCalculatingBrakeAvg)this.toggleCalculatingBrakeAvg(!1);else{const o=await y.post(`${gt}?${new URLSearchParams(s).toString()}`,a);this.stateSelectedSubGroups=o.data.result.content.subGroup}this.updateAdjustmentRow(),this.handleGenerateLeakMounting(),this.updateServiceDetailToLocalDB(),await this.getMultiDefectList(),await this.getPreviousTandemValue(),await this.getPreviousBrakePackValue(),await this.getPreviousReplacementValue(t),this.stateGetDataByParam=!0,this.resetCollapse()}catch(a){D(`fe_event_error_get_service_form_${e}_tab`,{errorMessage:a}),N(a),g("IRONS",a),console.log(a)}}else await z().getServerTimestamp()},updateAdjustmentRow(){this.stateSelectedSubGroups.forEach(e=>{e.taskGroup.forEach(t=>{t.task.forEach(r=>{r.isShowAdjustmentRow&&(r.isShowAdjustmentRow=!1),!m.isUndefined(r.adjustment)&&(r.adjustment.rating!=""||r.adjustment.commentValue!=""||r.adjustment.measurement!="")&&(r.isShowAdjustmentRow=!0),r.isShowReplacementRow&&(r.isShowReplacementRow=!1),!m.isUndefined(r.replacement)&&(r.replacement.rating!=""||r.replacement.commentValue!=""||r.replacement.measurement!="")&&(r.isShowReplacementRow=!0),r.isShowCleanedRow&&(r.isShowCleanedRow=!1),!m.isUndefined(r.cleaned)&&r.cleaned.rating!=""&&(r.isShowCleanedRow=!0)})})})},async getPreviousTandemValue(){let e=!1,t=!1,r=!1,a=!1;if(this.statePreviousTandemTasks=[],this.stateSelectedSubGroups.forEach(s=>{s.taskGroup.forEach(o=>{o.task.forEach(n=>{if(n.rating=="AUTOMATIC_PREVIOUS"){e=!0;const i={};e=!0,i.key=n.key,this.statePreviousTandemTasks.push(n.key),n.items.forEach(p=>{p.categoryItemType=="previousParamRating"&&(p.value!=""&&p.value!="-"&&(r=!0),i.value=p.value)}),this.stateNewPreviousTandemTasks.push(i)}else if(n.rating=="AUTOMATIC_PREVIOUS_GROUP"){t=!0;const i={};t=!0,i.key=n.key,this.statePreviousTandemTasks.push(n.key),n.items.forEach(p=>{p.categoryItemType=="previousParamRating"&&(p.value!=""&&p.value!="-"&&(a=!0),i.value=p.value)}),this.stateNewPreviousTandemTasks.push(i)}})})}),e&&!r||t&&!a){const s={ver:"v1"};try{let o=[];const n=await d.serviceFormPreviousTandem.where({id:`${this.generalForm.workOrder}`}).first();if(n)o=n.previousTandem;else if(!S()){const i=await y.post(`${X}?${new URLSearchParams(s).toString()}`,{equipmentNumber:this.generalForm.equipment,modelId:this.generalForm.modelId});o=i.data.result.content?i.data.result.content:[]}this.stateSelectedSubGroups.forEach(i=>{i.taskGroup.forEach(p=>{p.task.forEach(c=>{c.rating=="AUTOMATIC_PREVIOUS"?o.forEach(l=>{l.key==c.key&&c.items.forEach(async u=>{if(u.categoryItemType=="previousParamRating"&&u.value!=H(l)){u.value=H(l);const f=[{keyValue:u.key,propertyParams:[{propertyName:"value",propertyValue:H(l)}]}];try{S()?await this.updateServiceSheetTaskOnLocalDB(f,c.key,u.key,!1,c.key):await this.updateItemServiceSheetDetail(f)}catch{console.log("serror updatedata setelah tandem drive")}}})}):c.rating=="AUTOMATIC_PREVIOUS_GROUP"&&o.forEach(l=>{l.key==c.key&&c.items.forEach(async u=>{if(u.categoryItemType=="previousParamRating"&&u.value!=H(l)){u.value=H(l);const f=[{keyValue:u.key,propertyParams:[{propertyName:"value",propertyValue:H(l)}]}];try{if(!S())await this.updateItemServiceSheetDetail(f);else{let T=c.key;c.parentGroupTaskId?T=c.parentGroupTaskId:c.childGroupTaskId&&(T=c.childGroupTaskId),await this.updateServiceSheetTaskOnLocalDB(f,c.key,u.key,!1,T)}}catch{console.log("serror updatedata setelah tandem drive")}}})})})})})}catch(o){D("fe_event_error_get_service_form_previous_tandem_data",{errorMessage:o}),g("IRONS",o),console.log("error get tandem",o)}}},async getCBMResult(e,t,r=""){var i,p;let a;const s=re(e);let o="";if(e.items.forEach(c=>{(c.categoryItemType=="dropdownTool"||c.categoryItemType=="dropdownToolDisc")&&(o=c.value)}),e.mappingToolGroup)for(const c in this.stateDropdownToolGroup)c==e.mappingToolGroup&&(o=this.stateDropdownToolGroup[c].value);const n=this.stateCBMFormulas.filter(c=>{const l=c.taskKey;if(t.categoryItemType=="paramRatingDynamic"||e.mappingToolGroup){const u=l==e.key,f=c.cbmType==o;return u&&f}else if(e.rating==="AUTOMATIC_REPLACEMENT_GAP"){const u=l==e.key,f=c.cbmType=="CBM";return u&&f}else return l==e.key});if(n.length>0){if(t.value==="")return await this.deleteExisitingDefectCBMAuto(e),{value:"",status:!0};if(n.every(c=>{const l=J(c,t.value),u=W(c,t.value);return a=q(l,u,c),console.log("checkMin",l,"checkMax",u,"formula",c),!a}),a){const c=[];for(const u of e.items){const f=u.categoryItemType==I.PREVIOUS_VALUE_UOM,T=u.categoryItemType==I.PREVIOUS_PARAM_RATING,E=u.categoryItemType==I.PREVIOUS_TARGET_RATING;if(T||E||f){const k=!u.updatedDate||u.updatedDate=="",V=u.value&&u.value!="";k&&V&&c.push({keyValue:u.key,propertyParams:[{propertyName:b.VALUE,propertyValue:u.value},{propertyName:b.UPDATED_BY,propertyValue:JSON.stringify(this.employee)},{propertyName:b.UPDATED_DATE,propertyValue:P()}]})}}const l=e.items.find(u=>u.categoryItemType=="targetRating");if(a=="C"||a=="X"){const u=G(),f={ver:"v1"};let T=`${e.description.split(";")[0]};${e.description.split(";")[1]}`,E=e.items[2].value;e.rating==Z.CALIPER&&(T=`${e.description.split(";")[0]};`,E=`${e.description.split(";")[1]}. ${e.description.split(";")[2]}`);const w=U(),k=U(),V={updateParams:[{keyValue:e.key,propertyParams:[{propertyName:"taskValue",propertyValue:a},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:P()}]},{keyValue:l.key,propertyParams:[{propertyName:"value",propertyValue:a},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:P()}]},...c],headerId:this.selectedGroup.headerId,workOrder:this.selectedGroup.workOrder,id:(i=this.selectedGroup)==null?void 0:i.id,employee:this.employee,defectHeader:{workorder:this.generalForm.workOrder,form:this.generalForm.form,serviceSheetDetailId:(p=this.selectedGroup)==null?void 0:p.id,category:e.category,taskId:e.key,taskNo:T,taskDesc:E,defectWorkorder:"",formDefect:"",defectType:"",cbmMeasurement:this.stateMeasurementValue,cbmUom:this.stateUOM,cbmImageKey:this.stateImageKey,cbmImageProp:"value",isCbmAdjusment:"false",taskValue:a,repairedStatus:"Not-Repaired",cbmNAStatus:"Not-Confirm",supervisor:{id:u.user.EmployeeId,name:u.user.Name},status:"Submit",defectStatus:"Submited",isActive:"true",defectHeaderId:w,defectDetailId:k}};r!=""&&(V.defectHeader.cbmRatingType=r);let v=!1;const R={task:e,targetItem:l};return S()?(!m.isUndefined(l.isTaskValue)&&l.isTaskValue,v=await this.updateDefectOnLocalDB(V,e,l,s)):v=await this.updateDefectOnServer(f,V,R),v?(this.stateMeasurementValue="",this.stateUOM="",this.stateImageKey="",{value:a,status:!0}):{value:"",status:v}}else{l.value=a;const u=[{keyValue:l.key,propertyParams:[{propertyName:"value",propertyValue:a},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:P()}]},{keyValue:e.key,propertyParams:[{propertyName:"taskValue",propertyValue:a},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:P()}]},...c],f={taskKey:e.key,targetItem:l==null?void 0:l.key};return S()?(!m.isUndefined(l.isTaskValue)&&l.isTaskValue,this.updateServiceSheetTaskOnLocalDB(u,e.key,l==null?void 0:l.key,!1,s),Y(this.stateGeneralForm.workOrder,e.key,"false")):(await this.updateServiceSheetTaskValue(u,this.employee.id.toString(),this.employee.name,!1,"",f),Y(this.stateGeneralForm.workOrder,e.key,"false")),{value:a,status:!0}}}else return S()?(await this.deleteExisitingDefectCBMAuto(e),this.deleteDefectOnLocal(e)):await this.deleteExisitingDefectCBMAuto(e),{value:"",status:!0}}else return t.categoryItemType=="paramRatingDynamic"&&!t.value?{value:"",status:!0}:(this.stateRatingNotMapped=!0,{value:"",status:!1})},async deleteExisitingDefectCBMAuto(e){const t={ver:"v1"};let r="",a={};const s={keyValue:e.key,propertyParams:[{propertyName:"taskValue",propertyValue:""},{propertyName:"updatedBy",propertyValue:""},{propertyName:"updatedDate",propertyValue:""}]};e.items.forEach(async i=>{if(i.categoryItemType=="targetRating"||e.category==="CBM"&&i.itemType=="dropDown"||e.category==="NORMAL"&&i.itemType=="dropDown"||e.category==="CRACK"&&i.itemType=="dropDown"){if(i.categoryItemType=="dropdownTool")return;if(r=i.key,a={keyValue:i.key,propertyParams:[{propertyName:"value",propertyValue:""},{propertyName:"updatedBy",propertyValue:""},{propertyName:"updatedDate",propertyValue:""}]},i.value=="C"||i.value=="X"){const p={taskId:e.key,workorder:this.stateWorkOrder};try{if(S())Y(this.stateGeneralForm.workOrder,e.key,"false");else{const l=(await y.post(`${we}?${new URLSearchParams(t).toString()}`,p)).data.result.content,u={id:l.id,updateParams:[{keyValue:l.key,propertyParams:[{propertyName:"isActive",propertyValue:"false"}]}],employee:this.employee};await y.post(`${Ne}?${new URLSearchParams(t).toString()}`,u),Y(this.stateGeneralForm.workOrder,e.key,"false")}}catch(c){D("fe_event_error_service_form_update_defect_header",{errorMessage:c}),N(c),g("IRONS",c),console.log(c)}}i.value=""}});const o=[a,s],n={headerId:this.stateSelectedGroup.headerId,workorder:this.stateSelectedGroup.workOrder,id:this.stateSelectedGroup.id,updateParams:o,employee:this.employee,localStatus:this.generalFormStore.stateGeneralForm.status};try{S()?await this.updateServiceSheetTaskOnLocalDB(o,e.key,r,!0,e.key):(await y.post(`${B}?${new URLSearchParams(t).toString()}`,n),this.updateLocalServiceSheetByParam(o))}catch(i){D("fe_event_error_service_form_post_task",{errorMessage:i}),N(i),g("IRONS",i),console.log(i)}},async getEhmsRating(){const e={ver:"v1",model:this.stateModelName,psType:this.statePsTypeId};if(this.stateModelName&&this.statePsTypeId)try{const t=await y.get(St,"",new URLSearchParams(e).toString());this.stateCBMFormulas=t.data.result.content[0].detail}catch(t){D("fe_event_error_service_form_get_ehms_rating",{errorMessage:t}),N(t),g("IRONS",t),console.log(t)}},async getValueFromItemKey(e){const t={id:this.selectedGroup.id,keyValue:e,propertyName:"value"},r={ver:"v1"};let a="";try{const s=await y.post(`${vt}?${new URLSearchParams(r).toString()}`,t);m.isUndefined(s.data.result.content)||(a=s.data.result.content)}catch(s){D("fe_event_error_service_form_get_value",{errorMessage:s}),g("IRONS",s)}return a},updateSelectedFitter(e){this.stateEmployee=e},updateServiceStart(e){const t=z();this.stateServiceStart=e,this.stateShift=Me(t.stateTimeZone)},resetMechanic(){this.stateEmployee={},this.stateServiceStart="",this.stateShift=""},updateGeneralValue(e,t){this.stateGeneralForm[e]=t},async setNextPage(){const e=this.stateGroups.findIndex(s=>{var o;return s.groupName==((o=this.stateSelectedGroup)==null?void 0:o.groupName)});let t=1,r=this.stateGroups[e+t];for(;!m.isUndefined(r.isDisable)&&r.isDisable=="true";)t++,r=this.stateGroups[e+t];this.setSelectedGroup(r.id),this.updateGroupByParam(r.groupName);const a=await this.checkCurrentWoPendingOfflineTask();!S()&&!a&&window.scrollTo({top:0,behavior:"smooth"})},async setShowNextPage(e=""){const t=await this.checkCurrentWoPendingOfflineTask(),r={ver:"v1"};let a=!0;try{const s={modelId:this.generalForm.modelId,psTypeId:this.generalForm.psTypeId,workOrder:this.generalForm.workOrder,headerId:this.serviceSheets[0].headerId};if(!S()&&!t){const o=await y.post(`${Pe}?${new URLSearchParams(r).toString()}`,s);o.data.result.content.length<1&&(a=!1),this.stateTaskProgress=o.data.result.content}this.stateTaskProgress.forEach(o=>{o.doneTask!=o.totalTask&&(a=!1)})}catch(s){D("fe_event_error_service_form_show_next_page",{errorMessage:s}),N(s),console.log(s),a=!1,g("IRONS",s)}if(a){const s=z();let o="";if(S()?o=this.generalForm.status:o=await s.getServiceSheetHeaderKeyValue("status"),o=="Submited")e!="Submit"?(this.setNextPage(),this.stateFormAlreadySubmitted=!1):this.stateFormAlreadySubmitted=!0;else return!0}else if(!this.stateSkipPreService&&mt.enableSkipPreservice){const s="PRE_SERVICE_OPERATIONAL_CHECK";if(this.selectedGroup.groupName==s){if(!this.generalFormStore.generalUpdated){this.setNextPage();return}S()||await this.getTaskProgress();const o=this.groups.find(n=>n.groupName==s);o.doneTask!=o.totalTask?(this.setSelectedGroup(o.id),this.updateGroupByParam(o.groupName),this.stateShowPreTaskNotComplete=!0):this.setNextPage()}else this.setNextPage();return!1}else this.setNextPage()},async submitEform(){const e=await this.checkCurrentWoPendingOfflineTask(),t={ver:"v1"},r=[{propertyName:"status",propertyValue:"Submited"},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:P()},{propertyName:"serviceEnd",propertyValue:P()},{propertyName:"tsServiceEnd",propertyValue:P()}],a={id:this.generalForm.id,updateParams:[{keyValue:"GENERAL",propertyParams:r}],employee:this.employee,localStatus:this.generalFormStore.stateGeneralForm.status};try{return!S()&&!e?await y.post(`${kt}?${new URLSearchParams(t).toString()}`,a):(this.stateGeneralForm.status="Submited",this.stateGeneralForm.updatedBy=this.employee,this.stateGeneralForm.updatedDate=P(),this.stateGeneralForm.serviceEnd=P(),this.stateGeneralForm.tsServiceEnd=P(),await d.pendingTask.add({module:"serviceForm",section:"E-Form",type:"SubmitGeneral",workorder:this.stateGeneralForm.workOrder,key:`SUBMIT-${this.stateGeneralForm.key}`,bindingKey:`SUBMIT-${this.stateGeneralForm.key}`,payload:JSON.stringify(a),syncDate:_(),syncStatus:"Pending"}),await d.serviceSheetDetail.put(m.cloneDeep({id:this.generalForm.workOrder,general:this.stateGeneralForm,serviceSheet:this.stateServiceSheets}))),!0}catch(s){return D("fe_event_error_service_form_submit_form",{errorMessage:s}),console.log(s),g("IRONS",s),!1}},async updateCBMLeakMounting(e,t,r){if(t=="C"||t=="X")return this.updateDefect(e,t,r);{let a="taskValue";r.ratingType&&(r.ratingType=="Leak"?a="taskValueLeak":r.ratingType=="Mounting"&&(a="taskValueMounting"));const s=[{keyValue:e.key,propertyParams:[{propertyName:a,propertyValue:t},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:P()}]}],o=[{keyValue:r.key,propertyParams:[{propertyName:"value",propertyValue:t},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:P()}]}];return S()?(await this.deleteDefectOnLocal(e,r),await this.updateServiceSheetTaskOnLocalDB([...s,...o],e.key,r.key)):(await this.deleteDefect(e),await this.deleteDefectOnLocal(e,r),this.updateServiceSheetTaskValue([...s,...o],"",""))}},async updateDefect(e,t,r){var u,f;const a=G(),s={ver:"v1"},o=e.description.split(" ")[0].replaceAll(".","");let n="";o.includes(";;")?n=`${o.split(";;")[0]};${o.split(";;")[1]}`:n=`${o.split(";")[0]};${o.split(";")[1]}`;let i="taskValue";r.ratingType&&(r.ratingType=="Leak"?i="taskValueLeak":r.ratingType=="Mounting"&&(i="taskValueMounting"));const p=U(),c=U(),l={updateParams:[{keyValue:e.key,propertyParams:[{propertyName:i,propertyValue:t},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:P()}]},{keyValue:r.key,propertyParams:[{propertyName:"value",propertyValue:t},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:P()}]}],headerId:this.selectedGroup.headerId,workorder:this.selectedGroup.workOrder,id:(u=this.selectedGroup)==null?void 0:u.id,employee:this.employee,defectHeader:{workorder:this.generalForm.workOrder,form:this.generalForm.form,serviceSheetDetailId:(f=this.selectedGroup)==null?void 0:f.id,category:e.category,taskId:e.key,taskNo:n,taskDesc:r.ratingType?`${e.items[2].value} - ${r.ratingType}`:e.items[2].value,defectWorkorder:"",formDefect:"",defectType:"",cbmMeasurement:this.stateMeasurementValue,cbmUom:this.stateUOM,cbmImageKey:this.stateImageKey,cbmImageProp:"value",isCbmAdjusment:"false",taskValue:t,repairedStatus:"Not-Repaired",cbmNAStatus:"Not-Confirm",supervisor:{id:a.user.EmployeeId,name:a.user.Name},status:"Submit",isActive:"true",defectHeaderId:p,defectDetailId:c}};try{let T=!1;if(S())T=await this.updateDefectOnLocalDB(l,e,r);else{const v={task:e,targetItem:r};T=await this.updateDefectOnServer(s,l,v)}if(!T)return T;this.stateMeasurementValue="",this.stateUOM="",this.stateImageKey="";let E="",w={},k={};r.categoryItemType=="resultRating"&&(k={keyValue:e.key,propertyParams:[{propertyName:"taskNormalValue",propertyValue:""}]},e.items.forEach(v=>{v.categoryItemType=="resultStatus"&&(E=v.key,w={keyValue:v.key,propertyParams:[{propertyName:"value",propertyValue:""},{propertyName:"updatedBy",propertyValue:""},{propertyName:"updatedDate",propertyValue:""}]})}));const V=[];if(r.categoryItemType=="resultRating"&&(V.push(w),V.push(k)),V.length==0)return!0;if(S()){let v=!1;!m.isUndefined(r.isTaskValue)&&r.isTaskValue&&(v=!0),await F(this.stateGeneralForm.workOrder,E),await F(this.stateGeneralForm.workOrder,`reset-${e.key}`),this.updateServiceSheetTaskOnLocalDB(V,e.key,`reset-${r.key}`,!1,e.key)}else{await this.updateItemServiceSheetDetail(V);const v=this.groups.find(R=>R.isSelected);this.getTaskProgress(),this.updateGroupByParam(this.stateSelectedGroup.groupName)}return!0}catch(T){return N(T),console.log(T),!1}},async addDefectToServiceSheetDefectLocalDB(e){let t="";e!=null&&e.defectDetail&&(t=e==null?void 0:e.defectDetail);const r={...m.clone(e),statusSync:S()?"":"Sync",defectData:t,key:"",assetNumber:"",imageAvailable:!0,createdBy:m.clone(this.employee),createdDate:P(),updatedBy:m.clone(this.employee),updatedDate:P()};await d.serviceSheetDefect.add(r)},async updateDefectOnLocalDB(e,t,r={},a=""){await this.deleteDefectOnLocal(t,r);const s=m.clone(e.defectHeader);return delete s.supervisor,delete s.defectStatus,e.defectDetail&&(s.defectDetail=e.defectDetail),await this.addDefectToServiceSheetDefectLocalDB(s),await F(this.stateGeneralForm.workOrder,`update-defect-adjustment-${t.key}`),await F(this.stateGeneralForm.workOrder,r.key),await d.pendingTask.add({module:"serviceForm",section:"E-Form",type:"Defect",workorder:this.generalForm.workOrder,key:t.key,bindingKey:a,payload:JSON.stringify(e),syncDate:_(),itemKey:r.key,syncStatus:"Pending"}),this.updateLocalServiceSheetByParam(e.updateParams),await this.updateServiceDetailToLocalDB(),this.updateTaskProgressOnLocalDB2(),!0},async updateDefectOnServer(e,t,r={}){try{const a=await y.post(`${Ee}?${new URLSearchParams(e).toString()}`,t);switch(this.updateLocalServiceSheetByParam(t.updateParams),await this.updateServiceDetailToLocalDB(),this.addDefectToServiceSheetDefectLocalDB(m.cloneDeep(t.defectHeader)),a.data.result.message){case A.TASK_UPDATED_BY_OTHER:return this.toggleTaskAlreadyUpdatedStatus(!0),!1;case A.SUBMITTED:return this.toggleFormAlreadySubmitted(!0),!1;case A.CLOSE:return this.toggleFormAlreadyClose(!0),!1;default:if(a.data.statusCode==400)return this.toogleTaskErrorDialog(!0),this.stateErrorMessageTaskErrorDialog=a.data.result.message,!1;break}return!0}catch(a){return a.toString().includes("Network Error")?await this.updateDefectOnLocalDB(t,r.task,r.targetItem):(console.log("error post defect server",a.toString()),D("fe_event_error_post_defect_data",{errorMessage:a}),g("IRONS",a),!1)}},toggleNotMapped(e){this.stateRatingNotMapped=e},async getOilTolerance(){this.stateOilToleranceNotMapped=!1;const e={Model:"",PsType:"",Parameter:"",Uom:"",StartDate:"",EndDate:"",Page:"1",PageSize:"1",Order:"",ver:"v1"},t=async()=>{this.stateOilTolerance={min:-5,max:5,uom:"%"};const r=m.clone(this.stateOilTolerance);await d.oilTolerance.add(r),this.stateOilToleranceNotMapped=!0,console.log("oil tolerance not mapped on ADM")};try{const a=(await y.get($e,"",new URLSearchParams(e).toString())).data.result.content[0];if(m.isUndefined(a))t();else if(a.isActive){this.stateOilTolerance={min:Number(a.valueMin),max:Number(a.valueMax),uom:a.uom};const s=m.clone(this.stateOilTolerance);await d.oilTolerance.clear(),await d.oilTolerance.add(s)}else t()}catch(r){D("fe_event_error_service_form_get_oil_tolerance",{errorMessage:r}),N(r),g("IRONS",r),t()}},async getOilToleranceFromLocalDB(){const e=await d.oilTolerance.limit(1).first();e&&(this.stateOilTolerance=e)},toggleTaskAlreadyUpdatedStatus(e){this.stateTaskAlreadyUpdated=e},toogleTaskErrorDialog(e){this.stateTaskErrorDialog=e},async updateRiskAssesment(e){this.generalForm.riskAssesment[0].value=e,S()?await this.updateRiskAssesmentToLocalDB():await this.updatePreRiskAssesmentToBE()},async deleteRisAssesmentPic(e){let t=this.generalForm.riskAssesment[0].value;t=t.filter(r=>r.image!=e),this.generalForm.riskAssesment[0].value=t,S()?await this.updateRiskAssesmentToLocalDB():await this.updatePreRiskAssesmentToBE()},async updatePreRiskAssesmentToBE(){const e=G(),t={id:this.generalForm.id,updateParams:[{keyValue:this.generalForm.riskAssesment[0].key,propertyParams:[{propertyName:"value",propertyValue:JSON.stringify(this.generalForm.riskAssesment[0].value)}]}],employee:this.stateEmployee,localStatus:this.generalFormStore.stateGeneralForm.status},r={ver:"v1"};try{await y.post(`${$}?${new URLSearchParams(r).toString()}`,t),await this.refreshWash(e.user.EmployeeId,e.user.Name,e.user.SiteId)}catch(a){D("fe_event_error_service_form_post_ris_assessment_image",{errorMessage:a}),N(a),console.log(a),console.log("upload risk Assesment",a),g("IRONS",a)}},async updateRiskAssesmentToLocalDB(){const e={id:this.generalForm.id,updateParams:[{keyValue:this.generalForm.riskAssesment[0].key,propertyParams:[{propertyName:"value",propertyValue:JSON.stringify(this.generalForm.riskAssesment[0].value)}]}],employee:this.stateEmployee};await d.pendingTask.add({module:"serviceForm",section:"E-Form",type:"General",workorder:this.stateGeneralForm.workOrder,key:this.stateGeneralForm.key,bindingKey:this.stateGeneralForm.key,payload:JSON.stringify(e),syncDate:_(),syncStatus:"Pending"}),await d.serviceSheetDetail.put(m.cloneDeep({id:this.generalForm.workOrder,general:this.stateGeneralForm,serviceSheet:this.stateServiceSheets}))},async updateItemServiceSheetDetail(e,t={}){var s,o;const r={ver:"v1"};this.groups.find(n=>n.isSelected);const a={headerId:(s=this.stateSelectedGroup)==null?void 0:s.headerId,workorder:this.generalForm.workOrder,id:(o=this.stateSelectedGroup)==null?void 0:o.id,updateParams:e,employee:{id:this.employee.id,name:this.employee.name},localStatus:this.generalFormStore.stateGeneralForm.status};try{await y.post(`${B}?${new URLSearchParams(r).toString()}`,a),this.updateLocalServiceSheetByParam(e)}catch(n){D("fe_event_error_service_form_post_item",{errorMessage:n}),this.globalConnectionStore.checkIsErrorNoNetwork(n)&&this.updateServiceSheetTaskOnLocalDB(e,t.taskKey,t.targetItem,!1,t.bindingKey),N(n),g("IRONS",n),console.log(n),console.log("error update item",n)}},async getAdjusmentRating(e,t=""){var c;const r={ver:"v1"};let a,s="";if(e.mappingToolGroup)for(const l in this.stateDropdownToolGroup)l==e.mappingToolGroup&&(s=this.stateDropdownToolGroup[l].value);const o=this.stateCBMFormulas.filter(l=>{const u=l.taskKey;if(e.mappingToolGroup){const f=u==e.key,T=l.cbmType==s;return f&&T}else if(typeof e.items[0].value=="string")return u==e.key});if(o.length>0&&o.every(l=>{const u=J(l,e.adjustment.measurement),f=W(l,e.adjustment.measurement);return a=q(u,f,l),!a}),e.adjustment.measurement==""?e.adjustment.rating="":e.adjustment.rating=a,a){e.key,this.stateWorkOrder;let l={};l={cbmImageKey:e.adjustment.key,cbmImageProp:"pictures",isCbmAdjusment:"true",isActive:"true",correctedValue:a,correctedMeasurement:e.adjustment.measurement,correctedUom:e.adjustment.uom};const u={serviceSheetDetailId:this.selectedGroup.id,workorder:this.generalForm.workOrder,taskKey:e.key,updateParams:[{keyValue:"",propertyParams:[{propertyName:"cbmImageKey",propertyValue:e.adjustment.key},{propertyName:"cbmImageProp",propertyValue:"pictures"},{propertyName:"isCbmAdjusment",propertyValue:"true"},{propertyName:"isActive",propertyValue:"true"},{propertyName:"correctedMeasurement",propertyValue:e.adjustment.measurement},{propertyName:"correctedValue",propertyValue:a},{propertyName:"correctedUom",propertyValue:e.adjustment.uom}]}],employee:this.employee};try{S()?await this.updateAdjustmentDefectOnLocalDB(e,l,u,!0,t):await y.post(`${x}?${new URLSearchParams(r).toString()}`,u)}catch(f){D("fe_event_error_service_form_update_adjustment_task",{errorMessage:f}),N(f),g("IRONS",f),console.log(f)}}const n={keyValue:e.adjustment.key,propertyParams:[{propertyName:"measurement",propertyValue:e.adjustment.rating?e.adjustment.measurement:""},{propertyName:"rating",propertyValue:e.adjustment.measurement?e.adjustment.rating:""},{propertyName:"updatedBy",propertyValue:e.adjustment.measurement&&e.adjustment.rating?JSON.stringify(this.employee):""},{propertyName:"updatedDate",propertyValue:e.adjustment.measurement&&e.adjustment.rating?P():""}]};e.adjustment.createdDate==""&&(n.propertyParams=[...n.propertyParams,{propertyName:"createdBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"createdDate",propertyValue:P()}]);const i=[n],p={headerId:(c=this.selectedGroup)==null?void 0:c.headerId,workorder:this.stateWorkOrder,id:this.selectedGroup.id,updateParams:i,employee:this.employee,localStatus:this.generalFormStore.stateGeneralForm.status};try{if(S())await F(this.stateGeneralForm.workOrder,`adjustment-rating-${e.key}`),await F(this.stateGeneralForm.workOrder,`reset-adjustment-${e.key}`),await d.pendingTask.add({module:"serviceForm",section:"E-Form",type:"Task",workorder:this.stateGeneralForm.workOrder,key:e.key,bindingKey:t,payload:JSON.stringify(p),syncDate:_(),itemKey:`adjustment-rating-${e.key}`,syncStatus:"Pending"}),this.updateLocalServiceSheetByParam(i);else{const l=await y.post(`${B}?${new URLSearchParams(r).toString()}`,p);this.updateLocalServiceSheetByParam(i),l.data.result.message==A.SUBMITTED&&(this.stateFormAlreadySubmitted=!0),this.getTaskProgress(),this.updateGroupByParam(this.stateSelectedGroup.groupName)}}catch(l){D("fe_event_error_service_form_update_adjustment_task",{errorMessage:l}),N(l),g("IRONS",l),console.log(l)}return a},async updateAdjustmentDefectOnLocalDB(e,t,r,a=!1,s=""){let o;a?o=await d.serviceSheetDefect.where({workorder:this.stateGeneralForm.workOrder,taskId:e.key}).last():o=await d.serviceSheetDefect.where({workorder:this.stateGeneralForm.workOrder,taskId:e.key}).first(),o&&await d.serviceSheetDefect.update(Number(o.id),t),await F(this.stateGeneralForm.workOrder,`update-defect-adjustment-${e.key}`),await d.pendingTask.add({module:"serviceForm",section:"E-Form",type:"UpdateDefect",workorder:this.stateGeneralForm.workOrder,key:e.key,bindingKey:s,payload:JSON.stringify(r),syncDate:_(),itemKey:`update-defect-adjustment-${e.key}`,syncStatus:"Pending"})},async updaterePlacementDefectOnLocalDB(e,t,r,a=!1){let s;a?s=await d.serviceSheetDefect.where({workorder:this.stateGeneralForm.workOrder,taskId:e.key}).last():s=await d.serviceSheetDefect.where({workorder:this.stateGeneralForm.workOrder,taskId:e.key}).first(),console.log(await d.serviceSheetDefect.where({workorder:this.stateGeneralForm.workOrder,taskId:e.key}).toArray()),console.log("defect",s),s&&await d.serviceSheetDefect.update(Number(s.id),t),await F(this.stateGeneralForm.workOrder,`update-defect-replacement-${e.key}`),await d.pendingTask.add({module:"serviceForm",section:"E-Form",type:"UpdateDefect",workorder:this.stateGeneralForm.workOrder,key:e.key,bindingKey:e.key,payload:JSON.stringify(r),syncDate:_(),itemKey:`update-defect-replacement-${e.key}`,syncStatus:"Pending"})},async deleteAdjusmentTask(e,t=""){var c;const r={ver:"v1"};let a="",s="";e.items.forEach(l=>{l.itemType=="smallCamera"&&(a=l.key),l.categoryItemType=="paramRating"&&(s=l.value)});const o={taskValue:e.taskValue,cbmImageKey:a,cbmImageProp:"value",cbmMeasurement:s,isCbmAdjusment:"false",isActive:"true",correctedValue:"",correctedMeasurement:"",correctedUom:""},n={serviceSheetDetailId:this.selectedGroup.id,workorder:this.generalForm.workOrder,taskKey:e.key,updateParams:[{keyValue:"",propertyParams:[{propertyName:"taskValue",propertyValue:e.taskValue},{propertyName:"cbmImageKey",propertyValue:a},{propertyName:"cbmImageProp",propertyValue:"value"},{propertyName:"cbmMeasurement",propertyValue:s},{propertyName:"isCbmAdjusment",propertyValue:"false"},{propertyName:"isActive",propertyValue:"true"},{propertyName:"correctedValue",propertyValue:""},{propertyName:"correctedMeasurement",propertyValue:""},{propertyName:"correctedUom",propertyValue:""}]}],employee:this.employee};try{S()?await this.updateAdjustmentDefectOnLocalDB(e,o,n,!1,t):await y.post(`${x}?${new URLSearchParams(r).toString()}`,n)}catch(l){D("fe_event_error_service_form_delete_adjusment_defect",{errorMessage:l}),N(l),g("IRONS",l),console.log(l)}const i=[{keyValue:e.adjustment.key,propertyParams:[{propertyName:"measurement",propertyValue:""},{propertyName:"rating",propertyValue:""},{propertyName:"updatedBy",propertyValue:""},{propertyName:"updatedDate",propertyValue:""},{propertyName:"pictures",propertyValue:JSON.stringify([])},{propertyName:"createdBy",propertyValue:""},{propertyName:"createdDate",propertyValue:""},{propertyName:"commentValue",propertyValue:""}]}],p={headerId:(c=this.selectedGroup)==null?void 0:c.headerId,workorder:this.stateWorkOrder,id:this.selectedGroup.id,updateParams:i,employee:this.employee,localStatus:this.generalFormStore.stateGeneralForm.status};try{S()?(await F(this.stateGeneralForm.workOrder,`camera-adjustment-${e.key}`),await F(this.stateGeneralForm.workOrder,`changeComment-${e.adjustment.key}`),await F(this.stateGeneralForm.workOrder,`adjustment-rating-${e.key}`),await d.pendingTask.add({module:"serviceForm",section:"E-Form",type:"Task",workorder:this.stateGeneralForm.workOrder,key:e.key,bindingKey:t??e.key,payload:JSON.stringify(p),syncDate:_(),itemKey:`reset-adjustment-${e.key}`,syncStatus:"Pending"}),this.updateLocalServiceSheetByParam(i)):((await y.post(`${B}?${new URLSearchParams(r).toString()}`,p)).data.result.message==A.SUBMITTED&&(this.stateFormAlreadySubmitted=!0),this.updateLocalServiceSheetByParam(i),this.getTaskProgress(),this.updateGroupByParam(this.stateSelectedGroup.groupName))}catch(l){D("fe_event_error_service_form_delete_adjsutment_task",{errorMessage:l}),N(l),g("IRONS",l),console.log(l)}},async addCBMAdjustmentPictures(e){var o;const t={ver:"v1"},a=[{keyValue:e.adjustment.key,propertyParams:[{propertyName:"pictures",propertyValue:JSON.stringify(e.adjustment.pictures)},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:P()}]}],s={headerId:(o=this.selectedGroup)==null?void 0:o.headerId,workorder:this.stateWorkOrder,id:this.selectedGroup.id,updateParams:a,employee:this.employee,localStatus:this.generalFormStore.stateGeneralForm.status};try{S()?(await F(this.stateGeneralForm.workOrder,`camera-adjustment-${e.key}`),await d.pendingTask.add({module:"serviceForm",section:"E-Form",type:"Task",workorder:this.stateGeneralForm.workOrder,key:e.key,bindingKey:e.key,payload:JSON.stringify(s),syncDate:_(),itemKey:`camera-adjustment-${e.key}`,syncStatus:"Pending"}),this.updateLocalServiceSheetByParam(a)):((await y.post(`${B}?${new URLSearchParams(t).toString()}`,s)).data.result.message==A.SUBMITTED&&(this.stateFormAlreadySubmitted=!0),this.updateLocalServiceSheetByParam(a),this.getTaskProgress(),this.updateGroupByParam(this.stateSelectedGroup.groupName))}catch(n){D("fe_event_error_service_form_post_adjustment_image",{errorMessage:n}),N(n),g("IRONS",n),console.log(n)}},handleGetUomFromSelectedTool(e,t){const r=this.stateCBMFormulas.filter(s=>{const o=s.taskKey;if(typeof e.items[0].value=="string")return o==e.key});console.log("value",t,"taskFormulas",r);let a="";if(r.forEach(s=>{s.cbmType==t&&(a=s.uom)}),a==""&&t){for(const s of r)if(s.cbmType==ie.CBM_BRAKE_PACK_PERCENTAGE){a=s.uom;break}}return a},async updateToolUom(e,t,r=""){const a=this.handleGetUomFromSelectedTool(e,t.value);let s={};e.items.forEach(c=>{c.categoryItemType=="targetTool"&&(c.value=a,s={keyValue:c.key,propertyParams:[{propertyName:"value",propertyValue:a},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:P()}]})});const o={keyValue:t.key,propertyParams:[{propertyName:"value",propertyValue:t.value},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:P()}]},n=[s,o],i={ver:"v1"},p={headerId:this.stateSelectedGroup.headerId,workorder:this.stateSelectedGroup.workOrder,id:this.stateSelectedGroup.id,updateParams:n,employee:this.employee,localStatus:this.generalFormStore.stateGeneralForm.status};try{S()?await this.updateServiceSheetTaskOnLocalDB(n,e.key,t.key,!1,r):(await y.post(`${B}?${new URLSearchParams(i).toString()}`,p),this.updateLocalServiceSheetByParam(n))}catch(c){D("fe_event_error_service_form_tool_uom_task",{errorMessage:c}),N(c),g("IRONS",c),console.log(c)}await this.resetCBMMeasurementValueAndDefect(e,r)},async resetCBMMeasurementValueAndDefect(e,t=""){const r={ver:"v1"};let a={},s={},o={},n={},i={},p={},c={},l={},u={},f={},T={},E={},w={},k="";e.items.forEach(async h=>{if(h.categoryItemType=="paramRatingDynamic"&&(h.value="",k=h.key,a={keyValue:h.key,propertyParams:[{propertyName:"value",propertyValue:""},{propertyName:"updatedBy",propertyValue:""},{propertyName:"updatedDate",propertyValue:""}]}),h.categoryItemType=="targetRating"){if(s={keyValue:h.key,propertyParams:[{propertyName:"value",propertyValue:""},{propertyName:"updatedBy",propertyValue:""},{propertyName:"updatedDate",propertyValue:""}]},h.value=="C"||h.value=="X"){const O={isActive:"false"},L={serviceSheetDetailId:this.selectedGroup.id,workorder:this.generalForm.workOrder,taskKey:e.key,updateParams:[{keyValue:"",propertyParams:[{propertyName:"isActive",propertyValue:"false"}]}],employee:this.employee};try{S()?await this.updateAdjustmentDefectOnLocalDB(e,O,L,!1,t):await y.post(`${x}?${new URLSearchParams(r).toString()}`,L)}catch(M){N(M),g("IRONS",M),console.log(M)}}h.value=""}h.itemType=="smallCamera"&&(o={keyValue:h.key,propertyParams:[{propertyName:"value",propertyValue:""},{propertyName:"updatedBy",propertyValue:""},{propertyName:"updatedDate",propertyValue:""}]}),h.categoryItemType==I.PISTON_INPUT_A&&(h.value="",k=h.key,n={keyValue:h.key,propertyParams:[{propertyName:"value",propertyValue:""},{propertyName:"updatedBy",propertyValue:""},{propertyName:"updatedDate",propertyValue:""}]}),h.categoryItemType==I.PISTON_INPUT_B&&(h.value="",k=h.key,i={keyValue:h.key,propertyParams:[{propertyName:"value",propertyValue:""},{propertyName:"updatedBy",propertyValue:""},{propertyName:"updatedDate",propertyValue:""}]}),h.categoryItemType==I.PISTON_INPUT_RESULT&&(h.value="",k=h.key,p={keyValue:h.key,propertyParams:[{propertyName:"value",propertyValue:""},{propertyName:"updatedBy",propertyValue:""},{propertyName:"updatedDate",propertyValue:""}]}),h.categoryItemType==I.PISTON_INPUT_RATING&&(h.value="",k=h.key,c={keyValue:h.key,propertyParams:[{propertyName:"value",propertyValue:""},{propertyName:"updatedBy",propertyValue:""},{propertyName:"updatedDate",propertyValue:""}]}),h.categoryItemType==I.PREVIOUS_VALUE_PISTON_A&&(h.value="-",k=h.key,l={keyValue:h.key,propertyParams:[{propertyName:"value",propertyValue:"-"},{propertyName:"updatedBy",propertyValue:""},{propertyName:"updatedDate",propertyValue:""}]}),h.categoryItemType==I.PREVIOUS_VALUE_PISTON_B&&(h.value="-",k=h.key,u={keyValue:h.key,propertyParams:[{propertyName:"value",propertyValue:"-"},{propertyName:"updatedBy",propertyValue:""},{propertyName:"updatedDate",propertyValue:""}]}),h.categoryItemType==I.PREVIOUS_VALUE_PISTON_RESULT&&(h.value="-",k=h.key,f={keyValue:h.key,propertyParams:[{propertyName:"value",propertyValue:"-"},{propertyName:"updatedBy",propertyValue:""},{propertyName:"updatedDate",propertyValue:""}]}),h.categoryItemType==I.PREVIOUS_VALUE_UOM&&(h.value="-",k=h.key,T={keyValue:h.key,propertyParams:[{propertyName:"value",propertyValue:"-"},{propertyName:"updatedBy",propertyValue:""},{propertyName:"updatedDate",propertyValue:""}]}),h.categoryItemType==I.PREVIOUS_VALUE_PISTON_RATING&&(h.value="-",k=h.key,E={keyValue:h.key,propertyParams:[{propertyName:"value",propertyValue:"-"},{propertyName:"updatedBy",propertyValue:""},{propertyName:"updatedDate",propertyValue:""}]}),h.categoryItemType==I.PREVIOUS_VALUE_PISTON_PERCENTAGE&&(h.value="-",k=h.key,w={keyValue:h.key,propertyParams:[{propertyName:"value",propertyValue:"-"},{propertyName:"updatedBy",propertyValue:""},{propertyName:"updatedDate",propertyValue:""}]})});let v=[{keyValue:e.key,propertyParams:[{propertyName:"value",propertyValue:""},{propertyName:"updatedBy",propertyValue:""},{propertyName:"updatedDate",propertyValue:""}]},a,s,o,n,i,p,c,l,u,f,T,E,w];v=v.filter(h=>!m.isEmpty(h)),this.cameraStore.clearImageById(o.keyValue);const R={headerId:this.stateSelectedGroup.headerId,workorder:this.stateSelectedGroup.workOrder,id:this.stateSelectedGroup.id,updateParams:v,employee:this.employee,localStatus:this.generalFormStore.stateGeneralForm.status};if(S())await this.updateServiceSheetTaskOnLocalDB(v,e.key,k,!1,t);else{try{await y.post(`${B}?${new URLSearchParams(r).toString()}`,R),this.updateLocalServiceSheetByParam(v)}catch(h){D("fe_event_error_service_reset_cbm_task",{errorMessage:h}),N(h),g("IRONS",h),console.log(h)}await this.getTaskProgress(),await this.updateGroupByParam(this.stateSelectedGroup.groupName)}},async deleteDefect(e){const t={ver:"v1"},r={taskId:e.key,workorder:this.stateWorkOrder},s=(await y.post(`${we}?${new URLSearchParams(t).toString()}`,r)).data.result.content;if(!s)return;const o={id:s.id,updateParams:[{keyValue:s.key,propertyParams:[{propertyName:"isActive",propertyValue:"false"}]}],employee:this.employee};try{await y.post(`${Ne}?${new URLSearchParams(t).toString()}`,o)}catch(n){D("fe_event_error_service_form_delete_defect",{errorMessage:n}),N(n),g("IRONS",n),console.log(n)}},async deleteDefectOnLocal(e,t={}){if(t!=null&&t.ratingType){const r=await d.serviceSheetDefect.where({workorder:this.stateGeneralForm.workOrder,taskId:e.key,isActive:"true"}).toArray(),a=`- ${t.ratingType}`,s=r.find(o=>o.taskDesc.includes(a));await Ot(this.stateGeneralForm.workOrder,s==null?void 0:s.id,"false")}else await Ft(this.stateGeneralForm.workOrder,e.key,"false")},async updateItemFromTask(e,t=""){const r={ver:"v1"},a={headerId:this.stateSelectedGroup.headerId,workorder:this.stateSelectedGroup.workOrder,id:this.stateSelectedGroup.id,updateParams:e,employee:this.employee,localStatus:this.generalFormStore.stateGeneralForm.status};try{S()?(await d.pendingTask.add({module:"serviceForm",section:"E-Form",type:"Task",workorder:this.stateGeneralForm.workOrder,key:t,bindingKey:t,payload:JSON.stringify(a),syncDate:_(),syncStatus:"Pending"}),this.updateLocalServiceSheetByParam(e)):(await y.post(`${B}?${new URLSearchParams(r).toString()}`,a),this.updateLocalServiceSheetByParam(e))}catch(s){D("fe_event_error_service_form_post_item",{errorMessage:s}),N(s),g("IRONS",s),console.log(s)}await this.getTaskProgress(),await this.updateGroupByParam(this.stateSelectedGroup.groupName)},async updateSuspensionCylinderTask(e,t){const r=this.stateCBMFormulas.filter(i=>i.taskKey==e.key);console.log("task formulas",r);let a;t.value!=""&&r.every(i=>{const p=J(i,t.value),c=W(i,t.value);return a=q(p,c,i),console.log("checkMin",p,"checkMax",c,"formula",i),!a});const s=e.items.find(i=>i.categoryItemType=="suspensionTargetRating"),o=[{keyValue:e.key,propertyParams:[{propertyName:"updatedBy",propertyValue:t.value!=""?JSON.stringify(this.employee):""},{propertyName:"updatedDate",propertyValue:t.value!=""?P():""}]},{keyValue:s.key,propertyParams:[{propertyName:"value",propertyValue:t.value!=""&&a?a:""},{propertyName:"updatedBy",propertyValue:t.value!=""&&a?JSON.stringify(this.employee):""},{propertyName:"updatedDate",propertyValue:t.value!=""&&a?P():""}]},{keyValue:t.key,propertyParams:[{propertyName:"value",propertyValue:t.value},{propertyName:"updatedBy",propertyValue:t.value!=""?JSON.stringify(this.employee):""},{propertyName:"updatedDate",propertyValue:t.value!=""?P():""}]}];if(S())await this.updateServiceSheetTaskOnLocalDB(o,e.key,s.key,!1,e.groupTaskId);else{const i={taskKey:e.key,targetItem:s.key,bindingKey:e.groupTaskId};await this.updateItemServiceSheetDetail(o,i),await this.updateGroupByParam(this.stateSelectedGroup.groupName)}this.stateStoredSuspensionCylinderValue.forEach(i=>{s.key==i.key&&(i.value=a)}),console.log("this.stateStoredSuspensionCylinderValue",this.stateStoredSuspensionCylinderValue),this.stateStoredSuspensionCylinderValue.filter(i=>i.value=="Out of spec"||i.value=="Out Spec").length==1&&(a=="Out of spec"||a=="Out Spec")&&(this.stateShowSCConfirmToSPC=!0)},async updateAdjustmentSuspensionCylinderTask(e,t){const r=this.stateCBMFormulas.filter(n=>n.taskKey==t.mappingKeyId);console.log("task formulas",r);let a;r.every(n=>{const i=J(n,t.value),p=W(n,t.value);return a=q(i,p,n),console.log("checkMin",i,"checkMax",p,"formula",n),!a});const s=e.items.find(n=>n.categoryItemType=="adjustmentSuspensionTargetRating"),o=[{keyValue:e.key,propertyParams:[{propertyName:"updatedBy",propertyValue:t.value!=""?JSON.stringify(this.employee):""},{propertyName:"updatedDate",propertyValue:t.value!=""?P():""}]},{keyValue:s.key,propertyParams:[{propertyName:"value",propertyValue:t.value!=""&&a?a:""},{propertyName:"updatedBy",propertyValue:t.value!=""&&a?JSON.stringify(this.employee):""},{propertyName:"updatedDate",propertyValue:t.value!=""&&a?P():""}]}];S()?await this.updateServiceSheetTaskOnLocalDB(o,e.key,s.key,!1,e.groupTaskId):await this.updateItemServiceSheetDetail(o),this.checkAllAdjustedSCFilled({key:s.key,value:a})},toggleShowSCConfirmToSPV(e){this.stateShowSCConfirmToSPC=e},toggleShowSCdjustmentWarning(e){this.stateShowSCAdjustmentWarning=e},pushDataToSuspensionCylinderStoredValue(e){this.stateStoredSuspensionCylinderValue=e},pushDataToAdjustedSuspensionCylinderStoredValue(e){this.stateStoredAdjustedSuspensionCylinderValue=e},updateStoredAdjustmentOptionValue(e){this.stateStoredAdjustmentOptionValue=e},checkAllAdjustedSCFilled(e){this.stateStoredAdjustedSuspensionCylinderValue.forEach(r=>{r.key==e.key&&(r.value=e.value)});let t=!1;this.stateStoredAdjustedSuspensionCylinderValue.forEach(r=>{r.value==""&&(t=!0)}),!t&&!this.stateIsShowCalibrationConfirm&&(this.stateShowConfirmToCalibrateSC=!0,this.stateIsShowCalibrationConfirm=!0)},toggleIsShowCalibrationConfirm(e){this.stateIsShowCalibrationConfirm=e},toggleShowConfirmToCalibrateSC(e){this.stateShowConfirmToCalibrateSC=e},toggleShowPreTaskNotComplete(e){this.stateShowPreTaskNotComplete=e},async updateDefectCalibrationDropdown(e,t,r=""){var p,c;const a=G();console.log(e.description);const s={ver:"v1"},o=U(),n=U(),i={updateParams:[{keyValue:e.key,propertyParams:[{propertyName:"taskValue",propertyValue:t.value},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:P()}]},{keyValue:t.key,propertyParams:[{propertyName:"value",propertyValue:t.value},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:P()}]}],headerId:this.selectedGroup.headerId,workorder:this.selectedGroup.workOrder,id:(p=this.selectedGroup)==null?void 0:p.id,employee:this.employee,defectHeader:{workorder:this.generalForm.workOrder,form:this.generalForm.form,serviceSheetDetailId:(c=this.selectedGroup)==null?void 0:c.id,category:e.category,taskId:e.key,taskNo:e.description.split(";;")[0],taskDesc:e.description.split(";;")[1],defectWorkorder:"",formDefect:"BA-PL-F503",defectType:e.rating,cbmMeasurement:"",cbmUom:"",cbmImageKey:"",cbmImageProp:"",isCbmAdjusment:"",taskValue:2,repairedStatus:"Not-Repaired",cbmNAStatus:"Not-Confirm",supervisor:{id:a.user.EmployeeId,name:a.user.Name},status:"Acknowledge",isActive:"true",defectHeaderId:o,defectDetailId:n},defectDetail:{type:e.rating,title:e.description.split(";;")[1],assetNumber:this.generalForm.equipment,raisedBy:this.employee.name,date:P()}};try{let l=!1;const u={task:e,targetItem:t};if(S()?l=await this.updateDefectOnLocalDB(i,e,t,r):l=await this.updateDefectOnServer(s,i,u),!l)return l;this.stateMeasurementValue="",this.stateUOM="",this.stateImageKey="";const f=this.groups.find(T=>T.isSelected);return S()||(this.getTaskProgress(),this.updateGroupByParam(this.stateSelectedGroup.groupName)),this.updateStoredAdjustmentOptionValue(t.value),!0}catch(l){return N(l),console.log(l),!1}},updateStoredBrakeTypeValue(e){const t=this.stateStoredBrakeTypeValue.filter(r=>r.key==e.key);t.length==0?this.stateStoredBrakeTypeValue.push(e):t.forEach(r=>{r.value=e.value})},clearStoredBrakeTypeValue(){this.stateStoredBrakeTypeValue=[]},async handleScrollToUnfilledTask(){this.stateToggleExpandTaskGroup=!0;const e=Fe.service({lock:!0,text:"Scrolling to unfilled task",background:"rgba(0, 0, 0, 0.7)"});await Ye("task-required",500+this.stateTaskGroupClosed),this.stateToggleExpandTaskGroup=!1,e.close()},decreaseCollapse(){this.stateTaskGroupClosed>100&&(this.stateTaskGroupClosed-=100)},increaseeCollapse(){this.stateTaskGroupClosed+=100},resetCollapse(){this.stateTaskGroupClosed=100},async updateSkipPreServiceReasonOptions(){try{const e=await y.get(`${at}`),t=[];e.data.result.content.forEach(r=>{t.push(r.reason)}),await d.preServiceReason.clear(),t.forEach(async r=>{await d.preServiceReason.add(m.cloneDeep({reason:r}))}),t.push("Other"),this.stateSkipPreServiceReasonOptions=t}catch(e){D("fe_event_error_service_form_get_skip_pre_service_reason",{errorMessage:e}),g("IRONS",e)}},async updateSkipPreServiceReasonOptionsFromLocalDB(){const e=[];(await d.preServiceReason.toArray()).forEach(r=>{e.push(r.reason)}),e.push("Other"),this.stateSkipPreServiceReasonOptions=e},getFieldValueByKey(e,t){let r="";return this.stateServiceSheets.forEach(a=>{a.subGroup.forEach(s=>{if(s.key==e){for(const o in s)if(o==t)return r=s[o],r}s.taskGroup.forEach(o=>{if(o.key==e){for(const n in o)if(n==t)return r=o[n],r}o.task.forEach(n=>{if(n.taskType==="table"||n.taskType==="collapsibleTable")for(const i in n.items){const p=n.items[i];for(const c in p){const l=p[c];if(l.key==e){for(const u in l)if(u==t)return r=l[u],r}}}if(n.key==e){for(const i in n)if(i==t)return r=n[i],r}if(!m.isUndefined(n.adjustment)&&n.adjustment.key==e){for(const i in n.adjustment)if(i==t)return r=n.adjustment[i],r;return}if(!m.isUndefined(n.replacement)&&n.replacement.key==e){for(const i in n.replacement)if(i==t)return r=n.replacement[i],r;return}if(!m.isUndefined(n.cleaned)&&n.cleaned.key==e){for(const i in n.cleaned)if(i==t)return r=n.cleaned[i],r;return}n.items.forEach(i=>{if(i.key==e){for(const p in i)if(p==t)return r=i[p],r}})})})})}),r},updateFieldValueByKey(e,t,r){this.stateSelectedSubGroups.forEach(a=>{if(a.key==e){for(const s in a)if(s==t){a[s]=r,this.updateServiceDetailToLocalDB();return}}a.taskGroup.forEach(s=>{if(s.key==e){for(const o in s)if(o==t){s[o]=r,this.updateServiceDetailToLocalDB();return}}s.task.forEach(o=>{if(o.taskType==="table"||o.taskType==="collapsibleTable")for(const n in o.items){const i=o.items[n];for(const p in i){const c=i[p];if(c.key==e){for(const l in c)if(l==t){c[l]=r,this.updateServiceDetailToLocalDB();return}}}}if(o.key==e){for(const n in o)if(n==t){o[n]=r,this.updateServiceDetailToLocalDB();return}o[t]=r,this.updateServiceDetailToLocalDB();return}if(!m.isUndefined(o.adjustment)&&o.adjustment.key==e){for(const n in o.adjustment)n==t&&(o.adjustment[n]=r,this.updateServiceDetailToLocalDB());return}if(!m.isUndefined(o.replacement)&&o.replacement.key==e){for(const n in o.replacement)n==t&&(o.replacement[n]=r,this.updateServiceDetailToLocalDB());return}if(!m.isUndefined(o.cleaned)&&o.cleaned.key==e){for(const n in o.cleaned)n==t&&(o.cleaned[n]=r,this.updateServiceDetailToLocalDB());return}o.items.forEach(n=>{if(n.key==e){for(const i in n)if(i==t){n[i]=r,this.updateSelectedSubGroupToServiceSheetsArr();return}}})})})})},updateSelectedSubGroupToServiceSheetsArr(){this.stateServiceSheets.forEach(e=>{var t;e.groupName==((t=this.stateSelectedGroup)==null?void 0:t.groupName)&&(e.subGroup=this.stateSelectedSubGroups)}),this.getGroups()},async updateServiceSheetTaskOnLocalDB(e,t,r,a=!1,s=""){let o=!1;const n={headerId:this.stateSelectedGroup.headerId,workorder:this.stateSelectedGroup.workOrder,id:this.stateSelectedGroup.id,updateParams:e,employee:{id:this.employee.id,name:this.employee.name},localStatus:this.generalFormStore.stateGeneralForm.status};return a&&(n.taskKey=t),this.stateTaskUpdated=!1,await F(this.stateGeneralForm.workOrder,r),await d.pendingTask.add({module:"serviceForm",section:"E-Form",type:"Task",key:t,bindingKey:s??t,workorder:this.stateGeneralForm.workOrder,payload:JSON.stringify(n),syncDate:_(),itemKey:r,syncStatus:"Pending"}),this.updateLocalServiceSheetByParam(e),await this.updateServiceDetailToLocalDB(),this.updateTaskProgressOnLocalDB2(),o=!0,this.setTaskUpdated(),this.stateTaskUpdated=!0,await this.getPreviousBrakePackValue(),o},async updateTaskProgressOnLocalDB2(){let e=0;const t=[],r=[],a=[];this.stateSelectedSubGroups.filter(i=>i.taskGroup.some(p=>p.task.some(c=>{m.isUndefined(c.taskValue)||(c.groupTaskId?(r.includes(c.groupTaskId)||r.push(c.groupTaskId),t.push(c)):a.push(c))})));let s=0;r.forEach(i=>{const p=t.filter(w=>w.groupTaskId==i),c=[];let l=0,u=!1,f="",T=!1,E=!1;if(p.forEach((w,k)=>{w!=null&&w.parentGroupTaskId&&(T=!0),c.push(w.taskValue),(w.category=="NORMAL"||w.category=="CBM"&&w.rating=="NORMAL"||w.category=="CRACK")&&(f=w.category,l++,k+1==p.length&&(u=!0)),w.items.forEach(V=>{V!=null&&V.disabledByItemKey&&(E=!0)})}),T){const w=[];let k=0,V=0;p.forEach((v,R)=>{v!=null&&v.parentGroupTaskId?w.includes(v==null?void 0:v.parentGroupTaskId)||(w.push(v==null?void 0:v.parentGroupTaskId),k++):v!=null&&v.childGroupTaskId?w.includes(v==null?void 0:v.childGroupTaskId)||(w.push(v==null?void 0:v.childGroupTaskId),k++):(k++,v.taskValue&&V++)}),w.forEach(v=>{const R=p.filter(O=>{const L=(O==null?void 0:O.parentGroupTaskId)==v,M=(O==null?void 0:O.childGroupTaskId)==v;return L||M}),h=[];if(R.forEach(O=>{if(O!=null&&O.parentGroupTaskId){if(O.taskValue){V++;return}}else h.push(O)}),h.length>0){let O=0,L=0;h.forEach(M=>{O++,M.taskValue&&L++}),O==L&&V++}}),V==k&&s++}else c.includes("")?l>0&&(l==1?u?c.includes("")||s++:f=="NORMAL"||f=="CBM"?c.includes("3")&&E&&s++:f=="CRACK"&&c.includes("4")&&E&&s++:c.includes("")||s++):s++});let o=0;a.forEach(i=>{i.taskValue&&o++}),e=s+o,this.stateTaskProgress.forEach(i=>{var p;i.group==((p=this.selectedGroup)==null?void 0:p.groupName)&&(i.doneTask=e)}),this.stateGroups.forEach(i=>{i.groupName==this.stateSelectedGroup.groupName&&(i.doneTask=e)}),this.stateServiceSheets.forEach(i=>{i.groupName==this.stateSelectedGroup.groupName&&(i.doneTask=e)});const n=this.stateServiceSheets.find(i=>i.groupName=="DEFECT_IDENTIFIED_SERVICE");if(n){let i=0;const p=await d.serviceSheetDefect.where({workorder:this.stateGeneralForm.workOrder,isActive:"true"}).toArray();p&&(i=p.length),n.totalTask=i,n.doneTask=i}this.updateServiceDetailToLocalDB()},async updateServiceDetailToLocalDB(){this.updateSelectedSubGroupToServiceSheetsArr();let e=m.cloneDeep(this.stateServiceSheets);const t=m.cloneDeep(this.stateGeneralForm);e=e.filter(r=>r.groupName!="General"),await d.serviceSheetDetail.update(this.generalForm.workOrder,m.cloneDeep({id:this.generalForm.workOrder,general:t,serviceSheet:e}))},updateSelectedSubGroupFromServiceSheets(){this.stateServiceSheets.forEach(e=>{var t;e.groupName==((t=this.stateSelectedGroup)==null?void 0:t.groupName)&&(this.stateSelectedSubGroups=e.subGroup)})},updateLocalServiceSheetByParam(e){e.forEach(t=>{t.propertyParams.forEach(r=>{let a=r.propertyValue;if(a&&isNaN(a)){if(a.includes("[")||a.includes("]"))try{a=JSON.parse(a)}catch{a=r.propertyValue}r.propertyName=="updatedBy"&&r.propertyValue!=""&&(a=JSON.parse(a))}this.updateFieldValueByKey(t.keyValue,r.propertyName,a)})})},async updateDefectHeaderWithTaskKey(e,t,r,a=""){const s={ver:"v1"};try{const o=this.groups.find(i=>i.isSelected),n={serviceSheetDetailId:this.stateSelectedGroup.id,workorder:this.generalForm.workOrder,taskKey:e,updateParams:t,employee:{id:this.employee.id,name:this.employee.name},localStatus:this.generalFormStore.stateGeneralForm.status};a!=""&&(n.cbmRatingType=a),this.stateTaskUpdated=!1,S()?await d.pendingTask.add({module:"serviceForm",section:"E-Form",type:"UpdateDefect",workorder:this.stateGeneralForm.workOrder,key:e,bindingKey:e,payload:JSON.stringify(n),syncDate:_(),itemKey:r,syncStatus:"Pending"}):await y.post(`${x}?${new URLSearchParams(s).toString()}`,n)}catch(o){D("fe_event_error_service_form_update_defect_with_task_key",{errorMessage:o});const n=this.globalConnectionStore.checkIsErrorNoNetwork(o);this.globalConnectionStore.setSubmitConnectionError(n),N(o),g("IRONS",o)}},setDropdownToolGroup(e,t){t!=""?(this.stateDropdownToolGroup[e].isFilled=!0,this.stateDropdownToolGroup[e].value=t):(this.stateDropdownToolGroup[e].isFilled=!1,this.stateDropdownToolGroup[e].value="")},getTaskDataBasedOnTaskKey(e){let t={};return this.stateSelectedSubGroups.forEach(r=>{r.taskGroup.forEach(a=>{a.task.forEach(s=>{s.key==e&&(t=s)})})}),t},async resetCBMAutomation(e,t=""){const r=[{propertyName:"updatedBy",propertyValue:""},{propertyName:"updatedDate",propertyValue:""}],a=[{keyValue:e.key,propertyParams:[{propertyName:"taskValue",propertyValue:""},...r]}],s=[];e.adjustment&&s.push({keyValue:e.adjustment.key,propertyParams:[{propertyName:"measurement",propertyValue:""},{propertyName:"rating",propertyValue:""},{propertyName:"pictures",propertyValue:JSON.stringify([])},{propertyName:"createdBy",propertyValue:""},{propertyName:"createdDate",propertyValue:""},{propertyName:"commentValue",propertyValue:""},...r]});const o=[],n=["paramRating","targetRating"];e.items.forEach(p=>{(p.itemType=="input"&&n.includes(p.categoryItemType)||p.itemType=="smallCamera")&&o.push({keyValue:p.key,propertyParams:[{propertyName:"value",propertyValue:""},...r]})});const i=[...a,...o,...s];S()?await this.updateServiceSheetTaskOnLocalDB(i,e.key,`resetCBM-${e.key}`,!1,t):await this.updateServiceSheetTaskValue(i,"",""),await _t(this.generalForm.workOrder,e.key),console.log("end reset task")},async getCrackBulkData(){let e=!1,t=!1;if(this.stateServiceSheets.forEach(r=>{r.key=="CHASSIS_CRACK_SERVICE"&&(m.isUndefined(r.isDisable)||r.isDisable=="false")&&(e=!0)}),(this.stateGeneralForm.status=="On Progress"||this.stateGeneralForm.status=="Open")&&(t=!0),e&&t){const r={workOrder:this.stateWorkOrder,ver:"v1"};try{const a=await y.get(`${Re}`,"",new URLSearchParams(r).toString());this.statePreviousCrackArr=a.data.result.content;const s=m.cloneDeep(a.data.result.content),o=d.previousCrack.where({workOrder:this.stateWorkOrder});o&&o.delete(),s.forEach(async n=>{await d.previousCrack.add({taskId:n.taskId,workOrder:this.stateWorkOrder,previousCrack:n.previousCrack})})}catch(a){g("IRONS",a),console.log("error get previous each wo")}}},async handleGetAndUpdatePreviousTandem(e){let t=!1,r=!1,a=!1,s=!1;if(e.serviceSheet.forEach(o=>{this.statePreviousTandemTasks=[],o.subGroup,o.subGroup.forEach(n=>{n.taskGroup.forEach(i=>{i.task.forEach(p=>{if(p.rating=="AUTOMATIC_PREVIOUS"){t=!0;const c={};t=!0,c.key=p.key,this.statePreviousTandemTasks.push(p.key),p.items.forEach(l=>{l.categoryItemType=="previousParamRating"&&(l.value!=""&&l.value!="-"&&(a=!0),c.value=l.value)}),this.stateNewPreviousTandemTasks.push(c)}else if(p.rating=="AUTOMATIC_PREVIOUS_GROUP"){r=!0;const c={};r=!0,c.key=p.key,this.statePreviousTandemTasks.push(p.key),p.items.forEach(l=>{l.categoryItemType=="previousParamRating"&&(l.value!=""&&l.value!="-"&&(s=!0),c.value=l.value)}),this.stateNewPreviousTandemTasks.push(c)}})})})}),t&&!a||r&&!s){const o={ver:"v1"};try{const n=await y.post(`${X}?${new URLSearchParams(o).toString()}`,{equipmentNumber:e.general.equipment,modelId:e.general.modelId});let i=[];i=n.data.result.content?n.data.result.content:[],await d.serviceFormPreviousTandem.put({id:e.general.workOrder,previousTandem:m.cloneDeep(i)})}catch(n){g("IRONS",n),console.log("error get tandem",n)}}},async handleGetAndUpdatePreviousReplacement(e){const t=[];if(e.serviceSheet.forEach(r=>{if((r==null?void 0:r.key)=="ELECTRICAL_SERVICE"){const s=he(r).getTaskReplacementInSubGroup(r.subGroup),o=this.getReplacementMappingGroupTaskId(s);for(const n of o){const i=this.getReplacementPerGroupTask(s,n);!this.checkIfAnyRatingValueSet(i)&&t.push(...i)}}}),t.length>0){const r={ver:"v1"};try{const a=await y.post(`${X}?${new URLSearchParams(r).toString()}`,{equipmentNumber:e.general.equipment,modelId:e.general.modelId});let s=[];s=a.data.result.content?a.data.result.content:[],console.log("previousTandemArr",s),await d.serviceFormPreviousReplacement.put({id:e.general.workOrder,previousTandem:m.cloneDeep(s)})}catch(a){g("IRONS",a),console.log("error get prev replacement",a)}}},setSerialNumberGeneral(e){this.stateGeneralForm.serialNumber=e},checkIfAnyPreviousValueNotSet(e){let t=!1;for(const r of e){const a=r.items.find(s=>s.categoryItemType==="previousParamRating");if(a&&(t=!a.value||a.value=="-",t))break}return t},getAllReplacementTasks(){return this.stateSelectedGroup?he(this.stateSelectedGroup).getTaskReplacementInSubGroup(this.stateSelectedSubGroups):[]},getReplacementMappingGroupTaskId(e){const t=e.map(r=>r.groupTaskId??"");return new Set(t)},getReplacementPerGroupTask(e,t){return e.filter(r=>r.groupTaskId==t)},isAllTaskAlreadyHaveRating(e){let t=!0;for(const r of e){const a=r.items.find(s=>s.categoryItemType=="targetRating");if(a&&(t=a.value!=""),!t)break}return t},checkIfAnyRatingValueSet(e){let t=!1;for(const r of e){const a=r.items.find(s=>s.categoryItemType==="targetRating");if(a&&(t=a.value!="",t))break}return t},async getPreviousReplacementValueFromAPI(){if(S()){const e=await d.serviceFormPreviousReplacement.where({id:`${this.generalForm.workOrder}`}).first();e&&(this.statePreviousReplacement=e.previousTandem)}else{const e={ver:"v1"},t=await y.post(`${X}?${new URLSearchParams(e).toString()}`,{equipmentNumber:this.generalForm.equipment,modelId:this.generalForm.modelId});await d.serviceFormPreviousReplacement.put({id:this.stateGeneralForm.workOrder,previousTandem:m.cloneDeep(t.data.result.content)}),this.statePreviousReplacement=t.data.result.content}},async updatePreviousReplacementValue(e){for(const t of e){const r=t.items.find(o=>o.categoryItemType==="previousParamRating");if(!r)continue;this.statePreviousReplacement.length<1&&await this.getPreviousReplacementValueFromAPI();const a=this.statePreviousReplacement.find(o=>o.key==t.key),s=[{keyValue:r.key,propertyParams:[{propertyName:"value",propertyValue:H(a)}]}];try{S()?await this.updateServiceSheetTaskOnLocalDB(s,t.key,r.key):await this.updateItemServiceSheetDetail(s),r.value=H(a)}catch(o){console.log(`error when update previous value replacement to server with key ${r.key}`,o)}}await this.updateGroupByParam("ELECTRICAL_SERVICE")},async getPreviousReplacementValue(e){if(!this.stateSelectedGroup||this.stateSelectedGroup.key!="ELECTRICAL_SERVICE")return;const t=this.getAllReplacementTasks(),r=this.getReplacementMappingGroupTaskId(t),a=[];for(const s of r){const o=this.getReplacementPerGroupTask(t,s);!this.checkIfAnyRatingValueSet(o)&&a.push(...o)}try{if(a.length<1)return;e||await this.getPreviousReplacementValueFromAPI();for(const s of this.statePreviousReplacement){const o=a.find(i=>i.key===s.key);if(!o)continue;const n=o.items.find(i=>i.categoryItemType==="previousParamRating");n&&(n.value=H(s))}}catch(s){console.log("error when getting previous value replacement from server",s)}},async getReplacementRating(e){var p,c,l;const t={ver:"v1"};let r;if(e.mappingToolGroup)for(const u in this.stateDropdownToolGroup)u==e.mappingToolGroup&&this.stateDropdownToolGroup[u].value;const a=this.stateCBMFormulas.filter(u=>u.taskKey==e.key&&u.cbmType=="CBM");console.log(a),a.length>0&&a.every(u=>{const f=J(u,e.replacement.measurement),T=W(u,e.replacement.measurement);return r=q(f,T,u),console.log("checkMin",f,"checkMax",T,"formula",u,"value rossi",e.replacement.measurement),!r}),e.replacement.rating=e.replacement.measurement?r:"";const s=e.replacement.measurement&&e.replacement.rating;if(s){let u={};u={isCbmAdjusment:"true",isActive:"true",correctedValue:r,correctedMeasurement:e.replacement.measurement,correctedUom:e.replacement.uom};const f={serviceSheetDetailId:(p=this.selectedGroup)==null?void 0:p.id,workorder:this.generalForm.workOrder,taskKey:e.key,updateParams:[{keyValue:"",propertyParams:[{propertyName:"isCbmAdjusment",propertyValue:"true"},{propertyName:"isActive",propertyValue:"true"},{propertyName:"correctedMeasurement",propertyValue:e.replacement.measurement},{propertyName:"correctedValue",propertyValue:r},{propertyName:"correctedUom",propertyValue:e.replacement.uom}]}],employee:this.employee};try{S()?await this.updaterePlacementDefectOnLocalDB(e,u,f,!0):await y.post(`${x}?${new URLSearchParams(t).toString()}`,f)}catch(T){N(T),g("IRONS",T),console.log(T)}}const o={keyValue:e.replacement.key,propertyParams:[{propertyName:"measurement",propertyValue:s?e.replacement.measurement:""},{propertyName:"rating",propertyValue:s?e.replacement.rating:""},{propertyName:"updatedBy",propertyValue:s?JSON.stringify(this.employee):""},{propertyName:"updatedDate",propertyValue:s?P():""}]};e.replacement.createdDate==""&&(o.propertyParams=[...o.propertyParams,{propertyName:"createdBy",propertyValue:s?JSON.stringify(this.employee):""},{propertyName:"createdDate",propertyValue:s?P():""}]);const n=[o],i={headerId:(c=this.stateSelectedGroup)==null?void 0:c.headerId,workorder:this.stateWorkOrder,id:(l=this.stateSelectedGroup)==null?void 0:l.id,updateParams:n,employee:this.employee};try{if(S())await F(this.stateGeneralForm.workOrder,`replacement-rating-${e.key}`),await F(this.stateGeneralForm.workOrder,`reset-replacement-${e.key}`),await d.pendingTask.add({module:"serviceForm",section:"E-Form",type:"Task",workorder:this.stateGeneralForm.workOrder,key:e.key,bindingKey:e.key,payload:JSON.stringify(i),syncDate:_(),itemKey:`replacement-rating-${e.key}`,syncStatus:"Pending"}),this.updateLocalServiceSheetByParam(n);else{const u=await y.post(`${B}?${new URLSearchParams(t).toString()}`,i);u.data.result.message==A.SUBMITTED&&(this.stateFormAlreadySubmitted=!0),u.data.result.message==A.CLOSE&&(this.stateFormAlreadyClose=!0),this.getTaskProgress(),this.updateGroupByParam(this.stateSelectedGroup.groupName)}}catch(u){D("fe_event_error_post_service_sheet_data",{errorMessage:u}),N(u),g("IRONS",u),console.log(u)}return r},async deleteReplacementTask(e){var i;const t={ver:"v1"};e.key,this.stateWorkOrder;let r="";e.items.forEach(p=>{p.itemType=="smallCamera"&&p.key,p.categoryItemType=="paramRating"&&(r=p.value)});const a={taskValue:e.taskValue,cbmMeasurement:r,isCbmAdjusment:"false",isActive:"true",correctedValue:"",correctedMeasurement:"",correctedUom:""},s={serviceSheetDetailId:this.selectedGroup.id,workorder:this.generalForm.workOrder,taskKey:e.key,updateParams:[{keyValue:"",propertyParams:[{propertyName:"taskValue",propertyValue:e.taskValue},{propertyName:"cbmMeasurement",propertyValue:r},{propertyName:"isCbmAdjusment",propertyValue:"false"},{propertyName:"isActive",propertyValue:"true"},{propertyName:"correctedValue",propertyValue:""},{propertyName:"correctedMeasurement",propertyValue:""},{propertyName:"correctedUom",propertyValue:""}]}],employee:this.employee};try{S()?await this.updaterePlacementDefectOnLocalDB(e,a,s):await y.post(`${x}?${new URLSearchParams(t).toString()}`,s)}catch(p){N(p),g("IRONS",p),console.log(p)}const o=[{keyValue:e.replacement.key,propertyParams:[{propertyName:"measurement",propertyValue:""},{propertyName:"rating",propertyValue:""},{propertyName:"updatedBy",propertyValue:""},{propertyName:"updatedDate",propertyValue:""},{propertyName:"createdBy",propertyValue:""},{propertyName:"createdDate",propertyValue:""},{propertyName:"commentValue",propertyValue:""}]}],n={headerId:(i=this.stateSelectedGroup)==null?void 0:i.headerId,workorder:this.stateWorkOrder,id:this.stateSelectedGroup.id,updateParams:o,employee:this.employee,localStatus:this.generalFormStore.stateGeneralForm.status};try{if(S())await F(this.stateGeneralForm.workOrder,`camera-replacement-${e.key}`),await F(this.stateGeneralForm.workOrder,`changeComment-${e.replacement.key}`),await F(this.stateGeneralForm.workOrder,`replacement-rating-${e.key}`),await d.pendingTask.add({module:"serviceForm",section:"E-Form",type:"Task",workorder:this.stateGeneralForm.workOrder,key:e.key,bindingKey:e.key,payload:JSON.stringify(n),syncDate:_(),itemKey:`reset-replacement-${e.key}`,syncStatus:"Pending"}),this.updateLocalServiceSheetByParam(o);else{const p=await y.post(`${B}?${new URLSearchParams(t).toString()}`,n);p.data.result.message==A.SUBMITTED&&(this.stateFormAlreadySubmitted=!0),p.data.result.message==A.CLOSE&&(this.stateFormAlreadyClose=!0),this.updateLocalServiceSheetByParam(o),this.getTaskProgress(),this.updateGroupByParam(this.stateSelectedGroup.groupName)}}catch(p){D("fe_event_error_post_service_sheet_task",{errorMessage:p}),N(p),g("IRONS",p),console.log(p)}},getCameraItem(e){return this.getTaskReplacement(e).find(r=>r.rating==="CAB_SIDE")},getTaskReplacement(e){const t=[];return this.stateSelectedSubGroups[0].taskGroup.forEach(r=>{const a=r.task.filter(s=>s.groupTaskId===e);t.push(...a)}),t},async getTask(e,t,r){try{const a={id:e,keyValue:t,propertyName:r};return(await y.post(`${st}`,a)).data.result.content}catch(a){return g("IRONS",a),a}},async getReplacementDefault(e){try{let t={};const r=await d.serviceFormReplacementDefaultValue.where({id:this.generalForm.workOrder}).first();if(r&&(console.log("localDefaultValues",r),r.defaultValues.every(a=>(console.log("loop",a),a.taskId===e.taskId?(t=a,!1):!0))),m.isEmpty(t)&&!S()){const a=new URLSearchParams({ver:"v1"}).toString();t=(await y.post(`${ot}?${a}`,e)).data.result.content}return this.stateReplacementValue=t.defaultValue,this.stateReplacementValue}catch(t){return g("IRONS",t),t}finally{this.toggleIsReplaceValue(!0)}},async getCBMResultGap(e,t){var p,c;const r=this.getCBMFormula(e.key);if(r.length<1)return this.stateRatingNotMapped=!0,{value:"",status:!1};if(!t.value)return await this.deleteExisitingDefectCBMAuto(e),{value:"",status:!0};const a=Number(t.value);if(a>52)throw await this.deleteExisitingDefectCBMAuto(e),Error("value is out of range");let s="A";const o=r.filter(l=>l.cbmType=="CBM_GAP");if(this.isAnyPreviousMeasurement(e)){const l=e.items.find(T=>T.categoryItemType=="previousParamRating"),u=Number(l.value);if(a>u)throw Error("value is out of range");const f=Math.abs(a-u).toFixed(2);s=this.getCBMRatingValue(o,f.toString())}if(!s)return await this.deleteExisitingDefectCBMAuto(e),{value:"",status:!0};const i=e.items.find(l=>l.categoryItemType=="targetRating");if(s=="C"||s=="X"){const l=G(),u={ver:"v1"},f=`${e.description.split(";")[0]};${e.description.split(";")[1]}`,T=U(),E=U(),w={updateParams:[{keyValue:e.key,propertyParams:[{propertyName:"taskValue",propertyValue:s},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:P()}]},{keyValue:i.key,propertyParams:[{propertyName:"value",propertyValue:s},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:P()}]}],headerId:this.selectedGroup.headerId,workOrder:this.selectedGroup.workOrder,id:(p=this.selectedGroup)==null?void 0:p.id,employee:this.employee,defectHeader:{workorder:this.generalForm.workOrder,form:this.generalForm.form,serviceSheetDetailId:(c=this.selectedGroup)==null?void 0:c.id,category:e.category,taskId:e.key,taskNo:f,taskDesc:e.items[2].value,defectWorkorder:"",formDefect:"",defectType:"",cbmMeasurement:this.stateMeasurementValue,cbmUom:this.stateUOM,cbmImageKey:this.stateImageKey,cbmImageProp:"value",isCbmAdjusment:"false",taskValue:s,repairedStatus:"Not-Repaired",cbmNAStatus:"Not-Confirm",supervisor:{id:l.user.EmployeeId,name:l.user.Name},status:"Submit",defectStatus:"Submited",isActive:"true",defectHeaderId:T,defectDetailId:E}};let k=!1;return S()?(!m.isUndefined(i.isTaskValue)&&i.isTaskValue,k=await this.updateDefectOnLocalDB(w,e,i)):k=await this.updateDefectOnServer(u,w),k?(this.stateMeasurementValue="",this.stateUOM="",this.stateImageKey="",{value:s,status:!0}):{value:"",status:k}}else{i.value=s;const l=[{keyValue:i.key,propertyParams:[{propertyName:"value",propertyValue:s},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:P()}]},{keyValue:e.key,propertyParams:[{propertyName:"taskValue",propertyValue:s},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:P()}]}];return S()?(!m.isUndefined(i.isTaskValue)&&i.isTaskValue,this.updateServiceSheetTaskOnLocalDB(l,e.key,i==null?void 0:i.key),Y(this.stateGeneralForm.workOrder,e.key,"false")):(await this.updateServiceSheetTaskValue(l,this.employee.id.toString(),this.employee.name,!1),Y(this.stateGeneralForm.workOrder,e.key,"false")),{value:s,status:!0}}},async updateParamRatingItem(e,t,r){const a=[{keyValue:t,propertyParams:[{propertyName:"value",propertyValue:r},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}];(r=="A"||r=="B")&&a.push({keyValue:e,propertyParams:[{propertyName:"taskValue",propertyValue:r},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}),S()?await this.updateServiceSheetTaskOnLocalDB(a,e,t,!0):await this.updateServiceSheetTaskValue(a,this.employee.id.toString(),this.employee.name,!1)},createCBMDefect(e,t){var n,i;const r=G(),a={ver:"v1"},s=`${e.description.split(";")[0]};${e.description.split(";")[1]}`,o={updateParams:[{keyValue:e.key,propertyParams:[{propertyName:"taskValue",propertyValue:t},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}],headerId:this.selectedGroup.headerId,workOrder:this.selectedGroup.workOrder,id:(n=this.selectedGroup)==null?void 0:n.id,employee:this.employee,defectHeader:{workorder:this.generalForm.workOrder,form:this.generalForm.form,serviceSheetDetailId:(i=this.selectedGroup)==null?void 0:i.id,category:e.category,taskId:e.key,taskNo:s,taskDesc:e.items[2].value,defectWorkorder:"",formDefect:"",defectType:"",cbmMeasurement:this.stateMeasurementValue,cbmUom:this.stateUOM,cbmImageKey:this.stateImageKey,cbmImageProp:"value",isCbmAdjusment:"false",taskValue:t,repairedStatus:"Not-Repaired",cbmNAStatus:"Not-Confirm",supervisor:{id:r.user.EmployeeId,name:r.user.Name},status:"Submit"}};return y.post(`${Ee}?${new URLSearchParams(a).toString()}`,o)},getCBMRatingValue(e,t){let r="";return e.every(a=>{const s=J(a,t),o=W(a,t);return r=q(s,o,a),console.log("checkMin",s,"checkMax",o,"formula",a),!r}),r},isAnyPreviousMeasurement(e){const t=e.items.find(r=>r.categoryItemType=="previousParamRating");return t?t.value&&t.value!="-":!1},getCBMFormula(e){return this.stateCBMFormulas.filter(t=>t.taskKey==e)},async getReplacementDefaultBulk(e,t){try{const r=new URLSearchParams({ver:"v1"}).toString(),a={...e,type:"serviceSheet"},o=(await y.post(`${it}?${r}`,a)).data.result.content??[];console.log("defaultValueArr",o),await d.serviceFormReplacementDefaultValue.put({id:t,defaultValues:m.cloneDeep(o)})}catch(r){g("IRONS",r),console.log("error get bulk default values",r)}},async resetAdjustmentCalibration(){const e=G(),t=[];let r="",a="";for(const s of this.stateSelectedSubGroups)for(const o of s.taskGroup)if(o.key=="MECHANICAL_SERVICE_SUSPENSION"){for(const n of o.task)if(n.showParameter&&n.showParameter=="cylinderHeightNeedAdjustment"){if(n.groupTaskId&&(a=n.groupTaskId,r=n.groupTaskId),n.updatedDate){const i={keyValue:n.key,propertyParams:[{propertyName:"updatedBy",propertyValue:""},{propertyName:"updatedDate",propertyValue:""}]};t.push(i)}for(const i of n.items){const p=i.categoryItemType&&i.categoryItemType=="adjustmentSuspensionRating",c=i.valueItemType&&i.valueItemType=="comment",l=i.categoryItemType&&i.categoryItemType=="adjustmentSuspensionTargetRating";if((p||c||l)&&i.value){const u={keyValue:i.key,propertyParams:[{propertyName:"value",propertyValue:""},{propertyName:"updatedBy",propertyValue:""},{propertyName:"updatedDate",propertyValue:""}]};t.push(u)}}}}for(const s of this.stateStoredAdjustedSuspensionCylinderValue)s.value="";t.length>0&&(S()?await this.updateServiceSheetTaskOnLocalDB(t,r,`resetAdjustment-${a}`,!1,a):await this.updateServiceSheetTaskValue(t,e.user.EmployeeId,e.user.Name))},async getCleanedRating(e,t=""){var p;const r={ver:"v1"};let a={};a={cbmImageKey:e.cleaned.key,cbmImageProp:"pictures",isCbmAdjusment:"true",isActive:"true",correctedValue:e.cleaned.rating};const s={serviceSheetDetailId:this.selectedGroup.id,workorder:this.generalForm.workOrder,taskKey:e.key,updateParams:[{keyValue:"",propertyParams:[{propertyName:"cbmImageKey",propertyValue:e.cleaned.key},{propertyName:"cbmImageProp",propertyValue:"pictures"},{propertyName:"isCbmAdjusment",propertyValue:"true"},{propertyName:"isActive",propertyValue:"true"},{propertyName:"correctedValue",propertyValue:e.cleaned.rating}]}],employee:this.employee};try{S()?await this.updateAdjustmentDefectOnLocalDB(e,a,s,!0,t):await y.post(`${x}?${new URLSearchParams(r).toString()}`,s)}catch(c){D("fe_event_error_service_form_update_adjustment_task",{errorMessage:c}),N(c),console.log(c)}const o={keyValue:e.cleaned.key,propertyParams:[{propertyName:"rating",propertyValue:e.cleaned.rating},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:P()}]};e.cleaned.createdDate==""&&(o.propertyParams=[...o.propertyParams,{propertyName:"createdBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"createdDate",propertyValue:P()}]);const n=[o],i={headerId:(p=this.selectedGroup)==null?void 0:p.headerId,workorder:this.stateWorkOrder,id:this.selectedGroup.id,updateParams:n,employee:this.employee,localStatus:this.generalFormStore.stateGeneralForm.status};try{if(S())await F(this.stateGeneralForm.workOrder,`cleaned-rating-${e.key}`),await F(this.stateGeneralForm.workOrder,`reset-cleaned-${e.key}`),await d.pendingTask.add({module:"serviceForm",section:"E-Form",type:"Task",workorder:this.stateGeneralForm.workOrder,key:e.key,bindingKey:t,payload:JSON.stringify(i),syncDate:_(),itemKey:`cleaned-rating-${e.key}`,syncStatus:"Pending"}),this.updateLocalServiceSheetByParam(n);else{const c=await y.post(`${B}?${new URLSearchParams(r).toString()}`,i);this.updateLocalServiceSheetByParam(n),c.data.result.message==A.SUBMITTED&&(this.stateFormAlreadySubmitted=!0),this.getTaskProgress(),this.updateGroupByParam(this.stateSelectedGroup.groupName)}}catch(c){D("fe_event_error_service_form_update_cleaned_task",{errorMessage:c}),N(c),console.log(c)}return e.cleaned.rating},async addCBMCleanedPictures(e){var o;const t={ver:"v1"},a=[{keyValue:e.cleaned.key,propertyParams:[{propertyName:"pictures",propertyValue:JSON.stringify(e.cleaned.pictures)},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:P()}]}],s={headerId:(o=this.selectedGroup)==null?void 0:o.headerId,workorder:this.stateWorkOrder,id:this.selectedGroup.id,updateParams:a,employee:this.employee,localStatus:this.generalFormStore.stateGeneralForm.status};try{S()?(await F(this.stateGeneralForm.workOrder,`camera-cleaned-${e.key}`),await d.pendingTask.add({module:"serviceForm",section:"E-Form",type:"Task",workorder:this.stateGeneralForm.workOrder,key:e.key,bindingKey:e.key,payload:JSON.stringify(s),syncDate:_(),itemKey:`camera-cleaned-${e.key}`,syncStatus:"Pending"}),this.updateLocalServiceSheetByParam(a)):((await y.post(`${B}?${new URLSearchParams(t).toString()}`,s)).data.result.message==A.SUBMITTED&&(this.stateFormAlreadySubmitted=!0),this.updateLocalServiceSheetByParam(a),this.getTaskProgress(),this.updateGroupByParam(this.stateSelectedGroup.groupName))}catch(n){D("fe_event_error_service_form_post_cleaned_image",{errorMessage:n}),N(n),console.log(n)}},async deleteCleanedTask(e,t=""){var p;const r={ver:"v1"};let a="";e.items.forEach(c=>{c.itemType=="smallCamera"&&(a=c.key)});const s={taskValue:e.taskValue,cbmImageKey:a,cbmImageProp:"value",isCbmAdjusment:"false",isActive:"true",correctedValue:"",correctedUom:""},o={serviceSheetDetailId:this.selectedGroup.id,workorder:this.generalForm.workOrder,taskKey:e.key,updateParams:[{keyValue:"",propertyParams:[{propertyName:"taskValue",propertyValue:e.taskValue},{propertyName:"cbmImageKey",propertyValue:a},{propertyName:"cbmImageProp",propertyValue:"value"},{propertyName:"isCbmAdjusment",propertyValue:"false"},{propertyName:"isActive",propertyValue:"true"},{propertyName:"correctedValue",propertyValue:""},{propertyName:"correctedUom",propertyValue:""}]}],employee:this.employee};try{S()?await this.updateAdjustmentDefectOnLocalDB(e,s,o,!1,t):await y.post(`${x}?${new URLSearchParams(r).toString()}`,o)}catch(c){D("fe_event_error_service_form_delete_adjusment_defect",{errorMessage:c}),N(c),console.log(c)}const n=[{keyValue:e.cleaned.key,propertyParams:[{propertyName:"rating",propertyValue:""},{propertyName:"updatedBy",propertyValue:""},{propertyName:"updatedDate",propertyValue:""},{propertyName:"pictures",propertyValue:JSON.stringify([])},{propertyName:"createdBy",propertyValue:""},{propertyName:"createdDate",propertyValue:""},{propertyName:"commentValue",propertyValue:""}]}],i={headerId:(p=this.selectedGroup)==null?void 0:p.headerId,workorder:this.stateWorkOrder,id:this.selectedGroup.id,updateParams:n,employee:this.employee,localStatus:this.generalFormStore.stateGeneralForm.status};try{S()?(await F(this.stateGeneralForm.workOrder,`cleaned-rating-${e.key}`),await F(this.stateGeneralForm.workOrder,`reset-cleaned-${e.key}`),await d.pendingTask.add({module:"serviceForm",section:"E-Form",type:"Task",workorder:this.stateGeneralForm.workOrder,key:e.key,bindingKey:t??e.key,payload:JSON.stringify(i),syncDate:_(),itemKey:`reset-cleaned-${e.key}`,syncStatus:"Pending"}),this.updateLocalServiceSheetByParam(n)):((await y.post(`${B}?${new URLSearchParams(r).toString()}`,i)).data.result.message==A.SUBMITTED&&(this.stateFormAlreadySubmitted=!0),this.updateLocalServiceSheetByParam(n),this.getTaskProgress(),this.updateGroupByParam(this.stateSelectedGroup.groupName))}catch(c){D("fe_event_error_service_form_delete_adjsutment_task",{errorMessage:c}),N(c),console.log(c)}},async checkApprovedLocalDefectOnTask(e){const t=await d.serviceSheetDefect.where({workorder:this.stateGeneralForm.workOrder,taskId:e.taskKey}).toArray();let r=!1,a=!1;for(const s of t){const o=s.approvedBy&&s.approvedBy,n=s.declineDate;if(o||n){r=!0;break}}return r&&(this.stateTaskErrorDialog=!0,this.stateErrorMessageTaskErrorDialog=A.MODIFY_DEFECT_AFTER_SUPERVISOR_APPROVAL,a=!0),{isAlreadyHandledBySPV:a}},getPistonMovementRatingPercentage(e){const t=e.task,r=e.item;let a="";return this.stateCBMFormulas.filter(o=>{const n=o.taskKey==t.key,i=ie.CBM_BRAKE_PACK_PERCENTAGE==o.cbmType;return n&&i}).every((o,n)=>{const i=J(o,r.value),p=W(o,r.value);return a=q(i,p,o),console.log("checkMin",i,"checkMax",p,"formula",o),!a}),a},async postFinalDataPistonMovementInput(e){let t={},r={};const a=e.task;let s="",o=e.updateParams;t=a.items.find(l=>l.categoryItemType==I.PISTON_INPUT_RATING),r=a.items.find(l=>l.categoryItemType==I.TARGET_RATING);const n=this.stateCBMFormulas.filter(l=>{const u=l.taskKey==a.key,f=ie.CBM==l.cbmType;return u&&f}),i=m.clone(Number(t.value)*100);n.every(l=>{const u=J(l,i),f=W(l,i);return s=q(u,f,l),console.log("formatedPistonRating",i,"checkMin",u,"checkMax",f,"formula",l),!s}),r.value=s;const p=[{keyValue:a.key,propertyParams:[{propertyName:"taskValue",propertyValue:r.value},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:P()}]},{keyValue:r.key,propertyParams:[{propertyName:"value",propertyValue:r.value},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:P()}]}];for(const l of a.items){const u=l.categoryItemType==I.PREVIOUS_VALUE_PISTON_A,f=l.categoryItemType==I.PREVIOUS_VALUE_PISTON_B,T=l.categoryItemType==I.PREVIOUS_VALUE_PISTON_RESULT,E=l.categoryItemType==I.PREVIOUS_VALUE_UOM,w=l.categoryItemType==I.PREVIOUS_VALUE_PISTON_RATING,k=l.categoryItemType==I.PREVIOUS_VALUE_PISTON_PERCENTAGE;if(u||f||T||E||w||k){const v=!l.updatedDate||l.updatedDate=="",R=l.value&&l.value!="";v&&R&&o.push({keyValue:l.key,propertyParams:[{propertyName:b.VALUE,propertyValue:l.value},{propertyName:b.UPDATED_BY,propertyValue:JSON.stringify(this.employee)},{propertyName:b.UPDATED_DATE,propertyValue:P()}]})}}if(o=[...o,...p],s==Se.C||s==Se.X)await this.postPistonDefectData({task:a,targetItem:r,updateParams:o,pistonItemRating:t.value});else if(!S())await this.updateServiceSheetTaskValue(o,this.useAuthenticationStore.user.EmployeeId,this.useAuthenticationStore.user.Name,!0,a.key);else{const l=re(a);await this.updateServiceSheetTaskOnLocalDB(o,a.key,r.key,!0,l),Y(this.stateGeneralForm.workOrder,a.key,"false")}},async postPistonDefectData(e){var v,R;const t=e.task,r=e.targetItem,a=e.updateParams,s=e.pistonItemRating;let o="",n="",i="",p="",c="",l="";for(const h of t.items)if(h.categoryItemType==I.TERGET_TOOL)o=h.value;else if(h.itemType==te.SMALL_CAMERA)n=h.key;else if(h.categoryItemType==I.PISTON_INPUT_A)i=h.value;else if(h.categoryItemType==I.PISTON_INPUT_B)p=h.value;else if(h.categoryItemType==I.PISTON_INPUT_RESULT)c=h.value;else if(h.categoryItemType==I.DROPDOWN_TOOL){let O=[];if(h.caption&&h.itemValue){const L=h.caption.replace("[","").replace("]","").split("; "),M=h.itemValue.replace("[","").replace("]","").split(", ");O=L.map((K,ae)=>({label:K.replaceAll("'",""),value:M[ae].replaceAll("'","")})),O.forEach(K=>{K.value==h.value&&(l=K.label)})}}const u=G(),f={ver:"v1"},T=`${t.description.split(";")[0]};${t.description.split(";")[1]}`,E=U(),w=U(),k={updateParams:a,headerId:this.selectedGroup.headerId,workOrder:this.selectedGroup.workOrder,id:(v=this.selectedGroup)==null?void 0:v.id,employee:this.employee,defectHeader:{workorder:this.generalForm.workOrder,form:this.generalForm.form,serviceSheetDetailId:(R=this.selectedGroup)==null?void 0:R.id,category:t.category,taskId:t.key,taskNo:T,taskDesc:t.items[2].value,defectWorkorder:"",formDefect:"",defectType:"",cbmMeasurement:s,cbmUom:o,cbmImageKey:n,cbmImageProp:"value",isCbmAdjusment:"false",taskValue:r.value,repairedStatus:"Not-Repaired",cbmNAStatus:"Not-Confirm",supervisor:{id:u.user.EmployeeId,name:u.user.Name},status:"Submit",defectStatus:"Submited",isActive:"true",defectHeaderId:E,defectDetailId:w,cbmPistonA:i,cbmPistonB:p,cbmPistonResult:c,cbmPistonTool:l}},V={task:t,targetItem:r};if(!S())await this.updateDefectOnServer(f,k,V);else{const h=re(t);Y(this.stateGeneralForm.workOrder,t.key,"false"),await this.updateDefectOnLocalDB(k,t,r,h)}},async handleGetAndUpdatePreviousBrakePack(e){let t=!0;for(const r of e.serviceSheet)if(((r==null?void 0:r.key)==Te.MECHANICAL_SERVICE||(r==null?void 0:r.key)==Te.PRE_SERVICE_OPERATIONAL_CHECK)&&(t=this.checkPreviousBrakePackValueAlreadyFilled(r.subGroup[0]),!t))break;if(!t){const r={ver:"v1"};try{const a=await y.post(`${X}?${new URLSearchParams(r).toString()}`,{equipmentNumber:e.general.equipment,modelId:e.general.modelId});console.log("response",a.data.result.content);let s=[];s=a.data.result.content?a.data.result.content:[],await d.serviceFormPreviousReplacement.put({id:e.general.workOrder,previousTandem:m.cloneDeep(s)})}catch(a){g("IRONS",a),console.log("error get prev replacement",a)}}},checkPreviousBrakePackValueAlreadyFilled(e){let t=!0;for(const r of e.taskGroup)for(const a of r.task){const s=a,o=s.category==fe.CBM,n=s.rating==Z.OIL_COOLED,i=o&&n,c=s.rating==Z.CALIPER&&o;if(i||c)for(const l of s.items){const u=l.categoryItemType==I.PREVIOUS_VALUE_PISTON_A,f=l.categoryItemType==I.PREVIOUS_VALUE_PISTON_B,T=l.categoryItemType==I.PREVIOUS_VALUE_PISTON_RESULT,E=l.categoryItemType==I.PREVIOUS_VALUE_UOM,w=l.categoryItemType==I.PREVIOUS_VALUE_PISTON_RATING,k=l.categoryItemType==I.PREVIOUS_VALUE_PISTON_PERCENTAGE,V=u||f||T||E||w||k,v=l.categoryItemType==I.PREVIOUS_PARAM_RATING,R=l.categoryItemType==I.PREVIOUS_TARGET_RATING;if((V||(v||R||E))&&(l.value==""||l.value=="-")){t=!1;break}}}return t},async getPreviousBrakePackValue(){let e=!0;if(!(this.stateSelectedSubGroups[0].key==ve.MECHANICAL_SERVICE||this.stateSelectedSubGroups[0].key==ve.PRE_SERVICE_OPERATIONAL_CHECK))return;e=this.checkPreviousBrakePackValueAlreadyFilled(this.stateSelectedSubGroups[0]);let r=[];if(e)return;r=await this.getPreviousBrakePackData();const a=i=>{let p="";switch(i.categoryItemType){case I.PREVIOUS_VALUE_PISTON_A:p=i.previousData.lastValuePistonA??"";break;case I.PREVIOUS_VALUE_PISTON_B:p=i.previousData.lastValuePistonB??"";break;case I.PREVIOUS_VALUE_PISTON_RESULT:p=i.previousData.lastValuePistonResult??"";break;case I.PREVIOUS_VALUE_PISTON_PERCENTAGE:p=i.previousData.lastValuePistonPercentage??"";break;case I.PREVIOUS_VALUE_UOM:p=i.previousData.lastUom??"";break;case I.PREVIOUS_VALUE_PISTON_RATING:p=i.previousData.lastRating??"";break;case I.PREVIOUS_PARAM_RATING:p=i.previousData.lastValue??"";break;case I.PREVIOUS_TARGET_RATING:p=i.previousData.lastRating??"";break}return p},s=[];let o="",n="";for(const i of this.stateSelectedSubGroups[0].taskGroup)for(const p of i.task){n||(n=p.key);const c=p,l=c.category==fe.CBM,u=c.rating==Z.OIL_COOLED,f=l&&u,E=c.rating==Z.CALIPER&&l;if(f||E){for(const w of r)if(w.key==c.key)for(const k of c.items){o||(o=k.key);const V=k.categoryItemType==I.PREVIOUS_VALUE_PISTON_A,v=k.categoryItemType==I.PREVIOUS_VALUE_PISTON_B,R=k.categoryItemType==I.PREVIOUS_VALUE_PISTON_RESULT,h=k.categoryItemType==I.PREVIOUS_VALUE_UOM,O=k.categoryItemType==I.PREVIOUS_VALUE_PISTON_RATING,L=k.categoryItemType==I.PREVIOUS_VALUE_PISTON_PERCENTAGE,M=V||v||R||h||O||L,K=k.categoryItemType==I.PREVIOUS_PARAM_RATING,ae=k.categoryItemType==I.PREVIOUS_TARGET_RATING,be=K||ae,Ue=k.value==""||k.value=="-";if((M||be)&&Ue){const se=a({categoryItemType:k.categoryItemType,previousData:w});se&&se!="-"&&!k.updatedDate&&(k.value=se)}}}}if(!(s.length<1))try{S()?await this.updateServiceSheetTaskOnLocalDB(s,n,o,!1,n):await this.updateItemServiceSheetDetail(s)}catch{console.log("serror updatedata setelah tandem drive")}},async getPreviousBrakePackData(){try{const e={ver:"v1"};let t=[];if(S()){const r=await d.serviceFormPreviousReplacement.where({id:`${this.generalForm.workOrder}`}).first();r&&(t=r.previousTandem)}else{const r=await y.post(`${X}?${new URLSearchParams(e).toString()}`,{equipmentNumber:this.generalForm.equipment,modelId:this.generalForm.modelId});return t=r.data.result.content?r.data.result.content:[],await d.serviceFormPreviousReplacement.put({id:this.generalForm.workOrder,previousTandem:m.cloneDeep(t)}),t}return t}catch(e){return D("fe_event_error_get_service_form_previous_tandem_data",{errorMessage:e}),console.log("error get tandem",e),g("IRONS",e),[]}},async updateBrakeTypeDropdownValueAndResetOtherType(e){const t=e.task,r=e.item,a=[];a.push({keyValue:r.key,propertyParams:[{propertyName:b.VALUE,propertyValue:r.value},{propertyName:b.UPDATED_BY,propertyValue:JSON.stringify(this.employee)},{propertyName:b.UPDATED_DATE,propertyValue:P()}]});let s="";r.value==Le.OIL_COOLED?s=ge.BRAKE_TYPE_CALIPER:s=ge.BRAKE_TYPE_OIL_COOLED;for(const o of this.selectedSubGroups[0].taskGroup)for(const n of o.task){const i=n;if(i.showParameter&&i.showParameter==s){if(i.taskValue&&a.push({keyValue:i.key,propertyParams:[{propertyName:b.TASK_VALUE,propertyValue:""},{propertyName:b.UPDATED_BY,propertyValue:""},{propertyName:b.UPDATED_DATE,propertyValue:""}]}),S()){const p=await d.pendingTask.where({workorder:this.stateWorkOrder,module:$t.SERVICE_FORM,bindingKey:i.groupTaskId,syncStatus:Mt.PENDING});p&&p.delete()}for(const p of i.items){const c=p.itemType==te.DROPDOWN,l=p.itemType==te.INPUT,u=p.itemType==te.SMALL_CAMERA,f=p.categoryItemType==I.PREVIOUS_VALUE_PISTON_RATING||p.categoryItemType==I.PREVIOUS_TARGET_RATING,E=c||u||l&&!f,w=p.categoryItemType==I.PREVIOUS_VALUE_PISTON_A,k=p.categoryItemType==I.PREVIOUS_VALUE_PISTON_B,V=p.categoryItemType==I.PREVIOUS_VALUE_PISTON_RESULT,v=p.categoryItemType==I.PREVIOUS_VALUE_UOM,R=p.categoryItemType==I.PREVIOUS_VALUE_PISTON_RATING,h=p.categoryItemType==I.PREVIOUS_VALUE_PISTON_PERCENTAGE,O=p.categoryItemType==I.PREVIOUS_PARAM_RATING;p.categoryItemType==I.PREVIOUS_TARGET_RATING;const L=w||k||V||v||R||h||O,M=E||L,K=p.value!="";M&&K&&(a.push({keyValue:p.key,propertyParams:[{propertyName:b.VALUE,propertyValue:L?"-":""},{propertyName:b.UPDATED_BY,propertyValue:""},{propertyName:b.UPDATED_DATE,propertyValue:""}]}),u&&this.cameraStore.clearImageById(p.key))}}}if(!S())await this.updateServiceSheetTaskValue(a,this.useAuthenticationStore.user.EmployeeId,this.useAuthenticationStore.user.Name);else{const o=re(t);await this.updateServiceSheetTaskOnLocalDB(a,t.key,`${r.value}-${r.key}`,!1,o)}}}});export{yr as G,gr as U,z as a,C as b,Lt as c,hr as d,Rt as e,At as f,Ct as g,Gt as h,Sr as i,fr as j,kr as k,Tr as l,bt as m,Ee as n,F as o,mr as p,re as q,Ve as r,Y as s,Vt as t,Ut as u,Ft as v};
