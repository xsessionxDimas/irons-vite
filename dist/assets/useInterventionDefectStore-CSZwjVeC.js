import{d as te}from"./pinia-BjOS2_Ao.js";import{d as c,u as G,e as q,a as ee,G as ae,f as se,U as ie,g as re}from"./useComponentInterventionHeaderStore-CbC-c2Z5.js";import{i as j,f as d,c as Q}from"./index-BuVmIl8K.js";import{A as k}from"./date-format-8-IvfSl3.js";import{u as x}from"./@vueuse-DFoNmIyu.js";import{e as X}from"./lodash-DrHMlsdo.js";import{J as ne,K as de,L as oe}from"./helpers-wUOLw-dU.js";import{s as $}from"./string-to-imageinfo-converter-Cdr1iOkP.js";import{S as l}from"./number-format-BdMuQVyW.js";import{i as W}from"./internet-connection-CnLQPjRt.js";import{M as Z}from"./MachineSMUEnum-CgiCo9nf.js";import{u as ce}from"./useComponentInterventionDefectsStore-CA75rH_W.js";import{u as fe}from"./useGlobalConnectionStore-DV9B81de.js";import{v as le}from"./uuid-SoommWqA.js";const He=te({id:"InterventionDefectStore",state:()=>({stateDefectNoData:{},stateDefectYesData:{},stateDefectCBMData:{},stateIsBusy:!1,stateDefectImages:{},stateCBMImages:{}}),getters:{DefectYesData:e=>e.stateDefectYesData,DefectNoData:e=>e.stateDefectNoData,DefectCBMData:e=>e.stateDefectCBMData,DefectImages:e=>e.stateDefectImages,CBMImages:e=>e.stateCBMImages,IsBusy:e=>e.stateIsBusy,globalConnectionStore:()=>fe()},actions:{initDefectImages(e){e in this.stateDefectImages||(this.stateDefectImages[e]=[])},async addNewPartImages(e){const t=c().Intervention;e.blobs.forEach(async(a,i)=>{const r={module:"Intervention",key:e.taskKey??"",workorder:t.sapWorkOrder,type:e.type,fileType:e.files[i].fileType??"webp",createdBy:e.employee.id,email:e.email,filename:e.files[i].filename,originalFilename:e.files[i].originalFilename??e.files[i].filename,blob:a,syncDate:k(),syncStatus:"Pending"};await j(d,"pendingTaskFile",r)})},async deletePartImage(e){await d.pendingTaskFile.where("filename").equals(e).delete()},async defineNewDefectImages(e){const t=c().Intervention;await d.pendingTaskFile.where("filename").equals(this.stateDefectImages[e.key][0].filename).delete(),e.blobs.forEach(async(a,i)=>{const r={module:"Intervention",key:e.key,workorder:t.sapWorkOrder,type:e.type,fileType:e.files[i].fileType??"webp",createdBy:e.employee.id,email:e.email,filename:e.files[i].filename,originalFilename:e.files[i].originalFilename??e.files[i].filename,blob:a,syncDate:k(),syncStatus:"Pending"};await j(d,"pendingTaskFile",r);const n=$([e.files[i]]);this.stateDefectImages[e.key]=n})},async addNewDefectImages(e){const t=c().Intervention;e.blobs.forEach(async(a,i)=>{const r={module:"Intervention",key:e.key,workorder:t.sapWorkOrder,type:e.type,fileType:e.files[i].fileType??"webp",createdBy:e.employee.id,email:e.email,filename:e.files[i].filename,originalFilename:e.files[i].originalFilename??e.files[i].filename,blob:a,syncDate:k(),syncStatus:"Pending"};await j(d,"pendingTaskFile",r);const n=$(this.stateDefectImages[e.key]);n.push(e.files[i]),this.stateDefectImages[e.key]=n})},setExistingDefectImages(e,s){this.initDefectImages(e),this.stateDefectImages[e]=$(s)},async deleteDefectImage(e,s){await d.pendingTaskFile.where("filename").equals(s).delete();const t=$(this.stateDefectImages[e]);this.stateDefectImages[e]=t.filter(a=>a.filename!=s)},async resetDefectImages(e,s){await d.pendingTaskFile.filter(a=>a.key===e&&a.workorder===s&&a.module=="Intervention").delete(),this.stateDefectImages[e]=[]},initCBMImages(e,s){e in this.stateCBMImages||(this.stateCBMImages[e]=[]),X.isArray(s)?this.stateCBMImages[e]=s:s!=""?this.stateCBMImages[e]=JSON.parse(s):this.stateCBMImages[e]=[]},async addNewCBMImages(e){const t=c().Intervention;e.blobs.forEach(async(a,i)=>{const r={module:"Intervention",key:e.key,workorder:t.sapWorkOrder,type:e.type,fileType:e.files[i].fileType??"webp",createdBy:e.employee.id,email:e.email,filename:e.files[i].filename,originalFilename:e.files[i].originalFilename?e.files[i].originalFilename:e.files[i].filename,blob:a,syncDate:k(),syncStatus:"Pending"};await j(d,"pendingTaskFile",r)}),this.stateCBMImages[e.key].push(...e.files)},async defineNewCBMImages(e){const t=c().Intervention,a=d.pendingTaskFile.where({key:e.key,sapWorkorder:t.sapWorkOrder,syncStatus:"Not Sync"});a&&await a.delete(),e.blobs.forEach(async(i,r)=>{const n={module:"Intervention",key:e.key,workorder:t.sapWorkOrder,type:e.type,fileType:e.files[r].fileType??"webp",createdBy:e.employee.id,email:e.email,filename:e.files[r].filename,originalFilename:e.files[r].originalFilename?e.files[r].originalFilename:e.files[r].filename,blob:i,syncDate:k(),syncStatus:"Pending"};await j(d,"pendingTaskFile",n)}),this.stateCBMImages[e.key]=e.files},async deleteCBMImage(e,s){await d.pendingTaskFile.where("filename").equals(s).delete();const t=$(this.stateCBMImages[e]);this.stateCBMImages[e]=t.filter(a=>a.filename!=s)},async resetCBMImages(e,s){await d.pendingTaskFile.filter(a=>a.key===e&&a.workorder===s&&a.module=="Intervention").delete(),this.stateCBMImages[e]=[]},createDefectYesData(e,s=""){var a;const t=c();this.stateDefectYesData.header={},this.stateDefectYesData.header.workorder=t.Intervention.sapWorkOrder,this.stateDefectYesData.header.form=t.Intervention.equipmentDesc,this.stateDefectYesData.header.serviceSheetDetailId="",this.stateDefectYesData.header.interventionId=t.Intervention.id,this.stateDefectYesData.header.interventionHeaderId=t.Intervention.trInterventionHeaderId,this.stateDefectYesData.header.category=e.task.taskCategory,this.stateDefectYesData.header.taskId=e.task.taskKey,this.stateDefectYesData.header.taskNo=e.taskNo,this.stateDefectYesData.header.taskDesc=e.taskDesc,this.stateDefectYesData.header.defectWorkorder="",this.stateDefectYesData.header.formDefect="DM-PL-F55",this.stateDefectYesData.header.defectType=((a=e.task)==null?void 0:a.defectType)||"",this.stateDefectYesData.header.cbmMeasurement="",this.stateDefectYesData.header.cbmUom="",this.stateDefectYesData.header.cbmImageKey="",this.stateDefectYesData.header.cbmImageProp="",this.stateDefectYesData.header.isCbmAdjusment="",this.stateDefectYesData.header.taskValue=e.task.value,this.stateDefectYesData.header.repairedStatus="Not-Repaired",this.stateDefectYesData.header.cbmNAStatus="Not-Confirm",this.stateDefectYesData.header.supervisor=e.task.supervisor,this.stateDefectYesData.header.status="Submited",this.stateDefectYesData.header.defectStatus="Submited",this.stateDefectYesData.header.plannerStatus="",this.stateDefectYesData.header.declineReason="",this.stateDefectYesData.header.declineBy={},this.stateDefectYesData.header.declineDate="",this.stateDefectYesData.header.approvedBy={},this.stateDefectYesData.header.approvedDate="",s!=""&&(this.stateDefectYesData.header.id=s),this.createDefectYesDetail(e,s)},createDefectYesDetail(e,s=""){this.stateDefectYesData.detail={},this.stateDefectYesData.detail.interventionId=e.task.id,this.stateDefectYesData.detail.title=e.taskDesc,this.stateDefectYesData.detail.type="YES",this.stateDefectYesData.detail.isNeed30Minutes=e.isNeed30Minutes,this.stateDefectYesData.detail.assetNumber=e.assetNumber,this.stateDefectYesData.detail.description=e.description,this.stateDefectYesData.detail.raisedBy=e.raisedBy,this.stateDefectYesData.detail.date=e.submitDate,this.stateDefectYesData.detail.plannedDuration=e.plannedDuration,this.stateDefectYesData.detail.instruction=e.instruction,this.stateDefectYesData.detail.priority=e.priority,this.stateDefectYesData.detail.parts=JSON.stringify(e.parts),this.stateDefectYesData.detail.labours=JSON.stringify(e.labours),this.stateDefectYesData.detail.resources=JSON.stringify(e.resources),this.stateDefectYesData.detail.symptoms=JSON.stringify(e.symptoms),this.stateDefectYesData.detail.causes=JSON.stringify(e.causes),s!=""?this.stateDefectYesData.detail.images=JSON.stringify(this.stateDefectImages[s]):e.task.taskKey!=""?this.stateDefectYesData.detail.images=JSON.stringify(this.stateDefectImages[e.task.taskKey]):this.stateDefectYesData.detail.images=JSON.stringify(this.stateDefectImages[e.defectHeaderId]),this.stateDefectYesData.detail.id=le()},createDefectYesPayload(e,s=""){const t=c();this.createDefectYesData(e,s);const a={};a.headerId=e.task.headerId,a.id=e.task.id,a.employee=e.task.employee,a.localInterventionStatus=t.Intervention.interventionExecution,a.workOrder=t.Intervention.sapWorkOrder,a.updateParams=[];const i={};return i.keyValue=e.task.taskKey,i.propertyParams=[],i.propertyParams.push({propertyName:"taskValue",propertyValue:e.task.value}),i.propertyParams.push({propertyName:"updatedBy",propertyValue:JSON.stringify(e.task.employee)}),i.propertyParams.push({propertyName:"updatedDate",propertyValue:e.submitDate}),e.task.task.taskValue=="4"?i.propertyParams.push({propertyName:"reason",propertyValue:e.reason??""}):i.propertyParams.push({propertyName:"reason",propertyValue:""}),a.updateParams.push(i),a.defectHeader=this.DefectYesData.header,a.defectDetail=this.DefectYesData.detail,a},async submitDefectYes(e,s=!1){x();const t=c(),a=G(),i=this.createDefectYesPayload(e,e.idGenerated);if(s?i.updateParams=[]:t.appendTaskUpdatePayload(i,e.task,!0),W()){const r=await d.pendingTask.get({key:e.task.taskKey,workorder:i.workOrder});r&&!s?(r.payload=JSON.stringify(i),await d.pendingTask.put(r)):await d.pendingTask.add({module:"Intervention",section:"E-Form",type:s?"DefectGeneric":"Defect",workorder:i.workOrder,key:s?e.idGenerated:e.task.taskKey,bindingKey:s?e.idGenerated:e.task.taskKey,payload:JSON.stringify(i),syncDate:k(),syncStatus:"Pending"})}else{if(s)await a.SyncInterventionGenericDefectData(JSON.stringify(i));else try{await a.SyncInterventionDefectData(JSON.stringify(i))}catch(r){if(this.globalConnectionStore.checkIsErrorNoNetwork(r)){const o=await d.pendingTask.get({key:e.task.taskKey,workorder:i.workOrder});return o&&!s?(o.payload=JSON.stringify(i),await d.pendingTask.put(o)):await d.pendingTask.add({module:"Intervention",section:"E-Form",type:s?"DefectGeneric":"Defect",workorder:i.workOrder,key:s?e.idGenerated:e.task.taskKey,bindingKey:s?e.idGenerated:e.task.taskKey,payload:JSON.stringify(i),syncDate:k(),syncStatus:"Pending"}),await this.updateDefectYesDataAndUpdateOnLocal(s,i,e,t),!1}else{const o=c();return r==l.MODIFY_DEFECT_AFTER_SUPERVISOR_APPROVAL||r==l.CHANGE_NOT_APPLICABLE_WITHOUT_REASON||r==l.TASK_UPDATED_BY_OTHER?(o.stateTaskErrorDialog=!0,o.stateErrorMessageTaskErrorDialog=r):r==l.SUBMITTED?o.stateFormSubmittedDialog=!0:r==l.CLOSE&&(o.stateFormCloseDialog=!0),!0}}await t.updateIntervention(!0)}await this.updateDefectYesDataAndUpdateOnLocal(s,i,e,t)},async updateDefectYesDataAndUpdateOnLocal(e,s,t,a){var n,o,D,f,y,u,h,g,S,m,v,N,w,B,H,M,O,C,E,P,b,K,A,Y,V,F,R;if(!e){const U=d.interventionDefect.where({interventionId:(n=s.defectHeader)==null?void 0:n.interventionId,taskId:(o=s.defectHeader)==null?void 0:o.taskId});U&&await U.delete()}await d.interventionDefect.put({category:(D=s.defectHeader)==null?void 0:D.category,interventionId:(f=s.defectHeader)==null?void 0:f.interventionId,taskId:(y=s.defectHeader)==null?void 0:y.taskId,taskNo:(u=s.defectHeader)==null?void 0:u.taskNo,taskDesc:(h=s.defectHeader)==null?void 0:h.taskDesc,taskValue:(g=s.defectHeader)==null?void 0:g.taskValue,defectHeaderId:e?t.idGenerated:"",defectDetailId:((S=s.defectDetail)==null?void 0:S.id)??"",defectType:e?"Generic":"",priority:t.priority,sapWorkorder:s.workOrder,taskKey:(m=s.defectHeader)==null?void 0:m.taskId,type:"YES",defectData:JSON.stringify(s.defectDetail),repairedStatus:(v=s.defectHeader)==null?void 0:v.repairedStatus,cbmNAStatus:"Not-Confirm",status:(N=s.defectHeader)==null?void 0:N.status,plannerStatus:(w=s.defectHeader)!=null&&w.plannerStatus?(B=s.defectHeader)==null?void 0:B.plannerStatus:"",declineReason:(H=s.defectHeader)!=null&&H.declineReason?(M=s.defectHeader)==null?void 0:M.declineReason:"",statusSync:status,declineDate:(O=s.defectHeader)!=null&&O.declineDate?(C=s.defectHeader)==null?void 0:C.declineDate:"",declineBy:(E=s.defectHeader)!=null&&E.declineBy?{id:(P=s.defectHeader)==null?void 0:P.declineBy.id,name:(b=s.defectHeader)==null?void 0:b.declineBy.name}:{},approvedDate:(K=s.defectHeader)!=null&&K.approvedDate?(A=s.defectHeader)==null?void 0:A.approvedDate:"",approvedBy:(Y=s.defectHeader)!=null&&Y.approvedBy?{id:(V=s.defectHeader)==null?void 0:V.approvedBy.id,name:(F=s.defectHeader)==null?void 0:F.approvedBy.name}:{},createdBy:s.employee?{id:s.employee.id,name:s.employee.name}:{},createdDate:t.task.timeStamp?t.task.timeStamp:"",updatedBy:s.employee?{id:s.employee.id,name:s.employee.name}:{},updatedDate:t.task.timeStamp?t.task.timeStamp:""});let i=t.task.taskKey;e&&(i=t.idGenerated),this.stateDefectImages[i]=[],await a.updateLocalData(t.task),q().setDefectIdentifiedData((R=s.defectHeader)==null?void 0:R.workorder)},async checkDataInterventionSMU(){const e=c();return(await d.interventionDefect.where({interventionId:e.Intervention.id,category:"GENERAL",defectType:"machineSMU"}).toArray()).length>0},createDefectSMUPayload(e){const s=c(),t=ee(),a={};a.headerId=e.id,a.id=e.id,a.employee=t.Log.employee,a.localInterventionStatus=s.Intervention.interventionExecution,a.workorder=s.Intervention.sapWorkOrder,a.updateParams=[];const i={};i.keyValue="GENERAL",i.propertyParams=[];let r=t.Log.employee;return e.fitter&&(r=e.fitter,a.employee=e.fitter),i.propertyParams.push({propertyName:"interventionSMU",propertyValue:e.value}),i.propertyParams.push({propertyName:"smuBy",propertyValue:JSON.stringify(r)}),i.propertyParams.push({propertyName:"smuDate",propertyValue:e.submitDate}),i.propertyParams.push({propertyName:"hmOffset",propertyValue:s.Intervention.hmOffset??"0"}),i.propertyParams.push({propertyName:"updatedBy",propertyValue:JSON.stringify(r)}),i.propertyParams.push({propertyName:"updatedDate",propertyValue:e.submitDate}),a.updateParams.push(i),a.defectHeader={workorder:s.Intervention.sapWorkOrder,form:s.Intervention.equipmentDesc,serviceSheetDetailId:"",interventionId:s.Intervention.id,interventionHeaderId:s.Intervention.trInterventionHeaderId,category:"GENERAL",taskId:"",taskNo:"",taskDesc:Z.MACHINESMUTITLE(),defectWorkorder:"",formDefect:"",defectType:"machineSMU",cbmMeasurement:"",cbmUom:"",cbmImageKey:"",cbmImageProp:"",isCbmAdjusment:"",taskValue:"",repairedStatus:"",cbmNAStatus:"",supervisor:e.employee,status:"Submited",defectStatus:"Submited",isActive:"true",plannerStatus:"",declineReason:"",declineBy:{},declineDate:"",approvedBy:{},approvedDate:"",createdBy:t.Log.employee,createdDate:e.submitDate,updatedBy:t.Log.employee,updatedDate:e.submitDate},a.defectDetail={title:Z.TITLE(status),machineSMU:e.value,minRange:Number(e.detail.range.minRange),maxRange:Number(e.detail.range.maxRange),smuDue:s.Intervention.smuDue,assetNumber:s.Intervention.equipment,serialNumber:e.detail.serialNumber,hmOffset:s.Intervention.hmOffset??"0",images:JSON.stringify(s.Intervention.imageEquipment??[])},a},async createDefectSMU(e){var f,y,u,h,g,S,m,v,N,w,B,H,M,O,C,E,P,b,K,A,Y,V,F,R,U,J,_,I,L,p;const s=c(),t=G(),a=this.createDefectSMUPayload(e);let i="";const r=async()=>{const T=await d.pendingTask.get({key:"SMU",workorder:a.workorder});T?(T.payload=JSON.stringify(a),await d.pendingTask.put(T)):await d.pendingTask.add({module:"Intervention",section:"E-Form",type:"Defect",workorder:a.workorder,key:"SMU",bindingKey:"SMU",payload:JSON.stringify(a),syncDate:k(),syncStatus:"Pending"}),i="Pending"};if(W())await r();else try{await t.SyncInterventionDefectData(JSON.stringify(a)),await s.updateIntervention(!0),i="Sync"}catch(T){const z=c();T==l.MODIFY_DEFECT_AFTER_SUPERVISOR_APPROVAL||T==l.CHANGE_NOT_APPLICABLE_WITHOUT_REASON||T==l.TASK_UPDATED_BY_OTHER?(z.stateTaskErrorDialog=!0,z.stateErrorMessageTaskErrorDialog=T):T==l.SUBMITTED?z.stateFormSubmittedDialog=!0:T==l.CLOSE&&(z.stateFormCloseDialog=!0),await r()}const n=d.interventionDefect.where({interventionId:(f=a.defectHeader)==null?void 0:f.interventionId,category:(y=a.defectHeader)==null?void 0:y.category,defectType:"machineSMU"});n&&await n.delete();const o={...a.defectDetail,createdBy:(u=a.defectHeader)==null?void 0:u.createdBy,createdDate:(h=a.defectHeader)==null?void 0:h.createdDate,updatedBy:(g=a.defectHeader)==null?void 0:g.updatedBy,updatedDate:(S=a.defectHeader)==null?void 0:S.updatedDate};await d.interventionDefect.put({category:(m=a.defectHeader)==null?void 0:m.category,interventionId:(v=a.defectHeader)==null?void 0:v.interventionId,taskId:(N=a.defectHeader)==null?void 0:N.taskId,taskNo:(w=a.defectHeader)==null?void 0:w.taskNo,taskDesc:(B=a.defectHeader)==null?void 0:B.taskDesc,taskValue:(H=a.defectHeader)==null?void 0:H.taskValue,defectHeaderId:e.idGenerated,defectType:"machineSMU",priority:"",sapWorkorder:a.workorder,taskKey:(M=a.defectHeader)==null?void 0:M.taskId,type:"machineSMU",defectData:JSON.stringify(o),repairedStatus:(O=a.defectHeader)==null?void 0:O.repairedStatus,cbmNAStatus:"Not-Confirm",status:(C=a.defectHeader)==null?void 0:C.status,plannerStatus:(E=a.defectHeader)!=null&&E.plannerStatus?(P=a.defectHeader)==null?void 0:P.plannerStatus:"",declineReason:(b=a.defectHeader)!=null&&b.declineReason?(K=a.defectHeader)==null?void 0:K.declineReason:"",statusSync:i,declineDate:(A=a.defectHeader)!=null&&A.declineDate?(Y=a.defectHeader)==null?void 0:Y.declineDate:"",declineBy:(V=a.defectHeader)!=null&&V.declineBy?{id:(F=a.defectHeader)==null?void 0:F.declineBy.id,name:(R=a.defectHeader)==null?void 0:R.declineBy.name}:{},approvedDate:(U=a.defectHeader)!=null&&U.approvedDate?(J=a.defectHeader)==null?void 0:J.approvedDate:"",approvedBy:(_=a.defectHeader)!=null&&_.approvedBy?{id:(I=a.defectHeader)==null?void 0:I.approvedBy.id,name:(L=a.defectHeader)==null?void 0:L.approvedBy.name}:{},createdBy:a.employee?{id:a.employee.id,name:a.employee.name}:{},createdDate:e.submitDate,updatedBy:a.employee?{id:a.employee.id,name:a.employee.name}:{},updatedDate:e.submitDate}),q().setDefectIdentifiedData((p=a.defectHeader)==null?void 0:p.workorder)},async updateDefectSMUMonitoring(e){const s=q(),t=ce(),a=c();if(s.stateData.DefectSMUHeaders.length==0)await this.createDefectSMU(e);else{const i=s.stateData.DefectSMUHeaders[0].defectData,r=JSON.parse(i);await t.updateDefectDetailSMU({...X.omit(r,["headerKey"]),machineSMU:e.value,title:Z.MACHINESMUTITLE(),images:JSON.stringify(a.Intervention.imageEquipment??[])},s.stateData.DefectSMUHeaders[0].defectDetailId,!0),await t.updateDefectHeaderSMU({isInRange:e.detail.isInRange,headerId:s.stateData.DefectSMUHeaders[0].defectHeaderId,headerKey:r.headerKey,isEdit:!0})}},createDefectNoData(e,s=""){var a;const t=c();this.stateDefectNoData.header={},this.stateDefectNoData.header.workorder=t.Intervention.sapWorkOrder,this.stateDefectNoData.header.form=t.Intervention.equipmentDesc,this.stateDefectNoData.header.serviceSheetDetailId="",this.stateDefectNoData.header.interventionId=t.Intervention.id,this.stateDefectNoData.header.interventionHeaderId=t.Intervention.trInterventionHeaderId,this.stateDefectNoData.header.category=e.task.taskCategory,this.stateDefectNoData.header.taskId=e.task.taskKey,this.stateDefectNoData.header.taskNo=e.taskNo,this.stateDefectNoData.header.taskDesc=e.taskDesc,this.stateDefectNoData.header.defectWorkorder="",this.stateDefectNoData.header.formDefect="DM-PL-F55",this.stateDefectNoData.header.defectType=((a=e.task)==null?void 0:a.defectType)||"",this.stateDefectNoData.header.cbmMeasurement="",this.stateDefectNoData.header.cbmUom="",this.stateDefectNoData.header.cbmImageKey="",this.stateDefectNoData.header.cbmImageProp="",this.stateDefectNoData.header.isCbmAdjusment="",this.stateDefectNoData.header.taskValue=e.task.value,this.stateDefectNoData.header.repairedStatus="Not-Repaired",this.stateDefectNoData.header.cbmNAStatus="Not-Confirm",this.stateDefectNoData.header.supervisor=e.task.supervisor,this.stateDefectNoData.header.status="Submited",this.stateDefectNoData.header.defectStatus="Submited",this.stateDefectNoData.detail={},this.stateDefectNoData.detail.interventionId=e.task.id,this.stateDefectNoData.detail.title=e.taskDesc,this.stateDefectNoData.detail.type="NO",this.stateDefectNoData.detail.assetNumber=e.assetNumber,this.stateDefectNoData.detail.description=e.description,this.stateDefectNoData.detail.raisedBy=e.raisedBy,this.stateDefectNoData.detail.date=e.submitDate,this.stateDefectNoData.detail.actions=JSON.stringify(e.actions),s!=""?this.stateDefectNoData.detail.images=JSON.stringify(this.stateDefectImages[s]):this.stateDefectNoData.detail.images=JSON.stringify(this.stateDefectImages[e.task.taskKey]),this.stateDefectNoData.header.plannerStatus="",this.stateDefectNoData.header.declineReason="",this.stateDefectNoData.header.declineBy={},this.stateDefectNoData.header.declineDate="",this.stateDefectNoData.header.approvedBy={},this.stateDefectNoData.header.approvedDate=""},createDefectNoPayload(e,s=""){const t=c();this.createDefectNoData(e,s);const a={};a.headerId=e.task.headerId,a.id=e.task.id,a.employee=e.task.employee,a.localInterventionStatus=t.Intervention.interventionExecution,a.workOrder=t.Intervention.sapWorkOrder,a.updateParams=[];const i={};return i.keyValue=e.task.taskKey,i.propertyParams=[],i.propertyParams.push({propertyName:"taskValue",propertyValue:e.task.value}),i.propertyParams.push({propertyName:"updatedBy",propertyValue:JSON.stringify(e.task.employee)}),i.propertyParams.push({propertyName:"updatedDate",propertyValue:e.submitDate}),e.task.task.taskValue=="4"?i.propertyParams.push({propertyName:"reason",propertyValue:e.reason||""}):i.propertyParams.push({propertyName:"reason",propertyValue:""}),a.updateParams.push(i),a.defectHeader=this.DefectNoData.header,s!=""&&(a.defectHeader.id=s),a.defectDetail=this.DefectNoData.detail,a},async submitDefectNo(e,s=!1){x();const t=c(),a=this.createDefectNoPayload(e,e.idGenerated);if(s?a.updateParams=[]:t.appendTaskUpdatePayload(a,e.task,!0,!1),W()){const i=await d.pendingTask.get({key:e.task.taskKey,workorder:a.workOrder});i&&!s?(i.payload=JSON.stringify(a),await d.pendingTask.put(i)):await d.pendingTask.add({module:"Intervention",section:"E-Form",type:s?"DefectGeneric":"Defect",workorder:a.workOrder,key:e.task.taskKey,bindingKey:e.task.taskKey,payload:JSON.stringify(a),syncDate:k(),syncStatus:"Pending"})}else{const i=G();if(s)await i.SyncInterventionGenericDefectData(JSON.stringify(a));else try{await i.SyncInterventionDefectData(JSON.stringify(a))}catch(r){if(this.globalConnectionStore.checkIsErrorNoNetwork(r)){const o=await d.pendingTask.get({key:e.task.taskKey,workorder:a.workOrder});return o&&!s?(o.payload=JSON.stringify(a),await d.pendingTask.put(o)):await d.pendingTask.add({module:"Intervention",section:"E-Form",type:s?"DefectGeneric":"Defect",workorder:a.workOrder,key:e.task.taskKey,bindingKey:e.task.taskKey,payload:JSON.stringify(a),syncDate:k(),syncStatus:"Pending"}),await this.updateDefectNoDataAndUpdateOnLocal(s,a,e,t),!1}else{const o=c();return r==l.MODIFY_DEFECT_AFTER_SUPERVISOR_APPROVAL||r==l.CHANGE_NOT_APPLICABLE_WITHOUT_REASON||r==l.TASK_UPDATED_BY_OTHER?(o.stateTaskErrorDialog=!0,o.stateErrorMessageTaskErrorDialog=r):r==l.SUBMITTED?o.stateFormSubmittedDialog=!0:r==l.CLOSE&&(o.stateFormCloseDialog=!0),!0}}await t.updateIntervention(!0)}await this.updateDefectNoDataAndUpdateOnLocal(s,a,e,t)},async updateDefectNoDataAndUpdateOnLocal(e,s,t,a){var n,o,D,f,y,u,h,g,S,m,v,N,w,B,H;if(!e){const M=d.interventionDefect.where({interventionId:(n=s.defectHeader)==null?void 0:n.interventionId,taskId:(o=s.defectHeader)==null?void 0:o.taskId});M&&await M.delete()}await d.interventionDefect.add({category:(D=s.defectHeader)==null?void 0:D.category,interventionId:(f=s.defectHeader)==null?void 0:f.interventionId,taskId:(y=s.defectHeader)==null?void 0:y.taskId,taskNo:(u=s.defectHeader)==null?void 0:u.taskNo,taskDesc:(h=s.defectHeader)==null?void 0:h.taskDesc,taskValue:(g=s.defectHeader)==null?void 0:g.taskValue,defectHeaderId:e?t.idGenerated:"",defectType:e?"Generic":"",sapWorkorder:s.workOrder,taskKey:(S=s.defectHeader)==null?void 0:S.taskId,type:"NO",defectData:JSON.stringify(s.defectDetail),repairedStatus:"Not-Repaired",cbmNAStatus:"Not-Confirm",status:(m=s.defectHeader)==null?void 0:m.status,plannerStatus:(v=s.defectHeader)!=null&&v.plannerStatus?(N=s.defectHeader)==null?void 0:N.plannerStatus:"",declineReason:(w=s.defectHeader)!=null&&w.declineReason?(B=s.defectHeader)==null?void 0:B.declineReason:"",createdBy:s.employee?{id:s.employee.id,name:s.employee.name}:{},createdDate:t.task.timeStamp?t.task.timeStamp:"",updatedBy:s.employee?{id:s.employee.id,name:s.employee.name}:{},updatedDate:t.task.timeStamp?t.task.timeStamp:"",statusSync:status});let i=t.task.taskKey;e&&(i=t.idGenerated),this.stateDefectImages[i]=[],await a.updateLocalData(t.task),q().setDefectIdentifiedData((H=s.defectHeader)==null?void 0:H.workorder)},createDefectCBMData(e){const s=c();if(this.stateDefectCBMData.header={},this.stateDefectCBMData.header.workorder=s.Intervention.sapWorkOrder,this.stateDefectCBMData.header.form=s.Intervention.equipmentDesc,this.stateDefectCBMData.header.serviceSheetDetailId="",this.stateDefectCBMData.header.interventionId=s.Intervention.id,this.stateDefectCBMData.header.interventionHeaderId=s.Intervention.trInterventionHeaderId,this.stateDefectCBMData.header.category=e.task.taskCategory=="Adjustment"?"CBM":e.task.taskCategory,this.stateDefectCBMData.header.taskId=e.task.taskKey,this.stateDefectCBMData.header.taskNo=e.taskNo,this.stateDefectCBMData.header.taskDesc=e.task.task.description,this.stateDefectCBMData.header.defectWorkorder="",this.stateDefectCBMData.header.formDefect="DM-PL-F55",this.stateDefectCBMData.header.defectType="",this.stateDefectCBMData.header.cbmMeasurement=e.cbmMeasurement??"",this.stateDefectCBMData.header.cbmUom=e.uomValue??"",this.stateDefectCBMData.header.cbmImageKey="",this.stateDefectCBMData.header.cbmImageProp="images",this.stateDefectCBMData.header.isCbmAdjusment="false",this.stateDefectCBMData.header.taskValue=e.task.value,this.stateDefectCBMData.header.repairedStatus="Not-Repaired",this.stateDefectCBMData.header.cbmNAStatus="Not-Confirm",this.stateDefectCBMData.header.supervisor=e.task.supervisor,this.stateDefectCBMData.header.status="Submited",this.stateDefectCBMData.header.defectStatus="Submited",this.stateDefectCBMData.header.plannerStatus="",this.stateDefectCBMData.header.declineReason="",this.stateDefectCBMData.header.declineBy={},this.stateDefectCBMData.header.declineDate="",this.stateDefectCBMData.header.approvedBy={},this.stateDefectCBMData.header.approvedDate="",this.stateDefectCBMData.header.isActive="true",e.task.taskCategory=="Adjustment"){const t=e.task.task.items.find(i=>i.categoryItemType=="paramRating");this.stateDefectCBMData.header.cbmMeasurement=t==null?void 0:t.value;const a=e.task.task.items.find(i=>i.categoryItemType=="targetRating");this.stateDefectCBMData.header.taskValue=a==null?void 0:a.value,e.correctedMeasurement&&(this.stateDefectCBMData.header.correctedMeasurement=e.correctedMeasurement),e.correctedValue&&(this.stateDefectCBMData.header.correctedValue=e.correctedValue),e.correctedUom&&(this.stateDefectCBMData.header.correctedUom=e.correctedUom)}},createDefectCBMPayload(e){const s=c();this.createDefectCBMData(e);const t={};t.headerId=e.task.headerId,t.id=e.task.id,t.employee=e.task.employee,t.localInterventionStatus=s.Intervention.interventionExecution,t.workOrder=s.Intervention.sapWorkOrder,t.updateParams=[];const a={};a.keyValue=e.task.taskKey,a.propertyParams=[];const i=e.task.task.items.find(r=>r.categoryItemType=="targetRating");return a.propertyParams.push({propertyName:"taskValue",propertyValue:e.task.taskCategory=="Adjustment"?i==null?void 0:i.value:e.task.value}),a.propertyParams.push({propertyName:"updatedBy",propertyValue:JSON.stringify(e.task.employee)}),a.propertyParams.push({propertyName:"updatedDate",propertyValue:e.submitDate}),t.updateParams.push(a),t.defectHeader=this.stateDefectCBMData.header,t.defectDetail=void 0,t},async deleteLocalDefect(e){const s=d.interventionDefect.where({interventionId:e.interventionId,taskId:e.taskId});s&&await s.delete()},async updateLocalDefect(e,s=""){var r,n,o,D,f,y,u,h,g,S,m,v,N,w,B,H,M,O,C,E,P,b,K,A,Y,V,F,R,U,J,_,I,L;if(!e.cbmMeasurement){for(const p of e.task.task.items)if(p.categoryItemType=="paramRating"){e.cbmMeasurement=p.value;break}}const t=this.createDefectCBMPayload(e),a=!(e.task.value=="A"||e.task.value=="B"),i=await d.interventionDefect.filter(p=>p.taskKey==e.task.taskKey).first();if(i)a?e.task.value&&(i.taskValue=e.task.value,i.cbmMeasurement=e.cbmMeasurement,await d.interventionDefect.put(i)):await d.interventionDefect.filter(p=>p.taskKey==e.task.taskKey).delete();else if(a){const p=d.interventionDefect.where({interventionId:(r=t.defectHeader)==null?void 0:r.interventionId,taskId:(n=t.defectHeader)==null?void 0:n.taskId});p&&await p.delete();const T={category:(o=t.defectHeader)==null?void 0:o.category,interventionId:(D=t.defectHeader)==null?void 0:D.interventionId,taskId:(f=t.defectHeader)==null?void 0:f.taskId,taskNo:(y=t.defectHeader)==null?void 0:y.taskNo,taskDesc:(u=t.defectHeader)==null?void 0:u.taskDesc,taskValue:(h=t.defectHeader)==null?void 0:h.taskValue,sapWorkorder:t.workOrder,taskKey:(g=t.defectHeader)==null?void 0:g.taskId,cbmMeasurement:(S=t.defectHeader)==null?void 0:S.cbmMeasurement,type:"CBM",defectData:"",repairedStatus:"Not-Repaired",cbmNAStatus:"Not-Confirm",status:(m=t.defectHeader)==null?void 0:m.status,plannerStatus:(v=t.defectHeader)!=null&&v.plannerStatus?(N=t.defectHeader)==null?void 0:N.plannerStatus:"",declineReason:(w=t.defectHeader)!=null&&w.declineReason?(B=t.defectHeader)==null?void 0:B.declineReason:"",statusSync:s,declineDate:(H=t.defectHeader)!=null&&H.declineDate?(M=t.defectHeader)==null?void 0:M.declineDate:"",declineBy:(O=t.defectHeader)!=null&&O.declineBy?(C=t.defectHeader)==null?void 0:C.declineBy:{},approvedDate:(E=t.defectHeader)!=null&&E.approvedDate?(P=t.defectHeader)==null?void 0:P.approvedDate:"",approvedBy:(b=t.defectHeader)!=null&&b.approvedBy?(K=t.defectHeader)==null?void 0:K.approvedBy:{},createdBy:(A=t.defectHeader)!=null&&A.createdBy?{id:(Y=t.defectHeader)==null?void 0:Y.createdBy.id,name:(V=t.defectHeader)==null?void 0:V.createdBy.name}:{},createdDate:(F=t.defectHeader)!=null&&F.createdDate?(R=t.defectHeader)==null?void 0:R.createdDate:"",updatedBy:(U=t.defectHeader)!=null&&U.updatedBy?{id:(J=t.defectHeader)==null?void 0:J.updatedBy.id,name:(_=t.defectHeader)==null?void 0:_.updatedBy.name}:{},updatedDate:(I=t.defectHeader)!=null&&I.updatedDate?(L=t.defectHeader)==null?void 0:L.updatedDate:""};console.log(T),await d.interventionDefect.add(X.cloneDeep(T))}},async submitDefectCBM(e){x();const s=c(),t=this.createDefectCBMPayload(e);s.appendTaskUpdatePayload(t,e.task,!0,!1);let a="";if(W())await d.pendingTask.add({module:"Intervention",section:"E-Form",type:"Defect",workorder:t.workOrder,key:e.task.taskKey,bindingKey:e.task.taskKey,payload:JSON.stringify(t),syncDate:k(),syncStatus:"Pending"}),await s.updateTask(e.task,!0),a="Pending",await s.updateLocalData(e.task),this.updateLocalDefect(e,a);else{const i=G();try{await i.SyncInterventionDefectData(JSON.stringify(t)),a="Sync",this.updateLocalDefect(e,a)}catch(r){const n=c();this.globalConnectionStore.checkIsErrorNoNetwork(r)?(await d.pendingTask.add({module:"Intervention",section:"E-Form",type:"Defect",workorder:t.workOrder,key:e.task.taskKey,bindingKey:e.task.taskKey,payload:JSON.stringify(t),syncDate:k(),syncStatus:"Pending"}),await n.updateTask(e.task,!0),a="Pending",await n.updateLocalData(e.task),this.updateLocalDefect(e,a)):(r==l.MODIFY_DEFECT_AFTER_SUPERVISOR_APPROVAL||r==l.CHANGE_NOT_APPLICABLE_WITHOUT_REASON||r==l.TASK_UPDATED_BY_OTHER?(n.stateTaskErrorDialog=!0,n.stateErrorMessageTaskErrorDialog=r):r==l.SUBMITTED?n.stateFormSubmittedDialog=!0:r==l.CLOSE&&(n.stateFormCloseDialog=!0),await n.updateIntervention(!0))}}},async resetDefectCBMAdjustment(e){var n,o,D,f,y,u,h,g,S,m,v,N,w,B,H,M,O,C,E,P,b,K,A,Y,V,F,R,U,J,_;x();const s=c(),t=this.createDefectCBMPayload(e);s.appendTaskUpdatePayload(t,e.task,!1,!0);let a="";W()?(await d.pendingTask.add({module:"Intervention",section:"E-Form",type:"Defect",workorder:t.workOrder,key:e.task.taskKey,bindingKey:e.task.taskKey,payload:JSON.stringify(t),syncDate:k(),syncStatus:"Pending"}),a="Pending"):(await G().SyncInterventionDefectData(JSON.stringify(t)),a="Sync");const i=await d.interventionDefect.filter(I=>I.taskKey==e.task.taskKey).first();if(i)e.task.task.items.forEach(I=>{I.valueItemType=="rating"?i.taskValue=I.value:I.valueItemType=="inputUom"&&(i.cbmMeasurement=I.value)}),await d.interventionDefect.put(i);else{let I="",L="";e.task.task.items.forEach(p=>{p.valueItemType=="rating"?I=p.value:p.valueItemType=="inputUom"&&(L=p.value)}),await d.interventionDefect.add(X.cloneDeep({category:(n=t.defectHeader)==null?void 0:n.category,interventionId:(o=t.defectHeader)==null?void 0:o.interventionId,taskId:(D=t.defectHeader)==null?void 0:D.taskId,taskNo:(f=t.defectHeader)==null?void 0:f.taskNo,taskDesc:(y=t.defectHeader)==null?void 0:y.taskDesc,taskValue:I,sapWorkorder:t.workOrder,taskKey:(u=t.defectHeader)==null?void 0:u.taskId,cbmMeasurement:L,type:"CBM",defectData:"",repairedStatus:(h=t.defectHeader)==null?void 0:h.repairedStatus,cbmNAStatus:"Not-Confirm",status:(g=t.defectHeader)==null?void 0:g.status,plannerStatus:(S=t.defectHeader)!=null&&S.plannerStatus?(m=t.defectHeader)==null?void 0:m.plannerStatus:"",declineReason:(v=t.defectHeader)!=null&&v.declineReason?(N=t.defectHeader)==null?void 0:N.declineReason:"",statusSync:a,declineDate:(w=t.defectHeader)!=null&&w.declineDate?(B=t.defectHeader)==null?void 0:B.declineDate:"",declineBy:(H=t.defectHeader)!=null&&H.declineBy?(M=t.defectHeader)==null?void 0:M.declineBy:{},approvedDate:(O=t.defectHeader)!=null&&O.approvedDate?(C=t.defectHeader)==null?void 0:C.approvedDate:"",approvedBy:(E=t.defectHeader)!=null&&E.approvedBy?(P=t.defectHeader)==null?void 0:P.approvedBy:{},createdBy:(b=t.defectHeader)!=null&&b.createdBy?{id:(K=t.defectHeader)==null?void 0:K.createdBy.id,name:(A=t.defectHeader)==null?void 0:A.createdBy.name}:{},createdDate:(Y=t.defectHeader)!=null&&Y.createdDate?(V=t.defectHeader)==null?void 0:V.createdDate:"",updatedBy:(F=t.defectHeader)!=null&&F.updatedBy?{id:(R=t.defectHeader)==null?void 0:R.updatedBy.id,name:(U=t.defectHeader)==null?void 0:U.updatedBy.name}:{},updatedDate:(J=t.defectHeader)!=null&&J.updatedDate?(_=t.defectHeader)==null?void 0:_.updatedDate:"",correctedValue:"",correctedMeasurement:"",correctedUom:""}))}await s.updateLocalData(e.task),q().setDefectIdentifiedData(s.Intervention.sapWorkOrder)},async getDefectDetail(e,s,t,a){const i={};i[a]=e,i.sapWorkorder=t;const r=await d.interventionDefect.where(i).first();if(r)return JSON.parse(r.defectData);{const n=await this.getDefectHeaderFromServer(e,s,a),o=await this.getDefectDetailFromServer(e,s,a);return await d.interventionDefect.put({category:n.category,interventionId:n.interventionId,taskId:n.taskId,taskNo:n.taskNo,taskDesc:n.taskDesc,taskValue:n.taskValue,sapWorkorder:t,taskKey:n.taskId,type:o.type,defectHeaderId:n.id,defectData:JSON.stringify(o),statusSync:"Sync",repairedStatus:n.repairedStatus,cbmNAStatus:"Not-Confirm",status:n.status,plannerStatus:n.plannerStatus,declineReason:n.declineReason,declineDate:n.declineDate,declineBy:n.declineBy,approvedDate:n.approvedDate,approvedBy:n.approvedBy,createdBy:n.createdBy,createdDate:n.createdDate,updatedBy:n.updatedBy,updatedDate:n.updatedDate}),o}},async getDefectHeader(e,s,t,a){const i={};return i[a]=e,i.sapWorkorder=t,await d.interventionDefect.where(i).first()},async getDefectDecline(e){const s=await d.interventionDefect.where("taskKey").equals(e).first(),t={};return t.isDecline=s.declineReason!="",t.declineReason=s.declineReason,t.declineBy=s.declineBy,t.declineDate=s.declineDate,t},async getDefectHeaderFromServer(e,s,t){this.stateIsBusy=!0;const a={interventionHeaderId:s,isActive:"true",isDeleted:"false"};a[t]=e;const i=await Q.post(ae,a);return this.stateIsBusy=!1,i.data.result.content},async getDefectDetailFromServer(e,s,t){this.stateIsBusy=!0;const a={interventionHeaderId:s,isActive:"true",isDeleted:"false"};a[t]=e;const i=await Q.post(se,a);return this.stateIsBusy=!1,i.data.result.content.detail},createCBMImagePayload(e){const s=c(),t={};t.employee=e.employee,t.localInterventionStatus=s.Intervention.interventionExecution,t.headerId=e.id,t.id=e.id,t.updateParams=[];const a={};return a.propertyParams=[],e.taskCategory=="Adjustment"?(a.keyValue=e.itemKey,a.propertyParams.push({propertyName:"pictures",propertyValue:JSON.stringify(this.stateCBMImages[e.itemKey])})):(a.keyValue=e.taskKey,a.keyValue=e.taskKey,a.propertyParams=[],a.keyValue=e.taskKey,a.propertyParams=[],a.propertyParams.push({propertyName:"images",propertyValue:JSON.stringify(this.stateCBMImages[e.taskKey])})),t.updateParams.push(a),t.workOrder=e.workOrder,t},async submitCBMImageData(e){x();const s=c(),t=this.createCBMImagePayload(e);if(W())e.value=JSON.stringify(this.stateCBMImages[e.taskKey]),e.type="images",await d.pendingTask.add({module:"Intervention",section:"E-Form",type:"CBMImage",workorder:t.workOrder,key:e.taskKey,bindingKey:e.taskKey,payload:JSON.stringify(t),syncDate:k(),syncStatus:"Pending"}),e.value=JSON.stringify(this.stateCBMImages[e.taskKey]),await s.updateLocalTaskCBMImageData(e);else{const a=G();try{await a.SyncInterventionTaskData(JSON.stringify(t));const i=ee(),r=s.Intervention,n=await i.getWorkOrderDetailById(r.keyPbi);await d.interventionDetail.put(n),s.stateSelectedIntervention=n,s.setGroup(n),s.setSelectedGroup(s.stateGroups[s.stateSelectedGroup.sequence-1])}catch(i){this.globalConnectionStore.checkIsErrorNoNetwork(i)&&(e.value=JSON.stringify(this.stateCBMImages[e.taskKey]),e.type="images",await d.pendingTask.add({module:"Intervention",section:"E-Form",type:"CBMImage",workorder:t.workOrder,key:e.taskKey,bindingKey:e.taskKey,payload:JSON.stringify(t),syncDate:k(),syncStatus:"Pending"}),e.value=JSON.stringify(this.stateCBMImages[e.taskKey]),await s.updateLocalTaskCBMImageData(e))}}},async getCBMResult(e,s=!1){let t="";const a={};if(s){if(e.value=="")return e.correctedMeasurement=e.value,e.correctedValue=t,a.rating=t,a.task=e,a}else if(e.value=="")return e.cbmMeasurement=e.value,e.value=t,a.rating=t,a.task=e,a;const i=await d.cbmMapping.where({model:e.model,psType:e.task.psType}).first();if(i){const r=i.detail.filter(n=>n.taskKey==e.taskKey&&n.cbmType!="CBM_GAP");if(r.length<1)return a.rating=t,a.task=e,a.isError=!0,a.errorMessage="Rating for this task has not been mapped yet, please insert mapping on IronLake first",a;r.every(n=>{const o=ne(n,e.value),D=de(n,e.value);if(console.log("checkMin",o,"checkMax",D,"formula",n),t=oe(o,D,n),t)if(s){e.correctedMeasurement=e.value,e.correctedUom=n.uom,e.correctedValue=t;const f=e.task.items.find(y=>y.categoryItemType==="paramRating");return e.value=f==null?void 0:f.value,a.rating=t,a.task=e,!1}else return e.cbmMeasurement=e.value,e.uomValue=n.uom,e.value=t,a.rating=t,a.task=e,!1;else return!0})}else a.isError=!0,a.errorMessage="Rating for this task has not been mapped yet, please insert mapping on IronLake first";return t?a.rating=t:(s?e.correctedValue="":e.value="",a.rating=""),a.task=e,a},async updateDefectDetail(e,s=!1){this.createDefectYesDetail(e);const t={interventionId:e.task.id};s?t.defectHeaderId=e.defectHeaderId:t.taskId=e.task.taskKey;const a=await d.interventionDefect.get(t),i={id:a.defectDetailId,updateParams:[{keyValue:e.task.taskKey,propertyParams:[{propertyName:"detail",propertyValue:JSON.stringify(this.stateDefectYesData.detail)},{propertyName:"updatedBy",propertyValue:JSON.stringify({id:e.task.employee.id,name:e.task.employee.name})},{propertyName:"updatedDate",propertyValue:e.submitDate},{propertyName:"otherFitterUpdatedBy",propertyValue:JSON.stringify({id:e.task.employee.id,name:e.task.employee.name})}]}],employee:{id:e.task.supervisor.id,name:e.task.supervisor.name}},r={id:a.defectHeaderId,updateParams:[{keyValue:e.task.taskKey,propertyParams:[{propertyName:"sapWorkorder",propertyValue:a.sapWorkorder},{propertyName:"updatedBy",propertyValue:JSON.stringify({id:e.task.employee.id,name:e.task.employee.name})},{propertyName:"updatedDate",propertyValue:e.submitDate}]}],employee:{id:e.task.supervisor.id,name:e.task.supervisor.name}},o=c().Intervention,D=await d.pendingTask.where({module:"Intervention",workorder:o.sapWorkOrder,key:s?e.defectHeaderId:e.task.taskKey,type:s?"DefectGeneric":"Defect",syncStatus:"Pending"}).toArray(),f=await d.pendingTask.where({module:"Intervention",workorder:o.sapWorkOrder,key:s?e.defectHeaderId:e.task.taskKey,type:"UpdateDefect",syncStatus:"Pending"}).toArray();if(D.length>0){const u=D[0];await d.pendingTask.delete(D[0].id);const h=JSON.parse(u.payload);h.defectDetail=JSON.parse(i.updateParams[0].propertyParams[0].propertyValue),await d.pendingTask.add({module:"Intervention",section:"E-Form",type:s?"DefectGeneric":"Defect",workorder:o.sapWorkOrder,key:s?e.defectHeaderId:e.task.taskKey,bindingKey:s?e.defectHeaderId:e.task.taskKey,payload:JSON.stringify(h),syncDate:k(),syncStatus:"Pending"})}else if(f.length>0)await d.pendingTask.delete(f[0].id),await d.pendingTask.add({module:"Intervention",section:"E-Form",type:"UpdateDefect",workorder:o.sapWorkOrder,key:s?e.defectHeaderId:e.task.taskKey,bindingKey:s?e.defectHeaderId:e.task.taskKey,payload:JSON.stringify(i),syncDate:k(),syncStatus:"Pending"});else if(W())await d.pendingTask.add({module:"Intervention",section:"E-Form",type:"UpdateDefect",workorder:o.sapWorkOrder,key:s?e.defectHeaderId:e.task.taskKey,bindingKey:s?e.defectHeaderId:e.task.taskKey,payload:JSON.stringify(i),syncDate:k(),syncStatus:"Pending"});else{const u=await Q.post(`${ie}`,i);if(await Q.post(`${re}`,r),u.data.result.isError)throw u.data.result.message}const y=d.interventionDefect.where(t);y&&await y.delete(),a.priority=this.DefectYesData.detail.priority,a.defectData=JSON.stringify(this.DefectYesData.detail),a.updatedBy={id:e.task.employee.id,name:e.task.employee.name},a.updatedDate=e.submitDate,a.otherFitterUpdatedBy={id:e.task.employee.id,name:e.task.employee.name},await d.interventionDefect.add(a)}}});export{He as u};
