import{d as F}from"./pinia-BjOS2_Ao.js";import{G as A,b as O,c as H,U as y,d as V,e as g,u as P}from"./useComponentInterventionEformStore-CMy33xkJ.js";import{c,s as l,a as D}from"./index-BuVmIl8K.js";import{e as N}from"./lodash-DrHMlsdo.js";import{D as B,C as J}from"./CrackNoClass-0DSU7BAn.js";import{D as C}from"./urls-CvqtYZA-.js";import{C as E}from"./CrackYesClass-COntz77m.js";import{u as k}from"./useCameraStore-BwXVJhPe.js";import{u as S}from"./useAttachmentStore-DqM3autD.js";import{u as m}from"./authentication-handler-Pueb_EI7.js";import{D as b}from"./DefectNoClass-BqGKOkzR.js";import{i as I}from"./date-format-8-IvfSl3.js";import{M as w}from"./MachineSMUEnum-CgiCo9nf.js";import{u as R}from"./useGlobalConnectionStore-DV9B81de.js";import{m as f}from"./helpers-wUOLw-dU.js";class v extends B{setDefectHeaders(r){this.defectHeaders=N.filter(r,a=>a.category==="NORMAL"&&a.taskValue==="3")}setDefectNAHeaders(r){this.defectNAHeaders=N.filter(r,a=>(a.category==="NORMAL"||a.category==="CBM")&&a.taskValue==="4"),this.defectNAHeaders=N.orderBy(this.defectNAHeaders,[a=>Number(a.taskNo.replaceAll(/[a-zA-Z_;]/g,"")),a=>a.taskDesc])}}const Q=F({id:"ComponentInterventionDefects",state:()=>({stateLoading:!1,stateData:new v,stateComments:[],stateDefectFormData:new C,stateDefectNoFormData:new b,stateCrackFormData:new E,stateCrackSimpleFormData:new J,stateIsError:!1,stateHeaderId:"",stateDetailId:"",stateHeaderStatus:"",stateHeaderPlannerStatus:"",stateDefectFetched:!1,stateLoadDefectImages:!1,stateApproveBy:void 0,stateApproveDate:void 0,stateDefectPictures:{},stateDefectKey:1,stateDeclineReason:"",stateDeclineBy:{},stateDeclineDate:"",stateApprovedBy:{},stateApprovedDate:"",stateErrorMessage:"",stateCurrentUserGroup:"",stateDefectSMU:{},stateErrorByNetwork:!1}),getters:{Loading:e=>e.stateLoading,ApprovalData:e=>e.stateData,DefectKey:e=>e.stateDefectKey,DefectFormData:e=>e.stateDefectFormData,CrackFormData:e=>e.stateCrackFormData,ImagesDefect:()=>k().ImageObjects.find(r=>r.Id==="defect"),ImagesCrack:()=>k().ImageObjects.find(r=>r.Id==="crack"),IsError:e=>e.stateIsError,ErrorMessage:e=>e.stateErrorMessage,HeaderId:e=>e.stateHeaderId,DetailId:e=>e.stateDetailId,DataFetched:e=>e.stateDefectFetched,HeaderStatus:e=>e.stateHeaderStatus,HeaderPlannerStatus:e=>e.stateHeaderPlannerStatus,DefectPictures:e=>e.stateDefectPictures,LoadDefectImages:e=>e.stateLoadDefectImages,DeclineReason:e=>e.stateDeclineReason,DeclineBy:e=>e.stateDeclineBy,DeclineDate:e=>e.stateDeclineDate,ApprovedBy:e=>e.stateApprovedBy,ApprovedDate:e=>e.stateApprovedDate,Comments:e=>e.stateComments,ApproveBy:e=>e.stateApproveBy,ApproveDate:e=>e.stateApproveDate,DefectSMUHeader:e=>e.stateData.SMUDefectHeaders.find(r=>r.defectType=="machineSMU"),DefectSMUDetail:e=>e.stateDefectSMU,DefectSMUDetailDetail:e=>e.stateData.SMUDefectDetails.find(r=>r.defectHeaderId==e.stateDetailId),globalConnectionStore:()=>R()},actions:{setCurrentUserGroup(e){this.stateCurrentUserGroup=e},setHeaderId(e){this.stateHeaderId=e},setDefectFetched(e){this.stateDefectFetched=e},setDetailId(e){this.stateDetailId=e},createRequestBody(e){return{interventionId:e}},async getDefectsDataHeader(e){const r=this.createRequestBody(e),a=await c.post(`${A}`,r);this.stateData.setHeaders(a.data.result.content)},async getDefectsDataDetail(e){const r=this.createRequestBody(e),a=await c.post(`${O}`,r);this.stateData.setDetails(a.data.result.content)},toggleErrorByNetwork(e){this.stateErrorByNetwork=e},async getDefectsDataAll(e){var a,t,s,o,i;const r={interventionId:e,ver:"v1"};try{const p=await c.get(`${H}`,"",new URLSearchParams(r).toString());this.stateData.setHeaders(((a=p.data.result.content)==null?void 0:a.defectHeader)||[]),this.stateData.setDetails(((t=p.data.result.content)==null?void 0:t.defectDetail)||[]),this.stateComments=((s=p.data.result.content)==null?void 0:s.comment)||[],this.stateApproveBy=(o=p.data.result.content)==null?void 0:o.approveBy,this.stateApproveDate=(i=p.data.result.content)==null?void 0:i.approveDate}catch(p){const d=this.globalConnectionStore.checkIsErrorNoNetwork(p);this.stateErrorByNetwork=d,l("IRONS",p)}},async getDefectsData(e){this.stateLoading=!0;try{this.setDefectFetched(!1),await this.getDefectsDataAll(e),this.setDefectFetched(!0)}catch(r){m(r),console.error(r)}this.stateLoading=!1},setDefectGenericData(e){const r=S(),a=this.ApprovalData.DefectGenericHeaders.find(s=>s.id===e),t=this.ApprovalData.DefectGenericDetails.find(s=>s.defectHeaderId==e);if(t){this.setHeaderId(e),this.setDetailId(t.id),this.stateHeaderStatus=a==null?void 0:a.status,this.stateHeaderPlannerStatus=a==null?void 0:a.plannerStatus,this.stateDeclineReason=a==null?void 0:a.declineReason,this.stateDeclineDate=a==null?void 0:a.declineDate,this.stateDeclineBy=a==null?void 0:a.declineBy,this.stateApprovedBy=a==null?void 0:a.approvedBy,this.stateApprovedDate=a==null?void 0:a.approvedDate,t.detail.type!="NO"?(this.ImagesDefect.ImageInfos=[],this.stateDefectFormData.setAssetNumber(t.detail.assetNumber),this.stateDefectFormData.setDescription(t.detail.description),this.stateDefectFormData.setRaisedBy(t.detail.raisedBy),this.stateDefectFormData.setDate(t.detail.date),this.stateDefectFormData.setPlannedDuration(t.detail.plannedDuration),this.stateDefectFormData.setInstruction(t.detail.instruction),this.stateDefectFormData.setPriority(t.detail.priority),this.stateDefectFormData.setTitle((a==null?void 0:a.taskDesc)||""),this.stateDefectFormData.importParts(...JSON.parse(t.detail.parts)),this.stateDefectFormData.importLabours(...JSON.parse(t.detail.labours)),this.stateDefectFormData.importResources(...JSON.parse(t.detail.resources)),this.stateDefectFormData.importSymptoms(...JSON.parse(t.detail.symptoms)),this.stateDefectFormData.importCauses(...JSON.parse(t.detail.causes)),this.ImagesDefect.ImageInfos.push(...JSON.parse(t.detail.images))):(this.ImagesDefect.ImageInfos=[],this.stateDefectNoFormData.setAssetNumber(t.detail.assetNumber),this.stateDefectNoFormData.setDescription(t.detail.description),this.stateDefectNoFormData.setRaisedBy(t.detail.raisedBy),this.stateDefectNoFormData.setDate(t.detail.date),this.stateDefectNoFormData.setTitle((a==null?void 0:a.taskDesc)||""),this.stateDefectNoFormData.importActions(...JSON.parse(t.detail.actions)),this.ImagesDefect.ImageInfos.push(...JSON.parse(t.detail.images)));const s=[];return this.ImagesDefect.ImageInfos.forEach(o=>{s.push(r.downloadAttachment(o))}),Promise.all(s).then(o=>{o.forEach(i=>{const p=new Blob([i],{type:"image/png"});this.ImagesDefect.ImageBlobs.push(p)})}),t.detail.type}},setDefectData(e){const r=S(),a=this.ApprovalData.DefectHeaders.find(s=>s.id===e),t=this.ApprovalData.DefectDetails.find(s=>s.defectHeaderId==e);if(t){this.setHeaderId(e),this.setDetailId(t.id),this.stateHeaderStatus=a==null?void 0:a.status,this.stateHeaderPlannerStatus=a==null?void 0:a.plannerStatus,this.stateDeclineReason=a==null?void 0:a.declineReason,this.stateDeclineDate=a==null?void 0:a.declineDate,this.stateDeclineBy=a==null?void 0:a.declineBy,this.stateApprovedBy=a==null?void 0:a.approvedBy,this.stateApprovedDate=a==null?void 0:a.approvedDate,t.detail.type!="NO"?(this.ImagesDefect.ImageInfos=[],this.stateDefectFormData.setAssetNumber(t.detail.assetNumber),this.stateDefectFormData.setDescription(t.detail.description),this.stateDefectFormData.setRaisedBy(t.detail.raisedBy),this.stateDefectFormData.setDate(t.detail.date),this.stateDefectFormData.setPlannedDuration(t.detail.plannedDuration),this.stateDefectFormData.setInstruction(t.detail.instruction),this.stateDefectFormData.setPriority(t.detail.priority),this.stateDefectFormData.setTitle((a==null?void 0:a.taskDesc)||""),this.stateDefectFormData.importParts(...JSON.parse(t.detail.parts)),this.stateDefectFormData.importLabours(...JSON.parse(t.detail.labours)),this.stateDefectFormData.importResources(...JSON.parse(t.detail.resources)),this.stateDefectFormData.importSymptoms(...JSON.parse(t.detail.symptoms)),this.stateDefectFormData.importCauses(...JSON.parse(t.detail.causes)),this.ImagesDefect.ImageInfos.push(...JSON.parse(t.detail.images))):(this.ImagesDefect.ImageInfos=[],this.stateDefectNoFormData.setAssetNumber(t.detail.assetNumber),this.stateDefectNoFormData.setDescription(t.detail.description),this.stateDefectNoFormData.setRaisedBy(t.detail.raisedBy),this.stateDefectNoFormData.setDate(t.detail.date),this.stateDefectNoFormData.setTitle((a==null?void 0:a.taskDesc)||""),this.stateDefectNoFormData.importActions(...JSON.parse(t.detail.actions)),this.ImagesDefect.ImageInfos.push(...JSON.parse(t.detail.images)));const s=[];return this.ImagesDefect.ImageInfos.forEach(o=>{let i="";typeof o=="string"?i=o:i=o.filename,s.push(r.downloadAttachment(i))}),Promise.all(s).then(o=>{o.forEach(i=>{const p=new Blob([i],{type:"image/png"});this.ImagesDefect.ImageBlobs.push(p)})}),t.detail.type}},setSMUDefectData(e){let r=!1;const a=S(),t=this.ApprovalData.SMUDefectHeaders.find(o=>o.id===e),s=this.ApprovalData.SMUDefectDetails.find(o=>o.defectHeaderId==e);if(s){r=!0,this.setHeaderId(e),this.setDetailId(s.id),this.stateHeaderStatus=t==null?void 0:t.status,this.stateDefectSMU=s.detail;const o=[];this.ImagesDefect.ImageInfos.forEach(i=>{let p="";typeof i=="string"?p=i:p=i.filename,o.push(a.downloadAttachment(p))}),Promise.all(o).then(i=>{i.forEach(p=>{const d=new Blob([p],{type:"image/png"});this.ImagesDefect.ImageBlobs.push(d)})})}return r},getDefectData(e){const r=this.ApprovalData.DefectHeaders.find(t=>t.id===e),a=this.ApprovalData.DefectDetails.find(t=>t.defectHeaderId==e);return{header:r,detail:a}},getDefectGenericData(e){const r=this.ApprovalData.DefectGenericHeaders.find(t=>t.id===e),a=this.ApprovalData.DefectGenericDetails.find(t=>t.defectHeaderId==e);return{header:r,detail:a}},async updateDownloadHistory(e,r=!1){let a;r?a=this.ApprovalData.DefectGenericHeaders.find(o=>o.id===e):a=this.ApprovalData.DefectHeaders.find(o=>o.id===e);const t=D();if(!a)return;const s={id:a.id,updateParams:[{keyValue:a.key,propertyParams:[{propertyName:"downloadHistory",propertyValue:!0},{propertyName:"updatedBy",propertyValue:JSON.stringify({id:t.user.EmployeeId,name:t.user.Name})},{propertyName:"updatedDate",propertyValue:I()}]}],employee:{id:t.user.EmployeeId,name:t.user.Name}};try{this.stateIsError=!1,await c.post(`${y}`,s),a.downloadHistory?a.downloadHistory.push({downloadBy:{id:t.user.EmployeeId,name:t.user.Name}}):a.downloadHistory=[{downloadBy:{id:t.user.EmployeeId,name:t.user.Name}}]}catch(o){m(o),l("IRONS",o),console.log(o),this.stateIsError=!0}},async getDefectImages(e,r,a){const t={id:e,keyValue:r,propertyName:a},s={ver:"v1"};let o=[];const i=await c.post(`${V}?${new URLSearchParams(s).toString()}`,t);return N.isUndefined(i.data.result.content)||(o=i.data.result.content),o},setLoadingImages(e){this.stateLoadDefectImages=e},setNewDefectKey(){this.stateDefectKey+=1},async getDefectPictures(e){const r=this.ApprovalData.DefectDetails.find(a=>a.defectHeaderId==e);r&&(this.stateDefectPictures[e]=JSON.parse(r.detail.images))},getCrackPictures(e){const r=this.ApprovalData.CrackDetails.find(a=>a.defectHeaderId==e);r&&(this.stateDefectPictures[e]=JSON.parse(r.detail.images))},setDefectNewData(){var a;const e=this.ApprovalData.DefectDetails.find(t=>t.id===this.stateDetailId);e&&(e.detail.description=this.DefectFormData.Description.value,e.detail.plannedDuration=this.DefectFormData.PlannedDuration.value,e.detail.instruction=this.DefectFormData.Instruction.value,e.detail.priority=this.DefectFormData.Priority,e.detail.parts=JSON.stringify(this.DefectFormData.Parts),e.detail.labours=JSON.stringify(this.DefectFormData.Labours),e.detail.resources=JSON.stringify(this.DefectFormData.Resources.map(t=>t.value)),e.detail.symptoms=JSON.stringify(this.DefectFormData.Symptoms.map(t=>t.value)),e.detail.causes=JSON.stringify(this.DefectFormData.Causes.map(t=>t.value)),e.detail.images=JSON.stringify(((a=this.ImagesDefect)==null?void 0:a.ImageInfos)??[]));const r=this.ApprovalData.DefectHeaders.find(t=>t.id===this.stateHeaderId);r&&(r.status="Acknowledge")},createDefectDetail(){var r;const e=((r=this.ImagesDefect)==null?void 0:r.ImageInfos)??[];return{type:"YES",assetNumber:this.DefectFormData.AssetNumber,description:this.DefectFormData.Description.value,raisedBy:this.DefectFormData.RaisedBy,date:this.DefectFormData.Date,plannedDuration:this.DefectFormData.PlannedDuration.value,instruction:this.DefectFormData.Instruction.value,priority:this.DefectFormData.Priority,parts:JSON.stringify(this.DefectFormData.Parts),labours:JSON.stringify(this.DefectFormData.Labours),resources:JSON.stringify(this.DefectFormData.Resources.map(a=>a.value)),symptoms:JSON.stringify(this.DefectFormData.Symptoms.map(a=>a.value)),causes:JSON.stringify(this.DefectFormData.Causes.map(a=>a.value)),images:JSON.stringify(e),title:this.DefectFormData.Title}},async updateDefectDetail(e){var o,i,p;const r=D();let a;e?a=this.ApprovalData.DefectGenericDetails.find(d=>d.id===this.stateDetailId):a=this.ApprovalData.DefectDetails.find(d=>d.id===this.stateDetailId);const t=this.createDefectDetail(),s={id:this.DetailId,updateParams:[{keyValue:a.key,propertyParams:[{propertyName:"detail",propertyValue:JSON.stringify(t)},{propertyName:"updatedBy",propertyValue:JSON.stringify({id:r.user.EmployeeId,name:r.user.Name})},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}],employee:{id:r.user.EmployeeId,name:r.user.Name},userGroup:this.stateCurrentUserGroup};try{this.stateIsError=!1;const d=await c.post(`${g}`,s);return d.data.statusError==400||d.data.result.isError?(this.stateIsError=!0,d.data.result.message):""}catch(d){m(d),console.log(d),this.stateIsError=!0,P().toggleTaskAlreadyUpdatedStatus(!0);const u=f(((p=(i=(o=d==null?void 0:d.response)==null?void 0:o.data)==null?void 0:i.result)==null?void 0:p.message)??`${d}`);return l("IRONS",d),u}},async updateDefectDecline(e,r=!1,a=!1){var i,p,d;const t=D();let s;a?s=this.ApprovalData.DefectGenericHeaders.find(n=>n.id===this.stateHeaderId):s=this.ApprovalData.DefectHeaders.find(n=>n.id===this.stateHeaderId);const o={id:s.id,updateParams:[{keyValue:s.key,propertyParams:[{propertyName:r?"plannerStatus":"status",propertyValue:"Decline"},{propertyName:"declineReason",propertyValue:e},{propertyName:"updatedBy",propertyValue:JSON.stringify({id:t.user.EmployeeId,name:t.user.Name})},{propertyName:"updatedDate",propertyValue:I()},{propertyName:"declineBy",propertyValue:JSON.stringify({id:t.user.EmployeeId,name:t.user.Name})},{propertyName:"declineDate",propertyValue:I()}]}],employee:{id:t.user.EmployeeId,name:t.user.Name},userGroup:this.stateCurrentUserGroup};try{this.stateIsError=!1,await c.post(`${y}`,o),r?s.plannerStatus="Decline":s.status="Decline",s.declineReason=e,s.declineBy={id:t.user.EmployeeId,name:t.user.Name},s.declineDate=I()}catch(n){m(n),console.log(n),this.stateIsError=!0,this.stateErrorMessage=f(((d=(p=(i=n==null?void 0:n.response)==null?void 0:i.data)==null?void 0:p.result)==null?void 0:d.message)??`${n}`),l("IRONS",n)}},async updateDefectAcknowledge(e=!1,r=!1,a=!1,t=""){var p,d,n;const s=D();let o;r?o=this.ApprovalData.DefectGenericHeaders.find(u=>u.id===this.stateHeaderId):a?o=this.ApprovalData.SMUDefectHeaders.find(u=>u.id===this.stateHeaderId):o=this.ApprovalData.DefectHeaders.find(u=>u.id===this.stateHeaderId);const i={id:o.id,updateParams:[{keyValue:o.key,propertyParams:[{propertyName:e?"plannerStatus":"status",propertyValue:"Acknowledge"},{propertyName:"updatedBy",propertyValue:JSON.stringify({id:s.user.EmployeeId,name:s.user.Name})},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}],employee:{id:s.user.EmployeeId,name:s.user.Name},userGroup:this.stateCurrentUserGroup};t&&i.updateParams[0].propertyParams.push({propertyName:"taskDesc",propertyValue:t}),e||(i.updateParams[0].propertyParams=[...i.updateParams[0].propertyParams,{propertyName:"approvedBy",propertyValue:JSON.stringify({id:s.user.EmployeeId,name:s.user.Name})},{propertyName:"approvedDate",propertyValue:"<<ServerDateTime>>"}]);try{this.stateIsError=!1,await c.post(`${y}`,i),e?o.plannerStatus="Acknowledge":o.status="Acknowledge"}catch(u){m(u),console.log(u),this.stateIsError=!0,this.stateErrorMessage=f(((n=(d=(p=u==null?void 0:u.response)==null?void 0:p.data)==null?void 0:d.result)==null?void 0:n.message)??`${u}`),l("IRONS",u)}},async updateDefectMO(e,r,a=!1){var i,p,d;const t=D();let s;a?s=this.ApprovalData.DefectGenericHeaders.find(n=>n.id===e):s=this.ApprovalData.DefectHeaders.find(n=>n.id===e);const o={id:s.id,updateParams:[{keyValue:s.key,propertyParams:[{propertyName:"defectWorkorder",propertyValue:r},{propertyName:"updatedBy",propertyValue:JSON.stringify({id:t.user.EmployeeId,name:t.user.Name})},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}],employee:{id:t.user.EmployeeId,name:t.user.Name},userGroup:this.stateCurrentUserGroup};try{this.stateIsError=!1,await c.post(`${y}`,o),s.defectWorkorder=r}catch(n){m(n),console.log(n),this.stateIsError=!0,this.stateErrorMessage=f(((d=(p=(i=n==null?void 0:n.response)==null?void 0:i.data)==null?void 0:p.result)==null?void 0:d.message)??`${n}`),l("IRONS",n)}},async updateDefectDetailSMU(e={},r="",a=!1){var p,d,n;const t=D();let s=this.stateDefectSMU;N.isEmpty(e)||(s=e);let o=this.DetailId;r!=""&&(o=r);const i={id:o,updateParams:[{keyValue:o,propertyParams:[{propertyName:"detail",propertyValue:JSON.stringify(s)},{propertyName:"updatedBy",propertyValue:JSON.stringify({id:t.user.EmployeeId,name:t.user.Name})},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}],employee:{id:t.user.EmployeeId,name:t.user.Name},userGroup:this.stateCurrentUserGroup===""?t.user.Position:this.stateCurrentUserGroup};a&&(i.isEdit="true");try{this.stateIsError=!1,await c.post(`${g}`,i)}catch(u){m(u),console.log(u),this.stateIsError=!0,this.stateErrorMessage=f(((n=(d=(p=u==null?void 0:u.response)==null?void 0:p.data)==null?void 0:d.result)==null?void 0:n.message)??`${u}`),l("IRONS",u)}},async updateDefectHeaderSMU(e){const{isInRange:r,headerId:a,headerKey:t,isEdit:s}=e,o=D(),i={id:a,updateParams:[{keyValue:t,propertyParams:[{propertyName:"taskDesc",propertyValue:w.MACHINESMUTITLE()},{propertyName:"updatedBy",propertyValue:JSON.stringify({id:o.user.EmployeeId,name:o.user.Name})},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}],employee:{id:o.user.EmployeeId,name:o.user.Name},userGroup:this.stateCurrentUserGroup===""?o.user.Position:this.stateCurrentUserGroup};s&&(i.isEdit="true");try{this.stateIsError=!1,await c.post(`${y}`,i)}catch(p){m(p),console.log(p),l("IRONS",p)}},async updateRepairedStatus(e,r,a=!1){const t=D();let s;a?s=this.ApprovalData.DefectGenericHeaders.find(i=>i.id===e):s=this.ApprovalData.DefectHeaders.find(i=>i.id===e);const o={id:s.id,updateParams:[{keyValue:s.key,propertyParams:[{propertyName:"repairedStatus",propertyValue:r},{propertyName:"updatedBy",propertyValue:JSON.stringify({id:t.user.EmployeeId,name:t.user.Name})},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}],employee:{id:t.user.EmployeeId,name:t.user.Name},userGroup:this.stateCurrentUserGroup};try{this.stateIsError=!1,await c.post(`${y}`,o),s.repairedStatus=r}catch(i){m(i),console.log(i),this.stateIsError=!0,l("IRONS",i)}},async updateDefectConfirmedStatus(e,r=!1,a=""){var i,p,d;const t=D(),s=this.ApprovalData.DefectNAHeaders.find(n=>n.id===e),o={id:s.id,updateParams:[{keyValue:s.key,propertyParams:[{propertyName:r?"plannerCbmNAStatus":"cbmNAStatus",propertyValue:"Confirmed"},{propertyName:"updatedBy",propertyValue:JSON.stringify({id:t.user.EmployeeId,name:t.user.Name})},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}],employee:{id:t.user.EmployeeId,name:t.user.Name},userGroup:this.stateCurrentUserGroup};r||(o.updateParams[0].propertyParams=[...o.updateParams[0].propertyParams,{propertyName:"approvedBy",propertyValue:JSON.stringify({id:t.user.EmployeeId,name:t.user.Name})},{propertyName:"approvedDate",propertyValue:"<<ServerDateTime>>"}]),r||o.updateParams[0].propertyParams.push({propertyName:"approveReason",propertyValue:a});try{this.stateIsError=!1,await c.post(`${y}`,o),r?s.plannerCbmNAStatus="Confirmed":s.cbmNAStatus="Confirmed"}catch(n){m(n),console.log(n),this.stateIsError=!0,this.stateErrorMessage=f(((d=(p=(i=n==null?void 0:n.response)==null?void 0:i.data)==null?void 0:p.result)==null?void 0:d.message)??`${n}`),l("IRONS",n)}},async updateDefectDeclineStatus(e,r=!1,a){var i,p,d;const t=D(),s=this.ApprovalData.DefectNAHeaders.find(n=>n.id===e),o={id:s.id,updateParams:[{keyValue:s.key,propertyParams:[{propertyName:r?"plannerCbmNAStatus":"cbmNAStatus",propertyValue:"Decline"},{propertyName:"declineReason",propertyValue:a},{propertyName:"updatedBy",propertyValue:JSON.stringify({id:t.user.EmployeeId,name:t.user.Name})},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"},{propertyName:"declineBy",propertyValue:JSON.stringify({id:t.user.EmployeeId,name:t.user.Name})},{propertyName:"declineDate",propertyValue:"<<ServerDateTime>>"}]}],employee:{id:t.user.EmployeeId,name:t.user.Name},userGroup:this.stateCurrentUserGroup};try{this.stateIsError=!1,await c.post(`${y}`,o),r?s.plannerCbmNAStatus="Decline":s.cbmNAStatus="Decline"}catch(n){m(n),console.log(n),this.stateIsError=!0,this.stateErrorMessage=f(((d=(p=(i=n==null?void 0:n.response)==null?void 0:i.data)==null?void 0:p.result)==null?void 0:d.message)??`${n}`),l("IRONS",n)}},async updateCrackConfirmedStatus(e){var s,o,i;const r=D(),a=this.ApprovalData.CrackNAHeaders.find(p=>p.id===e),t={id:a.id,updateParams:[{keyValue:a.key,propertyParams:[{propertyName:"cbmNAStatus",propertyValue:"Confirmed"},{propertyName:"updatedBy",propertyValue:JSON.stringify({id:r.user.EmployeeId,name:r.user.Name})},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}],employee:{id:r.user.EmployeeId,name:r.user.Name},userGroup:this.stateCurrentUserGroup};try{this.stateIsError=!1,await c.post(`${y}`,t),a.cbmNAStatus="Confirmed"}catch(p){m(p),console.log(p),this.stateIsError=!0,this.stateErrorMessage=f(((i=(o=(s=p==null?void 0:p.response)==null?void 0:s.data)==null?void 0:o.result)==null?void 0:i.message)??`${p}`),l("IRONS",p)}},async updateCBMConfirmedStatus(e,r=!1,a){var d,n,u;const t=r?"appPlannerBy":"appSPVBy",s=r?"appPlannerDate":"appSPVDate",o=D(),i=this.ApprovalData.CBMHeaders.find(h=>h.id===e),p={id:i.id,updateParams:[{keyValue:i.key,propertyParams:[{propertyName:r?"plannerCbmNAStatus":"cbmNAStatus",propertyValue:"Confirmed"},{propertyName:r?"plannerApproveReason":"approveReason",propertyValue:a},{propertyName:"updatedBy",propertyValue:JSON.stringify({id:o.user.EmployeeId,name:o.user.Name})},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"},{propertyName:t,propertyValue:JSON.stringify({id:o.user.EmployeeId,name:o.user.Name})},{propertyName:s,propertyValue:"<<ServerDateTime>>"}]}],employee:{id:o.user.EmployeeId,name:o.user.Name},userGroup:this.stateCurrentUserGroup};try{this.stateIsError=!1,await c.post(`${y}`,p),r?i.plannerCbmNAStatus="Confirmed":i.cbmNAStatus="Confirmed"}catch(h){m(h),console.log(h),this.stateIsError=!0,this.stateErrorMessage=f(((u=(n=(d=h==null?void 0:h.response)==null?void 0:d.data)==null?void 0:n.result)==null?void 0:u.message)??`${h}`),l("IRONS",h)}},setCrackData(e){const r=S(),a=this.ApprovalData.CrackHeaders.find(s=>s.id===e),t=this.ApprovalData.CrackDetails.find(s=>s.defectHeaderId==e);if(t){this.setHeaderId(e),this.setDetailId(t.id),this.stateHeaderStatus=a==null?void 0:a.status,t.detail.type!="NO"?(this.stateCrackFormData.setAssetNumber(t.detail.assetNumber),this.stateCrackFormData.setDescription(t.detail.description),this.stateCrackFormData.setRaisedBy(t.detail.raisedBy),this.stateCrackFormData.setDate(t.detail.date),this.stateCrackFormData.setPlannedDuration(t.detail.plannedDuration),this.stateCrackFormData.setInstruction(t.detail.instruction),this.stateCrackFormData.setPriority(t.detail.priority),this.stateCrackFormData.setTitle((a==null?void 0:a.taskDesc)||""),this.stateCrackFormData.importParts(...JSON.parse(t.detail.parts)),this.stateCrackFormData.importLabours(...JSON.parse(t.detail.labours)),this.stateCrackFormData.importResources(...JSON.parse(t.detail.resources)),this.stateCrackFormData.importSymptoms(...JSON.parse(t.detail.symptoms)),this.stateCrackFormData.importCauses(...JSON.parse(t.detail.causes)),this.stateCrackFormData.importPreviousCrack(...JSON.parse(t.detail.previousCracks))):(this.stateCrackSimpleFormData.setAssetNumber(t.detail.assetNumber),this.stateCrackSimpleFormData.setDescription(t.detail.description),this.stateCrackSimpleFormData.setRaisedBy(t.detail.raisedBy),this.stateCrackSimpleFormData.setDate(t.detail.date),this.stateCrackSimpleFormData.setInstruction(t.detail.instruction),this.stateCrackSimpleFormData.setTitle((a==null?void 0:a.taskDesc)||""),this.stateCrackSimpleFormData.importPreviousCrack(...JSON.parse(t.detail.previousCracks))),this.ImagesCrack.ImageInfos.push(...JSON.parse(t.detail.images));const s=[];return this.ImagesCrack.ImageInfos.forEach(o=>{let i="";typeof o=="string"?i=o:i=o.filename,s.push(r.downloadAttachment(i))}),Promise.all(s).then(o=>{o.forEach(i=>{const p=new Blob([i],{type:"image/png"});this.ImagesCrack.ImageBlobs.push(p)})}),t.detail.type}},setCrackNewData(){const e=this.ApprovalData.CrackDetails.find(r=>r.id===this.stateDetailId);e&&(e.detail.description=this.CrackFormData.Description.value,e.detail.plannedDuration=this.CrackFormData.PlannedDuration.value,e.detail.instruction=this.CrackFormData.Instruction.value,e.detail.priority=this.CrackFormData.Priority,e.detail.parts=JSON.stringify(this.CrackFormData.Parts),e.detail.labours=JSON.stringify(this.CrackFormData.Labours),e.detail.resources=JSON.stringify(this.CrackFormData.Resources.map(r=>r.value)),e.detail.symptoms=JSON.stringify(this.CrackFormData.Symptoms.map(r=>r.value)),e.detail.causes=JSON.stringify(this.CrackFormData.Causes.map(r=>r.value)),e.detail.previousCracks=JSON.stringify(this.CrackFormData.CrackLength))},createCrackDetail(){var r;const e=((r=this.ImagesCrack)==null?void 0:r.ImageInfos)??[];return{type:"YES",assetNumber:this.CrackFormData.AssetNumber,description:this.CrackFormData.Description.value,raisedBy:this.CrackFormData.RaisedBy,date:this.CrackFormData.Date,plannedDuration:this.CrackFormData.PlannedDuration.value,instruction:this.CrackFormData.Instruction.value,priority:this.CrackFormData.Priority,parts:JSON.stringify(this.CrackFormData.Parts),labours:JSON.stringify(this.CrackFormData.Labours),resources:JSON.stringify(this.CrackFormData.Resources.map(a=>a.value)),symptoms:JSON.stringify(this.CrackFormData.Symptoms.map(a=>a.value)),causes:JSON.stringify(this.CrackFormData.Causes.map(a=>a.value)),images:JSON.stringify(e),previousCracks:JSON.stringify(this.CrackFormData.CrackLength)}},async updateCrackDetail(){var s,o,i;const e=D(),r=this.ApprovalData.CrackDetails.find(p=>p.id===this.stateDetailId),a=this.createCrackDetail(),t={id:this.DetailId,updateParams:[{keyValue:r.key,propertyParams:[{propertyName:"detail",propertyValue:JSON.stringify(a)},{propertyName:"updatedBy",propertyValue:JSON.stringify({id:e.user.EmployeeId,name:e.user.Name})},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}],employee:{id:e.user.EmployeeId,name:e.user.Name},userGroup:this.stateCurrentUserGroup};try{this.stateIsError=!1,await c.post(`${g}`,t)}catch(p){m(p),console.log(p),this.stateIsError=!0,this.stateErrorMessage=f(((i=(o=(s=p==null?void 0:p.response)==null?void 0:s.data)==null?void 0:o.result)==null?void 0:i.message)??`${p}`),l("IRONS",p)}},async updateCrackAcknowledge(){var t,s,o;const e=D(),r=this.ApprovalData.CrackHeaders.find(i=>i.id===this.stateHeaderId),a={id:r.id,updateParams:[{keyValue:r.key,propertyParams:[{propertyName:"status",propertyValue:"Acknowledge"},{propertyName:"updatedBy",propertyValue:JSON.stringify({id:e.user.EmployeeId,name:e.user.Name})},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}],employee:{id:e.user.EmployeeId,name:e.user.Name},userGroup:this.stateCurrentUserGroup};try{this.stateIsError=!1,await c.post(`${y}`,a),r.status="Acknowledge"}catch(i){m(i),console.log(i),this.stateIsError=!0,this.stateErrorMessage=f(((o=(s=(t=i==null?void 0:i.response)==null?void 0:t.data)==null?void 0:s.result)==null?void 0:o.message)??`${i}`),l("IRONS",i)}},async updateCrackMO(e,r){var o,i,p;const a=D(),t=this.ApprovalData.CrackHeaders.find(d=>d.id===e),s={id:t.id,updateParams:[{keyValue:t.key,propertyParams:[{propertyName:"defectWorkorder",propertyValue:r},{propertyName:"updatedBy",propertyValue:JSON.stringify({id:a.user.EmployeeId,name:a.user.Name})},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}],employee:{id:a.user.EmployeeId,name:a.user.Name},userGroup:this.stateCurrentUserGroup};try{this.stateIsError=!1,await c.post(`${y}`,s),t.defectWorkorder=r}catch(d){m(d),console.log(d),this.stateIsError=!0,this.stateErrorMessage=f(((p=(i=(o=d==null?void 0:d.response)==null?void 0:o.data)==null?void 0:i.result)==null?void 0:p.message)??`${d}`),l("IRONS",d)}},async updateCrackRepairedStatus(e){const r=D(),a=this.ApprovalData.CrackHeaders.find(s=>s.id===e),t={id:a.id,updateParams:[{keyValue:a.key,propertyParams:[{propertyName:"repairedStatus",propertyValue:"Repaired"},{propertyName:"updatedBy",propertyValue:JSON.stringify({id:r.user.EmployeeId,name:r.user.Name})},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}],employee:{id:r.user.EmployeeId,name:r.user.Name},userGroup:this.stateCurrentUserGroup};try{this.stateIsError=!1,await c.post(`${y}`,t),a.repairedStatus="Repaired"}catch(s){m(s),console.log(s),this.stateIsError=!0,l("IRONS",s)}},updateHeaderDefectSMU(e){const r=this.ApprovalData.SMUDefectHeaders.find(a=>a.id===e);this.stateHeaderStatus=N.isUndefined(r.plannerStatus)?"":r.plannerStatus},reset(){this.stateLoading=!1,this.stateData=new v,this.stateDefectFormData=new C,this.stateCrackFormData=new E,this.stateIsError=!1,this.stateHeaderId="",this.stateDetailId="",this.stateDefectFetched=!1,this.stateHeaderStatus="",this.stateHeaderPlannerStatus="",this.stateDeclineReason="",this.stateDeclineDate="",this.stateDeclineBy={},this.stateApprovedDate="",this.stateApprovedBy={},this.stateLoadDefectImages=!1,this.stateDefectKey=1},resetErrorStatus(){this.stateIsError=!1,this.stateErrorMessage=""}}});export{Q as u};
