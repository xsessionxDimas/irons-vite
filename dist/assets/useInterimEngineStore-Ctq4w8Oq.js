import{a as I,c as l,s as u}from"./index-BuVmIl8K.js";import{G as S,a as C,b as L,c as O,U as $,d as H,e as x,P as k,f as G,g as K,h as N,i as P,j,k as J}from"./urls-COjrEEs1.js";import{d as _}from"./pinia-BjOS2_Ao.js";import{e as h}from"./lodash-DrHMlsdo.js";import{o as W,p as q}from"./date-format-8-IvfSl3.js";import{C as z}from"./urls-B0Rq9QQ3.js";import{a as B}from"./element-plus-BeWdvTRa.js";import{u as c}from"./authentication-handler-Pueb_EI7.js";import{u as Z}from"./useGlobalConnectionStore-DV9B81de.js";import{u as Y}from"./prev-val-handler-DvA3D_kF.js";import{i as X}from"./urls-CPQ2HRXU.js";import{u as Q}from"./useCameraStore-BwXVJhPe.js";import{S as y}from"./number-format-BdMuQVyW.js";import{w as ee}from"./helpers-wUOLw-dU.js";import{C as te}from"./urls-hWHEBXep.js";import{C as U}from"./urls-D8F5Tyyp.js";import{s as M}from"./string-to-imageinfo-converter-Cdr1iOkP.js";import{i as R}from"./disabled-state-O9W-ZY8y.js";import{v as ae}from"./uuid-SoommWqA.js";const re="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/interim_engine_detail",b="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/interim_engine_detail/update_task_with_defect",Pe="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/interim_engine_defect_detail/get_data_by_param/",ve="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/interim_engine_defect_header/get_data_list_by_param?ver=v1",Ve="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/interim_engine_defect_detail/get_data_list_by_param?ver=v1",Ee="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/interim_engine_defect_header/update?ver=v1",De="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/interim_engine_defect_detail/update?ver=v1",Fe=`${re}/get_field_value`,we="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/interim_engine_defect_header/get_interim_defect_header",E=(e,t)=>{let a;switch(e.operatorMin){case"=":a=Number(t)==e.minValue;break;case"<":a=Number(t)<e.minValue;break;case">":a=Number(t)>e.minValue;break;case"<>":a=Number(t)>=e.minValue;break;case">=":a=Number(t)>=e.minValue;break;case"<=":a=Number(t)<=e.minValue;break}return a},D=(e,t)=>{let a;switch(e.operatorMax){case"=":a=Number(t)==e.maxValue;break;case"<":a=Number(t)<e.maxValue;break;case">":a=Number(t)>e.maxValue;break;case"<>":a=Number(t)<=e.maxValue;break;case">=":a=Number(t)>=e.maxValue;break;case"<=":a=Number(t)<=e.maxValue;break}return a},F=(e,t,a)=>{let r="";const s=a.operatorMin,o=a.operatorMax,i=s=="<>",p=s==">"&&o=="<=",n=s==">="&&o=="<",d=s==">"&&o=="<";return i||p||n||d?e&&t&&(r=a.cbmRating):(e||t)&&(r=a.cbmRating),r},w=_({id:"InterimGeneralForm",state:()=>({statePayload:{},stateUpdateParams:{},statePropertyParams:{},stateImageInfos:[],stateImageBlobs:[],statePreRiskImageInfos:[],statePreRiskImageBlobs:[],stateGeneralUpdated:!1,stateGeneralForm:{},initPreriskImages:[],stateSMUActual:0,stateSMUTolerance:{},stateSMUToleranceNotMapped:!1,stateIsSmuCameraDisabled:!1,stateIsSwingHourCameraDisabled:!1,stateIsTravelHourCameraDisabled:!1,stateIsRiskAssesmentPhotoTaken:!1,stateSelectedFitterShift:{},stateTimeStamp:"",stateShiftList:[],stateTimeZone:"+10.00",stateTimeZoneDesc:"AEST",stateIsSelectedFitterAlreadyLoggedIn:!1,stateFitterInfo:{},stateIsFitterLoggedInExist:!1,stateIsTruckAlreadyCheckedByOtherFitter:!1,stateCurrentPersoneel:{},stateHmOffset:0}),getters:{payload:e=>e.statePayload,selectedFitter:()=>v().employee,generalUpdated:e=>e.stateGeneralUpdated,smuActual:e=>e.stateSMUActual,generalForm:e=>e.stateGeneralForm,smuTolerance:e=>e.stateSMUTolerance,SMUToleranceNotMapped:e=>e.stateSMUToleranceNotMapped,IsRiskAssesmentPhotoTaken:e=>e.stateIsRiskAssesmentPhotoTaken,IsSelectedFitterAlreadyLoggedIn:e=>e.stateIsSelectedFitterAlreadyLoggedIn,FitterInfo:e=>e.stateFitterInfo,IsFitterLoggedInExist:e=>e.stateIsFitterLoggedInExist,CurrentPersoneel:e=>e.stateCurrentPersoneel,HmOffset:e=>e.stateHmOffset},actions:{setCurrentPersoneel(e){this.stateCurrentPersoneel=e},setIsFitterLoggedInExist(e){this.stateIsFitterLoggedInExist=e},setFitterInfo(e){this.stateFitterInfo=h.cloneDeep(e)},setFitterInfoFitter(e,t,a){this.stateFitterInfo.id=ae(),this.stateFitterInfo.employee={id:e.value,name:e.label},this.stateFitterInfo.timeLoggedIn=t,this.stateFitterInfo.shift=a},setFitterInfoIsIHaveReadChecked(e){this.stateFitterInfo.isIHaveReadChecked=e},setFitterInfoRiskPhotos(e){h.isUndefined(this.stateFitterInfo.riskPhotos)&&(this.stateFitterInfo.riskPhotos=[]),this.stateFitterInfo.riskPhotos=[...M(this.stateFitterInfo.riskPhotos),e],this.stateIsFitterLoggedInExist&&this.setGeneralFitterInfoToIndexedDB()},deleteFitterInfoRiskPhotos(e){this.stateFitterInfo.riskPhotos=M(this.stateFitterInfo.riskPhotos),this.stateFitterInfo.riskPhotos=this.stateFitterInfo.riskPhotos.filter(t=>e!=t.filename),this.setGeneralFitterInfoToIndexedDB()},async setGeneralFitterInfoToIndexedDB(e=!1){const t=h.cloneDeep(this.generalForm.log),a=t.findIndex(i=>i.employee.id==this.stateFitterInfo.employee.id);e&&a>=0?t[a]=this.stateFitterInfo:t.push(this.stateFitterInfo);const r=I(),s={id:this.generalForm.id,updateParams:[{keyValue:"GENERAL",propertyParams:[{propertyName:"log",propertyValue:JSON.stringify(t)}]}],employee:{id:r.user.EmployeeId,name:r.user.Name},localStatus:this.generalForm.status},o={ver:"v1"};try{await l.post(`${S}?${new URLSearchParams(o).toString()}`,s),this.stateGeneralForm.log=t}catch(i){u("IRONS",i),console.log("update log",i)}},async deleteGeneralFitterInfoFromIndexedDB(){try{this.stateIsFitterLoggedInExist=!1,this.stateFitterInfo={}}catch(e){console.log("error at indexeddb",e)}},setIsSelectedFitterAlreadyLoggedIn(e){this.stateIsSelectedFitterAlreadyLoggedIn=e},setPayloadId(e,t,a){this.statePayload.id=e,this.statePayload.updateParams=[],this.statePayload.employee={},this.statePayload.employee.id=t,this.statePayload.employee.name=a},addPropertyParam(e,t,a){const r=this.statePayload.updateParams.find(o=>o.keyValue===e);if(r)this.stateUpdateParams=r;else{const o={keyValue:e,propertyParams:[]};this.statePayload.updateParams.push(o),this.stateUpdateParams=o}const s=this.stateUpdateParams.propertyParams.find(o=>o.propertyName===t);if(s){s.propertyValue=a;return}this.stateUpdateParams.propertyParams.push({propertyName:t,propertyValue:a})},addUpdatedByAndDate(e,t){const a={id:e,name:t};this.addPropertyParam("GENERAL","updatedBy",JSON.stringify(a)),this.addPropertyParam("GENERAL","updatedDate","<<ServerDateTime>>"),this.addPropertyParam("GENERAL","status","On Progress"),this.generalForm.serviceStart==""&&this.generalForm.tsServiceStart==""&&(this.addPropertyParam("GENERAL","serviceStart","<<ServerDateTime>>"),this.addPropertyParam("GENERAL","tsServiceStart","<<ServerTimeStamp>>"))},async updateGeneralForm(){const e={ver:"v1"};this.statePayload.id=this.generalForm.id,this.statePayload.localStatus=this.generalForm.status;const t=v(),a=t.groups;let r=!0;if(a.forEach(s=>{s.doneTask<s.totalTask&&(r=!1)}),t.generalForm.riskAssesment[0].value.length>0&&this.addPropertyParam(this.generalForm.riskAssesment[0].key,"value",JSON.stringify(t.generalForm.riskAssesment[0].value)),this.generalForm.imageEquipment.length>0&&this.addPropertyParam("GENERAL","imageEquipment",JSON.stringify(this.generalForm.imageEquipment)),r){const s=await this.getServiceSheetHeaderKeyValue("status");if(s.toString().toLowerCase()=="open"||s.toString().toLowerCase()=="on progress")try{const o=await l.post(`${S}?${new URLSearchParams(e).toString()}`,this.statePayload);return this.stateGeneralUpdated=!0,this.stateGeneralForm.status="On Progress",o.data.result.content.updateParams.forEach(i=>{i.keyValue=="GENERAL"&&i.propertyParams.forEach(p=>{p.propertyName=="serviceStart"&&(this.stateGeneralForm.serviceStart=p.propertyValue)})}),this.stateIsFitterLoggedInExist||this.setGeneralFitterInfoToIndexedDB(),!1}catch(o){c(o),u("IRONS",o),console.log(o)}else return!0}else try{const s=await l.post(`${S}?${new URLSearchParams(e).toString()}`,this.statePayload);return this.stateGeneralUpdated=!0,this.stateGeneralForm.status="On Progress",s.data.result.content.updateParams.forEach(o=>{o.keyValue=="GENERAL"&&o.propertyParams.forEach(i=>{i.propertyName=="serviceStart"&&(this.stateGeneralForm.serviceStart=i.propertyValue)})}),this.stateIsFitterLoggedInExist||this.setGeneralFitterInfoToIndexedDB(),!1}catch(s){c(s),u("IRONS",s),console.log(s)}},pushNewImageInfos(e){this.stateImageInfos.push(e)},pushNewImageBlob(e){this.stateImageBlobs.push(e)},pushNewPreRiskImageInfos(e){this.statePreRiskImageInfos.push(e)},pushNewPreRiskImageBlob(e){this.statePreRiskImageBlobs.push(e)},resetGeneral(){this.stateGeneralUpdated=!1},setGeneralForm(e){this.stateIsRiskAssesmentPhotoTaken=!1,this.statePreRiskImageInfos=[],this.stateIsSmuCameraDisabled=!1,this.stateIsSwingHourCameraDisabled=!1,this.stateIsTravelHourCameraDisabled=!1,this.stateGeneralForm=e,h.isUndefined(e)||h.isUndefined(e.riskAssesment)||h.isUndefined(e.riskAssesment[0].value)||(this.initPreriskImages=h.cloneDeep(e.riskAssesment[0].value));try{const t=[this.generalForm.status,this.generalForm.imageEquipment],a=[this.generalForm.status,this.generalForm.swingHourImages],r=[this.generalForm.status,this.generalForm.travelHourImages];this.stateIsSmuCameraDisabled=R(...t),this.stateIsSwingHourCameraDisabled=R(...a),this.stateIsTravelHourCameraDisabled=R(...r)}catch(t){console.log(t)}},async getServiceSheetHeaderKeyVal(e,t){const a={id:this.stateGeneralForm.id,keyValue:"GENERAL",propertyName:e},r={ver:"v1"},s=B.service({lock:!0,text:`Check ${t} Value`,background:"rgba(0, 0, 0, 0.7)"});try{const o=await l.post(`${C}?${new URLSearchParams(r).toString()}`,a);return s.close(),o.data.result.content!=""?o.data.result.content:""}catch(o){return c(o),console.log(o),s.close(),u("IRONS",o),""}},async getServiceSheetHeaderKeyValue(e){const t={id:this.stateGeneralForm.id,keyValue:"GENERAL",propertyName:e},a={ver:"v1"};try{return(await l.post(`${C}?${new URLSearchParams(a).toString()}`,t)).data.result.content}catch(r){return c(r),u("IRONS",r),console.log(r),"error"}},async UpdateServiceEndMechanic(e){const t={ver:"v1"},a=this.statePayload.updateParams[0].propertyParams.filter(s=>s.propertyName=="updatedDate"),r={id:this.payload.id,updateParams:[{keyValue:"GENERAL",propertyParams:[e,{propertyName:"updatedBy",propertyValue:JSON.stringify(this.CurrentPersoneel.mechanic)},...a]}],employee:this.payload.employee,localStatus:this.generalForm.status};try{await l.post(`${S}?${new URLSearchParams(t).toString()}`,r),this.stateGeneralUpdated=!0}catch(s){c(s),u("IRONS",s),console.log(s)}},setSMUActual(e){this.stateSMUActual=e},async getSMUTolerance(){this.stateSMUToleranceNotMapped=!1;const e={Parameter:"",ParameterTo:"",ValueMin:"",ValueMinTo:"",ValueMax:"",ValueMaxTo:"",Uom:"",UomTo:"",StartDate:"",StartDateTo:"",EndDate:"",EndDateTo:"",Page:"1",PageSize:"1",Order:"",ver:"v1"},t=()=>{this.stateSMUTolerance={min:0,max:0},this.stateSMUToleranceNotMapped=!0,console.log("SMU tolerance not mapped on ADM")};try{const r=(await l.get(te,"",new URLSearchParams(e).toString())).data.result.content[0];h.isUndefined(r)?t():r.isActive?this.stateSMUTolerance={min:Number(r.valueMin),max:Number(r.valueMax)}:t()}catch(a){c(a),t(),u("IRONS",a)}},async getServerTimestamp(){const e={ver:"v1"};try{const t=await l.get(L,"",new URLSearchParams(e).toString());return this.stateTimeStamp=t.data.result.content,t.data.result.content}catch(t){return c(t),u("IRONS",t),console.log("error get server time",t),""}},async getShift(e){const t={Shift:e,StartHour:"",StartHourType:"",EndHour:"",EndHourType:"",StartDate:"",EndDate:"",ver:"v1",Page:"1",PageSize:"1",Order:""};try{const a=await l.get(U,"",new URLSearchParams(t).toString());return console.log("data shift",a),a.data.result.content.length>0?(this.stateSelectedFitterShift=a.data.result.content[0],console.log("🕐 selected fitter shift",this.stateSelectedFitterShift),a.data.result.content[0]):{}}catch(a){return c(a),u("IRONS",a),console.log(a),{}}},updateSMUImages(e){this.stateGeneralForm.imageEquipment=e},updateSwingImages(e){this.stateGeneralForm.swingHourImages=e},updateTravelImages(e){this.stateGeneralForm.travelHourImages=e},toggleChangeIsRiskAssesmentPhotoTaken(e){this.stateIsRiskAssesmentPhotoTaken=e},async updateServiceSheetHeaderToTrue(){const e=I(),t={id:this.generalForm.id,updateParams:[{keyValue:"GENERAL",propertyParams:[{propertyName:"isDeleted",propertyValue:"false"}]}],employee:{id:e.user.EmployeeId,name:e.user.Name},localStatus:this.generalForm.status},a={ver:"v1"};try{await l.post(`${S}?${new URLSearchParams(a).toString()}`,t)}catch(r){u("IRONS",r),console.log("upload risk Assesment",r)}},updateSMUONGeneral(e){const{value:t,smuBy:a,smuDate:r}=e;this.generalForm.smu=t,this.generalForm.smuBy=a,this.generalForm.smuDate=r;const s=v();s.stateGeneralForm.smu=t,s.stateGeneralForm.smuBy=a,s.stateGeneralForm.smuDate=r},updateSwingHourONGeneral(e){this.generalForm.swingHour=e},updateTravelHourONGeneral(e){this.generalForm.travelHour=e},async getShiftListData(){const e={Shift:"",StartHour:"",StartHourType:"",EndHour:"",EndHourType:"",StartDate:"",EndDate:"",ver:"v1",Page:"1",PageSize:"999",Order:""};try{const t={key:"TimeZone"},a=await l.post(`${O}?${new URLSearchParams(e).toString()}`,t);this.stateTimeZone=`${a.data.result.content.value}`;const r={key:"TimeZoneDesc"},s=await l.post(`${O}?${new URLSearchParams(e).toString()}`,r);this.stateTimeZoneDesc=`${s.data.result.content.value}`,console.log("timeZoneDescResponse",s);const o=await l.get(U,"",new URLSearchParams(e).toString());this.stateShiftList=o.data.result.content}catch(t){c(t),u("IRONS",t),console.log(t)}},async postCheckBeforeTruckItem(e,t){const r=v().employee;e.propertyParams.push({propertyName:"updatedBy",propertyValue:JSON.stringify(r)});const s={ver:"v1"},o={id:this.generalForm.id,updateParams:[e],employee:r};try{const i=this.generalForm.checkBeforeTruck.items.find(n=>n.key==t),p=await l.post(`${$}?${new URLSearchParams(s).toString()}`,o);p.data.result.message==y.TASK_UPDATED_BY_OTHER&&this.toggleIsTruckAlreadyCheckedByOtherFitter(!0),p.data.result.content.updateParams[0].propertyParams.forEach(n=>{n.propertyName=="updatedDate"&&(i.updatedDate=n.propertyValue),n.propertyName=="updatedBy"&&(i.updatedBy=JSON.parse(n.propertyValue))}),this.updateAllCheckBoxValue(p.data.result.content.checkBeforeTruck)}catch(i){c(i),u("IRONS",i)}},updateAllCheckBoxValue(e){e==null||e.forEach(t=>{this.generalForm.checkBeforeTruck.items.forEach(a=>{t.keyValue==a.key&&t.propertyParams.forEach(r=>{r.propertyName=="updatedDate"&&r.propertyValue&&(a.updatedDate=r.propertyValue),r.propertyName=="updatedBy"&&r.propertyValue!="null"&&(a.updatedBy=JSON.parse(r.propertyValue)),r.propertyName=="value"&&(a.value=r.propertyValue)})})})},toggleIsTruckAlreadyCheckedByOtherFitter(e){this.stateIsTruckAlreadyCheckedByOtherFitter=e},updateGeneralUpdated(e){this.stateGeneralUpdated=e},async updateSwingTravelValueToBE(e,t){const a=I(),r={id:this.generalForm.id,updateParams:[{keyValue:"GENERAL",propertyParams:[{propertyName:e,propertyValue:t}]}],employee:{id:a.user.EmployeeId,name:a.user.Name},localStatus:this.generalForm.status},s={ver:"v1"};try{await l.post(`${S}?${new URLSearchParams(s).toString()}`,r)}catch(o){u("IRONS",o),console.log("update swing/travel hour value",o)}},async updateSMUValueToBE(e){const{smu:t,hmOffset:a,smuDate:r,smuBy:s}=e;let o={id:this.generalForm.id,localStatus:this.stateGeneralForm.status};e.generalData&&(o=e.generalData);const i=I(),p={id:o.id,updateParams:[{keyValue:"GENERAL",propertyParams:[{propertyName:"smu",propertyValue:t},{propertyName:"smuBy",propertyValue:t!==""?JSON.stringify(s):""},{propertyName:"smuDate",propertyValue:t!==""?r:""}]}],employee:{id:i.user.EmployeeId,name:i.user.Name},localStatus:o.localStatus};a!=""&&p.updateParams[0].propertyParams.push({propertyName:"hmOffset",propertyValue:a});const n={ver:"v1"};try{await l.post(`${S}?${new URLSearchParams(n).toString()}`,p)}catch(d){u("IRONS",d),console.log("update smu/hmoffset value",d)}},async updateSMUImageToBE(e={id:"",employee:{},localStatus:"",imageEquipment:""}){const t=I();let a={id:this.generalForm.id,employee:{id:t.user.EmployeeId,name:t.user.Name},localStatus:this.generalForm.status,imageEquipment:this.generalForm.imageEquipment};e.id!=""&&(a=e);const r={id:this.generalForm.id,updateParams:[{keyValue:"GENERAL",propertyParams:[{propertyName:"imageEquipment",propertyValue:JSON.stringify(a.imageEquipment)}]}],employee:a.employee,localStatus:a.localStatus},s={ver:"v1"};try{return await l.post(`${S}?${new URLSearchParams(s).toString()}`,r)}catch(o){u("IRONS",o),console.log("update smu image value",o)}},async updateTravelSwingImageToBE(e,t){const a=I(),r={id:this.generalForm.id,updateParams:[{keyValue:"GENERAL",propertyParams:[{propertyName:e,propertyValue:JSON.stringify(t)}]}],employee:{id:a.user.EmployeeId,name:a.user.Name},localStatus:this.generalForm.status},s={ver:"v1"};try{await l.post(`${S}?${new URLSearchParams(s).toString()}`,r)}catch(o){u("IRONS",o),console.log(`update ${e} image value`,o)}},async getHmOffsetValue(e){this.stateHmOffset=0;const t=v();if(t.generalForm)if(t.generalForm.smu)h.isUndefined(t.generalForm.hmOffset)||h.isNull(t.generalForm.hmOffset)?this.stateHmOffset="Not Applicable":this.stateHmOffset=t.generalForm.hmOffset;else{const a={ver:"v1",equipmentNo:t.unitNumber,siteId:e,asIsDate:W()};try{const r=await l.get(`${H}`,"",new URLSearchParams(a).toString());r.data.result.content.totalData==0?this.stateHmOffset=0:r.data.result.content.totalData>0&&(this.stateHmOffset=r.data.result.content.hmOffsetList[0].hmOffset)}catch(r){u("IRONS",r),console.log("error get hm offset",r)}}}}}),v=_({id:"InterimEngineStore",state:()=>({stateServiceSheets:[],stateGroups:[],stateSelectedSubGroups:[],stateGeneralForm:{},stateModelId:"",stateModelName:"",statePsTypeId:"",stateWorkOrder:"",stateUnitNumber:"",stateEmployee:{},stateMeasurementValue:"",stateImageKey:"",stateUOM:"",stateSelectedGroup:void 0,stateIsSet:!1,stateCBMFormulas:[],stateTaskUpdated:void 0,stateServiceStart:"",stateShift:"",stateCheckbeforeTruck:[],stateRatingNotMapped:!1,stateOilToleranceNotMapped:!1,stateOilTolerance:{},stateTaskAlreadyUpdated:!1,stateFormAlreadySubmitted:!1,stateTaskErrorDialog:!1,stateErrorMessageTaskErrorDialog:"",stateFormAlreadyClose:!1,stateIsFormSelectedByOtherSupervisor:!1,stateStoredDisableKeyValue:[],stateItemKey:"",stateFromHomePage:!0,stateAvgTargetKey:"",stateInputCameraMandatoryKey:"",stateStoredSuspensionCylinderValue:[],stateStoredAdjustedSuspensionCylinderValue:[],stateShowSCConfirmToSPC:!1,stateShowConfirmToCalibrateSC:!1,stateShowSCAdjustmentWarning:!1,stateStoredAdjustmentOptionValue:"",stateStoredBrakeTypeValue:[],stateIsShowCalibrationConfirm:!1,stateShowPreTaskNotComplete:!1,stateToggleExpandTaskGroup:!1,stateTaskGroupClosed:100}),getters:{serviceSheets:e=>e.stateServiceSheets,groups:e=>e.stateGroups,selectedSubGroups:e=>e.stateSelectedSubGroups,generalForm:e=>e.stateGeneralForm,employee:e=>e.stateEmployee,isSet:e=>e.stateIsSet,selectedGroup:e=>e.stateSelectedGroup,taskUpdated:e=>e.stateTaskUpdated,serviceStart:e=>e.stateServiceStart,shift:e=>e.stateShift,checkBeforeTruck:e=>e.stateCheckbeforeTruck,taskErrorDialog:e=>e.stateTaskErrorDialog,errorMessageTaskErrorDialog:e=>e.stateErrorMessageTaskErrorDialog,ratingNotMapped:e=>e.stateRatingNotMapped,taskAlreadyUpdated:e=>e.stateTaskAlreadyUpdated,unitNumber:e=>e.stateUnitNumber,oilTolerance:e=>e.stateOilTolerance,formAlreadySubmitted:e=>e.stateFormAlreadySubmitted,formAlreadyClose:e=>e.stateFormAlreadyClose,generalFormStore:()=>w(),isAllTaskDone:e=>{let t=!0;return e.stateGroups.forEach((a,r)=>{r!=0&&t&&a.totalTask!=a.doneTask&&(t=!1)}),t},percentageTaskProgressAllTab:e=>ee(e.stateGroups),globalConnectionStore:()=>Z(),cameraStore:()=>Q()},actions:{setInputCameraMandatoryKey(e){this.stateInputCameraMandatoryKey=e},setAvgTargetKey(e){this.stateAvgTargetKey=e},setFromHomePage(e){this.stateFromHomePage=e},setStateItemKey(e){this.stateItemKey=e},updateStoredDisableKeyValue(e){this.stateStoredDisableKeyValue=e},pushStoredDisabledItems(e){this.stateStoredDisableKeyValue.push(e)},updateAllItems(e,t){this.stateStoredDisableKeyValue.forEach(a=>{a.key==e&&(a.value=t)})},toggleFormAlreadySubmitted(e){this.stateFormAlreadySubmitted=e},toggleFormAlreadyClose(e){this.stateFormAlreadyClose=e},toogleTaskErrorDialog(e){this.stateTaskErrorDialog=e},getGroups(){let e=[{id:"1",modelId:"",psTypeId:"",workOrder:"",groupName:"General",groupSeq:1,key:"1",headerId:"g1",isActive:"",isDeleted:"",createdBy:{id:"",name:""},createdDate:"",updatedBy:"",updatedDate:"",_rid:"",_self:"",_etag:"",_attachments:"",_ts:0,isSelected:!0,groupLabel:"General",subGroup:[],totalTask:0,doneTask:0}];this.serviceSheets.forEach(t=>{const a={id:t.id,modelId:t.modelId,psTypeId:t.psTypeId,workOrder:t.workOrder,groupName:t.groupName,groupSeq:t.groupSeq,key:t.key,headerId:t.headerId,isActive:t.isActive,isDeleted:t.isDeleted,createdBy:t.createdBy,createdDate:t.createdDate,updatedBy:t.updatedBy,updatedDate:t.updatedDate,_rid:t._rid,_self:t._self,_etag:t._etag,_attachments:t._attachments,_ts:t._ts,isSelected:!1,groupLabel:t.subGroup[0].name,subGroup:t.subGroup,totalTask:0,doneTask:0,isDisable:h.isUndefined(t.isDisable)?"false":t.isDisable};e.push(a)}),e=h.sortBy(e,"groupSeq"),this.stateGroups=e},getSubGroups(){const e=this.groups.find(t=>t.isSelected);if(e.groupSeq==1)this.stateSelectedSubGroups=[];else{const t=this.serviceSheets.find(a=>e.id===a.id);this.stateSelectedSubGroups=t.subGroup}},setSelectedGroup(e){this.stateGroups.forEach(t=>{t.id===e?t.isSelected=!0:t.isSelected=!1}),this.stateSelectedGroup=this.groups.find(t=>t.isSelected),this.getSubGroups()},setMeasurementValueAndUOM(e,t,a){this.stateMeasurementValue=e,this.stateUOM=t,this.stateImageKey=a},setModelAndPsTypeId(e,t,a,r,s){this.stateModelId=e,this.statePsTypeId=t,this.stateWorkOrder=a,this.stateModelName=r,this.stateUnitNumber=s},resetTaskUpdated(){this.stateTaskUpdated=void 0},async postGenerateServiceSheet(e,t,a){const r={employee:{id:e,name:t},modelId:this.stateModelId,psTypeId:this.statePsTypeId,workOrder:this.stateWorkOrder,unitNumber:this.stateUnitNumber,siteId:a},s={ver:"v1"},o=await l.post(`${x}?${new URLSearchParams(s).toString()}`,r);if(o.data.result.message=="Cannot Access With Different Supervisor")return this.stateIsFormSelectedByOtherSupervisor=!0,!1;try{return this.stateGeneralForm=o.data.result.content.general,this.setCheckboxes(),this.stateServiceSheets=o.data.result.content.suckBlowSheet,this.getGroups(),this.getTaskProgress(),this.stateSelectedGroup=this.groups[0],this.stateIsSet=!0,!0}catch(i){u("IRONS",i);try{return c(i),console.log(i),!1}catch(p){console.log("error",p)}}},changeIsFormSelectedByOtherSupervisor(e){this.stateIsFormSelectedByOtherSupervisor=e},setCheckboxes(){this.stateCheckbeforeTruck=[],this.generalForm.checkBeforeTruck.items.forEach(e=>{this.stateCheckbeforeTruck.push({label:e.caption,value:!1})})},setTaskUpdated(){this.stateTaskUpdated=!0},clearTruckCheckBoxes(){this.stateCheckbeforeTruck.forEach(e=>{e.value=!1})},async updateServiceSheetTaskValue(e,t,a,r=!0){let s=!1;const o={ver:"v1"};try{const i=this.groups.find(d=>d.isSelected),p={headerId:i.headerId,workorder:i.workOrder,id:i.id,updateParams:e,employee:{id:this.employee.id,name:this.employee.name}};this.stateTaskUpdated=!1;const n=await l.post(`${k}?${new URLSearchParams(o).toString()}`,p);switch(n.data.result.message){case y.SUBMITTED:this.stateFormAlreadySubmitted=!0;break;case y.CLOSE:this.stateFormAlreadyClose=!0;break;case y.TASK_UPDATED_BY_OTHER:this.stateTaskAlreadyUpdated=!0;break;default:n.data.statusCode==400&&(this.stateTaskErrorDialog=!0,this.stateErrorMessageTaskErrorDialog=n.data.result.message);break}this.getTaskProgress(),r&&this.updateGroupByParam(i==null?void 0:i.groupName),s=!0,this.setTaskUpdated()}catch(i){const p=this.globalConnectionStore.checkIsErrorNoNetwork(i);this.globalConnectionStore.setSubmitConnectionError(p),c(i),p&&(s=!1),u("IRONS",i),console.log(i)}return this.stateTaskUpdated=!0,s},async getTaskProgress(){const e={ver:"v1"};try{const t={modelId:this.generalForm.modelId,psTypeId:this.generalForm.psTypeId,workOrder:this.generalForm.workOrder,headerId:this.serviceSheets[0].headerId};(await l.post(`${G}?${new URLSearchParams(e).toString()}`,t)).data.result.content.forEach(r=>{const s=this.groups.find(o=>r.group===o.key);s&&(s.doneTask=r.doneTask,s.totalTask=r.totalTask)})}catch(t){u("IRONS",t),console.log(t)}},async updateGroupByParam(e){if(e!=="General")try{const t={modelId:this.generalForm.modelId,psTypeId:this.generalForm.psTypeId,workOrder:this.generalForm.workOrder,groupName:e},a={ver:"v1"},r=await l.post(`${K}?${new URLSearchParams(a).toString()}`,t);this.stateSelectedSubGroups=r.data.result.content.subGroup,this.stateSelectedSubGroups.forEach(s=>{s.taskGroup.forEach(o=>{o.task.forEach(i=>{!h.isUndefined(i.adjustment)&&i.adjustment.rating&&(i.isShowAdjustmentRow=!0)})})}),this.resetCollapse()}catch(t){c(t),u("IRONS",t),console.log(t)}else await w().getServerTimestamp()},async getCBMResult(e,t){var o,i;let a,r="";e.items.forEach(p=>{(p.categoryItemType=="dropdownTool"||p.categoryItemType=="dropdownToolDisc")&&(r=p.value)});const s=this.stateCBMFormulas.filter(p=>{const n=p.taskKey;if(t.categoryItemType=="paramRatingDynamic"){const d=n==e.key,m=p.cbmType==r;return d&&m}else return n==e.key});if(s.length>0){if(t.value==="")return await this.deleteExisitingDefectCBMAuto(e),{value:"",status:!0};if(console.log(Number(t.value)),s.every(p=>{const n=E(p,t.value),d=D(p,t.value);return a=F(n,d,p),console.log("checkMin",n,"checkMax",d,"formula",p),!a}),a){const p=e.items.find(n=>n.categoryItemType=="targetRating");if(a=="C"||a=="X"){const n=I(),d={ver:"v1"},m=`${e.description.split(";")[0]};${e.description.split(";")[1]}`,g={updateParams:[{keyValue:e.key,propertyParams:[{propertyName:"taskValue",propertyValue:a},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}],headerId:this.selectedGroup.headerId,workOrder:this.selectedGroup.workOrder,id:(o=this.selectedGroup)==null?void 0:o.id,employee:this.employee,defectHeader:{workorder:this.generalForm.workOrder,form:this.generalForm.form,serviceSheetDetailId:(i=this.selectedGroup)==null?void 0:i.id,category:e.category,taskId:e.key,taskNo:m,taskDesc:e.items[2].value,defectWorkorder:"",formDefect:"",defectType:"",cbmMeasurement:this.stateMeasurementValue,cbmUom:this.stateUOM,cbmImageKey:this.stateImageKey,cbmImageProp:"value",isCbmAdjusment:"false",taskValue:a,repairedStatus:"Not-Repaired",cbmNAStatus:"Not-Confirm",supervisor:{id:n.user.EmployeeId,name:n.user.Name},status:"Submit"}},T=await l.post(`${b}?${new URLSearchParams(d).toString()}`,g);if(T.data.result.message==y.TASK_UPDATED_BY_OTHER)return this.stateTaskAlreadyUpdated=!0,{value:"",status:!1};if(T.data.result.message==y.SUBMITTED)return this.stateFormAlreadySubmitted=!0,{value:"",status:!1};if(T.data.result.message==y.CLOSE)return this.stateFormAlreadyClose=!0,{value:"",status:!1};const f=[{keyValue:p.key,propertyParams:[{propertyName:"value",propertyValue:a},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}];return await this.updateItemServiceSheetDetail(f),this.stateMeasurementValue="",this.stateUOM="",this.stateImageKey="",{value:a,status:!0}}else{p.value=a;const n=[{keyValue:p.key,propertyParams:[{propertyName:"value",propertyValue:a},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]},{keyValue:e.key,propertyParams:[{propertyName:"taskValue",propertyValue:a},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}];return await this.updateServiceSheetTaskValue(n,this.employee.id.toString(),this.employee.name,!1),{value:a,status:!0}}}else return await this.deleteExisitingDefectCBMAuto(e),{value:"",status:!0}}else return t.categoryItemType=="paramRatingDynamic"&&!t.value?{value:"",status:!0}:(this.stateRatingNotMapped=!0,console.log("rating CBM for this task is not mapped on ADM"),{value:"",status:!1})},async deleteExisitingDefectCBMAuto(e){const t={ver:"v1"};let a={};const r={keyValue:e.key,propertyParams:[{propertyName:"taskValue",propertyValue:""},{propertyName:"updatedBy",propertyValue:""},{propertyName:"updatedDate",propertyValue:""}]};e.items.forEach(async i=>{if(i.categoryItemType=="targetRating"||e.category==="CBM"&&i.itemType=="dropDown"||e.category==="NORMAL"&&i.itemType=="dropDown"||e.category==="CRACK"&&i.itemType=="dropDown"){if(a={keyValue:i.key,propertyParams:[{propertyName:"value",propertyValue:""},{propertyName:"updatedBy",propertyValue:""},{propertyName:"updatedDate",propertyValue:""}]},i.value=="C"||i.value=="X"){const p={taskId:e.key,workorder:this.stateWorkOrder},d=(await l.post(`${N}?${new URLSearchParams(t).toString()}`,p)).data.result.content,m={id:d.id,updateParams:[{keyValue:d.key,propertyParams:[{propertyName:"isActive",propertyValue:"false"}]}],employee:this.employee};try{await l.post(`${P}?${new URLSearchParams(t).toString()}`,m)}catch(g){c(g),u("IRONS",g),console.log(g)}}i.value=""}});const s=[a,r],o={headerId:this.stateSelectedGroup.headerId,workorder:this.stateSelectedGroup.workOrder,id:this.stateSelectedGroup.id,updateParams:s,employee:this.employee};try{await l.post(`${k}?${new URLSearchParams(t).toString()}`,o)}catch(i){c(i),u("IRONS",i),console.log(i)}},async getEhmsRating(){const e={ver:"v1",model:this.stateModelName,psType:this.statePsTypeId};if(this.stateModelName&&this.statePsTypeId)try{const t=await l.get(j,"",new URLSearchParams(e).toString());this.stateCBMFormulas=t.data.result.content[0].detail}catch(t){c(t),u("IRONS",t),console.log(t)}},async getValueFromItemKey(e){const t={id:this.selectedGroup.id,keyValue:e,propertyName:"value"},a={ver:"v1"};let r="";const s=await l.post(`${J}?${new URLSearchParams(a).toString()}`,t);return h.isUndefined(s.data.result.content)||(r=s.data.result.content),r},updateSelectedFitter(e){this.stateEmployee=e},updateServiceStart(e){const t=w();this.stateServiceStart=e,this.stateShift=q(t.stateTimeZone)},resetMechanic(){this.stateEmployee={},this.stateServiceStart="",this.stateShift=""},updateGeneralValue(e,t){this.stateGeneralForm[e]=t},setNextPage(){const e=this.stateGroups.findIndex(r=>{var s;return r.groupName==((s=this.stateSelectedGroup)==null?void 0:s.groupName)});let t=1,a=this.stateGroups[e+t];for(;!h.isUndefined(a.isDisable)&&a.isDisable=="true";)t++,a=this.stateGroups[e+t];this.setSelectedGroup(a.id),this.updateGroupByParam(a.groupName),window.scrollTo({top:0,behavior:"smooth"})},async setShowNextPage(e=""){const t={ver:"v1"};let a=!0;try{const r={modelId:this.generalForm.modelId,psTypeId:this.generalForm.psTypeId,workOrder:this.generalForm.workOrder,headerId:this.serviceSheets[0].headerId},s=await l.post(`${G}?${new URLSearchParams(t).toString()}`,r);s.data.result.content.length<1&&(a=!1),s.data.result.content.forEach(o=>{o.doneTask!=o.totalTask&&(a=!1)})}catch(r){c(r),console.log(r),a=!1,u("IRONS",r)}if(a)if(await w().getServiceSheetHeaderKeyValue("status")=="Submited")e!="Submit"?(this.setNextPage(),this.stateFormAlreadySubmitted=!1):this.stateFormAlreadySubmitted=!0;else return!0;else{const r="PRE_SERVICE_OPERATIONAL_CHECK";if(this.selectedGroup.groupName==r){await this.getTaskProgress();const s=this.groups.find(o=>o.groupName==r);s.doneTask!=s.totalTask?(this.setSelectedGroup(s.id),this.updateGroupByParam(s.groupName),this.stateShowPreTaskNotComplete=!0):this.setNextPage()}else this.setNextPage();return!1}},async submitEform(){const e={ver:"v1"},t=[{propertyName:"status",propertyValue:"Submited"},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"serviceEnd",propertyValue:"<<ServerDateTime>>"},{propertyName:"tsServiceEnd",propertyValue:"<<ServerTimeStamp>>"},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}],a={id:this.generalForm.id,updateParams:[{keyValue:"GENERAL",propertyParams:t}],employee:this.employee,localStatus:this.generalForm.status};try{return await l.post(`${S}?${new URLSearchParams(e).toString()}`,a),!0}catch(r){return u("IRONS",r),console.log(r),!1}},async updateDefect(e,t,a){var n,d;const r=I(),s={ver:"v1"},o=e.description.split(" ")[0].replaceAll(".","");let i="";o.includes(";;")?i=`${o.split(";;")[0]};${o.split(";;")[1]}`:i=`${o.split(";")[0]};${o.split(";")[1]}`,console.log(e.description);const p={updateParams:[{keyValue:e.key,propertyParams:[{propertyName:"taskValue",propertyValue:t},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}],headerId:this.selectedGroup.headerId,workorder:this.selectedGroup.workOrder,id:(n=this.selectedGroup)==null?void 0:n.id,employee:this.employee,defectHeader:{workorder:this.generalForm.workOrder,form:this.generalForm.form,serviceSheetDetailId:(d=this.selectedGroup)==null?void 0:d.id,category:e.category,taskId:e.key,taskNo:i,taskDesc:e.items[2].value,defectWorkorder:"",formDefect:"",defectType:"",cbmMeasurement:this.stateMeasurementValue,cbmUom:this.stateUOM,cbmImageKey:this.stateImageKey,cbmImageProp:"value",isCbmAdjusment:"false",taskValue:t,repairedStatus:"Not-Repaired",cbmNAStatus:"Not-Confirm",supervisor:{id:r.user.EmployeeId,name:r.user.Name},status:"Submit"}};try{const m=await l.post(`${b}?${new URLSearchParams(s).toString()}`,p);if(m.data.result.message==y.SUBMITTED)return this.stateFormAlreadySubmitted=!0,!1;if(m.data.result.message==y.CLOSE)return this.stateFormAlreadyClose=!0,!1;if(m.data.result.message==y.TASK_UPDATED_BY_OTHER)return this.stateTaskAlreadyUpdated=!0,!1;this.stateMeasurementValue="",this.stateUOM="",this.stateImageKey="";let g={},T={};a.categoryItemType=="resultRating"&&(T={keyValue:e.key,propertyParams:[{propertyName:"taskNormalValue",propertyValue:""}]},e.items.forEach(V=>{V.categoryItemType=="resultStatus"&&(g={keyValue:V.key,propertyParams:[{propertyName:"value",propertyValue:""},{propertyName:"updatedBy",propertyValue:""},{propertyName:"updatedDate",propertyValue:""}]})}));const f=[{keyValue:a.key,propertyParams:[{propertyName:"value",propertyValue:t},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}];a.categoryItemType=="resultRating"&&(f.push(g),f.push(T)),await this.updateItemServiceSheetDetail(f);const A=this.groups.find(V=>V.isSelected);return this.getTaskProgress(),this.updateGroupByParam(A==null?void 0:A.groupName),!0}catch(m){return c(m),u("IRONS",m),console.log(m),!1}},toggleNotMapped(e){this.stateRatingNotMapped=e},async getOilTolerance(){this.stateOilToleranceNotMapped=!1;const e={Model:"",PsType:"",Parameter:"",Uom:"",StartDate:"",EndDate:"",Page:"1",PageSize:"1",Order:"",ver:"v1"},t=()=>{this.stateOilTolerance={min:-5,max:5,uom:"%"},this.stateOilToleranceNotMapped=!0,console.log("oil tolerance not mapped on ADM")};try{const r=(await l.get(z,"",new URLSearchParams(e).toString())).data.result.content[0];h.isUndefined(r)?t():r.isActive?this.stateOilTolerance={min:Number(r.valueMin),max:Number(r.valueMax),uom:r.uom}:t()}catch(a){c(a),t(),u("IRONS",a)}},toggleTaskAlreadyUpdatedStatus(e){this.stateTaskAlreadyUpdated=e},async updateRiskAssesment(e){this.generalForm.riskAssesment[0].value=e,await this.updatePreRiskAssesmentToBE()},async deleteRisAssesmentPic(e){let t=this.generalForm.riskAssesment[0].value;t=t.filter(a=>a.image!=e),this.generalForm.riskAssesment[0].value=t,await this.updatePreRiskAssesmentToBE()},async updatePreRiskAssesmentToBE(){const e={id:this.generalForm.id,updateParams:[{keyValue:this.generalForm.riskAssesment[0].key,propertyParams:[{propertyName:"value",propertyValue:JSON.stringify(this.generalForm.riskAssesment[0].value)}]}],employee:this.stateEmployee,localStatus:this.generalForm.status},t={ver:"v1"};try{const a=await l.post(`${S}?${new URLSearchParams(t).toString()}`,e);this.generalFormStore.updateAllCheckBoxValue(a.data.result.content.checkBeforeTruck)}catch(a){c(a),u("IRONS",a),console.log(a),console.log("upload risk Assesment",a)}},async updateItemServiceSheetDetail(e){const t={ver:"v1"},a=this.groups.find(s=>s.isSelected),r={headerId:a.headerId,workorder:a.workOrder,id:a.id,updateParams:e,employee:{id:this.employee.id,name:this.employee.name}};try{await l.post(`${k}?${new URLSearchParams(t).toString()}`,r)}catch(s){c(s),u("IRONS",s),console.log(s),console.log("error update item",s)}},async getAdjusmentRating(e){var i;const t={ver:"v1"};let a;const r=this.stateCBMFormulas.filter(p=>{const n=p.taskKey;if(typeof e.items[0].value=="string")return n==e.key});if(r.length>0&&r.every(p=>{const n=E(p,e.adjustment.measurement),d=D(p,e.adjustment.measurement);return a=F(n,d,p),!a}),e.adjustment.rating=a,a){const p={taskId:e.key,workorder:this.stateWorkOrder},d=(await l.post(`${N}?${new URLSearchParams(t).toString()}`,p)).data.result.content;let m;a=="C"||a=="X"?m={id:d.id,updateParams:[{keyValue:d.key,propertyParams:[{propertyName:"taskValue",propertyValue:a},{propertyName:"cbmImageKey",propertyValue:e.adjustment.key},{propertyName:"cbmImageProp",propertyValue:"pictures"},{propertyName:"cbmMeasurement",propertyValue:e.adjustment.measurement},{propertyName:"cbmUom",propertyValue:e.adjustment.uom},{propertyName:"isCbmAdjusment",propertyValue:"true"},{propertyName:"isActive",propertyValue:"true"}]}],employee:this.employee}:(a=="A"||a=="B")&&(m={id:d.id,updateParams:[{keyValue:d.key,propertyParams:[{propertyName:"isActive",propertyValue:"false"}]}],employee:this.employee});try{await l.post(`${P}?${new URLSearchParams(t).toString()}`,m)}catch(g){c(g),u("IRONS",g),console.log(g)}}const s={keyValue:e.adjustment.key,propertyParams:[{propertyName:"measurement",propertyValue:e.adjustment.measurement},{propertyName:"rating",propertyValue:e.adjustment.rating},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]};e.adjustment.createdDate==""&&(s.propertyParams=[...s.propertyParams,{propertyName:"createdBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"createdDate",propertyValue:"<<ServerDateTime>>"}]);const o={headerId:(i=this.selectedGroup)==null?void 0:i.headerId,workorder:this.stateWorkOrder,id:this.selectedGroup.id,updateParams:[s],employee:this.employee};try{const p=await l.post(`${k}?${new URLSearchParams(t).toString()}`,o);p.data.result.message==y.SUBMITTED&&(this.stateFormAlreadySubmitted=!0),p.data.result.message==y.CLOSE&&(this.stateFormAlreadyClose=!0),this.getTaskProgress(),this.updateGroupByParam(this.stateSelectedGroup.groupName)}catch(p){c(p),u("IRONS",p),console.log(p)}return a},async deleteAdjusmentTask(e){var d;const t={ver:"v1"},a={taskId:e.key,workorder:this.stateWorkOrder},s=(await l.post(`${N}?${new URLSearchParams(t).toString()}`,a)).data.result.content;let o="",i="";e.items.forEach(m=>{m.itemType=="smallCamera"&&(o=m.key),m.categoryItemType=="paramRating"&&(i=m.value)});const p={id:s.id,updateParams:[{keyValue:s.key,propertyParams:[{propertyName:"taskValue",propertyValue:e.taskValue},{propertyName:"cbmImageKey",propertyValue:o},{propertyName:"cbmImageProp",propertyValue:"value"},{propertyName:"cbmMeasurement",propertyValue:i},{propertyName:"isCbmAdjusment",propertyValue:"false"},{propertyName:"isActive",propertyValue:"true"}]}],employee:this.employee};try{await l.post(`${P}?${new URLSearchParams(t).toString()}`,p)}catch(m){c(m),u("IRONS",m),console.log(m)}const n={headerId:(d=this.selectedGroup)==null?void 0:d.headerId,workorder:this.stateWorkOrder,id:this.selectedGroup.id,updateParams:[{keyValue:e.adjustment.key,propertyParams:[{propertyName:"measurement",propertyValue:""},{propertyName:"rating",propertyValue:""},{propertyName:"updatedBy",propertyValue:""},{propertyName:"updatedDate",propertyValue:""},{propertyName:"pictures",propertyValue:JSON.stringify([])},{propertyName:"createdBy",propertyValue:""},{propertyName:"createdDate",propertyValue:""},{propertyName:"commentValue",propertyValue:""}]}],employee:this.employee};try{const m=await l.post(`${k}?${new URLSearchParams(t).toString()}`,n);m.data.result.message==y.SUBMITTED&&(this.stateFormAlreadySubmitted=!0),m.data.result.message==y.CLOSE&&(this.stateFormAlreadyClose=!0),this.getTaskProgress(),this.updateGroupByParam(this.stateSelectedGroup.groupName)}catch(m){c(m),u("IRONS",m),console.log(m)}},async addCBMAdjustmentPictures(e){var s;const t={ver:"v1"},a={keyValue:e.adjustment.key,propertyParams:[{propertyName:"pictures",propertyValue:JSON.stringify(e.adjustment.pictures)},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]},r={headerId:(s=this.selectedGroup)==null?void 0:s.headerId,workorder:this.stateWorkOrder,id:this.selectedGroup.id,updateParams:[a],employee:this.employee};try{(await l.post(`${k}?${new URLSearchParams(t).toString()}`,r)).data.result.message==y.CLOSE&&(this.stateFormAlreadyClose=!0),this.getTaskProgress(),this.updateGroupByParam(this.stateSelectedGroup.groupName)}catch(o){c(o),u("IRONS",o),console.log(o)}},handleGetUomFromSelectedTool(e,t){const a=this.stateCBMFormulas.filter(s=>{const o=s.taskKey;if(typeof e.items[0].value=="string")return o==e.key});console.log("value",t,"taskFormulas",a);let r="";return a.forEach(s=>{s.cbmType==t&&(r=s.uom)}),r},async updateToolUom(e,t){const a=this.handleGetUomFromSelectedTool(e,t.value);let r={};e.items.forEach(n=>{n.categoryItemType=="targetTool"&&(n.value=a,r={keyValue:n.key,propertyParams:[{propertyName:"value",propertyValue:a},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]})});const s={keyValue:t.key,propertyParams:[{propertyName:"value",propertyValue:t.value},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]},o=[r,s],i={ver:"v1"},p={headerId:this.stateSelectedGroup.headerId,workorder:this.stateSelectedGroup.workOrder,id:this.stateSelectedGroup.id,updateParams:o,employee:this.employee};try{await l.post(`${k}?${new URLSearchParams(i).toString()}`,p)}catch(n){c(n),u("IRONS",n),console.log(n)}await this.resetCBMMeasurementValueAndDefect(e)},async resetCBMMeasurementValueAndDefect(e){const t={ver:"v1"};let a={},r={},s={};e.items.forEach(async n=>{if(n.categoryItemType=="paramRatingDynamic"&&(n.value="",a={keyValue:n.key,propertyParams:[{propertyName:"value",propertyValue:""},{propertyName:"updatedBy",propertyValue:""},{propertyName:"updatedDate",propertyValue:""}]}),n.categoryItemType=="targetRating"){if(r={keyValue:n.key,propertyParams:[{propertyName:"value",propertyValue:""},{propertyName:"updatedBy",propertyValue:""},{propertyName:"updatedDate",propertyValue:""}]},n.value=="C"||n.value=="X"){const d={taskId:e.key,workorder:this.stateWorkOrder},g=(await l.post(`${N}?${new URLSearchParams(t).toString()}`,d)).data.result.content,T={id:g.id,updateParams:[{keyValue:g.key,propertyParams:[{propertyName:"isActive",propertyValue:"false"}]}],employee:this.employee};try{await l.post(`${P}?${new URLSearchParams(t).toString()}`,T)}catch(f){c(f),u("IRONS",f),console.log(f)}}n.value=""}n.itemType=="smallCamera"&&(s={keyValue:n.key,propertyParams:[{propertyName:"value",propertyValue:""},{propertyName:"updatedBy",propertyValue:""},{propertyName:"updatedDate",propertyValue:""}]})});const i=[{keyValue:e.key,propertyParams:[{propertyName:"value",propertyValue:""},{propertyName:"updatedBy",propertyValue:""},{propertyName:"updatedDate",propertyValue:""}]},a,r,s];this.cameraStore.clearImageById(s.keyValue);const p={headerId:this.stateSelectedGroup.headerId,workorder:this.stateSelectedGroup.workOrder,id:this.stateSelectedGroup.id,updateParams:i,employee:this.employee};try{await l.post(`${k}?${new URLSearchParams(t).toString()}`,p)}catch(n){c(n),u("IRONS",n),console.log(n)}await this.getTaskProgress(),await this.updateGroupByParam(this.stateSelectedGroup.groupName)},async deleteDefect(e){const t={ver:"v1"},a={taskId:e.key,workorder:this.stateWorkOrder},s=(await l.post(`${N}?${new URLSearchParams(t).toString()}`,a)).data.result.content;if(!s)return;const o={id:s.id,updateParams:[{keyValue:s.key,propertyParams:[{propertyName:"isActive",propertyValue:"false"}]}],employee:this.employee};try{await l.post(`${P}?${new URLSearchParams(t).toString()}`,o)}catch(i){c(i),u("IRONS",i),console.log(i)}},async updateItemFromTask(e){const t={ver:"v1"},a={headerId:this.stateSelectedGroup.headerId,workorder:this.stateSelectedGroup.workOrder,id:this.stateSelectedGroup.id,updateParams:e,employee:this.employee};try{await l.post(`${k}?${new URLSearchParams(t).toString()}`,a)}catch(r){c(r),u("IRONS",r),console.log(r)}await this.getTaskProgress(),await this.updateGroupByParam(this.stateSelectedGroup.groupName)},async updateSuspensionCylinderTask(e,t){const a=this.stateCBMFormulas.filter(p=>p.taskKey==e.key);console.log("task formulas",a);let r;a.every(p=>{const n=E(p,t.value),d=D(p,t.value);return r=F(n,d,p),console.log("checkMin",n,"checkMax",d,"formula",p),!r});const s=e.items.find(p=>p.categoryItemType=="suspensionTargetRating"),o=[{keyValue:e.key,propertyParams:[{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]},{keyValue:s.key,propertyParams:[{propertyName:"value",propertyValue:r},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]},{keyValue:t.key,propertyParams:[{propertyName:"value",propertyValue:t.value},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}];await this.updateItemServiceSheetDetail(o),await this.updateGroupByParam(this.stateSelectedGroup.groupName),this.stateStoredSuspensionCylinderValue.forEach(p=>{s.key==p.key&&(p.value=r)}),console.log("this.stateStoredSuspensionCylinderValue",this.stateStoredSuspensionCylinderValue),this.stateStoredSuspensionCylinderValue.filter(p=>p.value=="Out of spec"||p.value=="Out Spec").length==1&&(r=="Out of spec"||r=="Out Spec")&&(this.stateShowSCConfirmToSPC=!0)},async updateAdjustmentSuspensionCylinderTask(e,t){const a=this.stateCBMFormulas.filter(i=>i.taskKey==t.mappingKeyId);console.log("task formulas",a);let r;a.every(i=>{const p=E(i,t.value),n=D(i,t.value);return r=F(p,n,i),console.log("checkMin",p,"checkMax",n,"formula",i),!r});const s=e.items.find(i=>i.categoryItemType=="adjustmentSuspensionTargetRating"),o=[{keyValue:e.key,propertyParams:[{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]},{keyValue:s.key,propertyParams:[{propertyName:"value",propertyValue:r},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}];await this.updateItemServiceSheetDetail(o),this.checkAllAdjustedSCFilled({key:s.key,value:r})},toggleShowSCConfirmToSPV(e){this.stateShowSCConfirmToSPC=e},toggleShowSCdjustmentWarning(e){this.stateShowSCAdjustmentWarning=e},pushDataToSuspensionCylinderStoredValue(e){this.stateStoredSuspensionCylinderValue=e},pushDataToAdjustedSuspensionCylinderStoredValue(e){this.stateStoredAdjustedSuspensionCylinderValue=e},updateStoredAdjustmentOptionValue(e){this.stateStoredAdjustmentOptionValue=e},checkAllAdjustedSCFilled(e){this.stateStoredAdjustedSuspensionCylinderValue.forEach(a=>{a.key==e.key&&(a.value=e.value)});let t=!1;this.stateStoredAdjustedSuspensionCylinderValue.forEach(a=>{a.value==""&&(t=!0)}),!t&&!this.stateIsShowCalibrationConfirm&&(this.stateShowConfirmToCalibrateSC=!0,this.stateIsShowCalibrationConfirm=!0)},toggleIsShowCalibrationConfirm(e){this.stateIsShowCalibrationConfirm=e},toggleShowConfirmToCalibrateSC(e){this.stateShowConfirmToCalibrateSC=e},toggleShowPreTaskNotComplete(e){this.stateShowPreTaskNotComplete=e},async updateDefectCalibrationDropdown(e,t){var s,o;const a=I();console.log(e.description);const r={updateParams:[{keyValue:e.key,propertyParams:[{propertyName:"taskValue",propertyValue:t.value},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}],headerId:this.selectedGroup.headerId,workorder:this.selectedGroup.workOrder,id:(s=this.selectedGroup)==null?void 0:s.id,employee:this.employee,defectHeader:{workorder:this.generalForm.workOrder,form:this.generalForm.form,serviceSheetDetailId:(o=this.selectedGroup)==null?void 0:o.id,category:e.category,taskId:e.key,taskNo:e.description.split(";;")[0],taskDesc:e.description.split(";;")[1],defectWorkorder:"",formDefect:"BA-PL-F503",defectType:e.rating,cbmMeasurement:"",cbmUom:"",cbmImageKey:"",cbmImageProp:"",isCbmAdjusment:"",taskValue:2,repairedStatus:"Not-Repaired",cbmNAStatus:"Not-Confirm",supervisor:{id:a.user.EmployeeId,name:a.user.Name},status:"Acknowledge"},defectDetail:{type:e.rating,title:e.description.split(";;")[1],assetNumber:this.generalForm.equipment,raisedBy:this.employee.name,date:"<<ServerDateTime>>"}};console.log("defectPayload",r);try{const i=await l.post(`${b}?${new URLSearchParams(Y).toString()}`,r);if(i.data.result.message==y.SUBMITTED)return this.stateFormAlreadySubmitted=!0,!1;if(i.data.result.message==y.TASK_UPDATED_BY_OTHER)return this.stateTaskAlreadyUpdated=!0,!1;this.stateMeasurementValue="",this.stateUOM="",this.stateImageKey="";const p=[{keyValue:t.key,propertyParams:[{propertyName:"value",propertyValue:t.value},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}];await this.updateItemServiceSheetDetail(p);const n=this.groups.find(d=>d.isSelected);return this.getTaskProgress(),this.updateGroupByParam(n==null?void 0:n.groupName),this.updateStoredAdjustmentOptionValue(t.value),!0}catch(i){return c(i),u("IRONS",i),console.log(i),!1}},updateStoredBrakeTypeValue(e){const t=this.stateStoredBrakeTypeValue.filter(a=>a.key==e.key);t.length==0?this.stateStoredBrakeTypeValue.push(e):t.forEach(a=>{a.value=e.value})},clearStoredBrakeTypeValue(){this.stateStoredBrakeTypeValue=[]},async handleScrollToUnfilledTask(){this.stateToggleExpandTaskGroup=!0;const e=B.service({lock:!0,text:"Scrolling to unfilled task",background:"rgba(0, 0, 0, 0.7)"});await X("task-required",500+this.stateTaskGroupClosed),this.stateToggleExpandTaskGroup=!1,e.close()},decreaseCollapse(){this.stateTaskGroupClosed>100&&(this.stateTaskGroupClosed-=100)},increaseeCollapse(){this.stateTaskGroupClosed+=100},resetCollapse(){this.stateTaskGroupClosed=100},setSerialNumberGeneral(e){this.stateGeneralForm!=null&&(this.stateGeneralForm.serialNumber=e)}}});export{ve as G,De as U,w as a,Ve as b,we as c,Fe as d,Ee as e,Pe as f,b as g,v as u};
