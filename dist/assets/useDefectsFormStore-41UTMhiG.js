import{D as U}from"./DefectNoClass-BqGKOkzR.js";import{G as N,k as H,l as re,m as K,U as ae,n as se,e as j,o as oe,p as P,g as x,q as ie,h as M,r as V,s as D,t as ne,u as pe,P as le,d as ue,j as de,i as ce,D as L}from"./urls-CvqtYZA-.js";import{a as v,c as d,s as c}from"./index-BuVmIl8K.js";import{d as B}from"./pinia-BjOS2_Ao.js";import{i as me,P as ye,e as he,U as fe,j as ge,f as Se,L as Ie,c as ke,g as Te}from"./urls-CPQ2HRXU.js";import{e as g}from"./lodash-DrHMlsdo.js";import{s as m,c as R,a as Pe,u as ve,b as J,T as W,C as I}from"./prev-val-handler-DvA3D_kF.js";import{x as w,y as A,z as C,t as Ne,u as _e}from"./helpers-wUOLw-dU.js";import{o as Ve,p as De}from"./date-format-8-IvfSl3.js";import{C as Ee}from"./urls-B0Rq9QQ3.js";import{a as X}from"./element-plus-BeWdvTRa.js";import{C as Re}from"./urls-hWHEBXep.js";import{C as Y}from"./urls-D8F5Tyyp.js";import{u as h}from"./authentication-handler-Pueb_EI7.js";import{s as q}from"./string-to-imageinfo-converter-Cdr1iOkP.js";import{S as f}from"./number-format-BdMuQVyW.js";import{v as we}from"./uuid-SoommWqA.js";import{u as Q}from"./useGlobalConnectionStore-DV9B81de.js";import{u as G}from"./useCameraStore-BwXVJhPe.js";import{u as Z}from"./useAttachmentStore-DqM3autD.js";const F="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/service_sheet_detail/update_task_with_defect",Xe="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/defect_detail/get_previous_crack",Qe="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect//api/defect_detail/get_data_by_param/",b=B({id:"GeneralForm",state:()=>({statePayload:{},stateUpdateParams:{},statePropertyParams:{},stateImageInfos:[],stateImageBlobs:[],statePreRiskImageInfos:[],statePreRiskImageBlobs:[],stateGeneralUpdated:!1,stateGeneralForm:{},initPreriskImages:[],stateSMUActual:0,stateSMUTolerance:{},stateSMUToleranceNotMapped:!1,stateIsSmuCameraDisabled:!1,stateIsSwingHourCameraDisabled:!1,stateIsTravelHourCameraDisabled:!1,stateIsRiskAssesmentPhotoTaken:!1,stateSelectedFitterShift:{},stateTimeStamp:"",stateShiftList:[],stateTimeZone:"+10.00",stateTimeZoneDesc:"AEST",stateIsSelectedFitterAlreadyLoggedIn:!1,stateFitterInfo:{},stateIsFitterLoggedInExist:!1,stateIsTruckAlreadyCheckedByOtherFitter:!1,stateCurrentPersoneel:{},stateHmOffset:0,stateSkipWash:"false",stateReasonUpdated:!1}),getters:{payload:e=>e.statePayload,generalUpdated:e=>e.stateGeneralUpdated,smuActual:e=>e.stateSMUActual,generalForm:e=>e.stateGeneralForm,smuTolerance:e=>e.stateSMUTolerance,SMUToleranceNotMapped:e=>e.stateSMUToleranceNotMapped,IsRiskAssesmentPhotoTaken:e=>e.stateIsRiskAssesmentPhotoTaken,IsSelectedFitterAlreadyLoggedIn:e=>e.stateIsSelectedFitterAlreadyLoggedIn,FitterInfo:e=>e.stateFitterInfo,IsFitterLoggedInExist:e=>e.stateIsFitterLoggedInExist,CurrentPersoneel:e=>e.stateCurrentPersoneel,HmOffset:e=>e.stateHmOffset,SkipWash:e=>e.stateSkipWash,AllWashChecked:e=>e.stateGeneralForm&&e.stateGeneralForm.checkBeforeTruck&&e.stateGeneralForm.checkBeforeTruck.items.every(t=>t.category=="skipOtherWash"?!0:t.value=="true"),ReasonUpdated:e=>e.stateReasonUpdated,eformStore:()=>_()},actions:{setSkipWash(e){this.stateSkipWash=e},setReasonUpdated(e){this.stateReasonUpdated=e},setCurrentPersoneel(e){this.stateCurrentPersoneel=e},setIsFitterLoggedInExist(e){this.stateIsFitterLoggedInExist=e},setFitterInfo(e){this.stateFitterInfo=g.cloneDeep(e)},setFitterInfoFitter(e,t,r){this.stateFitterInfo.id=we(),this.stateFitterInfo.employee={id:e.value,name:e.label},this.stateFitterInfo.timeLoggedIn=t,this.stateFitterInfo.shift=r},setFitterInfoIsIHaveReadChecked(e){this.stateFitterInfo.isIHaveReadChecked=e},setFitterInfoRiskPhotos(e){g.isUndefined(this.stateFitterInfo.riskPhotos)&&(this.stateFitterInfo.riskPhotos=[]),this.stateFitterInfo.riskPhotos=[...q(this.stateFitterInfo.riskPhotos),e],this.stateIsFitterLoggedInExist&&this.setGeneralFitterInfoToIndexedDB()},deleteFitterInfoRiskPhotos(e){this.stateFitterInfo.riskPhotos=q(this.stateFitterInfo.riskPhotos),this.stateFitterInfo.riskPhotos=this.stateFitterInfo.riskPhotos.filter(t=>e!=t.filename),this.setGeneralFitterInfoToIndexedDB()},async setGeneralFitterInfoToIndexedDB(e=!1){const t=g.cloneDeep(this.generalForm.log),r=t.findIndex(p=>p.employee.id==this.stateFitterInfo.employee.id);this.stateFitterInfo.isIHaveReadChecked=!0,e&&r>=0?t[r]=this.stateFitterInfo:t.push(this.stateFitterInfo);const a=v(),s={id:this.generalForm.id,updateParams:[{keyValue:"GENERAL",propertyParams:[{propertyName:"log",propertyValue:JSON.stringify(t)}]}],employee:{id:a.user.EmployeeId,name:a.user.Name},localStatus:this.generalForm.status},o={ver:"v1"};try{await d.post(`${N}?${new URLSearchParams(o).toString()}`,s),this.stateGeneralForm.log=t}catch(p){m("fe_event_error_post_fitter_log_data",{errorMessage:p}),c("IRONS",p),console.log("update log",p)}},async deleteGeneralFitterInfoFromIndexedDB(){try{this.stateIsFitterLoggedInExist=!1,this.stateFitterInfo={}}catch(e){console.log("error at indexeddb",e)}},setIsSelectedFitterAlreadyLoggedIn(e){this.stateIsSelectedFitterAlreadyLoggedIn=e},setPayloadId(e,t,r){this.statePayload.id=e,this.statePayload.updateParams=[],this.statePayload.employee={},this.statePayload.employee.id=t,this.statePayload.employee.name=r},addPropertyParam(e,t,r){const a=this.statePayload.updateParams.find(o=>o.keyValue===e);if(a)this.stateUpdateParams=a;else{const o={keyValue:e,propertyParams:[]};this.statePayload.updateParams.push(o),this.stateUpdateParams=o}const s=this.stateUpdateParams.propertyParams.find(o=>o.propertyName===t);if(s){s.propertyValue=r;return}this.stateUpdateParams.propertyParams.push({propertyName:t,propertyValue:r})},addUpdatedByAndDate(e,t){const r={id:e,name:t};this.addPropertyParam("GENERAL","updatedBy",JSON.stringify(r)),this.addPropertyParam("GENERAL","updatedDate","<<ServerDateTime>>"),this.addPropertyParam("GENERAL","status","On Progress"),this.generalForm.serviceStart==""&&this.generalForm.tsServiceStart==""&&(this.addPropertyParam("GENERAL","serviceStart","<<ServerDateTime>>"),this.addPropertyParam("GENERAL","tsServiceStart","<<ServerTimeStamp>>"))},async updateGeneralForm(){const e={ver:"v1"};this.statePayload.id=this.generalForm.id,this.statePayload.localStatus=this.generalForm.status;const t=_(),r=t.groups;let a=!0;if(r.forEach(s=>{s.doneTask<s.totalTask&&(a=!1)}),t.generalForm.riskAssesment[0].value.length>0&&this.addPropertyParam(this.generalForm.riskAssesment[0].key,"value",JSON.stringify(t.generalForm.riskAssesment[0].value)),this.generalForm.imageEquipment.length>0&&this.addPropertyParam("GENERAL","imageEquipment",JSON.stringify(this.generalForm.imageEquipment)),this.generalForm.travelHourImages&&this.generalForm.travelHourImages.length>0&&this.addPropertyParam("GENERAL","travelHourImages",JSON.stringify(this.generalForm.travelHourImages)),this.generalForm.swingHourImages&&this.generalForm.swingHourImages.length>0&&this.addPropertyParam("GENERAL","swingHourImages",JSON.stringify(this.generalForm.swingHourImages)),a){const s=await this.getServiceSheetHeaderKeyValue("status");if(s.toString().toLowerCase()=="open"||s.toString().toLowerCase()=="on progress")try{const o=await d.post(`${N}?${new URLSearchParams(e).toString()}`,this.statePayload);return this.stateGeneralUpdated=!0,this.stateGeneralForm.status="On Progress",o.data.result.content.updateParams.forEach(p=>{p.keyValue=="GENERAL"&&p.propertyParams.forEach(n=>{n.propertyName=="serviceStart"&&(this.stateGeneralForm.serviceStart=n.propertyValue)})}),this.stateIsFitterLoggedInExist||this.setGeneralFitterInfoToIndexedDB(),!1}catch(o){h(o),m("fe_event_error_post_data_enter_service_form",{errorMessage:o}),c("IRONS",o),console.log(o)}else return!0}else try{const s=await d.post(`${N}?${new URLSearchParams(e).toString()}`,this.statePayload);return this.stateGeneralUpdated=!0,this.stateGeneralForm.status="On Progress",s.data.result.content.updateParams.forEach(o=>{o.keyValue=="GENERAL"&&o.propertyParams.forEach(p=>{p.propertyName=="serviceStart"&&(this.stateGeneralForm.serviceStart=p.propertyValue)})}),this.stateIsFitterLoggedInExist||this.setGeneralFitterInfoToIndexedDB(),!1}catch(s){m("fe_event_error_post_data_enter_service_form",{errorMessage:s}),h(s),c("IRONS",s),console.log(s)}},pushNewImageInfos(e){this.stateImageInfos.push(e)},pushNewImageBlob(e){this.stateImageBlobs.push(e)},pushNewPreRiskImageInfos(e){this.statePreRiskImageInfos.push(e)},pushNewPreRiskImageBlob(e){this.statePreRiskImageBlobs.push(e)},resetGeneral(){this.stateGeneralUpdated=!1},setGeneralForm(e){this.stateReasonUpdated=!1,this.stateIsRiskAssesmentPhotoTaken=!1,this.statePreRiskImageInfos=[],this.stateIsSmuCameraDisabled=!1,this.stateIsSwingHourCameraDisabled=!1,this.stateIsTravelHourCameraDisabled=!1,this.stateGeneralForm=e,g.isUndefined(e)||g.isUndefined(e.riskAssesment)||g.isUndefined(e.riskAssesment[0].value)||(this.initPreriskImages=g.cloneDeep(e.riskAssesment[0].value));try{this.generalForm.imageEquipment!=""&&(this.stateIsSmuCameraDisabled=!0),this.generalForm.swingHourImages&&this.generalForm.swingHourImages!=""&&(this.stateIsSwingHourCameraDisabled=!0),this.generalForm.travelHourImages&&this.generalForm.travelHourImages!=""&&(this.stateIsTravelHourCameraDisabled=!0)}catch(t){console.log(t)}},async getServiceSheetHeaderKeyVal(e,t){const r={id:this.stateGeneralForm.id,keyValue:"GENERAL",propertyName:e},a={ver:"v1"},s=X.service({lock:!0,text:`Check ${t} Value`,background:"rgba(0, 0, 0, 0.7)"});try{const o=await d.post(`${H}?${new URLSearchParams(a).toString()}`,r);return s.close(),o.data.result.content!=""?o.data.result.content:""}catch(o){return h(o),m(`fe_event_error_get_${t}_value`,{errorMessage:o}),c("IRONS",o),console.log(o),s.close(),""}},async getServiceSheetHeaderKeyValue(e){const t={id:this.stateGeneralForm.id,keyValue:"GENERAL",propertyName:e},r={ver:"v1"};try{return(await d.post(`${H}?${new URLSearchParams(r).toString()}`,t)).data.result.content}catch(a){return m("fe_event_error_get_service_header_value",{errorMessage:a}),h(a),c("IRONS",a),console.log(a),"error"}},async UpdateServiceEndMechanic(e){const t={ver:"v1"},r=this.statePayload.updateParams[0].propertyParams.filter(s=>s.propertyName=="updatedDate"),a={id:this.payload.id,updateParams:[{keyValue:"GENERAL",propertyParams:[e,{propertyName:"updatedBy",propertyValue:JSON.stringify(this.CurrentPersoneel.mechanic)},...r]}],employee:this.payload.employee,localStatus:this.generalForm.status};try{await d.post(`${N}?${new URLSearchParams(t).toString()}`,a),this.stateGeneralUpdated=!0}catch(s){m("fe_event_error_post_service_end_fitter",{errorMessage:s}),h(s),c("IRONS",s),console.log(s)}},setSMUActual(e){this.stateSMUActual=e},async getSMUTolerance(){this.stateSMUToleranceNotMapped=!1;const e={Parameter:"",ParameterTo:"",ValueMin:"",ValueMinTo:"",ValueMax:"",ValueMaxTo:"",Uom:"",UomTo:"",StartDate:"",StartDateTo:"",EndDate:"",EndDateTo:"",Page:"1",PageSize:"1",Order:"",ver:"v1"},t=()=>{this.stateSMUTolerance={min:0,max:0},this.stateSMUToleranceNotMapped=!0,console.log("SMU tolerance not mapped on ADM")};try{const a=(await d.get(Re,"",new URLSearchParams(e).toString())).data.result.content[0];g.isUndefined(a)?t():a.isActive?this.stateSMUTolerance={min:Number(a.valueMin),max:Number(a.valueMax)}:t()}catch(r){m("fe_event_error_get_smu_tolerance_data",{errorMessage:r}),h(r),t(),c("IRONS",r)}},async getServerTimestamp(){const e={ver:"v1"};try{const t=await d.get(re,"",new URLSearchParams(e).toString());return this.stateTimeStamp=t.data.result.content,t.data.result.content}catch(t){return m("fe_event_error_get_server_timestamp",{errorMessage:t}),h(t),c("IRONS",t),console.log(t),console.log("error get server time",t),""}},async getShift(e){const t={Shift:e,StartHour:"",StartHourType:"",EndHour:"",EndHourType:"",StartDate:"",EndDate:"",ver:"v1",Page:"1",PageSize:"1",Order:""};try{const r=await d.get(Y,"",new URLSearchParams(t).toString());return console.log("data shift",r),r.data.result.content.length>0?(this.stateSelectedFitterShift=r.data.result.content[0],console.log("🕐 selected fitter shift",this.stateSelectedFitterShift),r.data.result.content[0]):{}}catch(r){return m("fe_event_error_get_shift_data",{errorMessage:r}),h(r),c("IRONS",r),console.log(r),{}}},updateSMUImages(e){this.stateGeneralForm.imageEquipment=e},updateSwingImages(e){this.stateGeneralForm.swingHourImages=e},updateTravelImages(e){this.stateGeneralForm.travelHourImages=e},toggleChangeIsRiskAssesmentPhotoTaken(e){this.stateIsRiskAssesmentPhotoTaken=e},async updateServiceSheetHeaderToTrue(){const e=v(),t={id:this.generalForm.id,updateParams:[{keyValue:"GENERAL",propertyParams:[{propertyName:"isDeleted",propertyValue:"false"}]}],employee:{id:e.user.EmployeeId,name:e.user.Name},localStatus:this.generalForm.status},r={ver:"v1"};try{await d.post(`${N}?${new URLSearchParams(r).toString()}`,t)}catch(a){m("fe_event_error_set_is_active_service_sheet",{errorMessage:a}),c("IRONS",a),console.log("upload risk Assesment",a)}},updateSMUONGeneral(e){this.generalForm.smu=e},updateSwingHourONGeneral(e){this.generalForm.swingHour=e},updateTravelHourONGeneral(e){this.generalForm.travelHour=e},async getShiftListData(){const e={Shift:"",StartHour:"",StartHourType:"",EndHour:"",EndHourType:"",StartDate:"",EndDate:"",ver:"v1",Page:"1",PageSize:"999",Order:""};try{const t={key:"TimeZone"},r=await d.post(`${K}?${new URLSearchParams(e).toString()}`,t);this.stateTimeZone=`${r.data.result.content.value}`;const a={key:"TimeZoneDesc"},s=await d.post(`${K}?${new URLSearchParams(e).toString()}`,a);this.stateTimeZoneDesc=`${s.data.result.content.value}`,console.log("timeZoneDescResponse",s);const o=await d.get(Y,"",new URLSearchParams(e).toString());this.stateShiftList=o.data.result.content}catch(t){m("fe_event_error_get_shift_and_timezone_data",{errorMessage:t}),h(t),c("IRONS",t),console.log(t)}},async postCheckBeforeTruckItem(e,t,r){const a=_(),s=a.employee;let o=JSON.stringify(s);r&&(o=""),e.propertyParams.push({propertyName:"updatedBy",propertyValue:o});const p={ver:"v1"},n={id:this.generalForm.id,updateParams:[e],employee:s};try{const i=this.generalForm.checkBeforeTruck.items.find(u=>u.key==t),l=await d.post(`${ae}?${new URLSearchParams(p).toString()}`,n);if(l.data.result.message==f.TASK_UPDATED_BY_OTHER&&this.toggleIsTruckAlreadyCheckedByOtherFitter(!0),l.data.result.isError)return!0;l.data.result.content.updateParams[0].propertyParams.forEach(u=>{u.propertyName=="updatedDate"&&(i.updatedDate=u.propertyValue),u.propertyName=="updatedBy"&&(i.updatedBy=JSON.parse(u.propertyValue))}),this.updateAllCheckBoxValue(l.data.result.content.checkBeforeTruck),a.setCheckTruckItems(this.generalForm.checkBeforeTruck.items)}catch(i){m("fe_event_error_post_check_before_truck_data",{errorMessage:i}),h(i),c("IRONS",i)}},updateAllCheckBoxValue(e){e.forEach(t=>{this.generalForm.checkBeforeTruck.items.forEach(r=>{t.keyValue==r.key&&t.propertyParams.forEach(a=>{a.propertyName=="updatedDate"&&a.propertyValue&&(r.updatedDate=a.propertyValue),a.propertyName=="updatedBy"&&a.propertyValue!="null"&&(r.updatedBy=JSON.parse(a.propertyValue)),a.propertyName=="value"&&(r.value=a.propertyValue)})})})},toggleIsTruckAlreadyCheckedByOtherFitter(e){this.stateIsTruckAlreadyCheckedByOtherFitter=e},updateGeneralUpdated(e){this.stateGeneralUpdated=e},async updateSwingTravelValueToBE(e,t){const r=v(),a={id:this.generalForm.id,updateParams:[{keyValue:"GENERAL",propertyParams:[{propertyName:e,propertyValue:t}]}],employee:{id:r.user.EmployeeId,name:r.user.Name},localStatus:this.generalForm.status},s={ver:"v1"};try{await d.post(`${N}?${new URLSearchParams(s).toString()}`,a)}catch(o){m("fe_event_error_post_travel_data",{errorMessage:o}),c("IRONS",o),console.log("update swing/travel hour value",o)}},async updateSMUValueToBE(e,t=""){const r=v(),a={id:this.generalForm.id,updateParams:[{keyValue:"GENERAL",propertyParams:[{propertyName:"smu",propertyValue:e}]}],employee:{id:r.user.EmployeeId,name:r.user.Name},localStatus:this.generalForm.status};t!=""&&a.updateParams[0].propertyParams.push({propertyName:"hmOffset",propertyValue:t});const s={ver:"v1"};try{await d.post(`${N}?${new URLSearchParams(s).toString()}`,a)}catch(o){m("fe_event_error_post_smu_data",{errorMessage:o}),c("IRONS",o),console.log("update smu/hmoffset value",o)}},async updateSMUImageToBE(){const e=v(),t={id:this.generalForm.id,updateParams:[{keyValue:"GENERAL",propertyParams:[{propertyName:"imageEquipment",propertyValue:JSON.stringify(this.generalForm.imageEquipment)}]}],employee:{id:e.user.EmployeeId,name:e.user.Name},localStatus:this.generalForm.status},r={ver:"v1"};try{return await d.post(`${N}?${new URLSearchParams(r).toString()}`,t)}catch(a){m("fe_event_error_post_smu_data",{errorMessage:a}),c("IRONS",a),console.log("update smu image value",a)}},async getHmOffsetValue(e){this.stateHmOffset=0;const t=_();if(t.generalForm.smu)g.isUndefined(t.generalForm.hmOffset)||g.isNull(t.generalForm.hmOffset)?this.stateHmOffset="Not Applicable":this.stateHmOffset=t.generalForm.hmOffset;else{const r={ver:"v1",equipmentNo:t.unitNumber,siteId:e,asIsDate:Ve()};try{const a=await d.get(`${se}`,"",new URLSearchParams(r).toString());a.data.result.content.totalData==0?this.stateHmOffset=0:a.data.result.content.totalData>0&&(this.stateHmOffset=a.data.result.content.hmOffsetList[0].hmOffset)}catch(a){m("fe_event_error_get_hm_offset_data",{errorMessage:a}),c("IRONS",a),console.log("error get hm offset",a)}}}}}),_=B({id:"EForm",state:()=>({stateServiceSheets:[],stateGroups:[],stateSelectedSubGroups:[],stateGeneralForm:{},stateModelId:"",stateModelName:"",statePsTypeId:"",stateWorkOrder:"",stateUnitNumber:"",stateEmployee:{},stateMeasurementValue:"",stateImageKey:"",stateUOM:"",stateSelectedGroup:void 0,stateIsSet:!1,stateCBMFormulas:[],stateTaskUpdated:void 0,stateServiceStart:"",stateShift:"",stateCheckbeforeTruck:[],stateRatingNotMapped:!1,stateOilToleranceNotMapped:!1,stateOilTolerance:{},stateTaskAlreadyUpdated:!1,stateTaskErrorDialog:!1,stateErrorMessageTaskErrorDialog:"",stateFormAlreadySubmitted:!1,stateFormAlreadyClose:!1,stateIsFormSelectedByOtherSupervisor:!1,stateStoredDisableKeyValue:[],stateItemKey:"",stateFromHomePage:!0,stateAvgTargetKey:"",stateInputCameraMandatoryKey:"",stateStoredSuspensionCylinderValue:[],stateStoredAdjustedSuspensionCylinderValue:[],stateShowSCConfirmToSPC:!1,stateShowConfirmToCalibrateSC:!1,stateShowSCAdjustmentWarning:!1,stateStoredAdjustmentOptionValue:"",stateStoredBrakeTypeValue:[],stateIsShowCalibrationConfirm:!1,stateShowPreTaskNotComplete:!1,stateToggleExpandTaskGroup:!1,stateTaskGroupClosed:100,statePreviousTandemTasks:[],stateNewPreviousTandemTasks:[],stateSkipPreService:!1,stateSkipPreServiceReasonOptions:[],stateConfirmSubmitVisibility:"",stateMultiDefectList:{},stateDropdownToolGroup:{},stateReasonNA:"",stateCameraItemCBMTakePhotoCompleteRating:{},stateResetValue:!1,statePreviousCrackArr:[],statePreviousReplacement:[],stateGetDataByParam:!1,stateReplacementValue:null,stateIsReplaceValue:!1}),getters:{serviceSheets:e=>e.stateServiceSheets,groups:e=>e.stateGroups,selectedSubGroups:e=>e.stateSelectedSubGroups,generalForm:e=>e.stateGeneralForm,employee:e=>e.stateEmployee,isSet:e=>e.stateIsSet,selectedGroup:e=>e.stateSelectedGroup,taskUpdated:e=>e.stateTaskUpdated,serviceStart:e=>e.stateServiceStart,shift:e=>e.stateShift,checkBeforeTruck:e=>e.stateCheckbeforeTruck,ratingNotMapped:e=>e.stateRatingNotMapped,taskAlreadyUpdated:e=>e.stateTaskAlreadyUpdated,taskErrorDialog:e=>e.stateTaskErrorDialog,errorMessageTaskErrorDialog:e=>e.stateErrorMessageTaskErrorDialog,unitNumber:e=>e.stateUnitNumber,oilTolerance:e=>e.stateOilTolerance,formAlreadySubmitted:e=>e.stateFormAlreadySubmitted,formAlreadyClose:e=>e.stateFormAlreadyClose,generalFormStore:()=>b(),isAllTaskDone:e=>{let t=!0;return e.stateGroups.forEach((r,a)=>{a!=0&&t&&r.totalTask!=r.doneTask&&(t=!1)}),t},percentageTaskProgressAllTab:e=>{let t=0,r=0;return e.stateGroups.forEach(a=>{a.groupName!="DEFECT_IDENTIFIED_SERVICE"&&(r=r+a.doneTask,t=t+a.totalTask)}),t==0?100:g.floor(r/t*100)},globalConnectionStore:()=>Q(),skipPreService:e=>e.stateSkipPreService,isAllPreServiceFinished:e=>{const t="PRE_SERVICE_OPERATIONAL_CHECK",r=e.stateGroups.find(a=>a.groupName==t);return(r==null?void 0:r.doneTask)==(r==null?void 0:r.totalTask)},confirmSubmitVisibility:e=>e.stateConfirmSubmitVisibility,multiDefectList:e=>e.stateMultiDefectList,dropdownToolGroup:e=>e.stateDropdownToolGroup,reasonNA:e=>e.stateReasonNA,CameraItemCBMTakePhotoCompleteRating:e=>e.stateCameraItemCBMTakePhotoCompleteRating,cameraStore:()=>G()},actions:{toggleIsReplaceValue(e){this.stateIsReplaceValue=e},setResetValue(e){this.stateResetValue=e},setSkipPreService(e){this.stateSkipPreService=e},setReasonNA(e){this.stateReasonNA=e},setInputCameraMandatoryKey(e){this.stateInputCameraMandatoryKey=e},setAvgTargetKey(e){this.stateAvgTargetKey=e},setFromHomePage(e){this.stateFromHomePage=e},setStateItemKey(e){this.stateItemKey=e},updateStoredDisableKeyValue(e){this.stateStoredDisableKeyValue=e},pushStoredDisabledItems(e){this.stateStoredDisableKeyValue.push(e)},updateAllItems(e,t){this.stateStoredDisableKeyValue.forEach(r=>{r.key==e&&(r.value=t)})},toggleFormAlreadySubmitted(e){this.stateFormAlreadySubmitted=e},toggleFormAlreadyClose(e){this.stateFormAlreadyClose=e},toggleConfirmSubmitVisibility(e){this.stateConfirmSubmitVisibility=e},getGroups(){let e=[{id:"1",modelId:"",psTypeId:"",workOrder:"",groupName:"General",groupSeq:1,key:"1",headerId:"g1",isActive:"",isDeleted:"",createdBy:{id:"",name:""},createdDate:"",updatedBy:"",updatedDate:"",_rid:"",_self:"",_etag:"",_attachments:"",_ts:0,isSelected:!0,groupLabel:"General",subGroup:[],totalTask:0,doneTask:0}];this.serviceSheets.forEach(t=>{const r={id:t.id,modelId:t.modelId,psTypeId:t.psTypeId,workOrder:t.workOrder,groupName:t.groupName,groupSeq:t.groupSeq,key:t.key,headerId:t.headerId,isActive:t.isActive,isDeleted:t.isDeleted,createdBy:t.createdBy,createdDate:t.createdDate,updatedBy:t.updatedBy,updatedDate:t.updatedDate,_rid:t._rid,_self:t._self,_etag:t._etag,_attachments:t._attachments,_ts:t._ts,isSelected:!1,groupLabel:t.subGroup[0].name,subGroup:t.subGroup,totalTask:0,doneTask:0,isDisable:g.isUndefined(t.isDisable)?"false":t.isDisable};e.push(r)}),e=g.sortBy(e,"groupSeq"),this.stateGroups=e},getSubGroups(){const e=this.groups.find(t=>t.isSelected);if(e.groupSeq==1)this.stateSelectedSubGroups=[];else{const t=this.serviceSheets.find(r=>e.id===r.id);this.stateSelectedSubGroups=t.subGroup}},setCheckTruckItems(e){this.generalForm.checkBeforeTruck.items=e},setSelectedGroup(e){this.stateGroups.forEach(t=>{t.id===e?t.isSelected=!0:t.isSelected=!1}),this.stateSelectedGroup=this.groups.find(t=>t.isSelected),this.getSubGroups()},setMeasurementValueAndUOM(e,t,r){this.stateMeasurementValue=e,this.stateUOM=t,this.stateImageKey=r},setModelAndPsTypeId(e,t,r,a,s){this.stateModelId=e,this.statePsTypeId=t,this.stateWorkOrder=r,this.stateModelName=a,this.stateUnitNumber=s},resetTaskUpdated(){this.stateTaskUpdated=void 0},async refreshWash(e,t,r){this.generalFormStore.setSkipWash("false");const a={employee:{id:e,name:t},modelId:this.stateModelId,psTypeId:this.statePsTypeId,workOrder:this.stateWorkOrder,unitNumber:this.stateUnitNumber,siteId:r},s={ver:"v1"};try{const o=await d.post(`${j}?${new URLSearchParams(s).toString()}`,a);if(o.data.result.message=="Cannot Access With Different Supervisor")return this.stateIsFormSelectedByOtherSupervisor=!0,!1;try{return this.stateGeneralForm.checkBeforeTruck=o.data.result.content.general.checkBeforeTruck,this.stateGeneralForm.checkBeforeTruck.items.every(p=>p.category=="skipOtherWash"?(this.generalFormStore.setSkipWash(p.value),!1):!0),this.setCheckboxes(),!0}catch(p){try{return h(p),console.log(p),c("IRONS",p),!1}catch(n){console.log("error",n)}}}catch(o){m("fe_event_error_get_service_sheet_data",{errorMessage:o})}},async postGenerateServiceSheet(e,t,r){const a=b();a.setSkipWash("false");const s={employee:{id:e,name:t},modelId:this.stateModelId,psTypeId:this.statePsTypeId,workOrder:this.stateWorkOrder,unitNumber:this.stateUnitNumber,siteId:r},o={ver:"v1"};try{const p=await d.post(`${j}?${new URLSearchParams(o).toString()}`,s);if(p.data.result.message=="Cannot Access With Different Supervisor")return this.stateIsFormSelectedByOtherSupervisor=!0,!1;try{return this.stateGeneralForm=p.data.result.content.general,this.stateGeneralForm.checkBeforeTruck.items.every(n=>n.category=="skipOtherWash"?(a.setSkipWash(n.value),!1):!0),this.setCheckboxes(),this.stateServiceSheets=p.data.result.content.serviceSheet,this.getGroups(),this.getTaskProgress(),this.stateSelectedGroup=this.groups[0],this.stateIsSet=!0,!0}catch(n){try{return h(n),c("IRONS",n),console.log(n),!1}catch(i){console.log("error",i)}}}catch(p){m("fe_event_error_get_service_sheet_data",{errorMessage:p})}},changeIsFormSelectedByOtherSupervisor(e){this.stateIsFormSelectedByOtherSupervisor=e},setCheckboxes(){this.stateCheckbeforeTruck=[],this.generalForm.checkBeforeTruck.items.forEach(e=>{this.stateCheckbeforeTruck.push({label:e.caption,value:!1})})},setTaskUpdated(){this.stateTaskUpdated=!0},clearTruckCheckBoxes(){this.stateCheckbeforeTruck.forEach(e=>{e.value=!1})},async updateDefectHeaderWithTaskKey(e,t,r=""){const a={ver:"v1"};try{const s=this.groups.find(p=>p.isSelected),o={serviceSheetDetailId:s.id,workorder:s.workOrder,taskKey:e,updateParams:t,employee:{id:this.employee.id,name:this.employee.name}};r!=""&&(o.cbmRatingType=r),this.stateTaskUpdated=!1,await d.post(`${oe}?${new URLSearchParams(a).toString()}`,o)}catch(s){m("fe_event_error_update_defect_with_task_key",{errorMessage:s});const o=this.globalConnectionStore.checkIsErrorNoNetwork(s);this.globalConnectionStore.setSubmitConnectionError(o),h(s),c("IRONS",s)}},async updateServiceSheetTaskValue(e,t,r,a=!0,s=""){let o=!1;const p={ver:"v1"},n=this.groups.find(i=>i.isSelected);try{const i={headerId:n.headerId,workorder:n.workOrder,id:n.id,updateParams:e,employee:{id:this.employee.id,name:this.employee.name}};s&&(i.taskKey=s),this.stateTaskUpdated=!1;const l=await d.post(`${P}?${new URLSearchParams(p).toString()}`,i);switch(l.data.result.message){case f.SUBMITTED:this.stateFormAlreadySubmitted=!0;break;case f.CLOSE:this.stateFormAlreadyClose=!0;break;case f.TASK_UPDATED_BY_OTHER:this.stateTaskAlreadyUpdated=!0;break;default:l.data.statusCode==400&&(this.stateTaskErrorDialog=!0,this.stateErrorMessageTaskErrorDialog=l.data.result.message);break}this.getTaskProgress(),a&&this.updateGroupByParam(n==null?void 0:n.groupName,!0),o=!0,this.setTaskUpdated()}catch(i){m("fe_event_error_post_service_sheet_task",{errorMessage:i}),this.getTaskProgress(),this.updateGroupByParam(n==null?void 0:n.groupName,!0);const l=this.globalConnectionStore.checkIsErrorNoNetwork(i);this.globalConnectionStore.setSubmitConnectionError(l),h(i),l&&(o=!1),c("IRONS",i),console.log(i)}return this.stateTaskUpdated=!0,o},async getTaskProgress(){const e={ver:"v1"};try{const t={modelId:this.generalForm.modelId,psTypeId:this.generalForm.psTypeId,workOrder:this.generalForm.workOrder,headerId:this.serviceSheets[0].headerId};(await d.post(`${x}?${new URLSearchParams(e).toString()}`,t)).data.result.content.forEach(a=>{const s=this.groups.find(o=>a.group===o.key);s&&(s.doneTask=s.groupName=="DEFECT_IDENTIFIED_SERVICE"&&a.identifiedDefectCount?a.identifiedDefectCount:a.doneTask,s.totalTask=s.groupName=="DEFECT_IDENTIFIED_SERVICE"&&a.identifiedDefectCount?a.identifiedDefectCount:a.totalTask)})}catch(t){m("fe_event_error_get_task_progress",{errorMessage:t}),c("IRONS",t),console.log(t)}},async getMultiDefectListPerKey(e){var r;const t=z();this.stateMultiDefectList[e]=await t.getMultipleDefectList(this.stateGeneralForm.workOrder,e,(r=this.selectedGroup)==null?void 0:r.id)},async getMultiDefectList(){const e=z(),t=[],r=[];this.stateSelectedSubGroups.forEach(a=>{a.taskGroup.forEach(s=>{s.task.forEach(o=>{o.category=="NORMAL"&&o.taskValue=="2"&&(r.push(o.key),t.push(new Promise(p=>{var n;e.getMultipleDefectList(this.stateGeneralForm.workOrder,o.key,(n=this.selectedGroup)==null?void 0:n.id).then(i=>{p(i)})})))})})}),await Promise.all(t).then(async a=>{a.forEach((s,o)=>{this.stateMultiDefectList[r[o]]=s})})},setDropdownToolGroup(e,t){t!=""?(this.stateDropdownToolGroup[e].isFilled=!0,this.stateDropdownToolGroup[e].value=t):(this.stateDropdownToolGroup[e].isFilled=!1,this.stateDropdownToolGroup[e].value="")},getTaskDataBasedOnTaskKey(e){let t={};return this.stateSelectedSubGroups.forEach(r=>{r.taskGroup.forEach(a=>{a.task.forEach(s=>{s.key==e&&(t=s)})})}),t},async resetCBMAutomation(e){const t=[{propertyName:"updatedBy",propertyValue:""},{propertyName:"updatedDate",propertyValue:""}],r=[{keyValue:e.key,propertyParams:[{propertyName:"taskValue",propertyValue:""},...t]}],a=[];e.adjustment&&a.push({keyValue:e.adjustment.key,propertyParams:[{propertyName:"measurement",propertyValue:""},{propertyName:"rating",propertyValue:""},{propertyName:"pictures",propertyValue:JSON.stringify([])},{propertyName:"createdBy",propertyValue:""},{propertyName:"createdDate",propertyValue:""},{propertyName:"commentValue",propertyValue:""},...t]});const s=[],o=["paramRating","targetRating"];e.items.forEach(n=>{(n.itemType=="input"&&o.includes(n.categoryItemType)||n.itemType=="smallCamera")&&s.push({keyValue:n.key,propertyParams:[{propertyName:"value",propertyValue:""},...t]})});const p=[...r,...s,...a];await this.updateServiceSheetTaskValue(p,"","")},updateCameraItemCBMTakePhotoCompleteRating(e,t,r){this.stateCameraItemCBMTakePhotoCompleteRating[e]&&this.stateCameraItemCBMTakePhotoCompleteRating[e].every(a=>a.key==t?(a.value=r,!1):!0)},async updateGroupByParam(e,t=!1){var r;if(this.stateGetDataByParam=!1,e!=="General")try{const a={modelId:this.generalForm.modelId,psTypeId:this.generalForm.psTypeId,workOrder:this.generalForm.workOrder,groupName:e},s={ver:"v1"},o=await d.post(`${ie}?${new URLSearchParams(s).toString()}`,a);(t&&((r=this.stateSelectedGroup)==null?void 0:r.groupName)==e||!t)&&(this.stateCameraItemCBMTakePhotoCompleteRating={},this.stateSelectedSubGroups=o.data.result.content.subGroup,this.stateSelectedGroup&&(this.stateSelectedGroup.subGroup=o.data.result.content.subGroup),this.stateSelectedSubGroups.forEach(p=>{p.taskGroup.forEach(n=>{n.task.forEach(i=>{if(i.category=="CBM"&&i.rating=="MANUAL_MOUNTING_LEAK"){const l=i.mappingCamera;this.stateCameraItemCBMTakePhotoCompleteRating[l]||(this.stateCameraItemCBMTakePhotoCompleteRating[l]=[]),i.items.forEach(u=>{u.itemType=="dropDown"&&u.ratingType&&this.stateCameraItemCBMTakePhotoCompleteRating[l].push({key:u.key,value:u.value})})}!g.isUndefined(i.adjustment)&&(i.adjustment.rating!=""||i.adjustment.commentValue!=""||i.adjustment.measurement!="")&&(i.isShowAdjustmentRow=!0),!g.isUndefined(i.replacement)&&(i.replacement.rating!=""||i.replacement.commentValue!=""||i.replacement.measurement!="")&&(i.isShowReplacementRow=!0),i.category=="CBM"&&i.mappingToolGroup&&(this.stateDropdownToolGroup[i.mappingToolGroup]||(this.stateDropdownToolGroup[i.mappingToolGroup]={isFilled:!1,itemKeyDisabledReset:[],value:"",tasksReset:[]}),this.stateDropdownToolGroup[i.mappingToolGroup].tasksReset.indexOf(i.key)===-1&&this.stateDropdownToolGroup[i.mappingToolGroup].tasksReset.push(i.key),i.items.forEach(l=>{l.itemType=="input"&&l.categoryItemType=="paramRating"&&this.stateDropdownToolGroup[i.mappingToolGroup].itemKeyDisabledReset.indexOf(l.key)===-1&&this.stateDropdownToolGroup[i.mappingToolGroup].itemKeyDisabledReset.push(l.key),l.key==i.mappingToolGroup&&l.value!=""&&(this.stateDropdownToolGroup[i.mappingToolGroup].isFilled=!0,this.stateDropdownToolGroup[i.mappingToolGroup].value=l.value)}))})})}),await this.getMultiDefectList(),await this.getPreviousTandemValue(),await this.getPreviousBrakePackValue(),await this.getPreviousReplacementValue(t),this.stateGetDataByParam=!0),this.resetCollapse()}catch(a){m("fe_event_error_get_current_tab_service_sheet_data",{errorMessage:a}),h(a),c("IRONS",a),console.log(a)}else await b().getServerTimestamp()},toggleStateGetDataByParam(e){this.stateGetDataByParam=e},async getPreviousTandemValue(){var r,a;let e=!1,t=!1;if((((r=this.stateSelectedGroup)==null?void 0:r.key)=="MECHANICAL_SERVICE"||((a=this.stateSelectedGroup)==null?void 0:a.key)=="Mechanical_Service")&&(this.statePreviousTandemTasks=[],this.stateSelectedSubGroups.forEach(s=>{s.taskGroup.forEach(o=>{o.task.forEach(p=>{if(p.rating=="AUTOMATIC_PREVIOUS"){e=!0;const n={};e=!0,n.key=p.key,this.statePreviousTandemTasks.push(p.key),p.items.forEach(i=>{i.categoryItemType=="previousParamRating"&&(i.value!=""&&i.value!="-"&&(t=!0),n.value=i.value)}),this.stateNewPreviousTandemTasks.push(n)}})})}),e&&!t)){const s={ver:"v1"};try{const o=await d.post(`${M}?${new URLSearchParams(s).toString()}`,{modelId:this.generalForm.modelId,equipmentNumber:this.generalForm.equipment});let p=[];p=o.data.result.content?o.data.result.content:[],this.stateSelectedSubGroups.forEach(n=>{n.taskGroup.forEach(i=>{i.task.forEach(l=>{l.rating=="AUTOMATIC_PREVIOUS"&&p.forEach(u=>{u.key==l.key&&l.items.forEach(async y=>{if(y.categoryItemType=="previousParamRating"&&y.value!=R(u)){y.value=R(u);const S=[{keyValue:y.key,propertyParams:[{propertyName:"value",propertyValue:R(u)}]}];try{await this.updateItemServiceSheetDetail(S)}catch{console.log("serror updatedata setelah tandem drive")}}})})})})})}catch(o){m("fe_event_error_get_previous_tandem_data",{errorMessage:o}),c("IRONS",o),console.log("error get tandem",o)}}},getAllReplacementTasks(){return this.stateSelectedGroup?Pe(this.stateSelectedGroup).getTaskReplacementInSubGroup(this.stateSelectedSubGroups):[]},getReplacementMappingGroupTaskId(e){const t=e.map(r=>r.groupTaskId??"");return new Set(t)},getReplacementPerGroupTask(e,t){return e.filter(r=>r.groupTaskId==t)},isAllTaskAlreadyHaveRating(e){let t=!0;for(const r of e){const a=r.items.find(s=>s.categoryItemType=="targetRating");if(a&&(t=a.value!=""),!t)break}return t},checkIfAnyRatingValueSet(e){let t=!1;for(const r of e){const a=r.items.find(s=>s.categoryItemType==="targetRating");if(a&&(t=a.value!="",t))break}return t},async getPreviousReplacementValueFromAPI(){const e={ver:"v1"},t=await d.post(`${M}?${new URLSearchParams(e).toString()}`,{modelId:this.generalForm.modelId,equipmentNumber:this.generalForm.equipment});this.statePreviousReplacement=t.data.result.content},async updatePreviousReplacementValue(e){for(const t of e){const r=t.items.find(o=>o.categoryItemType==="previousParamRating");if(!r)continue;this.statePreviousReplacement.length<1&&await this.getPreviousReplacementValueFromAPI();const a=this.statePreviousReplacement.find(o=>o.key==t.key),s=[{keyValue:r.key,propertyParams:[{propertyName:"value",propertyValue:R(a)}]}];try{await this.updateItemServiceSheetDetail(s),r.value=R(a)}catch(o){console.log(`error when update previous value replacement to server with key ${r.key}`,o)}}await this.updateGroupByParam("ELECTRICAL_SERVICE")},async updatePreviewReplacementPerTask(){console.log("test")},async getPreviousReplacementValue(e){if(!this.stateSelectedGroup||this.stateSelectedGroup.key!="ELECTRICAL_SERVICE")return;const t=this.getAllReplacementTasks(),r=this.getReplacementMappingGroupTaskId(t),a=[];for(const s of r){const o=this.getReplacementPerGroupTask(t,s);!this.checkIfAnyRatingValueSet(o)&&a.push(...o)}try{if(a.length<1)return;e||await this.getPreviousReplacementValueFromAPI();for(const s of this.statePreviousReplacement){const o=a.find(n=>n.key===s.key);if(!o)continue;const p=o.items.find(n=>n.categoryItemType==="previousParamRating");p&&(p.value=R(s))}}catch(s){console.log("error when getting previous value replacement from server",s)}},async getCBMResult(e,t,r=""){var p,n;let a="",s="";if(e.items.forEach(i=>{(i.categoryItemType=="dropdownTool"||i.categoryItemType=="dropdownToolDisc")&&(s=i.value)}),e.mappingToolGroup)for(const i in this.stateDropdownToolGroup)i==e.mappingToolGroup&&(s=this.stateDropdownToolGroup[i].value);const o=this.stateCBMFormulas.filter(i=>{const l=i.taskKey;if(t.categoryItemType=="paramRatingDynamic"||e.mappingToolGroup){const u=l==e.key,y=i.cbmType==s;return u&&y}else return l==e.key});if(o.length>0){if(t.value==="")return await this.deleteExisitingDefectCBMAuto(e),{value:"",status:!0};if(console.log(Number(t.value)),o.every(i=>{const l=w(i,t.value),u=A(i,t.value);return a=C(l,u,i),console.log("checkMin",l,"checkMax",u,"formula",i),!a}),a){const i=e.items.find(l=>l.categoryItemType=="targetRating");if(a=="C"||a=="X"){const l=v(),u={ver:"v1"},y=`${e.description.split(";")[0]};${e.description.split(";")[1]}`,S={updateParams:[{keyValue:e.key,propertyParams:[{propertyName:"taskValue",propertyValue:a},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}],headerId:this.selectedGroup.headerId,workOrder:this.selectedGroup.workOrder,id:(p=this.selectedGroup)==null?void 0:p.id,employee:this.employee,defectHeader:{workorder:this.generalForm.workOrder,form:this.generalForm.form,serviceSheetDetailId:(n=this.selectedGroup)==null?void 0:n.id,category:e.category,taskId:e.key,taskNo:y,taskDesc:e.items[2].value,defectWorkorder:"",formDefect:"",defectType:"",cbmMeasurement:this.stateMeasurementValue,cbmUom:this.stateUOM,cbmImageKey:this.stateImageKey,cbmImageProp:"value",isCbmAdjusment:"false",taskValue:a,repairedStatus:"Not-Repaired",cbmNAStatus:"Not-Confirm",supervisor:{id:l.user.EmployeeId,name:l.user.Name},status:"Submit"}};r!=""&&(S.defectHeader.cbmRatingType=r);try{const T=await d.post(`${F}?${new URLSearchParams(u).toString()}`,S);if(T.data.result.message==f.TASK_UPDATED_BY_OTHER)return this.stateTaskAlreadyUpdated=!0,{value:"",status:!1};if(T.data.result.message==f.SUBMITTED)return this.stateFormAlreadySubmitted=!0,{value:"",status:!1};if(T.data.result.message==f.CLOSE)return this.stateFormAlreadyClose=!0,{value:"",status:!1}}catch(T){m("fe_event_error_post_defect_cbm",{errorMessage:T}),c("IRONS",T)}const k=[{keyValue:i.key,propertyParams:[{propertyName:"value",propertyValue:a},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}];return await this.updateItemServiceSheetDetail(k),this.stateMeasurementValue="",this.stateUOM="",this.stateImageKey="",{value:a,status:!0}}else{i.value=a;const l=[{keyValue:i.key,propertyParams:[{propertyName:"value",propertyValue:a},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]},{keyValue:e.key,propertyParams:[{propertyName:"taskValue",propertyValue:a},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}];return await this.updateServiceSheetTaskValue(l,this.employee.id.toString(),this.employee.name,!1),{value:a,status:!0}}}else return await this.deleteExisitingDefectCBMAuto(e),{value:"",status:!0}}else return t.categoryItemType=="paramRatingDynamic"&&!t.value?{value:"",status:!0}:(this.stateRatingNotMapped=!0,console.log("rating CBM for this task is not mapped on ADM"),{value:"",status:!1})},getCBMFormula(e){return this.stateCBMFormulas.filter(t=>t.taskKey==e)},getCBMRatingValue(e,t){let r="";return e.every(a=>{const s=w(a,t),o=A(a,t);return r=C(s,o,a),console.log("checkMin",s,"checkMax",o,"formula",a),!r}),r},isAnyPreviousMeasurement(e){const t=e.items.find(r=>r.categoryItemType=="previousParamRating");return t?t.value&&t.value!="-":!1},createCBMDefect(e,t){var p,n;const r=v(),a={ver:"v1"},s=`${e.description.split(";")[0]};${e.description.split(";")[1]}`,o={updateParams:[{keyValue:e.key,propertyParams:[{propertyName:"taskValue",propertyValue:t},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}],headerId:this.selectedGroup.headerId,workOrder:this.selectedGroup.workOrder,id:(p=this.selectedGroup)==null?void 0:p.id,employee:this.employee,defectHeader:{workorder:this.generalForm.workOrder,form:this.generalForm.form,serviceSheetDetailId:(n=this.selectedGroup)==null?void 0:n.id,category:e.category,taskId:e.key,taskNo:s,taskDesc:e.items[2].value,defectWorkorder:"",formDefect:"",defectType:"",cbmMeasurement:this.stateMeasurementValue,cbmUom:this.stateUOM,cbmImageKey:this.stateImageKey,cbmImageProp:"value",isCbmAdjusment:"false",taskValue:t,repairedStatus:"Not-Repaired",cbmNAStatus:"Not-Confirm",supervisor:{id:r.user.EmployeeId,name:r.user.Name},status:"Submit"}};return d.post(`${F}?${new URLSearchParams(a).toString()}`,o)},async updateParamRatingItem(e,t,r){const a=[{keyValue:t,propertyParams:[{propertyName:"value",propertyValue:r},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}];(r=="A"||r=="B")&&a.push({keyValue:e,propertyParams:[{propertyName:"taskValue",propertyValue:r},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}),await this.updateServiceSheetTaskValue(a,this.employee.id.toString(),this.employee.name,!1)},async getCBMResultGap(e,t){const r=this.getCBMFormula(e.key);if(r.length<1)return this.stateRatingNotMapped=!0,{value:"",status:!1};if(!t.value)return await this.deleteExisitingDefectCBMAuto(e),{value:"",status:!0};const a=Number(t.value);if(a>52)throw await this.deleteExisitingDefectCBMAuto(e),Error("value is out of range");let s="A";const o=r.filter(i=>i.cbmType=="CBM_GAP");if(this.isAnyPreviousMeasurement(e)){const i=e.items.find(y=>y.categoryItemType=="previousParamRating"),l=Number(i.value);if(a>l)throw Error("value is out of range");const u=Math.abs(a-l).toFixed(2);s=this.getCBMRatingValue(o,u.toString())}if(!s)return await this.deleteExisitingDefectCBMAuto(e),{value:"",status:!0};try{const i=await this.createCBMDefect(e,s);if(i.data.result.message==f.TASK_UPDATED_BY_OTHER&&(this.stateTaskAlreadyUpdated=!0),i.data.result.message==f.SUBMITTED&&(this.stateFormAlreadySubmitted=!0),i.data.result.message==f.CLOSE&&(this.stateFormAlreadyClose=!0),this.stateTaskAlreadyUpdated||this.stateFormAlreadySubmitted||this.stateFormAlreadyClose)return{value:"",status:!1}}catch(i){m("fe_event_error_post_defect_cbm",{errorMessage:i})}const n=e.items.find(i=>i.categoryItemType=="targetRating");return n&&(n.value=s,await this.updateParamRatingItem(e.key,n.key,s)),{value:s,status:!0}},async deleteExisitingDefectCBMAuto(e){const t={ver:"v1"};let r={};const a={keyValue:e.key,propertyParams:[{propertyName:"taskValue",propertyValue:""},{propertyName:"updatedBy",propertyValue:""},{propertyName:"updatedDate",propertyValue:""}]};e.items.forEach(async p=>{if(p.categoryItemType=="targetRating"||e.category==="CBM"&&p.itemType=="dropDown"||e.category==="NORMAL"&&p.itemType=="dropDown"||e.category==="CRACK"&&p.itemType=="dropDown"){if(r={keyValue:p.key,propertyParams:[{propertyName:"value",propertyValue:""},{propertyName:"updatedBy",propertyValue:""},{propertyName:"updatedDate",propertyValue:""}]},p.value=="C"||p.value=="X"){const n={taskId:e.key,workorder:this.stateWorkOrder},l=(await d.post(`${V}?${new URLSearchParams(t).toString()}`,n)).data.result.content,u={id:l.id,updateParams:[{keyValue:l.key,propertyParams:[{propertyName:"isActive",propertyValue:"false"}]}],employee:this.employee};try{await d.post(`${D}?${new URLSearchParams(t).toString()}`,u)}catch(y){m("fe_event_error_update_defect_header",{errorMessage:y}),h(y),c("IRONS",y),console.log(y)}}p.value=""}});const s=[r,a],o={headerId:this.stateSelectedGroup.headerId,workorder:this.stateSelectedGroup.workOrder,id:this.stateSelectedGroup.id,updateParams:s,employee:this.employee};try{await d.post(`${P}?${new URLSearchParams(t).toString()}`,o)}catch(p){m("fe_event_error_post_service_sheet_task",{errorMessage:p}),h(p),c("IRONS",p),console.log(p)}},async getEhmsRating(){const e={ver:"v1",model:this.stateModelName,psType:this.statePsTypeId};if(this.stateModelName&&this.statePsTypeId)try{const t=await d.get(ne,"",new URLSearchParams(e).toString());this.stateCBMFormulas=t.data.result.content[0].detail}catch(t){m("fe_event_error_get_ehms_rating",{errorMessage:t}),h(t),c("IRONS",t),console.log(t)}},async getValueFromItemKey(e){const t={id:this.selectedGroup.id,keyValue:e,propertyName:"value"},r={ver:"v1"};let a="";try{const s=await d.post(`${pe}?${new URLSearchParams(r).toString()}`,t);g.isUndefined(s.data.result.content)||(a=s.data.result.content)}catch(s){m("fe_event_error_get_smu_tolerance_data",{errorMessage:s}),c("IRONS",s)}return a},updateSelectedFitter(e){this.stateEmployee=e},updateServiceStart(e){const t=b();this.stateServiceStart=e,this.stateShift=De(t.stateTimeZone)},resetMechanic(){this.stateEmployee={},this.stateServiceStart="",this.stateShift=""},resetDefectMultiList(){this.stateMultiDefectList={}},updateGeneralValue(e,t){this.stateGeneralForm[e]=t},setNextPage(){const e=this.stateGroups.findIndex(a=>{var s;return a.groupName==((s=this.stateSelectedGroup)==null?void 0:s.groupName)});let t=1,r=this.stateGroups[e+t];for(;!g.isUndefined(r.isDisable)&&r.isDisable=="true";)t++,r=this.stateGroups[e+t];this.setSelectedGroup(r.id),this.updateGroupByParam(r.groupName),window.scrollTo({top:0,behavior:"smooth"})},async setShowNextPage(e=""){const t={ver:"v1"};let r=!0;try{const a={modelId:this.generalForm.modelId,psTypeId:this.generalForm.psTypeId,workOrder:this.generalForm.workOrder,headerId:this.serviceSheets[0].headerId},s=await d.post(`${x}?${new URLSearchParams(t).toString()}`,a);s.data.result.content.length<1&&(r=!1),s.data.result.content.forEach(o=>{o.doneTask!=o.totalTask&&(r=!1)})}catch(a){m("fe_event_error_handle_show_next_page",{errorMessage:a}),h(a),console.log(a),r=!1,c("IRONS",a)}if(r)if(await b().getServiceSheetHeaderKeyValue("status")=="Submited")e!="Submit"?(this.setNextPage(),this.stateFormAlreadySubmitted=!1):this.stateFormAlreadySubmitted=!0;else return!0;else{if(this.stateSkipPreService)this.setNextPage();else{const a="PRE_SERVICE_OPERATIONAL_CHECK";if(this.selectedGroup.groupName==a){await this.getTaskProgress();const s=this.groups.find(o=>o.groupName==a);s.doneTask!=s.totalTask?(this.setSelectedGroup(s.id),this.updateGroupByParam(s.groupName),this.stateShowPreTaskNotComplete=!0):this.setNextPage()}else this.setNextPage()}return!1}},async submitEform(){const e={ver:"v1"},t=[{propertyName:"status",propertyValue:"Submited"},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"},{propertyName:"serviceEnd",propertyValue:"<<ServerDateTime>>"},{propertyName:"tsServiceEnd",propertyValue:"<<ServerTimeStamp>>"}],r={id:this.generalForm.id,updateParams:[{keyValue:"GENERAL",propertyParams:t}],employee:this.employee,localStatus:this.generalForm.status};try{return await d.post(`${N}?${new URLSearchParams(e).toString()}`,r),!0}catch(a){return m("fe_event_error_submit_form",{errorMessage:a}),c("IRONS",a),console.log(a),!1}},async updateCBMLeakMounting(e,t,r){if(t=="C"||t=="X")return this.updateDefect(e,t,r);{let a="taskValue";r.ratingType&&(r.ratingType=="Leak"?a="taskValueLeak":r.ratingType=="Mounting"&&(a="taskValueMounting"));const s=[{keyValue:e.key,propertyParams:[{propertyName:a,propertyValue:t},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}],o=[{keyValue:r.key,propertyParams:[{propertyName:"value",propertyValue:t},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}];return this.updateServiceSheetTaskValue([...s,...o],"","")}},async updateDefect(e,t,r){var l,u;const a=v(),s={ver:"v1"},o=e.description.split(" ")[0].replaceAll(".","");let p="";o.includes(";;")?p=`${o.split(";;")[0]};${o.split(";;")[1]}`:p=`${o.split(";")[0]};${o.split(";")[1]}`;let n="taskValue";r.ratingType&&(r.ratingType=="Leak"?n="taskValueLeak":r.ratingType=="Mounting"&&(n="taskValueMounting"));const i={updateParams:[{keyValue:e.key,propertyParams:[{propertyName:n,propertyValue:t},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}],headerId:this.selectedGroup.headerId,workorder:this.selectedGroup.workOrder,id:(l=this.selectedGroup)==null?void 0:l.id,employee:this.employee,defectHeader:{workorder:this.generalForm.workOrder,form:this.generalForm.form,serviceSheetDetailId:(u=this.selectedGroup)==null?void 0:u.id,category:e.category,taskId:e.key,taskNo:p,taskDesc:r.ratingType?`${e.items[2].value} - ${r.ratingType}`:e.items[2].value,defectWorkorder:"",formDefect:"",defectType:"",cbmMeasurement:this.stateMeasurementValue,cbmUom:this.stateUOM,cbmImageKey:this.stateImageKey,cbmImageProp:"value",isCbmAdjusment:"false",taskValue:t,repairedStatus:"Not-Repaired",cbmNAStatus:"Not-Confirm",supervisor:{id:a.user.EmployeeId,name:a.user.Name},status:"Submit"}};try{const y=await d.post(`${F}?${new URLSearchParams(s).toString()}`,i);switch(y.data.result.message){case f.SUBMITTED:return this.toggleFormAlreadySubmitted(!0),!1;case f.CLOSE:return this.toggleFormAlreadyClose(!0),!1;case f.TASK_UPDATED_BY_OTHER:return this.toggleTaskAlreadyUpdatedStatus(!0),!1;default:if(y.data.statusCode==400)return this.toogleTaskErrorDialog(!0),this.stateErrorMessageTaskErrorDialog=y.data.result.message,!1;break}this.stateMeasurementValue="",this.stateUOM="",this.stateImageKey="";let S={},k={};r.categoryItemType=="resultRating"&&(k={keyValue:e.key,propertyParams:[{propertyName:"taskNormalValue",propertyValue:""}]},e.items.forEach(E=>{E.categoryItemType=="resultStatus"&&(S={keyValue:E.key,propertyParams:[{propertyName:"value",propertyValue:""},{propertyName:"updatedBy",propertyValue:""},{propertyName:"updatedDate",propertyValue:""}]})}));const T=[{keyValue:r.key,propertyParams:[{propertyName:"value",propertyValue:t},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}];r.categoryItemType=="resultRating"&&(T.push(S),T.push(k)),await this.updateItemServiceSheetDetail(T);const O=this.groups.find(E=>E.isSelected);return this.getTaskProgress(),this.updateGroupByParam(O==null?void 0:O.groupName),!0}catch(y){return m("fe_event_error_post_defect_data",{errorMessage:y}),h(y),c("IRONS",y),console.log(y),!1}},toggleNotMapped(e){this.stateRatingNotMapped=e},async getOilTolerance(){this.stateOilToleranceNotMapped=!1;const e={Model:"",PsType:"",Parameter:"",Uom:"",StartDate:"",EndDate:"",Page:"1",PageSize:"1",Order:"",ver:"v1"},t=()=>{this.stateOilTolerance={min:-5,max:5,uom:"%"},this.stateOilToleranceNotMapped=!0,console.log("oil tolerance not mapped on ADM")};try{const a=(await d.get(Ee,"",new URLSearchParams(e).toString())).data.result.content[0];g.isUndefined(a)?t():a.isActive?this.stateOilTolerance={min:Number(a.valueMin),max:Number(a.valueMax),uom:a.uom}:t()}catch(r){m("fe_event_error_get_oil_tolerance_data",{errorMessage:r}),h(r),t(),c("IRONS",r)}},toggleTaskAlreadyUpdatedStatus(e){this.stateTaskAlreadyUpdated=e},toogleTaskErrorDialog(e){this.stateTaskErrorDialog=e},async updateRiskAssesment(e){this.generalForm.riskAssesment[0].value=e,await this.updatePreRiskAssesmentToBE()},async deleteRisAssesmentPic(e){let t=this.generalForm.riskAssesment[0].value;t=t.filter(r=>typeof r.image=="string"?r.image!=e:r.image.filename!=e),this.generalForm.riskAssesment[0].value=t,await this.updatePreRiskAssesmentToBE()},async updatePreRiskAssesmentToBE(){const e=v(),t={id:this.generalForm.id,updateParams:[{keyValue:this.generalForm.riskAssesment[0].key,propertyParams:[{propertyName:"value",propertyValue:JSON.stringify(this.generalForm.riskAssesment[0].value)}]}],employee:this.stateEmployee,localStatus:this.generalForm.status},r={ver:"v1"};try{await d.post(`${N}?${new URLSearchParams(r).toString()}`,t),await this.refreshWash(e.user.EmployeeId,e.user.Name,e.user.SiteId)}catch(a){m("fe_event_error_post_risk_assessment_photo",{errorMessage:a}),h(a),c("IRONS",a),console.log(a),console.log("upload risk Assesment",a)}},async updateItemServiceSheetDetail(e){const t={ver:"v1"},r=this.groups.find(s=>s.isSelected),a={headerId:r.headerId,workorder:r.workOrder,id:r.id,updateParams:e,employee:{id:this.employee.id,name:this.employee.name}};try{await d.post(`${P}?${new URLSearchParams(t).toString()}`,a)}catch(s){m("fe_event_error_post_service_sheet_data",{errorMessage:s}),h(s),c("IRONS",s),console.log(s),console.log("error update item",s)}},async getAdjusmentRating(e){var n;const t={ver:"v1"};let r,a="";if(e.mappingToolGroup)for(const i in this.stateDropdownToolGroup)i==e.mappingToolGroup&&(a=this.stateDropdownToolGroup[i].value);const s=this.stateCBMFormulas.filter(i=>{const l=i.taskKey;if(e.mappingToolGroup){const u=l==e.key,y=i.cbmType==a;return u&&y}else if(typeof e.items[0].value=="string")return l==e.key});if(s.length>0&&s.every(i=>{const l=w(i,e.adjustment.measurement),u=A(i,e.adjustment.measurement);return r=C(l,u,i),!r}),e.adjustment.measurement==""?e.adjustment.rating="":e.adjustment.rating=r,r){const i={taskId:e.key,workorder:this.stateWorkOrder},u=(await d.post(`${V}?${new URLSearchParams(t).toString()}`,i)).data.result.content;let y;r=="C"||r=="X"?y={id:u.id,updateParams:[{keyValue:u.key,propertyParams:[{propertyName:"taskValue",propertyValue:r},{propertyName:"cbmImageKey",propertyValue:e.adjustment.key},{propertyName:"cbmImageProp",propertyValue:"pictures"},{propertyName:"cbmMeasurement",propertyValue:e.adjustment.measurement},{propertyName:"cbmUom",propertyValue:e.adjustment.uom},{propertyName:"isCbmAdjusment",propertyValue:"true"},{propertyName:"isActive",propertyValue:"true"}]}],employee:this.employee}:(r=="A"||r=="B")&&(y={id:u.id,updateParams:[{keyValue:u.key,propertyParams:[{propertyName:"isActive",propertyValue:"false"}]}],employee:this.employee});try{await d.post(`${D}?${new URLSearchParams(t).toString()}`,y)}catch(S){m("fe_event_error_update_defect_header_data",{errorMessage:S}),h(S),c("IRONS",S),console.log(S)}}const o={keyValue:e.adjustment.key,propertyParams:[{propertyName:"measurement",propertyValue:e.adjustment.rating?e.adjustment.measurement:""},{propertyName:"rating",propertyValue:e.adjustment.measurement?e.adjustment.rating:""},{propertyName:"updatedBy",propertyValue:e.adjustment.measurement&&e.adjustment.rating?JSON.stringify(this.employee):""},{propertyName:"updatedDate",propertyValue:e.adjustment.measurement&&e.adjustment.rating?"<<ServerDateTime>>":""}]};e.adjustment.createdDate==""&&(o.propertyParams=[...o.propertyParams,{propertyName:"createdBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"createdDate",propertyValue:"<<ServerDateTime>>"}]);const p={headerId:(n=this.selectedGroup)==null?void 0:n.headerId,workorder:this.stateWorkOrder,id:this.selectedGroup.id,updateParams:[o],employee:this.employee};try{const i=await d.post(`${P}?${new URLSearchParams(t).toString()}`,p);i.data.result.message==f.SUBMITTED&&(this.stateFormAlreadySubmitted=!0),i.data.result.message==f.CLOSE&&(this.stateFormAlreadyClose=!0),this.getTaskProgress(),this.updateGroupByParam(this.stateSelectedGroup.groupName)}catch(i){m("fe_event_error_post_service_sheet_data",{errorMessage:i}),h(i),c("IRONS",i),console.log(i)}return r},async deleteAdjusmentTask(e){var l;const t={ver:"v1"},r={taskId:e.key,workorder:this.stateWorkOrder},s=(await d.post(`${V}?${new URLSearchParams(t).toString()}`,r)).data.result.content;let o="",p="";e.items.forEach(u=>{u.itemType=="smallCamera"&&(o=u.key),u.categoryItemType=="paramRating"&&(p=u.value)});const n={id:s.id,updateParams:[{keyValue:s.key,propertyParams:[{propertyName:"taskValue",propertyValue:e.taskValue},{propertyName:"cbmImageKey",propertyValue:o},{propertyName:"cbmImageProp",propertyValue:"value"},{propertyName:"cbmMeasurement",propertyValue:p},{propertyName:"isCbmAdjusment",propertyValue:"false"},{propertyName:"isActive",propertyValue:"true"}]}],employee:this.employee};try{await d.post(`${D}?${new URLSearchParams(t).toString()}`,n)}catch(u){m("fe_event_error_delete_adjusment_task",{errorMessage:u}),h(u),c("IRONS",u),console.log(u)}const i={headerId:(l=this.selectedGroup)==null?void 0:l.headerId,workorder:this.stateWorkOrder,id:this.selectedGroup.id,updateParams:[{keyValue:e.adjustment.key,propertyParams:[{propertyName:"measurement",propertyValue:""},{propertyName:"rating",propertyValue:""},{propertyName:"updatedBy",propertyValue:""},{propertyName:"updatedDate",propertyValue:""},{propertyName:"pictures",propertyValue:JSON.stringify([])},{propertyName:"createdBy",propertyValue:""},{propertyName:"createdDate",propertyValue:""},{propertyName:"commentValue",propertyValue:""}]}],employee:this.employee};try{const u=await d.post(`${P}?${new URLSearchParams(t).toString()}`,i);u.data.result.message==f.SUBMITTED&&(this.stateFormAlreadySubmitted=!0),u.data.result.message==f.CLOSE&&(this.stateFormAlreadyClose=!0),this.getTaskProgress(),this.updateGroupByParam(this.stateSelectedGroup.groupName)}catch(u){m("fe_event_error_post_service_sheet_task",{errorMessage:u}),h(u),c("IRONS",u),console.log(u)}},async addCBMAdjustmentPictures(e){var s;const t={ver:"v1"},r={keyValue:e.adjustment.key,propertyParams:[{propertyName:"pictures",propertyValue:JSON.stringify(e.adjustment.pictures)},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]},a={headerId:(s=this.selectedGroup)==null?void 0:s.headerId,workorder:this.stateWorkOrder,id:this.selectedGroup.id,updateParams:[r],employee:this.employee};try{const o=await d.post(`${P}?${new URLSearchParams(t).toString()}`,a);o.data.result.message==f.SUBMITTED&&(this.stateFormAlreadySubmitted=!0),o.data.result.message==f.CLOSE&&(this.stateFormAlreadyClose=!0),this.getTaskProgress(),this.updateGroupByParam(this.stateSelectedGroup.groupName)}catch(o){m("fe_event_error_post_adjusment_image",{errorMessage:o}),h(o),c("IRONS",o),console.log(o)}},handleGetUomFromSelectedTool(e,t){const r=this.stateCBMFormulas.filter(s=>{const o=s.taskKey;if(typeof e.items[0].value=="string")return o==e.key});console.log("value",t,"taskFormulas",r);let a="";return r.forEach(s=>{s.cbmType==t&&(a=s.uom)}),a},async updateToolUom(e,t){const r=this.handleGetUomFromSelectedTool(e,t.value);let a={};e.items.forEach(i=>{i.categoryItemType=="targetTool"&&(i.value=r,a={keyValue:i.key,propertyParams:[{propertyName:"value",propertyValue:r},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]})});const s={keyValue:t.key,propertyParams:[{propertyName:"value",propertyValue:t.value},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]},o=[a,s],p={ver:"v1"},n={headerId:this.stateSelectedGroup.headerId,workorder:this.stateSelectedGroup.workOrder,id:this.stateSelectedGroup.id,updateParams:o,employee:this.employee};try{await d.post(`${P}?${new URLSearchParams(p).toString()}`,n)}catch(i){m("fe_event_error_post_service_sheet_task_tool_uom",{errorMessage:i}),h(i),c("IRONS",i),console.log(i)}await this.resetCBMMeasurementValueAndDefect(e)},async resetCBMMeasurementValueAndDefect(e){const t={ver:"v1"};let r={},a={},s={};e.items.forEach(async i=>{if(i.categoryItemType=="paramRatingDynamic"&&(i.value="",r={keyValue:i.key,propertyParams:[{propertyName:"value",propertyValue:""},{propertyName:"updatedBy",propertyValue:""},{propertyName:"updatedDate",propertyValue:""}]}),i.categoryItemType=="targetRating"){if(a={keyValue:i.key,propertyParams:[{propertyName:"value",propertyValue:""},{propertyName:"updatedBy",propertyValue:""},{propertyName:"updatedDate",propertyValue:""}]},i.value=="C"||i.value=="X"){const l={taskId:e.key,workorder:this.stateWorkOrder},y=(await d.post(`${V}?${new URLSearchParams(t).toString()}`,l)).data.result.content,S={id:y.id,updateParams:[{keyValue:y.key,propertyParams:[{propertyName:"isActive",propertyValue:"false"}]}],employee:this.employee};try{await d.post(`${D}?${new URLSearchParams(t).toString()}`,S)}catch(k){m("fe_event_error_update_defect_header_cbm",{errorMessage:k}),h(k),c("IRONS",k),console.log(k)}}i.value=""}i.itemType=="smallCamera"&&(s={keyValue:i.key,propertyParams:[{propertyName:"value",propertyValue:""},{propertyName:"updatedBy",propertyValue:""},{propertyName:"updatedDate",propertyValue:""}]})});const p=[{keyValue:e.key,propertyParams:[{propertyName:"value",propertyValue:""},{propertyName:"updatedBy",propertyValue:""},{propertyName:"updatedDate",propertyValue:""}]},r,a,s];this.cameraStore.clearImageById(s.keyValue);const n={headerId:this.stateSelectedGroup.headerId,workorder:this.stateSelectedGroup.workOrder,id:this.stateSelectedGroup.id,updateParams:p,employee:this.employee};try{await d.post(`${P}?${new URLSearchParams(t).toString()}`,n)}catch(i){m("fe_event_error_post_service_sheet_task",{errorMessage:i}),h(i),c("IRONS",i),console.log(i)}await this.getTaskProgress(),await this.updateGroupByParam(this.stateSelectedGroup.groupName)},async deleteDefect(e){const t={ver:"v1"},r={taskId:e.key,workorder:this.stateWorkOrder},s=(await d.post(`${V}?${new URLSearchParams(t).toString()}`,r)).data.result.content;if(!s)return;const o={id:s.id,updateParams:[{keyValue:s.key,propertyParams:[{propertyName:"isActive",propertyValue:"false"}]}],employee:this.employee};try{await d.post(`${D}?${new URLSearchParams(t).toString()}`,o)}catch(p){m("fe_event_error_update_defect_header",{errorMessage:p}),h(p),c("IRONS",p),console.log(p)}},async updateItemFromTask(e){const t={ver:"v1"},r={headerId:this.stateSelectedGroup.headerId,workorder:this.stateSelectedGroup.workOrder,id:this.stateSelectedGroup.id,updateParams:e,employee:this.employee};try{await d.post(`${P}?${new URLSearchParams(t).toString()}`,r)}catch(a){m("fe_event_error_post_service_sheet_task",{errorMessage:a}),h(a),c("IRONS",a),console.log(a)}await this.getTaskProgress(),await this.updateGroupByParam(this.stateSelectedGroup.groupName)},async updateSuspensionCylinderTask(e,t){const r=this.stateCBMFormulas.filter(n=>n.taskKey==e.key);console.log("task formulas",r);let a;r.every(n=>{const i=w(n,t.value),l=A(n,t.value);return a=C(i,l,n),console.log("checkMin",i,"checkMax",l,"formula",n),!a});const s=e.items.find(n=>n.categoryItemType=="suspensionTargetRating"),o=[{keyValue:e.key,propertyParams:[{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]},{keyValue:s.key,propertyParams:[{propertyName:"value",propertyValue:a},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]},{keyValue:t.key,propertyParams:[{propertyName:"value",propertyValue:t.value},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}];await this.updateItemServiceSheetDetail(o),await this.updateGroupByParam(this.stateSelectedGroup.groupName),this.stateStoredSuspensionCylinderValue.forEach(n=>{s.key==n.key&&(n.value=a)}),console.log("this.stateStoredSuspensionCylinderValue",this.stateStoredSuspensionCylinderValue),this.stateStoredSuspensionCylinderValue.filter(n=>n.value=="Out of spec"||n.value=="Out Spec").length==1&&(a=="Out of spec"||a=="Out Spec")&&(this.stateShowSCConfirmToSPC=!0)},async updateAdjustmentSuspensionCylinderTask(e,t){const r=this.stateCBMFormulas.filter(p=>p.taskKey==t.mappingKeyId);console.log("task formulas",r);let a;r.every(p=>{const n=w(p,t.value),i=A(p,t.value);return a=C(n,i,p),console.log("checkMin",n,"checkMax",i,"formula",p),!a});const s=e.items.find(p=>p.categoryItemType=="adjustmentSuspensionTargetRating"),o=[{keyValue:e.key,propertyParams:[{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]},{keyValue:s.key,propertyParams:[{propertyName:"value",propertyValue:a},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}];await this.updateItemServiceSheetDetail(o),this.checkAllAdjustedSCFilled({key:s.key,value:a})},toggleShowSCConfirmToSPV(e){this.stateShowSCConfirmToSPC=e},toggleShowSCdjustmentWarning(e){this.stateShowSCAdjustmentWarning=e},pushDataToSuspensionCylinderStoredValue(e){this.stateStoredSuspensionCylinderValue=e},pushDataToAdjustedSuspensionCylinderStoredValue(e){this.stateStoredAdjustedSuspensionCylinderValue=e},updateStoredAdjustmentOptionValue(e){this.stateStoredAdjustmentOptionValue=e},checkAllAdjustedSCFilled(e){this.stateStoredAdjustedSuspensionCylinderValue.forEach(r=>{r.key==e.key&&(r.value=e.value)});let t=!1;this.stateStoredAdjustedSuspensionCylinderValue.forEach(r=>{r.value==""&&(t=!0)}),!t&&!this.stateIsShowCalibrationConfirm&&(this.stateShowConfirmToCalibrateSC=!0,this.stateIsShowCalibrationConfirm=!0)},toggleIsShowCalibrationConfirm(e){this.stateIsShowCalibrationConfirm=e},toggleShowConfirmToCalibrateSC(e){this.stateShowConfirmToCalibrateSC=e},toggleShowPreTaskNotComplete(e){this.stateShowPreTaskNotComplete=e},async updateDefectCalibrationDropdown(e,t){var s,o;const r=v();console.log(e.description);const a={updateParams:[{keyValue:e.key,propertyParams:[{propertyName:"taskValue",propertyValue:t.value},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}],headerId:this.selectedGroup.headerId,workorder:this.selectedGroup.workOrder,id:(s=this.selectedGroup)==null?void 0:s.id,employee:this.employee,defectHeader:{workorder:this.generalForm.workOrder,form:this.generalForm.form,serviceSheetDetailId:(o=this.selectedGroup)==null?void 0:o.id,category:e.category,taskId:e.key,taskNo:e.description.split(";;")[0],taskDesc:e.description.split(";;")[1],defectWorkorder:"",formDefect:"BA-PL-F503",defectType:e.rating,cbmMeasurement:"",cbmUom:"",cbmImageKey:"",cbmImageProp:"",isCbmAdjusment:"",taskValue:2,repairedStatus:"Not-Repaired",cbmNAStatus:"Not-Confirm",supervisor:{id:r.user.EmployeeId,name:r.user.Name},status:"Acknowledge"},defectDetail:{type:e.rating,title:e.description.split(";;")[1],assetNumber:this.generalForm.equipment,raisedBy:this.employee.name,date:"<<ServerDateTime>>"}};console.log("defectPayload",a);try{const p=await d.post(`${F}?${new URLSearchParams(ve).toString()}`,a);if(p.data.result.message==f.SUBMITTED)return this.stateFormAlreadySubmitted=!0,!1;if(p.data.result.message==f.CLOSE)return this.stateFormAlreadyClose=!0,!1;if(p.data.result.message==f.TASK_UPDATED_BY_OTHER)return this.stateTaskAlreadyUpdated=!0,!1;this.stateMeasurementValue="",this.stateUOM="",this.stateImageKey="";const n=[{keyValue:t.key,propertyParams:[{propertyName:"value",propertyValue:t.value},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}];await this.updateItemServiceSheetDetail(n);const i=this.groups.find(l=>l.isSelected);return this.getTaskProgress(),this.updateGroupByParam(i==null?void 0:i.groupName),this.updateStoredAdjustmentOptionValue(t.value),!0}catch(p){return m("fe_event_error_post_calibration_task",{errorMessage:p}),h(p),c("IRONS",p),console.log(p),!1}},updateStoredBrakeTypeValue(e){const t=this.stateStoredBrakeTypeValue.filter(r=>r.key==e.key);t.length==0?this.stateStoredBrakeTypeValue.push(e):t.forEach(r=>{r.value=e.value})},clearStoredBrakeTypeValue(){this.stateStoredBrakeTypeValue=[]},async handleScrollToUnfilledTask(){this.stateToggleExpandTaskGroup=!0;const e=X.service({lock:!0,text:"Scrolling to unfilled task",background:"rgba(0, 0, 0, 0.7)"});await me("task-required",500+this.stateTaskGroupClosed),this.stateToggleExpandTaskGroup=!1,e.close()},decreaseCollapse(){this.stateTaskGroupClosed>100&&(this.stateTaskGroupClosed-=100)},increaseeCollapse(){this.stateTaskGroupClosed+=100},resetCollapse(){this.stateTaskGroupClosed=100},async updateSkipPreServiceReasonOptions(){try{const e=await d.get(`${le}`),t=[];e.data.result.content.forEach(r=>{t.push(r.reason)}),t.push("Other"),this.stateSkipPreServiceReasonOptions=t}catch(e){m("fe_event_error_get_skip_pre_service_options",{errorMessage:e}),c("IRONS",e)}},getFieldValueByKey(e,t){let r="";return this.stateSelectedSubGroups.forEach(a=>{if(a.key==e){for(const s in a)if(s==t)return r=a[s],r}a.taskGroup.forEach(s=>{if(s.key==e){for(const o in s)if(o==t)return r=s[o],r}s.task.forEach(o=>{if(o.taskType==="table"||o.taskType==="collapsibleTable")for(const p in o.items){const n=o.items[p];for(const i in n){const l=n[i];if(l.key==e){for(const u in l)if(u==t)return r=l[u],r}}}if(o.key==e){for(const p in o)if(p==t)return r=o[p],r}o.items.forEach(p=>{if(p.key==e){for(const n in p)if(n==t)return r=p[n],r}})})})}),r},async getCrackBulkData(){let e=!1,t=!1;if(this.stateServiceSheets.forEach(r=>{r.key=="CHASSIS_CRACK_SERVICE"&&(g.isUndefined(r.isDisable)||r.isDisable=="false")&&(e=!0)}),(this.stateGeneralForm.status=="On Progress"||this.stateGeneralForm.status=="Open")&&(t=!0),e&&t){const r={workOrder:this.stateWorkOrder,ver:"v1"};try{const a=await d.get(`${ue}`,"",new URLSearchParams(r).toString());this.statePreviousCrackArr=a.data.result.content}catch(a){c("IRONS",a),console.log("error get previous each wo")}}},setSerialNumberGeneral(e){this.stateGeneralForm.serialNumber=e},async getReplacementDefault(e){var t;try{const r=new URLSearchParams({ver:"v1"}).toString(),a=await d.post(`${de}?${r}`,e);return this.stateReplacementValue=(t=a.data.result.content)==null?void 0:t.defaultValue,this.stateReplacementValue}catch(r){return c("IRONS",r),r}finally{this.toggleIsReplaceValue(!0)}},async getReplacementRating(e){var p;const t={ver:"v1"};let r;if(e.mappingToolGroup)for(const n in this.stateDropdownToolGroup)n==e.mappingToolGroup&&this.stateDropdownToolGroup[n].value;const a=this.stateCBMFormulas.filter(n=>n.taskKey==e.key&&n.cbmType=="CBM");if(console.log(a),a.length>0&&a.every(n=>{const i=w(n,e.replacement.measurement),l=A(n,e.replacement.measurement);return r=C(i,l,n),console.log("checkMin",i,"checkMax",l,"formula",n,"value rossi",e.replacement.measurement),!r}),e.replacement.rating=r,r){const n={taskId:e.key,workorder:this.stateWorkOrder},l=(await d.post(`${V}?${new URLSearchParams(t).toString()}`,n)).data.result.content;let u;if(r=="C"||r=="X"){u={id:l.id,updateParams:[{keyValue:l.key,propertyParams:[{propertyName:"isCbmAdjusment",propertyValue:"true"},{propertyName:"isActive",propertyValue:"true"}]}],employee:this.employee};try{await d.post(`${D}?${new URLSearchParams(t).toString()}`,u)}catch(y){m("fe_event_error_update_defect_header_data",{errorMessage:y}),h(y),c("IRONS",y),console.log(y)}}}const s={keyValue:e.replacement.key,propertyParams:[{propertyName:"measurement",propertyValue:e.replacement.measurement},{propertyName:"rating",propertyValue:e.replacement.rating},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]};e.replacement.createdDate==""&&(s.propertyParams=[...s.propertyParams,{propertyName:"createdBy",propertyValue:JSON.stringify(this.employee)},{propertyName:"createdDate",propertyValue:"<<ServerDateTime>>"}]);const o={headerId:(p=this.selectedGroup)==null?void 0:p.headerId,workorder:this.stateWorkOrder,id:this.selectedGroup.id,updateParams:[s],employee:this.employee};try{const n=await d.post(`${P}?${new URLSearchParams(t).toString()}`,o);n.data.result.message==f.SUBMITTED&&(this.stateFormAlreadySubmitted=!0),n.data.result.message==f.CLOSE&&(this.stateFormAlreadyClose=!0),this.getTaskProgress(),this.updateGroupByParam(this.stateSelectedGroup.groupName)}catch(n){m("fe_event_error_post_service_sheet_data",{errorMessage:n}),h(n),c("IRONS",n),console.log(n)}return r},async deleteReplacementTask(e){var i;const t={ver:"v1"},r={taskId:e.key,workorder:this.stateWorkOrder},s=(await d.post(`${V}?${new URLSearchParams(t).toString()}`,r)).data.result.content;let o="";e.items.forEach(l=>{l.itemType=="smallCamera"&&l.key,l.categoryItemType=="paramRating"&&(o=l.value)});const p={id:s.id,updateParams:[{keyValue:s.key,propertyParams:[{propertyName:"taskValue",propertyValue:e.taskValue},{propertyName:"cbmMeasurement",propertyValue:o},{propertyName:"isCbmAdjusment",propertyValue:"false"},{propertyName:"isActive",propertyValue:"true"}]}],employee:this.employee};try{await d.post(`${D}?${new URLSearchParams(t).toString()}`,p)}catch(l){m("fe_event_error_delete_adjusment_task",{errorMessage:l}),h(l),c("IRONS",l),console.log(l)}const n={headerId:(i=this.selectedGroup)==null?void 0:i.headerId,workorder:this.stateWorkOrder,id:this.selectedGroup.id,updateParams:[{keyValue:e.replacement.key,propertyParams:[{propertyName:"measurement",propertyValue:""},{propertyName:"rating",propertyValue:""},{propertyName:"updatedBy",propertyValue:""},{propertyName:"updatedDate",propertyValue:""},{propertyName:"createdBy",propertyValue:""},{propertyName:"createdDate",propertyValue:""},{propertyName:"commentValue",propertyValue:""}]}],employee:this.employee};try{const l=await d.post(`${P}?${new URLSearchParams(t).toString()}`,n);l.data.result.message==f.SUBMITTED&&(this.stateFormAlreadySubmitted=!0),l.data.result.message==f.CLOSE&&(this.stateFormAlreadyClose=!0),this.getTaskProgress(),this.updateGroupByParam(this.stateSelectedGroup.groupName)}catch(l){m("fe_event_error_post_service_sheet_task",{errorMessage:l}),h(l),c("IRONS",l),console.log(l)}},getTaskReplacement(e){var r;const t=[];return(r=this.stateSelectedGroup)==null||r.subGroup[0].taskGroup.forEach(a=>{const s=a.task.filter(o=>o.groupTaskId===e);t.push(...s)}),t},getCameraItem(e){return this.getTaskReplacement(e).find(r=>r.rating==="CAB_SIDE")},async getTask(e,t,r){try{const a={id:e,keyValue:t,propertyName:r};return(await d.post(`${ce}`,a)).data.result.content}catch(a){return c("IRONS",a),a}},async getPreviousBrakePackValue(){let e=!0;e=this.checkPreviousBrakePackValueAlreadyFilled(this.stateSelectedSubGroups[0]);let t=[];if(e)return;t=await this.getPreviousBrakePackData();const r=o=>{let p="";switch(o.categoryItemType){case I.PREVIOUS_VALUE_PISTON_A:p=o.previousData.lastValuePistonA??"";break;case I.PREVIOUS_VALUE_PISTON_B:p=o.previousData.lastValuePistonB??"";break;case I.PREVIOUS_VALUE_PISTON_RESULT:p=o.previousData.lastValuePistonResult??"";break;case I.PREVIOUS_VALUE_PISTON_PERCENTAGE:p=o.previousData.lastValuePistonPercentage??"";break;case I.PREVIOUS_VALUE_UOM:p=o.previousData.lastUom??"";break;case I.PREVIOUS_VALUE_PISTON_RATING:p=o.previousData.lastRating??"";break}return p};let a="",s="";for(const o of this.stateSelectedSubGroups[0].taskGroup)for(const p of o.task){s||(s=p.key);const n=p,i=n.category==J.CBM,l=n.rating==W.OIL_COOLED;if(i&&l){for(const u of t)if(u.key==n.key)for(const y of n.items){a||(a=y.key);const S=y.categoryItemType==I.PREVIOUS_VALUE_PISTON_A,k=y.categoryItemType==I.PREVIOUS_VALUE_PISTON_B,T=y.categoryItemType==I.PREVIOUS_VALUE_PISTON_RESULT,O=y.categoryItemType==I.PREVIOUS_VALUE_UOM,E=y.categoryItemType==I.PREVIOUS_VALUE_PISTON_RATING,ee=y.categoryItemType==I.PREVIOUS_VALUE_PISTON_PERCENTAGE,te=y.value==""||y.value=="-";if((S||k||T||O||E||ee)&&te){const $=r({categoryItemType:y.categoryItemType,previousData:u});$&&(y.value=$)}}}}},async getPreviousBrakePackData(){try{const e={ver:"v1"},t=await d.post(`${M}?${new URLSearchParams(e).toString()}`,{equipmentNumber:this.generalForm.equipment,modelId:this.generalForm.modelId});return t.data.result.content?t.data.result.content:[]}catch(e){return m("fe_event_error_get_service_form_previous_tandem_data",{errorMessage:e}),c("IRONS",e),console.log("error get tandem",e),[]}},checkPreviousBrakePackValueAlreadyFilled(e){let t=!0;for(const r of e.taskGroup)for(const a of r.task){const s=a,o=s.category==J.CBM,p=s.rating==W.OIL_COOLED;if(o&&p)for(const n of s.items){const i=n.categoryItemType==I.PREVIOUS_VALUE_PISTON_A,l=n.categoryItemType==I.PREVIOUS_VALUE_PISTON_B,u=n.categoryItemType==I.PREVIOUS_VALUE_PISTON_RESULT,y=n.categoryItemType==I.PREVIOUS_VALUE_UOM,S=n.categoryItemType==I.PREVIOUS_VALUE_PISTON_RATING,k=n.categoryItemType==I.PREVIOUS_VALUE_PISTON_PERCENTAGE;if((i||l||u||y||S||k)&&(n.value==""||n.value=="-")){t=!1;break}}}return t}}}),z=B({id:"defectsForm",state:()=>({stateIsYes:void 0,stateLoading:!1,stateCancelled:!1,stateDefectYesVisible:!1,stateDefectNoVisible:!1,stateViewYesVisible:!1,stateViewtNoVisible:!1,stateIsValid:!0,stateItemKey:"",stateTask:{},stateDefectInfo:{},statePayload:{updateParams:[]},stateItem:{},stateMultipleDefectList:[],stateUpdateTaskDefect:"",stateOpenDialogConfirmSubmitDefect:!1,stateDefectUpdate:void 0,stateOwnership:"",stateSerialNumber:"",stateIsNeed30Minutes:!1,stateApprovalDefectList:[],stateSelectedApprovalDefect:{},statePartReference:{}}),getters:{Loading:e=>e.stateLoading,Cancelled:e=>e.stateCancelled,DefectYesVisible:e=>e.stateDefectYesVisible,DefectNoVisible:e=>e.stateDefectNoVisible,ViewYesVisible:e=>e.stateViewYesVisible,ViewNoVisible:e=>e.stateViewtNoVisible,ItemKey:e=>e.stateItemKey,isValid:e=>e.stateIsValid,isYes:e=>e.stateIsYes,defectInfo:e=>e.stateDefectInfo,selectedGroup:()=>_().selectedGroup,selectedFitter:()=>_().employee,supervisor:()=>{const e=v();return{id:e.user.EmployeeId,name:e.user.Name}},images:()=>G().ImageObjects.find(t=>t.Id==="defect"),globalConnectionStore:()=>Q(),UpdateTaskDefect:e=>e.stateUpdateTaskDefect,OpenDialogConfirmSubmitDefect:e=>e.stateOpenDialogConfirmSubmitDefect,DefectUpdate:e=>e.stateDefectUpdate,Ownership:e=>e.stateOwnership,SerialNumber:e=>e.stateSerialNumber,ApprovalDefect:e=>e.stateSelectedApprovalDefect},actions:{toggleIsNeed30Minutes(e){this.stateIsNeed30Minutes=e},setItem(e){this.stateItem=e},setItemKey(e){this.stateItemKey=e},setCancelledState(e){this.stateCancelled=e},cretateInstance(e=!0){this.stateDefectInfo=e?new L:new U,this.stateIsYes=e},setTask(e){this.stateTask=e},toggleYesVisible(e){this.stateDefectYesVisible=e,this.stateDefectNoVisible=!1,this.stateCancelled=!1},toggleNoVisible(e){this.stateDefectNoVisible=e,this.stateDefectYesVisible=!1,this.stateCancelled=!1},toggleViewNoVisible(e){this.stateViewtNoVisible=e,this.stateViewYesVisible=!1},toggleViewYesVisible(e){this.stateViewYesVisible=e,this.stateViewtNoVisible=!1},createYesPayload(e){var p;const t=this.stateDefectInfo,r=((p=this.images)==null?void 0:p.ImageInfos)??[],a=t.Resources.filter(n=>n.value!==""),s=t.Parts.map(n=>{const i=n.qty?String(parseFloat(n.qty)):n.qty;return{...n,qty:i}}),o=t.Labours.map(n=>{const i=n.qty?String(parseFloat(n.qty)):n.qty,l=n.hireEach?String(parseFloat(n.hireEach)):n.hireEach;return{...n,qty:i,hireEach:l}});this.statePayload.defectDetail={isNeed30Minutes:t.IsNeed30Minutes,type:"YES",title:e,assetNumber:t.AssetNumber,description:t.Description.value,raisedBy:this.selectedFitter.name,date:"<<ServerDateTime>>",plannedDuration:t.PlannedDuration.value,instruction:t.Instruction.value,priority:t.Priority,parts:JSON.stringify(s),labours:JSON.stringify(o),resources:JSON.stringify(a.map(n=>n.value)),symptoms:JSON.stringify(t.Symptoms.map(n=>n.value)),causes:JSON.stringify(t.Causes.map(n=>n.value)),images:JSON.stringify(r)}},createNoPayload(e){var a;const t=this.stateDefectInfo,r=((a=this.images)==null?void 0:a.ImageInfos)??[];this.statePayload.defectDetail={type:"NO",title:e,assetNumber:t.AssetNumber,description:t.Description.value,raisedBy:this.selectedFitter.name,date:"<<ServerDateTime>>",actions:JSON.stringify(t.Actions.map(s=>s.value)),images:JSON.stringify(r)}},createPayload(e=!1){const t=_();this.statePayload.id=this.selectedGroup.id,this.statePayload.headerId=this.selectedGroup.headerId,this.statePayload.workorder=this.selectedGroup.workOrder,this.statePayload.updateParams=[];const r={keyValue:this.stateTask.key,propertyParams:[{propertyName:"taskValue",propertyValue:"2"},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.selectedFitter)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]};e&&r.propertyParams.push({propertyName:"reason",propertyValue:t.reasonNA}),this.statePayload.updateParams.push(r),this.statePayload.employee=this.selectedFitter,this.statePayload.defectHeader={workorder:t.generalForm.workOrder,form:this.selectedGroup.modelId,serviceSheetDetailId:this.selectedGroup.id,category:this.stateTask.category,taskId:this.stateTask.key,taskNo:this.stateTask.description!=""?this.stateTask.description.split(";")[0]:this.stateTask.items[0].value,taskDesc:this.stateTask.description!=""?this.stateTask.description:this.stateTask.items[1].value,defectWorkorder:"",formDefect:"BA-PL-F55",defectType:this.stateIsYes?"YES":"NO",cbmMeasurement:"",cbmUom:"",cbmImageKey:"",cbmImageProp:"",isCbmAdjusment:"",taskValue:"2",repairedStatus:"Not-Repaired",cbmNAStatus:"Not-Confirm",supervisor:this.supervisor,status:"Submited",defectStatus:"Submited"};const a=Ne(this.stateTask);this.stateIsYes?this.createYesPayload(a):this.createNoPayload(a)},createPayloadGeneric(e){this.statePayload.employee=this.selectedFitter,this.statePayload.defectHeader={workorder:e.workorder,form:e.form,serviceSheetDetailId:"",category:"NORMAL",taskId:"",taskNo:"",taskDesc:e.taskDesc,defectWorkorder:"",formDefect:"BA-PL-F55",defectType:"Generic",cbmMeasurement:"",cbmUom:"",cbmImageKey:"",cbmImageProp:"",isCbmAdjusment:"",taskValue:"",repairedStatus:"Not-Repaired",cbmNAStatus:"Not-Confirm",supervisor:this.supervisor,status:"Submited",defectStatus:"Submited"},this.stateIsYes?this.createYesPayload(e.taskDesc):this.createNoPayload(e.taskDesc)},async setOpenDialogConfirmSubmitDefect(e){this.stateOpenDialogConfirmSubmitDefect=e},async setUpdateTaskDefect(e){this.stateUpdateTaskDefect=e},async createDefect(e=!1){this.stateLoading=!0;const t={ver:"v1"};try{const r=_();this.createPayload(e),r.reasonNA!=""&&r.setReasonNA("");const a=await d.post(`${ye}?${new URLSearchParams(t).toString()}`,this.statePayload);switch(this.setUpdateTaskDefect(this.statePayload.updateParams[0].keyValue),this.stateLoading=!1,a.data.result.message){case f.TASK_UPDATED_BY_OTHER:return r.toggleTaskAlreadyUpdatedStatus(!0),!1;case f.SUBMITTED:return r.toggleFormAlreadySubmitted(!0),!1;case f.CLOSE:return r.toggleFormAlreadyClose(!0),!1;default:if(a.data.statusCode==400)return r.toogleTaskErrorDialog(!0),r.stateErrorMessageTaskErrorDialog=a.data.result.message,!1;break}return!0}catch(r){m("fe_event_error_post_multiple_defect",{errorMessage:r});const a=this.globalConnectionStore.checkIsErrorNoNetwork(r);return this.globalConnectionStore.setSubmitConnectionError(a),h(r),console.log(r),this.stateLoading=!1,c("IRONS",r),!1}},async createDefectGeneric(e){this.stateLoading=!0;const t={ver:"v1"};try{this.createPayloadGeneric(e),await d.post(`${he}?${new URLSearchParams(t).toString()}`,this.statePayload),this.stateLoading=!1}catch(r){m("fe_event_error_post_generic_defect",{errorMessage:r});const a=this.globalConnectionStore.checkIsErrorNoNetwork(r);this.globalConnectionStore.setSubmitConnectionError(a),h(r),console.log(r),this.stateLoading=!1,c("IRONS",r)}},async createSMUDefect(e,t="",r){const a=b(),s={id:a.generalForm.id,updateParams:[{keyValue:"GENERAL",propertyParams:[{propertyName:"smu",propertyValue:e},{propertyName:"updatedBy",propertyValue:JSON.stringify(this.selectedFitter)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}],headerId:a.generalForm.id,workorder:a.generalForm.workOrder,employee:this.selectedFitter,defectHeader:{workorder:a.generalForm.workOrder,form:a.generalForm.form,category:"GENERAL",taskId:"",formDefect:"",defectType:"",taskDesc:"Machine SMU - Not in range",supervisor:this.supervisor,status:"Submited",defectStatus:"Submited"},defectDetail:{title:"Machine SMU - Not in range",machineSMU:e,machineSMURange:r,smuDue:a.generalForm.psTypeId,assetNumber:a.generalForm.equipment,serialNumber:a.generalForm.serialNumber,images:JSON.stringify(a.generalForm.imageEquipment??[])}};t!=""&&(s.updateParams[0].propertyParams.push({propertyName:"hmOffset",propertyValue:t}),s.defectDetail.hmOffset=t);const o={ver:"v1"};try{await d.post(`${fe}?${new URLSearchParams(o).toString()}`,s)}catch(p){m("fe_event_error_post_defect_smu_data",{errorMessage:p}),c("IRONS",p),console.log("update defect smu/hmoffset value",p)}},async getDefectDetail(e,t){this.stateLoading=!0;const r={ver:"v1"},a={servicesheetDetailId:e,taskId:t};try{const o=(await d.post(`${ge}?${new URLSearchParams(r).toString()}`,a)).data.result.content.detail,p=G(),n=Z();if(p.setCurrent("defect"),p.clearCurrent(),o.type==="YES"){this.stateIsYes=!0,this.stateDefectInfo=new L,this.stateDefectInfo.setAssetNumber(o.assetNumber),this.stateDefectInfo.setDescription(o.description),this.stateDefectInfo.setPriority(o.priority),this.stateDefectInfo.setRaisedBy(o.raisedBy),this.stateDefectInfo.setDate(o.date),this.stateDefectInfo.setPlannedDuration(o.plannedDuration),this.stateDefectInfo.setInstruction(o.instruction),this.stateDefectInfo.setTitle(o.title),this.stateDefectInfo.importParts(...JSON.parse(o.parts)),this.stateDefectInfo.importLabours(...JSON.parse(o.labours)),this.stateDefectInfo.importResources(...JSON.parse(o.resources)),this.stateDefectInfo.importSymptoms(...JSON.parse(o.symptoms)),this.stateDefectInfo.importCauses(...JSON.parse(o.causes)),this.images.ImageInfos.push(...JSON.parse(o.images));const i=[];this.images.ImageInfos.forEach(l=>{let u="";typeof l=="string"?u=l:u=l.filename,i.push(n.downloadAttachment(u))}),Promise.all(i).then(l=>{l.forEach(u=>{const y=new Blob([u],{type:"image/png"});this.images.ImageBlobs.push(y)}),this.toggleViewYesVisible(!0)})}else{this.stateIsYes=!1,this.stateDefectInfo=new U,this.stateDefectInfo.setAssetNumber(o.assetNumber),this.stateDefectInfo.setDescription(o.description),this.stateDefectInfo.setRaisedBy(o.raisedBy),this.stateDefectInfo.setDate(o.date),this.stateDefectInfo.setTitle(o.title),this.stateDefectInfo.importActions(...JSON.parse(o.actions)),this.images.ImageInfos.push(...JSON.parse(o.images));const i=[];this.images.ImageInfos.forEach(l=>{let u="";typeof l=="string"?u=l:u=l.filename,i.push(n.downloadAttachment(u))}),Promise.all(i).then(l=>{l.forEach(u=>{const y=new Blob([u],{type:"image/png"});this.images.ImageBlobs.push(y)}),this.toggleViewNoVisible(!0)})}this.stateLoading=!1}catch(s){m("fe_event_error_get_defect_detail",{errorMessage:s}),h(s),console.log(s),this.stateLoading=!1,c("IRONS",s)}},async setDefectDetail(e){try{const t=e,r=G(),a=Z();if(r.setCurrent("defect"),r.clearCurrent(),t.type==="YES"){this.stateIsYes=!0,this.stateDefectInfo=new L,this.stateDefectInfo.setAssetNumber(t.assetNumber),this.stateDefectInfo.setDescription(t.description),this.stateDefectInfo.setPriority(t.priority),this.stateDefectInfo.setRaisedBy(t.raisedBy),this.stateDefectInfo.setDate(t.date),this.stateDefectInfo.setPlannedDuration(t.plannedDuration),this.stateDefectInfo.setInstruction(t.instruction),this.stateDefectInfo.setTitle(t.title),this.stateDefectInfo.importParts(...JSON.parse(t.parts)),this.stateDefectInfo.importLabours(...JSON.parse(t.labours)),this.stateDefectInfo.importResources(...JSON.parse(t.resources)),this.stateDefectInfo.importSymptoms(...JSON.parse(t.symptoms)),this.stateDefectInfo.importCauses(...JSON.parse(t.causes)),this.images.ImageInfos.push(...JSON.parse(t.images));const s=[];this.images.ImageInfos.forEach(o=>{let p="";typeof o=="string"?p=o:p=o.filename,s.push(a.downloadAttachment(p))}),Promise.all(s).then(o=>{o.forEach(p=>{const n=new Blob([p],{type:"image/png"});this.images.ImageBlobs.push(n)}),this.toggleViewYesVisible(!0)})}else{this.stateIsYes=!1,this.stateDefectInfo=new U,this.stateDefectInfo.setAssetNumber(t.assetNumber),this.stateDefectInfo.setDescription(t.description),this.stateDefectInfo.setRaisedBy(t.raisedBy),this.stateDefectInfo.setDate(t.date),this.stateDefectInfo.setTitle(t.title),this.stateDefectInfo.importActions(...JSON.parse(t.actions)),this.images.ImageInfos.push(...JSON.parse(t.images));const s=[];this.images.ImageInfos.forEach(o=>{let p="";typeof o=="string"?p=o:p=o.filename,s.push(a.downloadAttachment(p))}),Promise.all(s).then(o=>{o.forEach(p=>{const n=new Blob([p],{type:"image/png"});this.images.ImageBlobs.push(n)}),this.toggleViewNoVisible(!0)})}}catch(t){h(t),console.log(t)}},async getMultipleDefectList(e,t,r){this.stateLoading=!0;const a={ver:"v1"},s={workorder:e,taskId:t,serviceSheetDetailId:r};try{const o=await d.post(`${Se}?${new URLSearchParams(a).toString()}`,s);return this.stateLoading=!1,o.data.result.content||[]}catch(o){m("fe_event_error_get_multiple_defect_list",{errorMessage:o}),h(o),console.log(o),this.stateLoading=!1,c("IRONS",o)}},async getOwnershipDefectForm(e){this.stateLoading=!0;const t={ver:"v1",EquipmentNumber:e,Page:"1",PageSize:"1"};try{const r=await d.get(Ie,"",new URLSearchParams(t).toString());r.data.result.content.length==0?this.stateOwnership="":r.data.result.content.length>0&&(this.stateOwnership=r.data.result.content[0].ownership||"",this.stateSerialNumber=r.data.result.content[0].serialNumber||"")}catch(r){m("fe_event_error_get_ownership_defect",{errorMessage:r}),h(r),console.log(r),this.stateLoading=!1,c("IRONS",r)}},resetTaskUpdated(){this.stateDefectUpdate=void 0},SetTaskUpdated(){this.stateDefectUpdate=!0},async getApprovalDefect(e){const{id:t,taskId:r}=e;let a=null;if(this.stateApprovalDefectList.length!=0&&(a=_e(this.stateApprovalDefectList,o=>t?o.defectHeaderId==t:r?o.taskKey==r:!1),a&&(a.object.status=="Acknowledge"||a.object.status=="Decline"||a.object.cbmNAStatus=="Confirmed"||a.object.cbmNAStatus=="Decline")))return a.object;const s=await this.getDefectsDataHeaderPerDefect(e);if(s){const o={defectHeaderId:s.id,taskKey:s.taskId,approvedBy:s.approvedBy,approvedDate:s.approvedDate,status:s.status,cbmNAStatus:s.cbmNAStatus,declineReason:s.declineReason,declineBy:s.declineBy,declineDate:s.declineDate};return a?a.index>=0&&(this.stateApprovalDefectList[a.index]=o):this.stateApprovalDefectList.push(o),o}return null},async getDefectsDataHeaderPerDefect(e){const t=e;try{const r=await d.post(`${ke}`,t);return r.data.result.content&&r.data.result.content[0]?r.data.result.content[0]:null}catch(r){m("fe_event_error_get_defect_header",{errorMessage:r}),c("IRONS",r)}},async setApprovalData(e){this.stateSelectedApprovalDefect=e},resetList(){this.stateApprovalDefectList=[],this.stateSelectedApprovalDefect={}},resetInstance(){this.stateLoading=!1,this.stateIsYes=void 0,this.stateDefectYesVisible=!1,this.stateDefectNoVisible=!1,this.stateViewYesVisible=!1,this.stateViewtNoVisible=!1,this.stateIsValid=!0,this.stateItemKey="",this.stateTask={},this.setUpdateTaskDefect(""),this.stateDefectInfo={},this.statePayload={updateParams:[]}},async getPartReference(e){const t={ver:"v1",unitNumber:e};try{const r=await d.get(Te,"",new URLSearchParams(t).toString());console.log("res.data.result.content",r.data.result.content),this.statePartReference=r.data.result.content}catch(r){h(r),console.log(r),this.stateLoading=!1,c("IRONS",r)}}}});export{Qe as G,F as U,b as a,z as b,Xe as c,_ as u};
