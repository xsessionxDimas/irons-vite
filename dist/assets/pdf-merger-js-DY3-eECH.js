import{g as l,c as h}from"./@popperjs-BaMZbQYT.js";import{r as w}from"./pdf-lib-DrnT2QV2.js";const{PDFDocument:c}=w,n=typeof globalThis=="object"?globalThis:typeof window=="object"?window:typeof self=="object"?self:h;class u{constructor(){this.reset(),this.loadOptions={ignoreEncryption:!0}}reset(){this.doc=void 0}async add(e,t){if(await this._ensureDoc(),typeof t>"u"||t===null)await this._addEntireDocument(e);else if(Array.isArray(t))await this._addGivenPages(e,t);else if(t.indexOf(",")>0){const r=t.replace(/ /g,"").split(",");await this._addGivenPages(e,r)}else if(t.toLowerCase().indexOf("to")>=0){const r=t.replace(/ /g,"").split("to"),o=parseInt(r[0]),a=parseInt(r[1]);await this._addFromToPage(e,o,a)}else if(t.indexOf("-")>=0){const r=t.replace(/ /g,"").split("-"),o=parseInt(r[0]),a=parseInt(r[1]);await this._addFromToPage(e,o,a)}else throw new Error('invalid parameter "pages"')}async _ensureDoc(){this.doc||(this.doc=await c.create())}async _getInputAsUint8Array(e){if(e instanceof Uint8Array)return e;if(e instanceof ArrayBuffer||Object.prototype.toString.call(e)==="[object ArrayBuffer]")return new Uint8Array(e);if(typeof e=="string"||e instanceof String){try{new URL(e)}catch{throw new Error(`This is not a valid url: ${e}`)}const r=await(await n.fetch(e)).arrayBuffer();return new Uint8Array(r)}if(e instanceof n.File){const t=new n.FileReader;t.onload=function(r){return t.result},t.readAsArrayBuffer(e)}if(e instanceof n.Blob){const t=await e.arrayBuffer();return new Uint8Array(t)}throw console.log({input:e,inputc:Object.prototype.toString.call(e),ArrayBuffer,eq:e.contructor!==ArrayBuffer}),new Error("pdf must be represented as an ArrayBuffer, Blob, File, URL or fetchable string")}async _addEntireDocument(e){const t=await this._getInputAsUint8Array(e),r=await c.load(t,this.loadOptions);(await this.doc.copyPages(r,r.getPageIndices())).forEach(a=>{this.doc.addPage(a)})}async _addFromToPage(e,t,r){if(typeof t!="number"||typeof r!="number"||t<0||t<0)throw new Error("Invalid function parameter. 'from' and 'to' must be positive 'numbers'.");if(r<t)throw new Error("Invalid function parameter. 'to' must be greater or eaqual to 'from'.");const o=await this._getInputAsUint8Array(e),a=await c.load(o,this.loadOptions),i=a.getPageCount();if(t>=i||r>=i)throw new Error(`Invalid function parameter. The document has not enough pages. (from:${t}, to:${r}, pages:${i})`);const s=Array.from({length:r-t+1},(d,f)=>f+t-1);(await this.doc.copyPages(a,s)).forEach(d=>{this.doc.addPage(d)})}async _addGivenPages(e,t){if(t.length<=0)return;const r=await this._getInputAsUint8Array(e),o=await c.load(r,this.loadOptions),a=t.map(s=>s-1);(await this.doc.copyPages(o,a)).forEach(s=>{this.doc.addPage(s)})}async setMetadata(e){await this._ensureDoc(),e.producer&&this.doc.setProducer(e.producer),e.author&&this.doc.setAuthor(e.author),e.title&&this.doc.setTitle(e.title),e.creator&&this.doc.setCreator(e.creator)}async saveAsBuffer(){return await this._ensureDoc(),await this.doc.save()}async saveAsBlob(){const e=await this.saveAsBuffer();return new n.Blob([e],{type:"application/pdf"})}async save(e){const t=await this.doc.saveAsBase64({dataUri:!0}),r=document.createElement("a");r.href=t,r.download=`${e}.pdf`,r.click()}}var g=u;const b=l(g);export{b as P};
