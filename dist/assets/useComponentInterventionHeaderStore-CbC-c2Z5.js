import{f as d,c as l,s as h,a as Q,B as ae,t as b,C as re,E as D,F as C,e as R,i as w}from"./index-BuVmIl8K.js";import{e as p}from"./lodash-DrHMlsdo.js";import{d as I}from"./pinia-BjOS2_Ao.js";import{A as f,l as se,g as ne,a as ie,m as oe,i as F}from"./date-format-8-IvfSl3.js";import{C as V,b as de}from"./urls-RITu66bD.js";import{u as B}from"./@vueuse-DFoNmIyu.js";import{D as L,C as ce,a as le}from"./urls-CvqtYZA-.js";import{i as k}from"./internet-connection-CnLQPjRt.js";import{C as pe}from"./urls-hWHEBXep.js";import{u as _}from"./useGlobalConnectionStore-DV9B81de.js";import{S}from"./number-format-BdMuQVyW.js";import{u as A}from"./authentication-handler-Pueb_EI7.js";import{s as ue}from"./string-to-imageinfo-converter-Cdr1iOkP.js";const Ge=e=>{if(e){const t=e.split(";");return(t.length==4&&t[3])=="1"}return!1},ye=e=>{let t=0,a=0;return e.forEach(r=>{r.tasks.forEach(s=>{const i=s.tasks.filter(o=>!p.isUndefined(o.taskValue));t=t+i.length,i.forEach(o=>{o.taskValue&&(a=a+1)})})}),t==0?100:p.floor(a/t*100)},O="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/intervention",N=`${O}/update?ver=v1`,U=`${O}/update_task?ver=v1`,M=`${O}/update_task_with_defect?ver=v1`,me=`${O}/get_field_value`,fe="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/history_intervention_sync/get_data_list_by_param_limit",X="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/attachment/upload",ge="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/intervention/sync_intervention",Se="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/master_setting/get_data_by_param?ver=v1",Ke="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/intervention_defect_header/get_data_by_param?ver=v1",Je="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/intervention_defect_detail/get_data_by_param?ver=v1",he="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/intervention_defect_header/get_data_list_by_param?ver=v1",ke="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/intervention_defect_detail/get_data_list_by_param?ver=v1",De="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/intervention/get_defect_identified_count",E="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/intervention_defect_detail/update?ver=v1",ve="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/intervention_defect_detail/update_by_fitter?ver=v1",Ie="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/intervention_defect_header/get_intervention_defect_header",we="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/intervention_defect_header/update?ver=v1",ee="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/service_sheet_header_offline",Te="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/service_sheet_detail",Ee="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/service_sheet_detail_offline",H=`${ee}/update?ver=v1`,W=`${ee}/update_task?ver=v1`,G=`${Ee}/update_task?ver=v1`,K=`${Te}/update_task_with_defect?ver=v1`,J="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/service_sheet_detail/update_task_with_defect_multiple?ver=v1",Pe="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/defect_header/update_with_service_detail_id?ver=v1",$="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/defect_detail/update_by_fitter?ver=v1",q="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/service_sheet_detail/create_generic_defect?ver=v1",x="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/calibration_detail/update_task?ver=v1",z="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/calibration_header/update?ver=v1",Ne="https://digital-bumaau-dev-apm-001.azure-api.net/dinspect/api/intervention/create_generic_defect?ver=v1",Y=I({id:"pendingTaskMonitorList",state:()=>({statePendingList:[],statePendingFileList:[],stateTaskList:[],stateTaskFileList:[],stateLoadingRetry:!1,statePendingListNew:[]}),getters:{dataTasks:e=>e.stateTaskList,fileTasks:e=>e.stateTaskFileList},actions:{async getPendingWOCount(){const e=await d.pendingTask.filter(a=>a.syncStatus!="Sync").toArray(),t=[];return e.forEach(a=>{t.includes(a.workorder)||t.push(a.workorder)}),t.length},async getPendingTaskList(){this.statePendingList=[];const e=(await d.pendingTask.toArray()).filter(s=>s.syncStatus!="Sync"),t=await d.serviceSheetDetail.toArray(),a=await d.interventionDetail.toArray(),r=[];e.forEach(s=>{r.includes(s.workorder)||r.push(s.workorder)}),r.forEach(s=>{let i=0;const o={};o.workOrder=s,e.forEach(n=>{if(n.workorder==s){if(!o.form)switch(n.module){case"serviceForm":o.form="Digital Service Form";break;case"Intervention":o.form="Component Intervention Form";break;default:o.form="";break}o.id=n.id,i++}}),o.pendingTask=i,this.statePendingList.push(o)}),this.statePendingList.forEach(async s=>{switch(s.form){case"Digital Service Form":t.forEach(i=>{i.general.workOrder==s.workOrder&&(s.equipment=i.general.equipment,s.psType=i.general.psTypeId)});break;case"Component Intervention Form":a.forEach(i=>{i.sapWorkOrder==s.workOrder&&(s.equipment=i.equipment,s.psType="")});break;default:s.equipment="",s.psType="";break}})},async getPendingFileTaskList(){this.statePendingFileList=[];const e=(await d.pendingTaskFile.toArray()).filter(s=>s.syncStatus!="Sync"),t=await d.serviceSheetDetail.toArray(),a=await d.interventionDetail.toArray(),r=[];e.forEach(s=>{r.includes(s.workorder)||r.push(s.workorder)}),r.forEach(s=>{let i=0;const o={};o.workOrder=s,e.forEach(n=>{if(n.workorder==s){if(!o.form)switch(n.module){case"serviceForm":o.form="Digital Service Form";break;case"Intervention":o.form="Component Intervention Form";break;default:o.form="";break}o.id=n.id,i++}}),o.pendingTask=i,this.statePendingFileList.push(o)}),this.statePendingFileList.forEach(async s=>{switch(s.form){case"Digital Service Form":t.forEach(i=>{i.general.workOrder==s.workOrder&&(s.equipment=i.general.equipment,s.psType=i.general.psTypeId)});break;case"Component Intervention Form":a.forEach(i=>{i.sapWorkOrder==s.workOrder&&(s.equipment=i.equipment,s.psType="")});break;default:s.equipment="",s.psType="";break}})},pendingList(){const e={};return this.statePendingList.forEach(t=>{const{workOrder:a,form:r,equipment:s,psType:i,pendingTask:o}=t,n=`${a}-${r}-${s}-${i}`;e[n]=Number(e[n]||0)+Number(o)}),this.statePendingFileList.forEach(t=>{const{workOrder:a,form:r,equipment:s,psType:i,pendingTask:o}=t,n=`${a}-${r}-${s}-${i}`;e[n]=Number(e[n]||0)+Number(o)}),Object.keys(e).map(t=>{const[a,r,s,i]=t.split("-");return{workOrder:a,form:r,equipment:s,psType:i,pendingTask:e[t]}})},getpendingList(){this.statePendingListNew=this.pendingList()},updatePendingList(e){let t=!1;this.statePendingListNew.forEach(a=>{if(a.workOrder==e&&a.pendingTask>0){a.pendingTask--,a.pendingTask==0&&(t=!0);return}}),t&&(this.statePendingListNew=this.statePendingListNew.filter(a=>a.workOrder!=e))},async getTaskList(){this.stateTaskList=(await d.pendingTask.toArray()).filter(e=>e.syncStatus!="Sync")},async getFileTaskList(){this.stateTaskFileList=(await d.pendingTaskFile.toArray()).filter(e=>e.syncStatus!="Sync")},async toggleLoadingRetry(e){this.stateLoadingRetry=e}}}),j=[S.TASK_UPDATED_BY_OTHER,S.CHANGE_NOT_APPLICABLE_WITHOUT_REASON,S.MODIFY_DEFECT_AFTER_SUPERVISOR_APPROVAL,S.SUBMITTED,S.CLOSE],v=I({id:"InterventionFormSyncStore",state:()=>({stateInSync:!1,stateSyncTasks:[],stateKeys:[],stateInSyncBindingKeys:[]}),getters:{WorkOrder:e=>e.stateInSync,globalConnectionStore:()=>_()},actions:{async syncImageToBlobStorage(e,t){const a={ver:"v1",userAccount:t};try{return{status:!0,statusCode:(await l.post(`${X}?${new URLSearchParams(a).toString()}`,e)).data.statusCode}}catch(r){return h("IRONS",r),{status:!1,statusCode:0,error:typeof r=="object"?r.message:r}}},async SyncInterventionGeneralData(e){const t=JSON.parse(e);try{const a=await l.post(N,t);if(a.data.result.isError)throw j.includes(a.data.result.message)?a.data.result.message:"error sync"}catch(a){const r=this.globalConnectionStore.checkIsErrorNoNetwork(a),s=a;throw h("IRONS",a),j.includes(s)||r?a:"error sync"}},async SyncServiceFormGeneralData(e){const t=JSON.parse(e),a=await l.post(H,t);if(a.data.result.isError)throw a.data.result.message},async SyncServiceFormSubmitGeneralData(e){const t=JSON.parse(e),a=await l.post(W,t);if(a.data.result.isError)throw a.data.result.message},async SyncInterventionTaskData(e){const t=JSON.parse(e),a=[S.TASK_UPDATED_BY_OTHER,S.CHANGE_NOT_APPLICABLE_WITHOUT_REASON,S.MODIFY_DEFECT_AFTER_SUPERVISOR_APPROVAL,S.SUBMITTED,S.CLOSE];try{const r=await l.post(U,t);if(r.data.result.isError)throw a.includes(r.data.result.message)?r.data.result.message:"error sync"}catch(r){h("IRONS",r);const s=r;throw a.includes(s)||this.globalConnectionStore.checkIsErrorNoNetwork(r)?r:"error sync"}},async SyncServiceFormTaskData(e){const t=JSON.parse(e),a=await l.post(G,t);if(a.data.result.isError)throw a.data.result.message},async SyncInterventionDefectData(e){const t=JSON.parse(e),a=[S.TASK_UPDATED_BY_OTHER,S.CHANGE_NOT_APPLICABLE_WITHOUT_REASON,S.MODIFY_DEFECT_AFTER_SUPERVISOR_APPROVAL,S.SUBMITTED,S.CLOSE];try{const r=await l.post(M,t);if(r.data.result.isError)throw a.includes(r.data.result.message)?r.data.result.message:"error sync"}catch(r){const s=this.globalConnectionStore.checkIsErrorNoNetwork(r),i=r;throw h("IRONS",r),a.includes(i)||s?r:"error sync"}},async SyncInterventionGenericDefectData(e){const t=JSON.parse(e);if((await l.post(Ne,t)).data.result.isError)throw"error sync"},async SyncInterventionDefectDataDefectIdentified(e){const t=JSON.parse(e);if((await l.post(ve,t)).data.result.isError)throw"error sync"},async SyncServiceFormDefectData(e){const t=JSON.parse(e),a=await l.post(K,t);if(a.data.result.isError)throw a.data.result.message},async SyncServiceFormMultipleDefectData(e){const t=JSON.parse(e),a=await l.post(J,t);if(a.data.result.isError)throw a.data.result.message},async SyncServiceFormFitterUpdateDefectData(e){const t=JSON.parse(e),a=await l.post($,t);if(a.data.result.isError)throw a.data.result.message},async SyncServiceFormUpdateGenericDefectData(e){const t=JSON.parse(e),a=await l.post(q,t);if(a.data.result.isError)throw a.data.result.message},async SyncServiceFormPostCalibrationHeaderData(e){const t=JSON.parse(e),a=await l.post(z,t);if(a.data.result.isError)throw a.data.result.message},async SyncServiceFormPostCalibrationDetailData(e){const t=JSON.parse(e),a=await l.post(x,t);if(a.data.result.isError)throw a.data.result.message},async SyncInterventionUpdateDefectData(e){const t=JSON.parse(e);if((await l.post(E,t)).data.result.isError)throw"error sync"},async SyncServiceFormUpdateDefectData(e){const t=JSON.parse(e),a=await l.post(Pe,t);if(a.data.result.isError)throw a.data.result.message},async SyncInterventionGeneralDataRetry(e){const t=JSON.parse(e),a=await l.post(N,t);if(a.data.result.isError)throw a.data.result.message},async SyncServiceFormGeneralDataRetry(e){const t=JSON.parse(e),a=await l.post(H,t);if(a.data.result.isError)throw a.data.result.message},async SyncServiceFormSubmitGeneralDataRetry(e){const t=JSON.parse(e),a=await l.post(W,t);if(a.data.result.isError)throw a.data.result.message},async SyncInterventionTaskDataRetry(e){const t=JSON.parse(e),a=await l.post(U,t);if(a.data.result.isError)throw a.data.result.message},async SyncServiceFormTaskDataRetry(e){const t=JSON.parse(e),a=await l.post(G,t);if(a.data.result.isError)throw a.data.result.message},async SyncInterventionDefectDataRetry(e){const t=JSON.parse(e),a=await l.post(M,t);if(a.data.result.isError)throw a.data.result.message},async SyncServiceFormDefectDataRetry(e){const t=JSON.parse(e),a=await l.post(K,t);if(a.data.result.isError)throw a.data.result.message},async SyncServiceFormUpdateGenericDefectDataRetry(e){const t=JSON.parse(e),a=await l.post(q,t);if(a.data.result.isError)throw a.data.result.message},async SyncServiceFormDefectMultipleDataRetry(e){const t=JSON.parse(e),a=await l.post(J,t);if(a.data.result.isError)throw a.data.result.message},async SyncServiceFormFitterUpdateDefectDataRetry(e){const t=JSON.parse(e),a=await l.post($,t);if(a.data.result.isError)throw a.data.result.message},async SyncInterventionUpdateDefectDataRetry(e){const t=JSON.parse(e),a=await l.post(E,t);if(a.data.result.isError)throw a.data.result.message},async SyncServiceFormUpdateDefectDataRetry(e){const t=JSON.parse(e),a=await l.post(E,t);if(a.data.result.isError)throw a.data.result.message},async SyncServiceFormPostCalibrationHeaderDataRetry(e){const t=JSON.parse(e),a=await l.post(z,t);if(a.data.result.isError)throw a.data.result.message},async SyncServiceFormPostCalibrationDetailDataRetry(e){const t=JSON.parse(e),a=await l.post(x,t);if(a.data.result.isError)throw a.data.result.message},async RemoveTemplate(e,t){const a=Q(),r=JSON.parse(e);await d.interventionDetail.delete(r.id),await d.interventionHeader.filter(i=>i.sapWorkOrder==t).delete();const s=P();a.user.SiteId&&await s.syncWorkOrders(a.user.SiteId)},async SyncDataInSequence(){if(this.stateInSyncBindingKeys.includes("GENERAL"))return;const e=await ae(d,"pendingTask",this.stateInSyncBindingKeys);if(!e||e.bindingKey.includes("SUBMIT")&&(await b(d,"pendingTask")).filter(o=>o.workorder==e.workorder&&o.bindingKey!=e.bindingKey&&o.syncStatus=="Pending").length>0)return;this.stateInSyncBindingKeys.push(e.bindingKey);const a=(await re(d,"pendingTask",[e.bindingKey])).filter(s=>s.workorder==e.workorder),r=await this.SyncProcess(a);return this.stateInSyncBindingKeys=this.stateInSyncBindingKeys.filter(s=>s!=e.bindingKey),r},async SyncProcess(e){let t=!1;const a=Y(),r=p.cloneDeep(e);for(const s of r)try{switch(s.module){case"serviceForm":switch(s.type){case"General":case"PreRisk":await this.SyncServiceFormGeneralData(s.payload);break;case"SubmitGeneral":await this.SyncServiceFormSubmitGeneralData(s.payload);break;case"Task":case"CBMImage":await this.SyncServiceFormTaskData(s.payload);break;case"MultipleDefect":await this.SyncServiceFormMultipleDefectData(s.payload);break;case"Defect":{const i=JSON.parse(s.payload);!p.isUndefined(i.defectDetail)&&!p.isUndefined(i.defectDetail.type)&&i.defectDetail.type=="machineSMU"&&delete i.defectDetail.type,await this.SyncServiceFormDefectData(JSON.stringify(i));break}case"FitterUpdateDefect":await this.SyncServiceFormFitterUpdateDefectData(s.payload);break;case"UpdateDefect":await this.SyncServiceFormUpdateDefectData(s.payload);break;case"CalibrationHeader":await this.SyncServiceFormPostCalibrationHeaderData(s.payload);break;case"CalibrationDetail":await this.SyncServiceFormPostCalibrationDetailData(s.payload);break;case"GenericDefect":await this.SyncServiceFormUpdateGenericDefectData(s.payload);break}break;case"Intervention":switch(s.type){case"General":case"PreRisk":await this.SyncInterventionGeneralData(s.payload);break;case"SubmitGeneral":await this.SyncInterventionGeneralData(s.payload),await this.RemoveTemplate(s.payload,s.workorder);break;case"Task":case"CBMImage":await this.SyncInterventionTaskData(s.payload);break;case"Defect":await this.SyncInterventionDefectData(s.payload);break;case"DefectGeneric":await this.SyncInterventionGenericDefectData(s.payload);break;case"UpdateDefect":await this.SyncInterventionDefectDataDefectIdentified(s.payload);break}break;default:break}s.syncStatus="Sync",s.syncDate=f(),await D(d,"pendingTask",s),e.splice(0,1),await a.getPendingTaskList()}catch(i){const o=["Failed to update data, service sheet status is","Data already updated","Task already updated by other mechanic","You cannot modify the defect once already approved or declined by Supervisor","Machine SMU has been","Not applicable task has been","Resource with specified id or name already exists"],n=typeof i=="object"?i.message:i;let c=!1;if(o.forEach(u=>{n.includes(u)&&(c=!0)}),c){s.syncStatus="Sync",s.syncDate=f(),await D(d,"pendingTask",s),e.splice(0,1),await a.getPendingTaskList();return}for(const[u,y]of e.entries())u==0&&(y.errorMessage=typeof i=="object"?i.message:i),y.syncStatus="Failed",y.syncDate=f(),await D(d,"pendingTask",y);t=!0;break}finally{s.syncStatus=="Sync"&&a.getTaskList().then(()=>{a.updatePendingList(s.workorder)})}return t},async SyncData(){k()||(this.stateKeys=await C(d,"pendingTask"),await this.SyncDataInSequence())},async RetrySyncData(){if(k())return;this.stateKeys=await C(d,"pendingTask"),this.stateKeys||(this.stateInSync=!1,R(d,"syncProgress")),(await b(d,"pendingTask")).filter(i=>i.syncStatus=="Failed").forEach(i=>{i.syncStatus="Pending",D(d,"pendingTask",i)}),(await b(d,"pendingTaskFile")).filter(i=>i.syncStatus=="Failed").forEach(i=>{i.syncStatus="Pending",D(d,"pendingTaskFile",i)});const s=await this.SyncDataInSequence();return s||R(d,"syncProgress"),s},async SyncImage(){if(k())return;const e=Y(),t=await d.pendingTaskFile.where("syncStatus").equals("Pending").primaryKeys();if(!t||t.length==0)return;const a=await d.pendingTaskFile.get(t[0]);if(a)a.syncStatus="On Progress",await D(d,"pendingTaskFile",a);else return;const r={module:a.module,key:a.key,workorder:a.workorder,type:a.type,fileType:a.fileType,createdBy:a.createdBy,email:a.email,filename:a.filename,originalFilename:a.originalFilename,blob:a.blob,syncDate:f(),errorMessage:"",syncStatus:""},s=new FormData;s.append("files",a.blob,`${a.filename}.png`),s.append("userAccount",a.email);let i={};try{i=await this.syncImageToBlobStorage(s,a.email),r.syncStatus="Sync",(!i.status||i.statusCode!=200)&&(r.syncStatus="Failed",r.errorMessage=i.error),await d.pendingTaskFile.update(Number(a.id),r)}catch(o){console.log(o),r.syncStatus="Failed",r.errorMessage=o.toString(),await d.pendingTaskFile.update(Number(a.id),r)}finally{await e.getPendingFileTaskList(),e.getFileTaskList().then(()=>{e.updatePendingList(a.workorder)})}},async GetRetryTasks(e){return await d.retryTask.where("workorder").equals(e).toArray()},async RetrySync(e,t){return{no:t+1,key:e.key,type:e.type,result:"OK"}},async RevokeSync(e){await d.retryTask.where("workorder").equals(e).delete()}}});class Z{constructor(){this.smuDefectHeaders=[],this.defectHeaders=[],this.defectGenericHeaders=[],this.crackHeaders=[],this.cbmHeaders=[],this.defectNAHeaders=[],this.crackNAHeaders=[]}setSMUDefectHeaders(t){this.smuDefectHeaders=p.filter(t,a=>a.defectType=="machineSMU")}setDefectHeaders(t){this.defectHeaders=p.filter(t,a=>a.category==="NORMAL"&&a.taskValue==="3"),this.defectHeaders=p.orderBy(this.defectHeaders,[a=>a.priority,a=>{var r;return Number((r=a.taskNo)==null?void 0:r.replaceAll(/[a-zA-Z]/g,""))},a=>a.taskDesc])}setDefectGenericHeaders(t){this.defectGenericHeaders=p.filter(t,a=>a.category==="NORMAL"&&a.defectType=="Generic"),this.defectGenericHeaders=p.orderBy(this.defectGenericHeaders,[a=>a.priority,a=>{var r;return Number((r=a.taskNo)==null?void 0:r.replaceAll(/[a-zA-Z]/g,""))},a=>a.taskDesc])}setCrackHeaders(t){const a=["2","3"];this.crackHeaders=p.filter(t,r=>r.category==="CRACK"&&a.includes(r.taskValue)),this.crackHeaders=p.orderBy(this.crackHeaders,[r=>r.priority,r=>{var s;return Number((s=r.taskNo)==null?void 0:s.replaceAll(/[a-zA-Z]/g,""))},r=>r.taskDesc])}setCBMHeaders(t){this.cbmHeaders=p.filter(t,a=>["CBM","CBM-NORMAL"].includes(a.category)&&isNaN(Number(a.taskValue))),this.cbmHeaders=p.orderBy(this.cbmHeaders,[a=>{let r=0;if(a.taskNo&&isNaN(Number(a.taskNo))){let s="",i=!0;for(let n=0;n<a.taskNo.length;n++)i&&isNaN(Number(a.taskNo.charAt(n)))&&(s=a.taskNo.charAt(n),i=!1);return Number(a.taskNo.split(s)[0])}else r=Number(a.taskNo);return r},a=>a.taskNo])}setDefectNAHeaders(t){this.defectNAHeaders=p.filter(t,a=>(a.category==="NORMAL"||a.category==="CBM")&&a.taskValue==="4"),this.defectNAHeaders=p.orderBy(this.defectNAHeaders,[a=>{var r;return Number((r=a.taskNo)==null?void 0:r.replaceAll(/[a-zA-Z_;]/g,""))},a=>a.taskDesc])}setCrackNAHeaders(t){this.crackNAHeaders=p.filter(t,a=>a.category==="CRACK"&&a.taskValue==="4"),this.crackNAHeaders=p.orderBy(this.crackNAHeaders,[a=>{var r;return Number((r=a.taskNo)==null?void 0:r.replaceAll(/[a-zA-Z_;]/g,""))},a=>a.taskDesc])}orderDetailTaskCBM(){this.cbmHeaders=this.cbmHeaders.sort((t,a)=>{const r=t.taskNo,s=a.taskNo;return r.localeCompare(s,"en",{numeric:!0})})}setHeaders(t){this.setSMUDefectHeaders(t),this.setDefectHeaders(t),this.setDefectGenericHeaders(t),this.setCrackHeaders(t),this.setCBMHeaders(t),this.orderDetailTaskCBM(),this.setDefectNAHeaders(t),this.setCrackNAHeaders(t)}get DefectSMUHeaders(){return this.smuDefectHeaders}get DefectHeaders(){return this.defectHeaders}get DefectGenericHeaders(){return this.defectGenericHeaders}get CrackHeaders(){return this.crackHeaders}get CBMHeaders(){return this.cbmHeaders}get DefectNAHeaders(){return this.defectNAHeaders}get CrackNAHeaders(){return this.crackNAHeaders}}const Oe=async e=>{const t=await d.interventionComment.where({workOrder:e});t&&t.delete()},T=I({id:"Component Intervention Defects Identified",state:()=>({stateLoading:!1,stateData:new Z,stateDefectHeader:[],stateDefectDetail:[],stateComments:[],stateApproveBy:void 0,stateApproveDate:void 0,stateDefectFormData:new L,stateSelectedDetailData:{}}),getters:{Loading:e=>e.stateLoading,defectIdentifiedData:e=>e.stateData,defectEditFormData:e=>e.stateDefectFormData,defectIdentifiedCommentData:e=>e.stateComments,ApproveBy:e=>e.stateApproveBy,ApproveDate:e=>e.stateApproveDate,DefectDetail:e=>e.stateDefectDetail},actions:{createRequestBody(e){return{interventionId:e}},async setDefectIdentifiedData(e){const t=await d.interventionDefect.filter(a=>a.sapWorkorder==e).toArray();this.stateData.setHeaders(t);for(const a of t){const r=this.stateDefectDetail.find(s=>a.defectDetailId==s.id);r&&a.otherFitterUpdatedBy&&(r.otherFitterUpdatedBy=a.otherFitterUpdatedBy)}},async getDefectsDataHeader(e){const t=this.createRequestBody(e),a=await l.post(`${he}`,t);this.stateDefectHeader=a.data.result.content},async getDefectsDataDetail(e){const t=this.createRequestBody(e),a=await l.post(`${ke}`,t);this.stateDefectDetail=a.data.result.content},async getDefectsDataAll(e){var r,s,i,o,n;const t={interventionId:e,ver:"v1"},a=await l.get(`${Ie}`,"",new URLSearchParams(t).toString());this.stateDefectHeader=((r=a.data.result.content)==null?void 0:r.defectHeader)||[],this.stateDefectDetail=((s=a.data.result.content)==null?void 0:s.defectDetail)||[],this.stateComments=((i=a.data.result.content)==null?void 0:i.comment)||[],this.stateApproveBy=(o=a.data.result.content)==null?void 0:o.approveBy,this.stateApproveDate=(n=a.data.result.content)==null?void 0:n.approveDate},async getDefectsData(e,t){if(!t)return;if(this.stateLoading=!0,(await d.pendingTask.where({workorder:t,module:"Intervention",syncStatus:"Pending"}).toArray()).length>0)this.setDefectIdentifiedData(t);else try{k()||(await d.interventionDefect.where({sapWorkorder:t}).delete(),await this.getDefectsDataAll(e),await this.upsertDefectToLocal(e),this.setDefectIdentifiedData(t))}catch(r){console.error(r),A(r)}this.stateLoading=!1},async upsertDefectToLocal(e){await d.interventionDefect.where({interventionId:e}).delete(),this.stateDefectHeader.forEach(async t=>{var r;const a=this.stateDefectDetail.find(s=>s.defectHeaderId==t.id);await d.interventionDefect.add({category:t.category,interventionId:e,taskId:t.taskId,taskNo:t.taskNo,taskDesc:t.taskDesc,taskValue:t.taskValue,priority:(r=a==null?void 0:a.detail)==null?void 0:r.priority,sapWorkorder:t.workorder,taskKey:t.taskId,type:a==null?"CBM":a.detail.type,defectHeaderId:t.id,defectType:t.defectType,defectDetailId:a==null?void 0:a.id,defectWorkorder:t.defectWorkorder??"",defectData:a==null?"":JSON.stringify({...a.detail,headerKey:t.key,createdBy:a.createdBy?{id:a.createdBy.id,name:a.createdBy.name}:{},createdDate:a.createdDate?a.createdDate:"",updatedBy:a.updatedBy?{id:a.updatedBy.id,name:a.updatedBy.name}:{},updatedDate:a.updatedDate}),commentValue:t.commentValue,status:t.status,repairedStatus:t.repairedStatus,cbmNAStatus:t.cbmNAStatus,cbmUom:t.cbmUom,cbmMeasurement:t.cbmMeasurement??void 0,plannerStatus:t.plannerStatus?t.plannerStatus:"",declineReason:t.declineReason?t.declineReason:"",declineBy:t.declineBy?{id:t.declineBy.id,name:t.declineBy.name}:{},declineDate:t.declineDate?t.declineDate:"",approvedBy:t.approvedBy?{id:t.approvedBy.id,name:t.approvedBy.name}:{},approvedDate:t.approvedDate?t.approvedDate:"",statusSync:"Sync",createdBy:t.createdBy?{id:t.createdBy.id,name:t.createdBy.name}:{},createdDate:t.createdDate,updatedBy:t.updatedBy?{id:t.updatedBy.id,name:t.updatedBy.name}:{},updatedDate:t.updatedDate,downloadHistory:t.downloadHistory?JSON.stringify(t.downloadHistory):"",correctedValue:t.correctedValue?t.correctedValue:"",correctedMeasurement:t.correctedMeasurement?t.correctedMeasurement:"",correctedUom:t.correctedUom?t.correctedUom:"",approveReason:t.approveReason?t.approveReason:"",plannerApproveReason:t.plannerApproveReason?t.plannerApproveReason:""})}),this.stateComments.forEach(async t=>{await d.interventionComment.add({taskKey:t.taskKey,taskDesc:t.taskDesc,taskComment:t.taskComment,workOrder:t.workOrder,createdBy:t.createdBy?{id:t.createdBy.id,name:t.createdBy.name}:{},createdDate:t.createdDate,updatedBy:t.updatedBy?{id:t.updatedBy.id,name:t.updatedBy.name}:{},updatedDate:t.updatedDate})})},createDefectYesUpdatePayload(e){const t={};t.id=this.stateSelectedDetailData.id;const a={};a.type="YES",a.isNeed30Minutes=this.stateDefectFormData.IsNeed30Minutes,a.assetNumber=this.stateDefectFormData.AssetNumber,a.description=this.stateDefectFormData.Description.value,a.raisedBy=this.stateDefectFormData.RaisedBy,a.plannedDuration=this.stateDefectFormData.PlannedDuration.value,a.instruction=this.stateDefectFormData.Instruction.value,a.priority=this.stateDefectFormData.Priority,a.parts=JSON.stringify(this.stateDefectFormData.Parts),a.labours=JSON.stringify(this.stateDefectFormData.Labours),a.resources=JSON.stringify(this.stateDefectFormData.Resources),a.symptoms=JSON.stringify(this.stateDefectFormData.Symptoms.map(s=>s.value)),a.causes=JSON.stringify(this.stateDefectFormData.Causes.map(s=>s.value)),t.updateParams=[],t.updateParams.push({keyValue:this.stateSelectedDetailData.key,propertyParams:[{propertyName:"detail",propertyValue:JSON.stringify(a)},{propertyName:"updateBy",propertyValue:JSON.stringify(e)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}),t.employee=e;const r=m();return t.localInterventionStatus=r.Intervention.interventionExecution,t},async updateDefectDetail(e){const t=this.createDefectYesUpdatePayload(e);try{k()||await l.post(`${E}`,t)}catch(a){A(a),h("IRONS",a),console.log(a)}},async updateDownloadHistory(e){let t;if(e.type=="defect"?t=this.stateData.DefectHeaders.find(r=>r.id===e.headerId):e.type=="defectGeneric"&&(t=this.stateData.DefectGenericHeaders.find(r=>r.id===e.headerId)),!t)return;const a={id:t.defectHeaderId,updateParams:[{keyValue:t.defectDetailId,propertyParams:[{propertyName:"downloadHistory",propertyValue:!0},{propertyName:"updatedBy",propertyValue:JSON.stringify(e.employee)},{propertyName:"updatedDate",propertyValue:"<<ServerDateTime>>"}]}],employee:e.employee};try{if(await l.post(`${we}`,a),t.downloadHistory){const r=JSON.parse(t.downloadHistory);r.push({downloadBy:e.employee}),t.downloadHistory=JSON.stringify(r)}else t.downloadHistory=JSON.stringify([{downloadBy:e.employee}])}catch(r){A(r),h("IRONS",r),console.log(r)}},getDefectDetailData(e){const t=this.stateData.DefectHeaders.find(a=>a.taskId==e);return t?(t.type=="YES",JSON.parse(t.defectData)):null},getDefectGenericData(e){return this.stateData.DefectGenericHeaders.find(a=>a.defectHeaderId==e)},getDefectHeaderDetailData(e){const t=this.stateData.DefectHeaders.find(a=>a.id==e);if(t){const a=JSON.parse(t.defectData),r={...t};return delete r.defectData,{header:r,detail:a}}return null},getDefectGenericHeaderDetailData(e){const t=this.stateData.DefectGenericHeaders.find(a=>a.id==e);if(t){const a=JSON.parse(t.defectData),r={...t};return delete r.defectData,{header:r,detail:a}}return null},getNADetailData(e){const t=this.stateData.DefectNAHeaders.find(a=>a.taskId==e);return t||null},getCBMDetailData(e){const t=this.stateData.CBMHeaders.find(a=>a.taskId==e);return t||null},reset(){this.stateLoading=!1,this.stateData=new Z,this.stateDefectHeader=[],this.stateDefectDetail=[],this.stateDefectFormData=new L,this.stateSelectedDetailData={},this.stateComments=[]},async getCommentFromServiceSheet(e){await Oe(e);const t=await d.interventionDetail.where({sapWorkOrder:e}).first();if(!t)return;console.log("serviceSheet",t);for(const r of t.details)for(const s of r.tasks)for(const i of s.tasks)if(i.taskValue)if(i!=null&&i.adjustment){const o=i.adjustment;if(o.commentValue){const n=await d.interventionDefect.where({sapWorkorder:e,taskKey:i.key}).first();if(n){const c=!n.commentValue,u=n.commentValue!=o.commentValue;(c||u)&&(n.commentValue=o.commentValue),await d.interventionDefect.update(Number(n.id),n)}else{const c=await d.interventionComment.where({workOrder:e,taskKey:i.key}).first();c?(c.taskComment=o.commentValue,await d.interventionComment.update(Number(i.key),c)):await d.interventionComment.add({taskKey:i.key,taskDesc:i.description,taskComment:o.commentValue,workOrder:e,createdBy:i.updatedBy,createdDate:(i==null?void 0:i.updatedDate)||"",updatedBy:i.updatedBy,updatedDate:(i==null?void 0:i.updatedDate)||""})}}else{const n=await d.interventionDefect.where({sapWorkorder:e,taskKey:i.key}).first();n&&(n!=null&&n.commentValue&&(n.commentValue=""),await d.interventionDefect.update(Number(n.id),n))}}else for(const o of i.items){const n=o.itemType=="input",c=o.value,u=(o==null?void 0:o.valueItemType)=="comment";if(n&&c&&u){const y=await d.interventionDefect.where({sapWorkorder:e,taskKey:i.key}).first();if(y){const g=y.commentValue=="undefined",te=y.commentValue!=o.value;(g||te)&&(y.commentValue=o.value,await d.interventionDefect.update(Number(y.id),y))}else{const g=await d.interventionComment.where({workOrder:e,taskKey:i.key}).first();g?(g==null?void 0:g.taskComment)!=o.value&&(g.taskComment=o.value,await d.interventionComment.update(Number(i.key),g)):await d.interventionComment.add({taskKey:i.key,taskDesc:i.description,taskComment:o.value,workOrder:e,createdBy:i.updatedBy,createdDate:(i==null?void 0:i.updatedDate)||"",updatedBy:i.updatedBy,updatedDate:(i==null?void 0:i.updatedDate)||""})}}}const a=await d.interventionComment.where({workOrder:e}).toArray();await this.setDefectIdentifiedData(e),this.stateComments=a}}}),m=I({id:"ComponentInterventionDetailStore",state:()=>({stateSelectedIntervention:{},stateGroups:[],stateSelectedGroup:{},stateSelectedTask:{},stateIdentifiedDefectCount:0,stateLoadingTask:{},stateItemTriggerDisabledValue:{},stateItemKeyWithTriggeredDisabledKey:{},stateIsError:!1,stateTaskErrorDialog:!1,stateErrorMessageTaskErrorDialog:"",stateSerialNumber:"",stateFormSubmittedDialog:!1,stateFormCloseDialog:!1}),getters:{Intervention:e=>e.stateSelectedIntervention,Groups:e=>e.stateGroups,Group:e=>e.stateSelectedGroup,Task:e=>e.stateSelectedTask,CountIdentifiedDefect:e=>e.stateIdentifiedDefectCount,TaskProgress:e=>{const t=[];return p.isEmpty(e.stateSelectedIntervention)||e.stateSelectedIntervention.details.forEach(a=>{let r=0,s=0;a.tasks.forEach(i=>{const o=i.tasks.filter(n=>!p.isUndefined(n.taskValue));s=s+o.length,o.forEach(n=>{n.taskValue&&(r=r+1)})}),t.push({key:a.key,taskDone:r,taskTotal:s})}),t},LoadingTask:e=>e.stateLoadingTask,ItemTriggerDisabledValue:e=>e.stateItemTriggerDisabledValue,IsFilledAllRequiredItem:e=>{var a,r,s,i;let t=!0;return p.isUndefined((a=e.stateSelectedIntervention)==null?void 0:a.details)||(i=(s=(r=e.stateSelectedIntervention)==null?void 0:r.details[0])==null?void 0:s.tasks)==null||i.every(o=>(o.tasks.every(n=>(n.items.every(c=>c.customValidation=="Required"&&c.value==""?(t=!1,!1):!0),t!=!1)),t!=!1)),t},IsError:e=>e.stateIsError,percentageTaskProgressAllTab:e=>ye(e.stateSelectedIntervention.details||[]),RiskAssessmentImages:e=>{let t=[];if(!e.stateSelectedIntervention||!e.stateSelectedIntervention.riskAssesment||!Array.isArray(e.stateSelectedIntervention.riskAssesment))return t;const a=e.stateSelectedIntervention.riskAssesment[0].value;return typeof a=="string"||(t=a),t},taskErrorDialog:e=>e.stateTaskErrorDialog,errorMessageTaskErrorDialog:e=>e.stateErrorMessageTaskErrorDialog,serialNumber:e=>e.stateSerialNumber,formSubmittedDialog:e=>e.stateFormSubmittedDialog,formCloseDialog:e=>e.stateFormCloseDialog,globalConnectionStore:()=>_()},actions:{updateLoading(e,t=!1){this.stateLoadingTask[e]=t},resetLoading(){this.stateLoadingTask={}},toogleTaskErrorDialog(e){this.stateTaskErrorDialog=e},toogleFormSubmittedDialog(e){this.stateFormSubmittedDialog=e},toogleFormCloseDialog(e){this.stateFormCloseDialog=e},setItemTriggerDisabledValue(e){e.details[0].tasks.forEach(t=>{t.tasks.forEach(a=>{a.items.forEach(r=>{r.disabledByItemKey&&(r.disabledByItemKey in this.stateItemTriggerDisabledValue||(this.stateItemTriggerDisabledValue[r.disabledByItemKey]="",this.stateItemKeyWithTriggeredDisabledKey[r.key]=r.disabledByItemKey))})})}),e.details[0].tasks.forEach(t=>{t.tasks.forEach(a=>{a.items.forEach(r=>{r.key in this.stateItemTriggerDisabledValue&&(this.stateItemTriggerDisabledValue[r.key]=r.value)})})})},checkHmOffset(e){switch(e.hmOffset){case void 0:this.stateSelectedIntervention.hmOffset="Not Applicable";break;case"":this.stateSelectedIntervention.hmOffset="0";break}},setGroup(e){this.stateSelectedIntervention=e,this.checkHmOffset(e);let t=2;this.stateGroups=[{sequence:1,group:"General",sections:[],key:e.id}],this.stateSelectedIntervention.details.forEach(a=>{this.stateGroups.push({sequence:t++,group:a.group,sections:a.tasks,key:a.key})}),this.stateGroups.push({sequence:t++,group:"Identified Defects",sections:[],key:"Identified Defects"})},setSelectedGroup(e){this.stateSelectedGroup=e},initGroup(e,t=0){this.setGroup(e),this.stateItemTriggerDisabledValue={},this.stateItemKeyWithTriggeredDisabledKey={},this.setItemTriggerDisabledValue(e),this.setSelectedGroup(this.stateGroups[t])},setSelectedTask(e){this.stateSelectedTask=e},resetIntervention(){this.stateSelectedIntervention={},this.stateFormCloseDialog=!1,this.stateFormSubmittedDialog=!1},getTaskById(e){let t;return this.Intervention.details[0].tasks.forEach(a=>{a.tasks.forEach(r=>{r.key==e&&(t=r)})}),t},createTaskUpdatePayload(e,t=!1){const a=m(),r={};r.employee=e.employee,r.localInterventionStatus=a.Intervention.interventionExecution,r.headerId=e.id,r.id=e.id,r.updateParams=[];const s={};if(s.keyValue=e.itemKey,s.propertyParams=[],e.taskCategory=="Adjustment"){let o="";switch(e.type){case"rating":o="rating";break;case"inputUom":o="measurement";break;case"commentValue":o="commentValue";break}s.propertyParams.push({propertyName:o,propertyValue:e.value}),s.propertyParams.push({propertyName:"updatedBy",propertyValue:e.isOutOfRange?"":JSON.stringify(e.employee)}),s.propertyParams.push({propertyName:"updatedDate",propertyValue:e.isOutOfRange?"":e.timeStamp})}else s.propertyParams.push({propertyName:"value",propertyValue:e.value}),s.propertyParams.push({propertyName:"updatedBy",propertyValue:JSON.stringify(e.employee)}),s.propertyParams.push({propertyName:"updatedDate",propertyValue:e.timeStamp});r.updateParams.push(s);const i=e.task.rating=="AUTOMATIC_REPLACEMENT"||e.task.rating=="AUTOMATIC_REPLACEMENT_GAP";if((e.type=="condition"||e.type=="rating"&&!i)&&!t){const o={};o.keyValue=e.taskKey,o.propertyParams=[],o.propertyParams.push({propertyName:"taskValue",propertyValue:e.value}),o.propertyParams.push({propertyName:"updatedBy",propertyValue:e.value?JSON.stringify(e.employee):""}),o.propertyParams.push({propertyName:"updatedDate",propertyValue:e.value?e.timeStamp:""});const n=e.reason||"";e.task.taskValue=="4"?o.propertyParams.push({propertyName:"reason",propertyValue:n}):o.propertyParams.push({propertyName:"reason",propertyValue:""}),(e.task.rating=="AUTOMATIC_REPLACEMENT"||e.task.rating=="AUTOMATIC_REPLACEMENT_GAP")&&e.type=="condition"&&o.propertyParams.push({propertyName:"taskNormalValue",propertyValue:e.value}),r.updateParams.push(o)}if(e.taskCategory=="CBM"&&(e.task.rating=="NORMAL"||e.task.rating=="AUTOMATIC_REPLACEMENT"||e.task.rating=="AUTOMATIC_REPLACEMENT_GAP")){const o={};if(o.keyValue=e.taskKey,o.propertyParams=[],e.task.rating=="NORMAL"&&o.propertyParams.push({propertyName:"taskNormalValue",propertyValue:e.type=="rating"?"":e.value}),o.propertyParams.length>0&&r.updateParams.push(o),e.task.rating=="NORMAL"){const n=e.task.items.find(c=>(e.type=="rating"&&c.valueItemType=="condition"||e.type=="condition"&&c.valueItemType=="rating")&&c.itemType=="dropDown");if(n){const c={};c.keyValue=n.key,c.propertyParams=[],c.propertyParams.push({propertyName:"value",propertyValue:""}),c.propertyParams.push({propertyName:"updatedBy",propertyValue:JSON.stringify(e.employee)}),c.propertyParams.push({propertyName:"updatedDate",propertyValue:e.timeStamp}),r.updateParams.push(c)}}}return e.value=="4"&&Object.keys(this.stateItemKeyWithTriggeredDisabledKey).filter(n=>this.stateItemKeyWithTriggeredDisabledKey[n]===e.itemKey).forEach(n=>{const c={};c.keyValue=n,c.propertyParams=[],c.propertyParams.push({propertyName:"value",propertyValue:""}),c.propertyParams.push({propertyName:"updatedBy",propertyValue:JSON.stringify(e.employee)}),c.propertyParams.push({propertyName:"updatedDate",propertyValue:e.timeStamp}),r.updateParams.push(c)}),r.workOrder=e.workOrder,r},createResetTaskAdjustmentPayload(e){const t=m(),a={};a.employee=e.employee,a.localInterventionStatus=t.Intervention.interventionExecution,a.headerId=e.id,a.id=e.id,a.updateParams=[];const r={};return r.keyValue=e.itemKey,r.propertyParams=[],r.propertyParams.push({propertyName:"measurement",propertyValue:""}),r.propertyParams.push({propertyName:"rating",propertyValue:""}),r.propertyParams.push({propertyName:"updatedBy",propertyValue:""}),r.propertyParams.push({propertyName:"updatedDate",propertyValue:""}),r.propertyParams.push({propertyName:"commentValue",propertyValue:""}),a.updateParams.push(r),a.workOrder=e.workOrder,a},async updateHeaderData(e){(this.stateSelectedIntervention.interventionSMU==""||this.stateSelectedIntervention.interventionSMU==null)&&(this.stateSelectedIntervention.interventionSMU=e.smu.replaceAll(",","")),this.stateSelectedIntervention.serviceStart==""&&(this.stateSelectedIntervention.serviceStart=e.serviceStart),this.stateSelectedIntervention.log=e.logs,this.stateSelectedIntervention.interventionExecution=e.status,this.stateSelectedIntervention.supervisor=e.employee,this.stateSelectedIntervention.updatedBy=e.log.employee,this.stateSelectedIntervention.statusHistory.push(e.history),await d.interventionDetail.put(p.cloneDeep(this.stateSelectedIntervention))},async updateEquipmentImageData(e){const t=[];this.stateSelectedIntervention.imageEquipment=[...t,...e.files],this.stateSelectedIntervention.supervisor=e.employee,this.stateSelectedIntervention.updatedBy=e.employee,await d.interventionDetail.put(p.cloneDeep(this.stateSelectedIntervention))},async deleteImageFromEquipmentImage(e){let t=this.stateSelectedIntervention.imageEquipment?this.stateSelectedIntervention.imageEquipment:[];t=t.filter(a=>a!=e),this.stateSelectedIntervention.imageEquipment=t,await d.interventionDetail.put(p.cloneDeep(this.stateSelectedIntervention))},async updateRiskAssesmentImageData(e,t){var r;const a=(r=this.stateSelectedIntervention.log)==null?void 0:r.find(s=>s.employee.id==t.employee.id);a?(a.timeLoggedIn.push(t.timeLoggedIn),a.riskPhotos=[],a.isIHaveReadChecked=!0):(this.stateSelectedIntervention.log==null&&(this.stateSelectedIntervention.log=[]),this.stateSelectedIntervention.log.push({employee:t.employee,timeLoggedIn:[t.timeLoggedIn],shift:t.shift,isIHaveReadChecked:!0,riskPhotos:[]})),this.stateSelectedIntervention.riskAssesment[0].value=e,await d.interventionDetail.put(p.cloneDeep(this.stateSelectedIntervention))},async deleteRiskAssesmentImage(e,t){var r;const a=(r=this.stateSelectedIntervention.log)==null?void 0:r.find(s=>s.employee.id==t.employee.id);a&&(a.riskPhotos=ue(a.riskPhotos)),this.stateSelectedIntervention.riskAssesment[0].value=this.stateSelectedIntervention.riskAssesment[0].value.filter(s=>s.image.filename!=e),await d.interventionDetail.put(p.cloneDeep(this.stateSelectedIntervention))},async updateHeaderDataWhenSubmitted(e){this.stateSelectedIntervention.interventionExecution=e.status,this.stateSelectedIntervention.updatedBy=e.employee,this.stateSelectedIntervention.statusHistory.push(e.history),await d.interventionDetail.put(p.cloneDeep(this.stateSelectedIntervention))},async updateLocalData(e){const t=p.cloneDeep(e.task),a=this.stateSelectedIntervention.details[0].tasks;let r;if(a.every(i=>(r=i.tasks.find(o=>o.key==e.taskKey),!r)),!r)return;if(e.taskCategory=="Adjustment"){const i=r.adjustment;e.type=="rating"?i.rating=e.value:e.type=="inputUom"&&(i.measurement=e.value),i.updatedBy=e.employee,i.updatedDate=e.timeStamp}else{if((e.type=="condition"||e.type=="rating")&&(r.taskValue=e.value,r.updatedBy=e.employee,r.updatedDate=e.timeStamp,r.reason=e.reason||"",t.reason&&(r.reason=t.reason),(r.taskNormalValue||r.taskNormalValue=="")&&e.type=="condition"&&(r.taskNormalValue=e.value),e.taskCategory=="CBM-NORMAL"||e.task.category=="CBM"&&e.task.rating=="NORMAL"))if(e.type=="condition"){const o=r.items.find(n=>n.valueItemType=="rating");if(!o)return;o.value="",o.updatedBy=e.employee,o.updatedDate=e.timeStamp,e.task.images=""}else{const o=r.items.find(n=>n.valueItemType=="condition");if(!o){if(e.type=="rating"){const n=r.items.find(c=>c.valueItemType=="rating");if(!n)return;n.value=e.value,n.updatedBy=e.employee,n.updatedDate=e.timeStamp}return}o.value="",o.updatedBy=e.employee,o.updatedDate=e.timeStamp}if(e.type=="images"){r.images=e.value,await d.interventionDetail.put(p.cloneDeep(this.stateSelectedIntervention));return}const i=r.items.find(o=>o.key==e.itemKey);if(!i)return;i.value=e.value,i.updatedBy=e.employee,i.updatedDate=e.timeStamp,e.value=="4"&&Object.keys(this.stateItemKeyWithTriggeredDisabledKey).filter(n=>this.stateItemKeyWithTriggeredDisabledKey[n]===e.itemKey).forEach(n=>{const c=r&&r.items.find(u=>u.key==n);c&&(c.value="",c.updatedBy=e.employee,c.updatedDate=e.timeStamp)})}await d.interventionDetail.put(p.cloneDeep(this.stateSelectedIntervention)),T().setDefectIdentifiedData(this.Intervention.sapWorkOrder)},async updateLocalTaskCBMImageData(e){const t=this.stateSelectedIntervention.details[0].tasks;let a;t.every(r=>(a=r.tasks.find(s=>s.key==e.taskKey),!a)),a&&(a.images=JSON.parse(e.value),await d.interventionDetail.put(p.cloneDeep(this.stateSelectedIntervention)))},async updateLocalAutoCBM(e){const t=this.stateSelectedIntervention.details[0].tasks;let a;if(t.every(s=>(a=s.tasks.find(i=>i.key==e.taskKey),!a)),!a)return;const r=a.items.find(s=>s.categoryItemType=="targetRating");r&&(r.value=e.value,r.updatedBy=e.value?e.employee:"",r.updatedDate=e.value?e.timeStamp:"",localStorage.setItem("itemKey",r.key))},async appendTaskUpdatePayload(e,t,a,r=!1){var o;const s={};if(s.keyValue=t.itemKey,s.propertyParams=[],t.taskCategory=="Adjustment"){let n="";switch(t.type){case"rating":n="rating";break;case"inputUom":n="measurement";break;case"commentValue":n="commentValue";break}s.propertyParams.push({propertyName:n,propertyValue:t.value});const c=t.type=="rating"&&t.value=="";s.propertyParams.push({propertyName:"updatedBy",propertyValue:c?"":JSON.stringify(t.employee)}),s.propertyParams.push({propertyName:"updatedDate",propertyValue:c?"":t.timeStamp})}else s.propertyParams.push({propertyName:"value",propertyValue:t.value}),s.propertyParams.push({propertyName:"updatedBy",propertyValue:JSON.stringify(t.employee)}),s.propertyParams.push({propertyName:"updatedDate",propertyValue:t.timeStamp});if(e.updateParams.push(s),(t.type=="condition"||t.type=="rating")&&!a){const n={};n.keyValue=t.taskKey,n.propertyParams=[],n.propertyParams.push({propertyName:"taskValue",propertyValue:t.value}),n.propertyParams.push({propertyName:"updatedBy",propertyValue:JSON.stringify(t.employee)}),n.propertyParams.push({propertyName:"updatedDate",propertyValue:t.timeStamp}),e.updateParams.push(n)}if(t.taskCategory=="CBM"&&(t.task.rating=="NORMAL"||t.task.rating=="AUTOMATIC_REPLACEMENT"||t.task.rating=="AUTOMATIC_REPLACEMENT_GAP")){const n={};n.keyValue=t.taskKey,n.propertyParams=[];const c=(t.task.rating=="AUTOMATIC_REPLACEMENT"||t.task.rating=="AUTOMATIC_REPLACEMENT_GAP")&&t.type=="condition",u=t.task.rating=="NORMAL";if((c||u)&&n.propertyParams.push({propertyName:"taskNormalValue",propertyValue:t.type=="rating"?"":t.value}),u&&t.type=="condition"&&t.value=="4"&&t.task.images&&((o=t.task.images)==null?void 0:o.length)>0&&n.propertyParams.push({propertyName:"images",propertyValue:""}),e.updateParams.push(n),t.task.rating=="NORMAL"){const y=t.task.items.find(g=>(t.type=="rating"&&g.valueItemType=="condition"||t.type=="condition"&&g.valueItemType=="rating")&&g.itemType=="dropDown");if(y){const g={};g.keyValue=y.key,g.propertyParams=[],g.propertyParams.push({propertyName:"value",propertyValue:""}),g.propertyParams.push({propertyName:"updatedBy",propertyValue:JSON.stringify(t.employee)}),g.propertyParams.push({propertyName:"updatedDate",propertyValue:t.timeStamp}),e.updateParams.push(g)}}if(t.task.rating=="AUTOMATIC_REPLACEMENT"||t.task.rating=="AUTOMATIC_REPLACEMENT_GAP"){const y={};y.keyValue=t.task.key,y.propertyParams=[],y.propertyParams.push({propertyName:"images",propertyValue:""}),e.updateParams.push(y)}}t.value=="4"&&Object.keys(this.stateItemKeyWithTriggeredDisabledKey).filter(c=>this.stateItemKeyWithTriggeredDisabledKey[c]===t.itemKey).forEach(c=>{const u={};u.keyValue=c,u.propertyParams=[],u.propertyParams.push({propertyName:"value",propertyValue:""}),u.propertyParams.push({propertyName:"updatedBy",propertyValue:JSON.stringify(t.employee)}),u.propertyParams.push({propertyName:"updatedDate",propertyValue:t.timeStamp}),e.updateParams.push(u)}),T().setDefectIdentifiedData(this.Intervention.sapWorkOrder)},async getCountIdentifiedDefect(){const e={ver:"v1",interventionId:this.stateSelectedIntervention.id};try{if(k())return;const a=(await l.get(`${De}`,"",new URLSearchParams(e).toString())).data.result.content;this.stateIdentifiedDefectCount=a.identifiedDefectCount}catch(t){h("IRONS",t),console.log(t)}},async updateFormDataFromServer(){const t=await P().getWorkOrderDetailById(this.Intervention.keyPbi);this.stateSelectedIntervention=t,this.setGroup(t),this.setSelectedGroup(this.stateGroups[this.stateSelectedGroup.sequence-1])},async updateTask(e,t=!1,a=!1){this.stateIsError=!1;const r=v();e.headerId=this.stateSelectedIntervention.id,e.id=this.stateSelectedIntervention.id,e.workOrder=this.stateSelectedIntervention.sapWorkOrder,e.itemKey in this.stateItemTriggerDisabledValue&&(this.stateItemTriggerDisabledValue[e.itemKey]=e.value);let i={};if(a?i=this.createResetTaskAdjustmentPayload(e):i=this.createTaskUpdatePayload(e,t),k())await d.pendingTask.add({module:"Intervention",section:"E-Form",type:"Task",workorder:e.workOrder,key:e.taskKey,bindingKey:e.taskKey,payload:JSON.stringify(i),syncDate:f(),syncStatus:"Pending"}),await this.updateLocalData(e);else{this.LoadingTask[e.itemKey]=!0;try{await r.SyncInterventionTaskData(JSON.stringify(i)),await this.updateFormDataFromServer()}catch(n){this.globalConnectionStore.checkIsErrorNoNetwork(n)?(await d.pendingTask.add({module:"Intervention",section:"E-Form",type:"Task",workorder:e.workOrder,key:e.taskKey,bindingKey:e.taskKey,payload:JSON.stringify(i),syncDate:f(),syncStatus:"Pending"}),await this.updateLocalData(e),this.LoadingTask[e.itemKey]=!1,T().setDefectIdentifiedData(this.Intervention.sapWorkOrder)):(n==S.MODIFY_DEFECT_AFTER_SUPERVISOR_APPROVAL||n==S.CHANGE_NOT_APPLICABLE_WITHOUT_REASON?(this.stateTaskErrorDialog=!0,this.stateErrorMessageTaskErrorDialog=n):n==S.SUBMITTED?this.stateFormSubmittedDialog=!0:n==S.CLOSE&&(this.stateFormCloseDialog=!0),this.stateIsError=!0)}this.LoadingTask[e.itemKey]=!1}T().setDefectIdentifiedData(this.Intervention.sapWorkOrder)},async updateIntervention(e=!1){const a=await P().getWorkOrderDetailById(this.Intervention.keyPbi);await d.interventionDetail.put(a),this.stateSelectedIntervention=a,e&&(this.setGroup(a),this.setSelectedGroup(this.stateGroups[this.stateSelectedGroup.sequence-1]))},async updateSMU(e){this.stateSelectedIntervention.interventionSMU=e.value,this.stateSelectedIntervention.smuBy=e.smuBy,this.stateSelectedIntervention.smuDate=e.smuDate},async discardGeneralChanges(){this.stateSelectedIntervention.imageEquipment="",this.stateSelectedIntervention.log=null,this.stateSelectedIntervention.riskAssesment[0].value="",this.stateSelectedIntervention.servicePersonnels=[],await d.interventionDetail.put(p.cloneDeep(this.stateSelectedIntervention))},setSerialNumber(e){this.stateSerialNumber=e},async saveReplacementPreviousValue(){const e={modelId:this.Intervention.equipmentDesc,type:"intervention"};try{const t=new URLSearchParams({ver:"v1"}).toString(),r=(await l.post(`${ce}?${t}`,e)).data.result.content??[];await d.intervetionReplacementDefaultValue.put({id:this.Intervention.id,defaultValues:p.cloneDeep(r)})}catch(t){h("IRONS",t),console.log("error get bulk default values",t)}},async getReplacementDefaultValueByTask(e){let t="",a=[];const r=await d.intervetionReplacementDefaultValue.where({id:this.Intervention.id}).first();r&&(a=r.defaultValues);const s=a.find(i=>{const o=i.taskId==e.key,n=e.psType==i.psTypeId,c=e.rating==i.rating;return o&&n&&c});return s&&(t=s.defaultValue),t},async checIsReadySubmitInterventionData(){if(this.TaskProgress.every(t=>t.taskDone===t.taskTotal))if(k()){if(this.Intervention.interventionExecution=="On Progress")return!0}else return await P().getExisitingSMU({id:this.Intervention.id,key:this.Intervention.key,propertyName:"interventionExecution"})=="On Progress";return!1}}}),P=I({id:"ComponentInterventionHeaderStore",state:()=>({stateSelectedWorkOrder:"",stateSelectedShortWorkOrder:"",stateOutstandingWorkorders:[],stateLastSync:"",stateActiveFitter:{},stateGeneralSubmitted:!1,stateLog:{},stateServicePersonnel:{},stateServicePersonnels:[],stateDayOffset:0,stateIsBusy:!1,stateSMUTolerance:{},stateSMUToleranceNotMapped:!1}),getters:{WorkOrder:e=>e.stateOutstandingWorkorders.sort((t,a)=>se(new Date(a.headerChangedOn),new Date(t.headerChangedOn))),SelectedWorkOrder:e=>e.stateSelectedWorkOrder,SelectedShortWO:e=>e.stateSelectedShortWorkOrder,LastSync:e=>e.stateLastSync,GeneralSubmitted:e=>e.stateGeneralSubmitted,ActiveFitter:e=>{var t;return(t=e.stateLog)==null?void 0:t.employee},Log:e=>e.stateLog,CutOffEstimate:e=>{const t=ne(10);return ie(t,"DD/MM/YYYY HH:mm:ss",e.stateDayOffset,"days")},IsBusy:e=>e.stateIsBusy,onlineStatus:()=>B(),authStore:()=>Q(),smuTolerance:e=>e.stateSMUTolerance,SMUToleranceNotMapped:e=>e.stateSMUToleranceNotMapped,globalConnectionStore:()=>_()},actions:{setLog(e){this.stateLog=e},setServicePersonnel(e){this.stateServicePersonnel=e},setBusyState(e){this.stateIsBusy=e},setSelectedWorkOrder(e){this.stateSelectedWorkOrder=e},setSelectedShortWorkOrder(e){this.stateSelectedShortWorkOrder=e},async getParamDaysBeforeEst(){const e={key:"InterventionMaxEstDate"};try{const t=await l.post(Se,e);try{await d.offsetDate.add({offsetDate:+t.data.result.content.value})}catch(a){await d.offsetDate.put({offsetDate:+t.data.result.content.value}),h("IRONS",a)}this.stateDayOffset=+t.data.result.content.value}catch(t){console.log(t)}},async syncWithIronPortalData(){const e={ver:"v1"};try{await l.get(`${ge}?${new URLSearchParams(e).toString()}`)}catch(t){h("IRONS",t),console.log(t)}},async getWorkOrdersFromLocal(){const e=await d.offsetDate.limit(1).first();e&&(this.stateDayOffset=e.offsetDate),this.stateOutstandingWorkorders=await d.interventionHeader.toArray()},async getWorkOrderFromDB(e){await d.interventionHeader.get(e)},async getWorkOrderDetailFromDB(e){return await d.interventionDetail.where("keyPbi").equals(e).first()},async getWorkOrders(e){try{this.stateDayOffset==0&&await this.getParamDaysBeforeEst(),this.stateOutstandingWorkorders=await d.interventionHeader.toArray();const t={ver:"v1",siteId:e},a=await l.get(V,"",new URLSearchParams(t).toString()),r=[];a.data.result.content.length<1&&(this.stateOutstandingWorkorders=[],await d.interventionHeader.clear(),await d.interventionDetail.clear(),await d.interventionDefect.clear(),this.stateOutstandingWorkorders=[]),a.data.result.content.forEach(n=>{r.push({id:n.keyPbi,equipment:n.equipment,equipmentDesc:n.equipmentDesc,sampleStatus:n.sampleStatus,componentDescription:n.componentDescription,sapWorkOrder:n.sapWorkOrder,mdInterventionStatusId:n.mdInterventionStatusId,interventionStatus:n.interventionStatus,interventionDiagnosis:n.interventionDiagnosis,followUpPriority:n.followUpPriority,estimationCompletionDate:n.estimationCompletionDate,headerChangedOn:n.headerChangedOn,interventionExecution:n.interventionExecution,progress:n.progress,componentSystem:n.componentSystem})});const s=r.map(n=>n.id);await d.interventionHeader.filter(n=>!s.includes(n.id)).delete(),await d.interventionDetail.filter(n=>!s.includes(n.keyPbi)).delete();for(const n of r){const c=await d.interventionHeader.where("id").equals(n.id).first();if(c||await d.interventionHeader.add({id:n.id,equipment:n.equipment,equipmentDesc:n.equipmentDesc,sampleStatus:n.sampleStatus,componentDescription:n.componentDescription,sapWorkOrder:n.sapWorkOrder,mdInterventionStatusId:n.mdInterventionStatusId,interventionStatus:n.interventionStatus,interventionDiagnosis:n.interventionDiagnosis,followUpPriority:n.followUpPriority,estimationCompletionDate:n.estimationCompletionDate,status:"Not Updated",headerChangedOn:n.headerChangedOn,interventionExecution:n.interventionExecution,progress:n.progress,componentSystem:n.componentSystem}),c){const u=await d.interventionHeader.where("id").equals(n.id).first(),y=u.equipment==n.equipment&&u.equipmentDesc==n.equipmentDesc&&u.sampleStatus==n.sampleStatus&&u.componentDescription==n.componentDescription&&u.sapWorkOrder==n.sapWorkOrder&&u.estimationCompletionDate==n.estimationCompletionDate;await d.interventionHeader.put({id:n.id,equipment:n.equipment,equipmentDesc:n.equipmentDesc,sampleStatus:n.sampleStatus,componentDescription:n.componentDescription,sapWorkOrder:n.sapWorkOrder,mdInterventionStatusId:n.mdInterventionStatusId,interventionStatus:n.interventionStatus,interventionDiagnosis:n.interventionDiagnosis,followUpPriority:n.followUpPriority,estimationCompletionDate:n.estimationCompletionDate,status:y?u.status:"Not Updated",headerChangedOn:n.headerChangedOn,interventionExecution:n.interventionExecution,progress:n.progress,componentSystem:n.componentSystem})}this.stateOutstandingWorkorders=await d.interventionHeader.toArray()}}catch(t){h("IRONS",t),console.log("error")}},async syncWorkOrders(e){try{this.stateDayOffset==0&&await this.getParamDaysBeforeEst();const t={ver:"v1",siteId:e},a=await l.get(V,"",new URLSearchParams(t).toString()),r=[];a.data.result.content.length<1&&(this.stateOutstandingWorkorders=[],await d.interventionHeader.clear(),await d.interventionDetail.clear(),await d.interventionDefect.clear(),this.stateOutstandingWorkorders=[]),a.data.result.content.forEach(n=>{r.push({id:n.keyPbi,equipment:n.equipment,equipmentDesc:n.equipmentDesc,sampleStatus:n.sampleStatus,componentDescription:n.componentDescription,sapWorkOrder:n.sapWorkOrder,mdInterventionStatusId:n.mdInterventionStatusId,interventionStatus:n.interventionStatus,interventionDiagnosis:n.interventionDiagnosis,followUpPriority:n.followUpPriority,estimationCompletionDate:n.estimationCompletionDate,headerChangedOn:n.headerChangedOn,interventionExecution:n.interventionExecution,progress:n.progress,componentSystem:n.componentSystem})});const s=r.map(n=>n.id),o=(await d.interventionHeader.filter(n=>!s.includes(n.id)).toArray()).map(n=>n.sapWorkOrder);await d.interventionDetail.filter(n=>o.includes(n.sapWorkOrder)).delete(),await d.interventionHeader.filter(n=>!s.includes(n.id)).delete(),await this.syncDetail()}catch(t){h("IRONS",t),console.log(t)}},async setInterventionHeaderToLocalDB(e){await d.interventionHeader.put({id:e.id,equipment:e.equipment,equipmentDesc:e.equipmentDesc,sampleStatus:e.sampleStatus,componentDescription:e.componentDescription,sapWorkOrder:e.sapWorkOrder,mdInterventionStatusId:e.mdInterventionStatusId,interventionStatus:e.interventionStatus,interventionDiagnosis:e.interventionDiagnosis,followUpPriority:e.followUpPriority,estimationCompletionDate:e.estimationCompletionDate,status:"Updated",headerChangedOn:e.headerChangedOn,interventionExecution:e.interventionExecution,progress:e.progress,componentSystem:e.componentSystem})},async handleSetInterventionAccessibleOffline(e){const t=await this.getWorkOrderDetailById(e.id);await this.setInterventionHeaderToLocalDB(e),this.stateOutstandingWorkorders=await d.interventionHeader.toArray(),t&&t!=null&&await this.updateIntervention(t),console.log(t,"detailJSON")},async syncDetail(){let t=Promise.resolve();const a=p.clone(this.stateOutstandingWorkorders);for(const r of a)t=t.then(async()=>{const s=await this.getWorkOrderDetailById(r.id);return s&&s!=null&&await d.interventionDetail.put(s),await d.interventionHeader.put({id:r.id,equipment:r.equipment,equipmentDesc:r.equipmentDesc,sampleStatus:r.sampleStatus,componentDescription:r.componentDescription,sapWorkOrder:r.sapWorkOrder,mdInterventionStatusId:r.mdInterventionStatusId,interventionStatus:r.interventionStatus,interventionDiagnosis:r.interventionDiagnosis,followUpPriority:r.followUpPriority,estimationCompletionDate:r.estimationCompletionDate,status:"Updated",headerChangedOn:r.headerChangedOn,interventionExecution:r.interventionExecution,progress:r.progress,componentSystem:r.componentSystem}),this.stateOutstandingWorkorders=await d.interventionHeader.toArray(),new Promise(function(i){setTimeout(i,1e3)})})},async updateIntervention(e){const t=await d.interventionDetail.filter(a=>a.sapWorkOrder==e.sapWorkOrder);t&&await t.delete(),await d.interventionDetail.add(e)},async getWorkOrderDetailById(e){const t={ver:"v1",keyPbi:e};try{const a=await l.get(`${de}?${new URLSearchParams(t).toString()}`),r=a.data.result.content;await this.handleSaveImagesToLocal(r);const s=await d.interventionDetail.filter(o=>o.sapWorkOrder==r.sapWorkOrder);s&&await s.delete(),await d.interventionDetail.add(r);const i=await d.interventionHeader.where({sapWorkOrder:+r.sapWorkOrder}).first();return i&&(i.status="Updated",await d.interventionHeader.put(i)),a.data.result.content}catch(a){return h("IRONS",a),null}},async updateHeaders(e){try{await l.post(N,e)}catch(t){h("IRONS",t),console.log(t)}},async handleSaveImagesToLocal(e){const t=[],a=async s=>{if(s.itemType=="image"&&!k()){const i=await d.taskReference.where({filename:s.value}).first();if(!i)t.includes(s.value)||t.push(s.value);else if(!i.createdDate)d.taskReference.where({filename:s.value}).delete(),t.includes(s.value)||t.push(s.value);else{const o=new Date,n=i.createdDate;(o.getTime()-n.getTime())/(1e3*60*60*24)>1&&(d.taskReference.where({filename:s.value}).delete(),t.includes(s.value)||t.push(s.value))}}},r=e.details;for(const s of r)for(const i of s.tasks)for(const o of i.tasks)if(o.reference)for(const n of o.reference.items)for(const c in n){const u=n[c];await a(u)}if(t.length!=0)for(const s in t){const i=t[s],o={ver:"v1",id:i},c=(await l.get(`${le}`,"",new URLSearchParams(o).toString())).data.result.content,u=await fetch(c.toString(),{headers:new Headers({})}).then(y=>y.blob()).then(y=>y);await d.taskReference.add({workorder:e.sapWorkOrder,filename:i,file:u,fileType:"image",createdDate:new Date})}},async getLatestSyncDate(){const e={ver:"v1",limit:"1",orderBy:"_ts",orderType:"desc"},t={isActive:"true"};try{const r=(await l.post(`${fe}?${new URLSearchParams(e).toString()}`,t)).data.result.content;if(r.length>0){const s=p.orderBy(r,["_ts"],["desc"]);this.stateLastSync=`${oe(s[0]._ts,"DD/MM/YYYY HH:mm:ss")} (AEST)`}}catch(a){h("IRONS",a),console.log(a)}},setActiveFitter(e){this.stateActiveFitter=e},createLogPayload(e,t){const a=m();let r;a.Intervention.log==null?r=[]:r=a.Intervention.log;let s=r==null?void 0:r.find(i=>{var o;return((o=i.employee)==null?void 0:o.id)==e.employee.id});return s?(Array.isArray(s.timeLoggedIn)||(s.timeLoggedIn=s.timeLoggedIn!=""?[s.timeLoggedIn]:[]),s.timeLoggedIn.push(e.timeLoggedIn),s.riskPhotos=[],r=a.Intervention.log):(s={},s.employee=e.employee,s.timeLoggedIn=[e.timeLoggedIn],s.shift=e.shift,s.isIHaveReadChecked=!0,s.riskPhotos=[],r=[s]),t.updateParams[0].propertyParams.push({propertyName:"log",propertyValue:JSON.stringify(s)}),r},setServicePersonnelForPayload(e=""){e&&(this.stateServicePersonnel.serviceEnd=e)},createServiceHistoryPayload(e,t){const s=m().Intervention.statusHistory.concat(e);t.updateParams[0].propertyParams.push({propertyName:"statusHistory",propertyValue:JSON.stringify(s)})},createGeneralFormPayload(e,t){const a={};a.employee=e.employee,a.localInterventionStatus=e.status,a.id=e.id,a.updateParams=[];const r={};return r.keyValue=e.key,r.propertyParams=[],t||r.propertyParams.push({propertyName:"serviceStart",propertyValue:e.submitDate}),r.propertyParams.push({propertyName:"interventionSMU",propertyValue:e.smu.replaceAll(",","")}),r.propertyParams.push({propertyName:"interventionExecution",propertyValue:e.status}),r.propertyParams.push({propertyName:"supervisor",propertyValue:JSON.stringify(a.employee)}),r.propertyParams.push({propertyName:"updatedBy",propertyValue:JSON.stringify(a.employee)}),r.propertyParams.push({propertyName:"updatedDate",propertyValue:e.submitDate}),r.propertyParams.push({propertyName:"servicePersonnels",propertyValue:JSON.stringify(this.stateServicePersonnel)}),a.updateParams.push(r),a},createFinishFormPayload(e){const t={};t.employee=e.employee,t.localInterventionStatus=e.status,t.id=e.id,t.updateParams=[];const a={};return a.keyValue=e.key,a.propertyParams=[],a.propertyParams.push({propertyName:"servicePersonnels",propertyValue:JSON.stringify({...this.stateServicePersonnel,serviceEnd:F()})}),a.propertyParams.push({propertyName:"updatedBy",propertyValue:JSON.stringify(t.employee)}),a.propertyParams.push({propertyName:"updatedDate",propertyValue:e.submitDate}),t.updateParams.push(a),t},createPreRiskImages(e){const a=m().RiskAssessmentImages,r=a.filter(i=>i.updatedBy.id==this.Log.employee.id).slice(0,1);let s="front";return r.length>0&&r[0].imageType&&(s=r[0].imageType=="front"?"back":s),a.push({image:e.files[0],imageType:s,updatedBy:e.employee,updatedDate:F()}),a},preRiskImagesFiltered(e){return m().RiskAssessmentImages.filter(r=>typeof r.image=="string"?r.image!=e:r.image.filename!=e)},createTaskPreRiskPayload(e,t){const a=m(),r={};r.employee=e.employee,r.localInterventionStatus=a.Intervention.interventionExecution,r.id=e.id,r.updateParams=[];const s={};return s.keyValue=e.key,s.propertyParams=[],s.propertyParams.push({propertyName:"value",propertyValue:JSON.stringify(t)}),r.updateParams.push(s),r},async createTaskPreRisk(e){const a=m().Intervention,r=this.createPreRiskImages(e),s=this.createTaskPreRiskPayload(e,r);k()?await d.pendingTask.add({module:"Intervention",section:"E-Form",type:"PreRisk",workorder:a.sapWorkOrder,key:e.key,bindingKey:e.key,payload:JSON.stringify(s),syncDate:f(),syncStatus:"Pending"}):await this.storeImageToServer(s);for(const[i,o]of e.blobs.entries()){const n={module:"Intervention",key:e.key,workorder:a.sapWorkOrder,type:e.type,fileType:e.files[i].fileType??"webp",createdBy:e.employee.id,email:e.email,filename:e.files[i].filename,originalFilename:e.files[i].originalFilename??e.files[i].filename,blob:o,syncDate:f(),syncStatus:"Pending"};if(k())await w(d,"pendingTaskFile",n);else{const c=new FormData;c.append("files",o,`${e.files[i].filename}.png`),c.append("userAccount",this.authStore.user.Email),this.storeImageBlobToServer(c,n)}}return r},async deleteRiskAssesmentImage(e){const t=m(),a=await this.createTaskPreRiskDelete(e);await t.updateRiskAssesmentImageData(a,this.stateLog)},async createTaskPreRiskDelete(e){const t=m(),a=t.Intervention,r=this.preRiskImagesFiltered(e.filename),s={};s.employee=e.employee,s.localInterventionStatus=t.Intervention.interventionExecution,s.id=e.id,s.updateParams=[];const i={};return i.keyValue=e.key,i.propertyParams=[],i.propertyParams.push({propertyName:"value",propertyValue:JSON.stringify(r)}),s.updateParams.push(i),await d.pendingTask.add({module:"Intervention",section:"E-Form",type:"PreRisk",workorder:a.sapWorkOrder,key:e.key,bindingKey:e.key,payload:JSON.stringify(s),syncDate:f(),syncStatus:"Pending"}),r},createTaskImagePayload(e){const t=m(),a={};a.employee=e.employee,a.localInterventionStatus=t.Intervention.interventionExecution,a.id=e.id,a.updateParams=[];const r={};return r.keyValue=e.key,r.propertyParams=[],r.propertyParams.push({propertyName:e.type,propertyValue:JSON.stringify(e.files)}),a.updateParams.push(r),a},updatePreRiskImagePayload(e){const t=m(),a={};return a.employee=e.employee,a.localInterventionStatus=t.Intervention.interventionExecution,a.id=e.id,a.updateParams=[],e.key,a},async createTaskImage(e){const a=m().Intervention,r=this.createTaskImagePayload(e),s=d.pendingTask.where({module:"Intervention",type:"General",key:e.key,itemKey:`${a.sapWorkOrder}-ImageEquipment`,workorder:a.sapWorkOrder,syncStatus:"Pending"});s&&await s.delete(),await d.pendingTask.add({module:"Intervention",section:"E-Form",type:"General",workorder:a.sapWorkOrder,key:e.key,bindingKey:e.key,itemKey:`${a.sapWorkOrder}-ImageEquipment`,payload:JSON.stringify(r),syncDate:f(),syncStatus:"Pending"});for(const[i,o]of e.blobs.entries()){const n={module:"Intervention",key:e.key,workorder:a.sapWorkOrder,type:e.type,fileType:e.files[i].fileType??"webp",createdBy:e.employee.id,email:e.email,filename:e.files[i].filename,originalFilename:e.files[i].filename,blob:o,syncDate:f(),syncStatus:"Pending"};await w(d,"pendingTaskFile",n)}},async storeImageLocal(e){const a=m().Intervention;if(await d.pendingTaskFile.get({filename:e.files[0].filename}))return;const s={module:"Intervention",key:e.key,workorder:a.sapWorkOrder,type:e.type,fileType:e.files[0].fileType??"webp",createdBy:e.employee.id,email:e.email,filename:e.files[0].filename,originalFilename:e.files[0].filename,blob:e.blobs[0],syncDate:f(),syncStatus:"Pending"};await w(d,"pendingTaskFile",s)},async storeImageToServer(e){try{await l.post(N,e)}catch(t){h("IRONS",t),console.log(t)}},async storeImageBlobToServer(e,t=void 0){const a={ver:"v1",userAccount:this.authStore.user.Email};let r="";try{await l.post(`${X}?${new URLSearchParams(a).toString()}`,e),r="Sync"}catch(s){r="Failed",h("IRONS",s)}finally{t&&(t.syncDate=f(),t.syncStatus=r,await w(d,"pendingTaskFile",t))}},async updateEquipmentImage(e){const t=m();await this.createTaskImage(e),await t.updateEquipmentImageData(e)},async updateRiskAssesmentImage(e,t){const a=m(),r=await this.createTaskPreRisk(e);t&&this.createLogTask(this.stateLog,e.employee),await a.updateRiskAssesmentImageData(r,this.stateLog)},async getExisitingSMU(e){const t={id:e.id,keyValue:e.key,propertyName:e.propertyName},a={ver:"v1"};return(await l.post(`${me}?${new URLSearchParams(a).toString()}`,t)).data.result.content??""},createUpdateSMUPayload(e){const t={};t.employee=e.employee,t.localInterventionStatus=e.status,t.id=e.id,t.updateParams=[];const a={};a.keyValue=e.key,a.propertyParams=[];let r=this.Log.employee;return e.fitter&&(r=e.fitter),a.propertyParams.push({propertyName:"interventionSMU",propertyValue:e.value},{propertyName:"smuBy",propertyValue:e.value!==""?JSON.stringify(r):""},{propertyName:"smuDate",propertyValue:e.value!==""?e.submitDate:""},{propertyName:"updatedBy",propertyValue:e.value!==""?JSON.stringify(r):""},{propertyName:"updatedDate",propertyValue:e.value!==""?e.submitDate:""}),t.updateParams.push(a),t},async updateSMU(e){const t=m(),a=v(),r=t.Intervention,s=this.createUpdateSMUPayload(e);let i=this.Log.employee;if(e.fitter&&(i=e.fitter),k()){const o=d.pendingTask.where({module:"Intervention",type:"General",key:e.key,workorder:r.sapWorkOrder,itemKey:`${r.sapWorkOrder}-SMU`,syncStatus:"Pending"});o&&await o.delete(),await d.pendingTask.add({module:"Intervention",section:"E-Form",type:"General",workorder:r.sapWorkOrder,key:e.key,bindingKey:e.key,itemKey:`${r.sapWorkOrder}-SMU`,payload:JSON.stringify(s),syncDate:f(),syncStatus:"Pending"}),t.updateSMU({value:e.value,smuBy:i,smuDate:e.submitDate})}else{try{await a.SyncInterventionGeneralData(JSON.stringify(s))}catch{const n=d.pendingTask.where({module:"Intervention",type:"General",key:e.key,itemKey:`${r.sapWorkOrder}-SMU`,workorder:r.sapWorkOrder,syncStatus:"Pending"});n&&await n.delete(),await d.pendingTask.add({module:"Intervention",section:"E-Form",type:"General",workorder:r.sapWorkOrder,key:e.key,itemKey:`${r.sapWorkOrder}-SMU`,bindingKey:e.key,payload:JSON.stringify(s),syncDate:f(),syncStatus:"Pending"})}finally{const o=await this.getWorkOrderDetailById(r.keyPbi);o&&await d.interventionDetail.put(o)}t.updateSMU({value:e.value,smuBy:i,smuDate:e.submitDate})}},async createLogTask(e,t){const a=m(),r={};r.employee=t,r.localInterventionStatus=a.Intervention.interventionExecution,r.id=a.Intervention.id,r.updateParams=[];const s={};s.keyValue=a.Intervention.id,s.propertyParams=[],r.updateParams.push(s),this.createLogPayload(e,r),await d.pendingTask.add({module:"Intervention",section:"E-Form",type:"General",workorder:a.Intervention.sapWorkOrder,key:a.Intervention.id,bindingKey:a.Intervention.id,payload:JSON.stringify(r),syncDate:f(),syncStatus:"Pending"})},async submitGeneral(e){const t=m(),a=v(),r=t.Intervention,s=r.interventionExecution!="Open",i=this.createGeneralFormPayload(e,s);if(e.logs=this.createLogPayload(e.log,i),e.servicePersonnel=this.stateServicePersonnel,this.createServiceHistoryPayload(e.history,i),k())await d.pendingTask.add({module:"Intervention",section:"E-Form",type:"General",workorder:r.sapWorkOrder,key:e.key,bindingKey:e.key,payload:JSON.stringify(i),syncDate:f(),syncStatus:"Pending"}),await t.updateHeaderData(e);else try{await a.SyncInterventionGeneralData(JSON.stringify(i));const o=await this.getWorkOrderDetailById(r.keyPbi);await d.interventionDetail.put(o),await t.updateHeaderData(e)}catch(o){this.globalConnectionStore.checkIsErrorNoNetwork(o)&&(await d.pendingTask.add({module:"Intervention",section:"E-Form",type:"General",workorder:r.sapWorkOrder,key:e.key,bindingKey:e.key,payload:JSON.stringify(i),syncDate:f(),syncStatus:"Pending"}),await t.updateHeaderData(e),this.stateGeneralSubmitted=!0)}this.stateGeneralSubmitted=!0},async UpdateServiceEndMechanic(e){const t=this.createFinishFormPayload(e),a=v();if(!k())await a.SyncInterventionGeneralData(JSON.stringify(t));else{const s=m().Intervention;await d.pendingTask.add({module:"Intervention",section:"E-Form",type:"General",workorder:s.sapWorkOrder,key:`FINISH-${e.id}`,bindingKey:`FINISH-${e.id}`,payload:JSON.stringify(t),syncDate:f(),syncStatus:"Pending"})}},async submitForm(e){B();const t=m(),a=v(),r=t.Intervention,s={};s.employee=e.employee,s.localInterventionStatus=e.status,s.id=e.id,s.updateParams=[];const i={};if(i.keyValue=e.id,i.propertyParams=[],i.propertyParams.push({propertyName:"interventionExecution",propertyValue:e.status}),i.propertyParams.push({propertyName:"serviceEnd",propertyValue:e.serviceEnd}),i.propertyParams.push({propertyName:"updatedBy",propertyValue:JSON.stringify(s.employee)}),i.propertyParams.push({propertyName:"updatedDate",propertyValue:e.serviceEnd}),i.propertyParams.push({propertyName:"additionalInformation",propertyValue:e.additionalInformation}),this.setServicePersonnelForPayload(e.serviceEnd),i.propertyParams.push({propertyName:"servicePersonnels",propertyValue:JSON.stringify(this.stateServicePersonnel)}),s.updateParams.push(i),this.createServiceHistoryPayload(e.history,s),k())await d.pendingTask.add({module:"Intervention",section:"E-Form",type:"SubmitGeneral",workorder:r.sapWorkOrder,key:`SUBMIT-${e.id}`,bindingKey:`SUBMIT-${e.id}`,payload:JSON.stringify(s),syncDate:f(),syncStatus:"Pending"}),await t.updateHeaderDataWhenSubmitted(e);else try{await a.SyncInterventionGeneralData(JSON.stringify(s))}catch(o){this.globalConnectionStore.checkIsErrorNoNetwork(o)&&(await d.pendingTask.add({module:"Intervention",section:"E-Form",type:"SubmitGeneral",workorder:r.sapWorkOrder,key:`SUBMIT-${e.id}`,bindingKey:`SUBMIT-${e.id}`,payload:JSON.stringify(s),syncDate:f(),syncStatus:"Pending"}),await t.updateHeaderDataWhenSubmitted(e))}},async removeInterventionFromLocal(e){await d.interventionHeader.filter(t=>t.sapWorkOrder==e).delete(),await d.interventionDetail.filter(t=>t.sapWorkOrder==e).delete(),await d.interventionDefect.filter(t=>t.sapWorkorder==e).delete(),await d.taskImage.filter(t=>t.sapWorkorder==e).delete(),await d.pendingTaskFile.filter(t=>t.workorder==e&&t.module=="Intervention").delete()},setInterventionGeneralSubmited(e){this.stateGeneralSubmitted=e},async getSMUTolerance(){this.stateSMUToleranceNotMapped=!1;const e=async()=>{this.stateSMUTolerance={min:0,max:0},this.stateSMUToleranceNotMapped=!0;const t=p.clone(this.stateSMUTolerance);await d.smuTolerance.add(t),console.log("SMU tolerance not mapped on ADM")};if(k()){const t=await d.smuTolerance.limit(1).first();t?this.stateSMUTolerance=t:e()}else{const t={Parameter:"",ParameterTo:"",ValueMin:"",ValueMinTo:"",ValueMax:"",ValueMaxTo:"",Uom:"",UomTo:"",StartDate:"",StartDateTo:"",EndDate:"",EndDateTo:"",Page:"1",PageSize:"1",Order:"",ver:"v1"};try{const r=(await l.get(pe,"",new URLSearchParams(t).toString())).data.result.content[0];if(await d.smuTolerance.clear(),p.isUndefined(r))e();else if(r.isActive){this.stateSMUTolerance={min:Number(r.valueMin),max:Number(r.valueMax)};const s=p.clone(this.stateSMUTolerance);await d.smuTolerance.add(s)}else e()}catch(a){console.log("error get smu",a),e(),h("IRONS",a)}}},reset(){this.stateActiveFitter={},this.stateLog={},this.stateServicePersonnel={},this.stateServicePersonnels=[],this.stateGeneralSubmitted=!1}}});export{Z as D,Ke as G,ve as U,P as a,Y as b,Ge as c,m as d,T as e,Je as f,we as g,v as u};
