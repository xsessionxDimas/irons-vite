{"version":3,"file":"ts-async.js","sources":["../../../build/es5/mod/internal/constants.js","../../../build/es5/mod/promise/await.js","../../../build/es5/mod/promise/debug.js","../../../build/es5/mod/internal/state.js","../../../build/es5/mod/promise/event.js","../../../build/es5/mod/promise/base.js","../../../build/es5/mod/promise/itemProcessor.js","../../../build/es5/mod/promise/asyncPromise.js","../../../build/es5/mod/promise/nativePromise.js","../../../build/es5/mod/promise/syncPromise.js","../../../build/es5/mod/promise/idlePromise.js","../../../build/es5/mod/promise/promise.js","../../../build/es5/mod/promise/timeoutPromise.js","../../../build/es5/mod/helpers/doWhileAsync.js","../../../build/es5/mod/helpers/arrForEachAsync.js","../../../build/es5/mod/helpers/iterForOfAsync.js","../../../build/es5/mod/scheduler/taskScheduler.js","../../../build/es5/mod/polyfills/promise.js"],"sourcesContent":["/*\r\n * @nevware21/ts-async\r\n * https://github.com/nevware21/ts-async\r\n *\r\n * Copyright (c) 2023 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\nexport var STR_PROMISE = \"Promise\";\r\nexport var DONE = \"done\";\r\nexport var VALUE = \"value\";\r\nexport var ITERATOR = \"iterator\";\r\nexport var RETURN = \"return\";\r\nexport var REJECTED = \"rejected\";\r\n//# sourceMappingURL=constants.js.map","/*\r\n * @nevware21/ts-async\r\n * https://github.com/nevware21/ts-async\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\nimport { isPromiseLike } from \"@nevware21/ts-utils\";\r\nimport { REJECTED } from \"../internal/constants\";\r\n/**\r\n * Helper to coallesce the promise resolved / reject into a single callback to simplify error handling.\r\n * @group Await Helper\r\n * @param value - The value or promise like value to wait to be resolved or rejected.\r\n * @param cb - The callback function to call with the resulting value, if the value is not a\r\n * promise like value then the callback is called synchronously, if the value is a promise then\r\n * the callback will be called once the promise completes the resulting value will be passed as an\r\n * IAwaitResponse instance, it will be called whether any promise resolves or rejects.\r\n * @returns The value returned by the `cb` callback function, if the value is a promise then the return value\r\n * of the callback will be returned as a promise whether the callback returns a promise or not.\r\n * @example\r\n * ```ts\r\n * let promise = createPromise<number>((resolve, reject) => {\r\n *     resolve(42);\r\n * });\r\n *\r\n * // Handle via doAwaitResponse\r\n * doAwaitResponse(promise, (value) => {\r\n *     if (!value.rejected) {\r\n *          // Do something with the value\r\n *     } else {\r\n *         // Do something with the reason\r\n *     }\r\n * });\r\n *\r\n * // It can also handle the raw value, so you could process the result of either a\r\n * // synchrounous return of the value or a Promise\r\n * doAwaitResponse(42, (value) => {\r\n *     if (!value.rejected) {\r\n *         // Do something with the value\r\n *     } else {\r\n *        // This will never be true as the value is not a promise\r\n *     }\r\n * });\r\n * ```\r\n */\r\nexport function doAwaitResponse(value, cb) {\r\n    return doAwait(value, function (value) {\r\n        return cb ? cb({\r\n            status: \"fulfilled\",\r\n            rejected: false,\r\n            value: value\r\n        }) : value;\r\n    }, function (reason) {\r\n        return cb ? cb({\r\n            status: REJECTED,\r\n            rejected: true,\r\n            reason: reason\r\n        }) : reason;\r\n    });\r\n}\r\n/**\r\n * Wait for the promise to resolve or reject, if resolved the callback function will be called with it's value and if\r\n * rejected the rejectFn will be called with the reason. If the passed promise argument is not a promise the callback\r\n * will be called synchronously with the value.\r\n * @group Await Helper\r\n * @param value - The value or promise like value to wait for\r\n * @param resolveFn - The callback to call on the promise successful resolving.\r\n * @param rejectFn - The callback to call when the promise rejects\r\n * @returns The passed value, if it is a promise and there is either a resolve or reject handler\r\n * then it will return a chained promise with the value from the resolve or reject handler (depending\r\n * whether it resolve or rejects)\r\n * @example\r\n * ```ts\r\n * let promise = createPromise<number>((resolve, reject) => {\r\n *     resolve(42);\r\n * });\r\n *\r\n * // Handle via a chained promise\r\n * let chainedPromise = promise.then((value) => {\r\n *     // Do something with the value\r\n * });\r\n *\r\n * // Handle via doAwait\r\n * doAwait(promise, (value) => {\r\n *     // Do something with the value\r\n * });\r\n *\r\n * // It can also handle the raw value, so you could process the result of either a\r\n * // synchrounous return of the value or a Promise\r\n * doAwait(42, (value) => {\r\n *     // Do something with the value\r\n * });\r\n * ```\r\n */\r\nexport function doAwait(value, resolveFn, rejectFn, finallyFn) {\r\n    var result = value;\r\n    try {\r\n        if (isPromiseLike(value)) {\r\n            if (resolveFn || rejectFn) {\r\n                result = value.then(resolveFn, rejectFn);\r\n            }\r\n        }\r\n        else {\r\n            try {\r\n                if (resolveFn) {\r\n                    result = resolveFn(value);\r\n                }\r\n            }\r\n            catch (err) {\r\n                if (rejectFn) {\r\n                    result = rejectFn(err);\r\n                }\r\n                else {\r\n                    throw err;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    finally {\r\n        if (finallyFn) {\r\n            doFinally(result, finallyFn);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Wait for the promise to resolve or reject and then call the finallyFn. If the passed promise argument is not a promise the callback\r\n * will be called synchronously with the value. If the passed promise doesn't implement finally then a finally implementation will be\r\n * simulated using then(..., ...).\r\n * @group Await Helper\r\n * @param value - The value or promise like value to wait for\r\n * @param finallyFn - The finally function to call once the promise has resolved or rejected\r\n */\r\nexport function doFinally(value, finallyFn) {\r\n    var result = value;\r\n    if (finallyFn) {\r\n        if (isPromiseLike(value)) {\r\n            if (value.finally) {\r\n                result = value.finally(finallyFn);\r\n            }\r\n            else {\r\n                // Simulate finally if not available\r\n                result = value.then(function (value) {\r\n                    finallyFn();\r\n                    return value;\r\n                }, function (reason) {\r\n                    finallyFn();\r\n                    throw reason;\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            finallyFn();\r\n        }\r\n    }\r\n    return result;\r\n}\r\n//# sourceMappingURL=await.js.map","/*\r\n * @nevware21/ts-async\r\n * https://github.com/nevware21/ts-async\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\nimport { objDefineProperties } from \"@nevware21/ts-utils\";\r\nvar _debugState;\r\nvar _debugResult;\r\nvar _debugHandled;\r\n/**\r\n * @internal\r\n * @ignore\r\n */\r\nexport var _promiseDebugEnabled = false;\r\n//#ifdef DEBUG\r\n//#:(!DEBUG) let _theLogger: (id: string, message: string) => void = null;\r\n//#endif\r\n/**\r\n * @internal\r\n * @ignore Internal function enable logging the internal state of the promise during execution, this code and references are\r\n * removed from the production artifacts\r\n */\r\nexport var _debugLog = /*#__PURE__*/ function (id, message) {\r\n    //#ifdef DEBUG\r\n    //#:(!DEBUG) if (_theLogger) {\r\n    //#:(!DEBUG)     _theLogger(id, message);\r\n    //#:(!DEBUG) }\r\n    //#endif\r\n};\r\n/**\r\n * @internal\r\n * @ignore\r\n * Internal function to add the debug state to the promise so that it provides simular visibility as you would\r\n * see from native promises\r\n * @param thePromise - The Promise implementation\r\n * @param stateFn - The function to return the state of the promise\r\n * @param resultFn - The function to return the result (settled value) of the promise\r\n * @param handledFn - The function to return whether the promise has been handled (used for throwing\r\n * unhandled rejection events)\r\n */\r\nexport function _addDebugState(thePromise, stateFn, resultFn, handledFn) {\r\n    // While the IPromise implementations provide a `state` property, keeping the `[[PromiseState]]`\r\n    // as native promises also have a non-enumerable property of the same name\r\n    _debugState = _debugState || { toString: function () { return \"[[PromiseState]]\"; } };\r\n    _debugResult = _debugResult || { toString: function () { return \"[[PromiseResult]]\"; } };\r\n    _debugHandled = _debugHandled || { toString: function () { return \"[[PromiseIsHandled]]\"; } };\r\n    var props = {};\r\n    props[_debugState] = { get: stateFn };\r\n    props[_debugResult] = { get: resultFn };\r\n    props[_debugHandled] = { get: handledFn };\r\n    objDefineProperties(thePromise, props);\r\n}\r\n/**\r\n * Debug helper to enable internal debugging of the promise implementations. Disabled by default.\r\n * For the generated packages included in the npm package the `logger` will not be called as the\r\n * `_debugLog` function that uses this logger is removed during packaging.\r\n *\r\n * It is available directly from the repository for unit testing.\r\n *\r\n * @group Debug\r\n * @param enabled - Should debugging be enabled (defaults `false`, when `true` promises will have\r\n * additional debug properties and the `toString` will include extra details.\r\n * @param logger - Optional logger that will log internal state changes, only called in debug\r\n * builds as the calling function is removed is the production artifacts.\r\n * @example\r\n * ```ts\r\n * // The Id is the id of the promise\r\n * // The message is the internal debug message\r\n * function promiseDebugLogger(id: string, message: string) {\r\n *     if (console && console.log) {\r\n *         console.log(id, message);\r\n *     }\r\n * }\r\n *\r\n * setPromiseDebugState(true, promiseDebugLogger);\r\n *\r\n * // While the logger will not be called for the production packages\r\n * // Setting the `enabled` flag to tru will cause each promise to have\r\n * // the following additional properties added\r\n * // [[PromiseState]]; => Same as the `state` property\r\n * // [[PromiseResult]]; => The settled value\r\n * // [[PromiseIsHandled]] => Identifies if the promise has been handled\r\n * // It will also cause the `toString` for the promise to include additional\r\n * // debugging information\r\n * ```\r\n */\r\nexport function setPromiseDebugState(enabled, logger) {\r\n    _promiseDebugEnabled = enabled;\r\n    //#ifdef DEBUG\r\n    //#:(!DEBUG) _theLogger = logger;\r\n    //#endif\r\n}\r\n//# sourceMappingURL=debug.js.map","/*\r\n * @nevware21/ts-async\r\n * https://github.com/nevware21/ts-async\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\nimport { REJECTED } from \"./constants\";\r\n/**\r\n * @ignore -- Don't include in the generated documentation\r\n * @internal\r\n */\r\nexport var STRING_STATES = /*#__PURE__*/ [\r\n    \"pending\", \"resolving\", \"resolved\", REJECTED\r\n];\r\n//# sourceMappingURL=state.js.map","/*\r\n * @nevware21/ts-async\r\n * https://github.com/nevware21/ts-async\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\nimport { dumpObj, getDocument, getInst, createCachedValue, safe } from \"@nevware21/ts-utils\";\r\nvar DISPATCH_EVENT = \"dispatchEvent\";\r\nvar _hasInitEvent;\r\n/**\r\n * @internal\r\n * @ignore\r\n * Helper function to determine if the document has the `initEvent` function\r\n * @param doc - The document to check\r\n * @returns\r\n */\r\nfunction _hasInitEventFn(doc) {\r\n    var evt;\r\n    if (doc && doc.createEvent) {\r\n        evt = doc.createEvent(\"Event\");\r\n    }\r\n    return (!!evt && evt.initEvent);\r\n}\r\n/**\r\n * @internal\r\n * @ignore\r\n * @param target\r\n * @param evtName\r\n * @param populateEvent\r\n * @param useNewEvent\r\n */\r\nexport function emitEvent(target, evtName, populateEvent, useNewEvent) {\r\n    var doc = getDocument();\r\n    !_hasInitEvent && (_hasInitEvent = createCachedValue(!!safe(_hasInitEventFn, [doc]).v));\r\n    var theEvt = _hasInitEvent.v ? doc.createEvent(\"Event\") : (useNewEvent ? new Event(evtName) : {});\r\n    populateEvent && populateEvent(theEvt);\r\n    if (_hasInitEvent.v) {\r\n        theEvt.initEvent(evtName, false, true);\r\n    }\r\n    if (theEvt && target[DISPATCH_EVENT]) {\r\n        target[DISPATCH_EVENT](theEvt);\r\n    }\r\n    else {\r\n        var handler = target[\"on\" + evtName];\r\n        if (handler) {\r\n            handler(theEvt);\r\n        }\r\n        else {\r\n            var theConsole = getInst(\"console\");\r\n            theConsole && (theConsole[\"error\"] || theConsole[\"log\"])(evtName, dumpObj(theEvt));\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=event.js.map","/*\r\n * @nevware21/ts-async\r\n * https://github.com/nevware21/ts-async\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\nimport { arrSlice, dumpObj, getKnownSymbol, hasSymbol, isFunction, isPromiseLike, isUndefined, throwTypeError, objToString, scheduleTimeout, getWindow, isNode, getGlobal, objDefine, objDefineProp, iterForOf, isIterable, isArray, arrForEach, createCachedValue, safe, getInst, createCustomError } from \"@nevware21/ts-utils\";\r\nimport { doAwait, doAwaitResponse } from \"./await\";\r\nimport { _addDebugState, _promiseDebugEnabled } from \"./debug\";\r\nimport { STRING_STATES } from \"../internal/state\";\r\nimport { emitEvent } from \"./event\";\r\nimport { REJECTED, STR_PROMISE } from \"../internal/constants\";\r\n//#ifdef DEBUG\r\n//#:(!DEBUG) import { _debugLog } from \"./debug\";\r\n//#endif\r\nvar NODE_UNHANDLED_REJECTION = \"unhandledRejection\";\r\nvar UNHANDLED_REJECTION = NODE_UNHANDLED_REJECTION.toLowerCase();\r\nvar _currentPromiseId = [];\r\nvar _uniquePromiseId = 0;\r\nvar _unhandledRejectionTimeout = 10;\r\nvar _aggregationError;\r\nvar _hasPromiseRejectionEvent;\r\nfunction dumpFnObj(value) {\r\n    if (isFunction(value)) {\r\n        return value.toString();\r\n    }\r\n    return dumpObj(value);\r\n}\r\n//#ifdef DEBUG\r\n//#:(!DEBUG) function _getCaller(prefix: string, start: number) {\r\n//#:(!DEBUG)     let stack = new Error().stack;\r\n//#:(!DEBUG)     if (stack) {\r\n//#:(!DEBUG)         let lines = stack.split(\"\\n\");\r\n//#:(!DEBUG)         if (lines.length > start) {\r\n//#:(!DEBUG)             return prefix + \":\" + arrSlice(lines, start, start + 5).join(\"\\n\") + \"\\n...\";\r\n//#:(!DEBUG)         }\r\n//#:(!DEBUG)     }\r\n//#:(!DEBUG)     return null;\r\n//#:(!DEBUG) }\r\n//#endif\r\n/*#__NO_SIDE_EFFECTS__*/\r\nfunction _createAggregationError(values) {\r\n    !_aggregationError && (_aggregationError = createCachedValue(safe(getInst, [\"AggregationError\"]).v || createCustomError(\"AggregationError\", function (self, args) {\r\n        self.errors = args[0];\r\n    })));\r\n    return new _aggregationError.v(values);\r\n}\r\n/**\r\n * @ignore\r\n * @internal\r\n *\r\n * Implementing a simple synchronous promise interface for support within any environment that\r\n * doesn't support the Promise API\r\n * @param newPromise - The delegate function used to create a new promise object\r\n * @param processor - The function to use to process the pending\r\n * @param executor - The resolve function\r\n * @param additionalArgs - [Optional] Additional arguments that will be passed to the PromiseCreatorFn\r\n */\r\nexport function _createPromise(newPromise, processor, executor) {\r\n    var additionalArgs = arrSlice(arguments, 3);\r\n    var _state = 0 /* ePromiseState.Pending */;\r\n    var _hasResolved = false;\r\n    var _settledValue;\r\n    var _queue = [];\r\n    var _id = _uniquePromiseId++;\r\n    var _parentId = _currentPromiseId.length > 0 ? _currentPromiseId[_currentPromiseId.length - 1] : undefined;\r\n    var _handled = false;\r\n    var _unHandledRejectionHandler = null;\r\n    var _thePromise;\r\n    // https://tc39.es/ecma262/#sec-promise.prototype.then\r\n    function _then(onResolved, onRejected) {\r\n        try {\r\n            _currentPromiseId.push(_id);\r\n            _handled = true;\r\n            _unHandledRejectionHandler && _unHandledRejectionHandler.cancel();\r\n            _unHandledRejectionHandler = null;\r\n            var thenPromise = newPromise(function (resolve, reject) {\r\n                //#ifdef DEBUG\r\n                //#:(!DEBUG) _debugLog(_toString(), _getCaller(\"_then\", 7));\r\n                //#endif\r\n                // Queue the new promise returned to be resolved or rejected\r\n                // when this promise settles.\r\n                _queue.push(function () {\r\n                    // https://tc39.es/ecma262/#sec-newpromisereactionjob\r\n                    //let value: any;\r\n                    try {\r\n                        // First call the onFulfilled or onRejected handler, on the settled value\r\n                        // of this promise. If the corresponding `handler` does not exist, simply\r\n                        // pass through the settled value.\r\n                        //#ifdef DEBUG\r\n                        //#:(!DEBUG) _debugLog(_toString(), \"Handling settled value \" + dumpFnObj(_settledValue));\r\n                        //#endif\r\n                        var handler = _state === 2 /* ePromiseState.Resolved */ ? onResolved : onRejected;\r\n                        var value = isUndefined(handler) ? _settledValue : (isFunction(handler) ? handler(_settledValue) : handler);\r\n                        //#ifdef DEBUG\r\n                        //#:(!DEBUG) _debugLog(_toString(), \"Handling Result \" + dumpFnObj(value));\r\n                        //#endif\r\n                        if (isPromiseLike(value)) {\r\n                            // The called handlers returned a new promise, so the chained promise\r\n                            // will follow the state of this promise.\r\n                            value.then(resolve, reject);\r\n                        }\r\n                        else if (handler) {\r\n                            // If we have a handler then chained promises are always \"resolved\" with the result returned\r\n                            resolve(value);\r\n                        }\r\n                        else if (_state === 3 /* ePromiseState.Rejected */) {\r\n                            // If this promise is rejected then the chained promise should be rejected\r\n                            // with either the settled value of this promise or the return value of the handler.\r\n                            reject(value);\r\n                        }\r\n                        else {\r\n                            // If this promise is fulfilled, then the chained promise is also fulfilled\r\n                            // with either the settled value of this promise or the return value of the handler.\r\n                            resolve(value);\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        reject(e);\r\n                    }\r\n                });\r\n                //#ifdef DEBUG\r\n                //#:(!DEBUG) _debugLog(_toString(), \"Added to Queue \" + _queue.length);\r\n                //#endif\r\n                // If this promise is already settled, then immediately process the callback we\r\n                // just added to the queue.\r\n                if (_hasResolved) {\r\n                    _processQueue();\r\n                }\r\n            }, additionalArgs);\r\n            //#ifdef DEBUG\r\n            //#:(!DEBUG) _debugLog(_toString(), \"Created -> \" + thenPromise.toString());\r\n            //#endif\r\n            return thenPromise;\r\n        }\r\n        finally {\r\n            _currentPromiseId.pop();\r\n        }\r\n    }\r\n    // https://tc39.es/ecma262/#sec-promise.prototype.catch\r\n    function _catch(onRejected) {\r\n        // Reuse then onRejected to support rejection\r\n        return _then(undefined, onRejected);\r\n    }\r\n    // https://tc39.es/ecma262/#sec-promise.prototype.finally\r\n    function _finally(onFinally) {\r\n        var thenFinally = onFinally;\r\n        var catchFinally = onFinally;\r\n        if (isFunction(onFinally)) {\r\n            thenFinally = function (value) {\r\n                onFinally && onFinally();\r\n                return value;\r\n            };\r\n            catchFinally = function (reason) {\r\n                onFinally && onFinally();\r\n                throw reason;\r\n            };\r\n        }\r\n        return _then(thenFinally, catchFinally);\r\n    }\r\n    function _strState() {\r\n        return STRING_STATES[_state];\r\n    }\r\n    function _processQueue() {\r\n        if (_queue.length > 0) {\r\n            // The onFulfilled and onRejected handlers must be called asynchronously. Thus,\r\n            // we make a copy of the queue and work on it once the current call stack unwinds.\r\n            var pending = _queue.slice();\r\n            _queue = [];\r\n            //#ifdef DEBUG\r\n            //#:(!DEBUG) _debugLog(_toString(), \"Processing queue \" + pending.length);\r\n            //#endif\r\n            _handled = true;\r\n            _unHandledRejectionHandler && _unHandledRejectionHandler.cancel();\r\n            _unHandledRejectionHandler = null;\r\n            processor(pending);\r\n            //#ifdef DEBUG\r\n            //#:(!DEBUG) _debugLog(_toString(), \"Processing done\");\r\n            //#endif\r\n        }\r\n        else {\r\n            //#ifdef DEBUG\r\n            //#:(!DEBUG) _debugLog(_toString(), \"Empty Processing queue \");\r\n            //#endif\r\n        }\r\n    }\r\n    function _createSettleIfFn(newState, allowState) {\r\n        return function (theValue) {\r\n            if (_state === allowState) {\r\n                if (newState === 2 /* ePromiseState.Resolved */ && isPromiseLike(theValue)) {\r\n                    _state = 1 /* ePromiseState.Resolving */;\r\n                    //#ifdef DEBUG\r\n                    //#:(!DEBUG) _debugLog(_toString(), \"Resolving\");\r\n                    //#endif\r\n                    theValue.then(_createSettleIfFn(2 /* ePromiseState.Resolved */, 1 /* ePromiseState.Resolving */), _createSettleIfFn(3 /* ePromiseState.Rejected */, 1 /* ePromiseState.Resolving */));\r\n                    return;\r\n                }\r\n                _state = newState;\r\n                _hasResolved = true;\r\n                _settledValue = theValue;\r\n                //#ifdef DEBUG\r\n                //#:(!DEBUG) _debugLog(_toString(), _strState());\r\n                //#endif\r\n                _processQueue();\r\n                if (!_handled && newState === 3 /* ePromiseState.Rejected */ && !_unHandledRejectionHandler) {\r\n                    //#ifdef DEBUG\r\n                    //#:(!DEBUG) _debugLog(_toString(), \"Setting up unhandled rejection\");\r\n                    //#endif\r\n                    _unHandledRejectionHandler = scheduleTimeout(_notifyUnhandledRejection, _unhandledRejectionTimeout);\r\n                }\r\n            }\r\n            else {\r\n                //#ifdef DEBUG\r\n                //#:(!DEBUG) _debugLog(_toString(), \"Already \" + _strState());\r\n                //#endif\r\n            }\r\n        };\r\n    }\r\n    function _notifyUnhandledRejection() {\r\n        if (!_handled) {\r\n            // Mark as handled so we don't keep notifying\r\n            _handled = true;\r\n            if (isNode()) {\r\n                //#ifdef DEBUG\r\n                //#:(!DEBUG) _debugLog(_toString(), \"Emitting \" + NODE_UNHANDLED_REJECTION);\r\n                //#endif\r\n                process.emit(NODE_UNHANDLED_REJECTION, _settledValue, _thePromise);\r\n            }\r\n            else {\r\n                var gbl = getWindow() || getGlobal();\r\n                !_hasPromiseRejectionEvent && (_hasPromiseRejectionEvent = createCachedValue(safe((getInst), [STR_PROMISE + \"RejectionEvent\"]).v));\r\n                //#ifdef DEBUG\r\n                //#:(!DEBUG) _debugLog(_toString(), \"Emitting \" + UNHANDLED_REJECTION);\r\n                //#endif\r\n                emitEvent(gbl, UNHANDLED_REJECTION, function (theEvt) {\r\n                    objDefine(theEvt, \"promise\", { g: function () { return _thePromise; } });\r\n                    theEvt.reason = _settledValue;\r\n                    return theEvt;\r\n                }, !!_hasPromiseRejectionEvent.v);\r\n            }\r\n        }\r\n    }\r\n    _thePromise = {\r\n        then: _then,\r\n        \"catch\": _catch,\r\n        finally: _finally\r\n    };\r\n    objDefineProp(_thePromise, \"state\", {\r\n        get: _strState\r\n    });\r\n    if (_promiseDebugEnabled) {\r\n        // eslint-disable-next-line brace-style\r\n        _addDebugState(_thePromise, _strState, function () { return objToString(_settledValue); }, function () { return _handled; });\r\n    }\r\n    if (hasSymbol()) {\r\n        _thePromise[getKnownSymbol(11 /* WellKnownSymbols.toStringTag */)] = \"IPromise\";\r\n    }\r\n    var createStack;\r\n    //#if DEBUG\r\n    //#:(!{DEBUG}) createStack = _getCaller(\"Created\", 5);\r\n    //#endif\r\n    function _toString() {\r\n        return \"IPromise\" + (_promiseDebugEnabled ? \"[\" + _id + (!isUndefined(_parentId) ? (\":\" + _parentId) : \"\") + \"]\" : \"\") + \" \" + _strState() + (_hasResolved ? (\" - \" + dumpFnObj(_settledValue)) : \"\") + (createStack ? \" @ \" + createStack : \"\");\r\n    }\r\n    _thePromise.toString = _toString;\r\n    (function _initialize() {\r\n        if (!isFunction(executor)) {\r\n            throwTypeError(STR_PROMISE + \": executor is not a function - \" + dumpFnObj(executor));\r\n        }\r\n        var _rejectFn = _createSettleIfFn(3 /* ePromiseState.Rejected */, 0 /* ePromiseState.Pending */);\r\n        try {\r\n            //#ifdef DEBUG\r\n            //#:(!DEBUG) _debugLog(_toString(), \"Executing\");\r\n            //#endif\r\n            executor.call(_thePromise, _createSettleIfFn(2 /* ePromiseState.Resolved */, 0 /* ePromiseState.Pending */), _rejectFn);\r\n        }\r\n        catch (e) {\r\n            //#ifdef DEBUG\r\n            //#:(!DEBUG) _debugLog(_toString(), \"Exception thrown: \" + dumpFnObj(e));\r\n            //#endif\r\n            _rejectFn(e);\r\n        }\r\n        //#ifdef DEBUG\r\n        //#:(!DEBUG) _debugLog(_toString(), \"~Executing\");\r\n        //#endif\r\n    })();\r\n    //#ifdef DEBUG\r\n    //#:(!DEBUG) _debugLog(_toString(), \"Returning\");\r\n    //#endif\r\n    return _thePromise;\r\n}\r\n/**\r\n * @ignore\r\n * @internal\r\n * Returns a function which when called will return a new Promise object that resolves to an array of the\r\n * results from the input promises. The returned promise will resolve when all of the inputs' promises have\r\n * resolved, or if the input contains no promises. It rejects immediately upon any of the input promises\r\n * rejected or non-promises throwing an error, and will reject with this first rejection message / error.\r\n * @param newPromise - The delegate function used to create a new promise object the new promise instance.\r\n * @returns A function to create a promise that will be resolved when all arguments are resolved.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function _createAllPromise(newPromise) {\r\n    return function (input) {\r\n        var additionalArgs = arrSlice(arguments, 1);\r\n        return newPromise(function (resolve, reject) {\r\n            try {\r\n                var values_1 = [];\r\n                var pending_1 = 1; // Prefix to 1 so we finish iterating over all of the input promises first\r\n                iterForOf(input, function (item, idx) {\r\n                    if (item) {\r\n                        pending_1++;\r\n                        doAwait(item, function (value) {\r\n                            // Set the result values\r\n                            values_1[idx] = value;\r\n                            if (--pending_1 === 0) {\r\n                                resolve(values_1);\r\n                            }\r\n                        }, reject);\r\n                    }\r\n                });\r\n                // Now decrement the pending so that we finish correctly\r\n                pending_1--;\r\n                if (pending_1 === 0) {\r\n                    // All promises were either resolved or where not a promise\r\n                    resolve(values_1);\r\n                }\r\n            }\r\n            catch (e) {\r\n                reject(e);\r\n            }\r\n        }, additionalArgs);\r\n    };\r\n}\r\n/**\r\n * @ignore\r\n * @internal\r\n * The createResolvedPromise returns a PromiseLike object that is resolved with a given value. If the value is\r\n * PromiseLike (i.e. has a \"then\" method), the returned promise will \"follow\" that thenable, adopting its eventual\r\n * state; otherwise the returned promise will be fulfilled with the value. This function flattens nested layers\r\n * of promise-like objects (e.g. a promise that resolves to a promise that resolves to something) into a single layer.\r\n * @param newPromise - The delegate function used to create a new promise object\r\n * @param value Argument to be resolved by this Promise. Can also be a Promise or a thenable to resolve.\r\n * @param additionalArgs - Any additional arguments that should be passed to the delegate to assist with the creation of\r\n * the new promise instance.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function _createResolvedPromise(newPromise) {\r\n    return function (value) {\r\n        var additionalArgs = arrSlice(arguments, 1);\r\n        if (isPromiseLike(value)) {\r\n            return value;\r\n        }\r\n        return newPromise(function (resolve) {\r\n            //#ifdef DEBUG\r\n            //#:(!DEBUG) _debugLog(String(this), \"Resolving Promise\");\r\n            //#endif\r\n            resolve(value);\r\n        }, additionalArgs);\r\n    };\r\n}\r\n/**\r\n * @ignore\r\n * @internal\r\n * Return a promise like object that is rejected with the given reason.\r\n * @param newPromise - The delegate function used to create a new promise object\r\n * @param reason - The rejection reason\r\n * @param additionalArgs - Any additional arguments that should be passed to the delegate to assist with the creation of\r\n * the new promise instance.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function _createRejectedPromise(newPromise) {\r\n    return function (reason) {\r\n        var additionalArgs = arrSlice(arguments, 1);\r\n        return newPromise(function (_resolve, reject) {\r\n            //#ifdef DEBUG\r\n            //#:(!DEBUG) _debugLog(String(this), \"Rejecting Promise\");\r\n            //#endif\r\n            reject(reason);\r\n        }, additionalArgs);\r\n    };\r\n}\r\n/**\r\n * @ignore\r\n * @internal\r\n * @since 0.5.0\r\n * Returns a function which when called will return a new Promise object that resolves to an array of\r\n * IPromiseResults from the input promises. The returned promise will resolve when all of the inputs'\r\n * promises have resolved or rejected, or if the input contains no promises. It will resolve only after\r\n * all input promises have been fulfilled (resolve or rejected).\r\n * @param newPromise - The delegate function used to create a new promise object the new promise instance.\r\n * @returns A function to create a promise that will be resolved when all arguments are resolved.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function _createAllSettledPromise(newPromise) {\r\n    var _args = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        _args[_i - 1] = arguments[_i];\r\n    }\r\n    return createCachedValue(function (input) {\r\n        var _args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            _args[_i - 1] = arguments[_i];\r\n        }\r\n        var additionalArgs = arrSlice(arguments, 1);\r\n        return newPromise(function (resolve, reject) {\r\n            var values = [];\r\n            var pending = 1; // Prefix to 1 so we finish iterating over all of the input promises first\r\n            function processItem(item, idx) {\r\n                pending++;\r\n                doAwaitResponse(item, function (value) {\r\n                    if (value.rejected) {\r\n                        values[idx] = {\r\n                            status: REJECTED,\r\n                            reason: value.reason\r\n                        };\r\n                    }\r\n                    else {\r\n                        values[idx] = {\r\n                            status: \"fulfilled\",\r\n                            value: value.value\r\n                        };\r\n                    }\r\n                    if (--pending === 0) {\r\n                        resolve(values);\r\n                    }\r\n                });\r\n            }\r\n            try {\r\n                if (isArray(input)) {\r\n                    arrForEach(input, processItem);\r\n                }\r\n                else if (isIterable(input)) {\r\n                    iterForOf(input, processItem);\r\n                }\r\n                else {\r\n                    throwTypeError(\"Input is not an iterable\");\r\n                }\r\n                // Now decrement the pending so that we finish correctly\r\n                pending--;\r\n                if (pending === 0) {\r\n                    // All promises were either resolved or where not a promise\r\n                    resolve(values);\r\n                }\r\n            }\r\n            catch (e) {\r\n                reject(e);\r\n            }\r\n        }, additionalArgs);\r\n    });\r\n}\r\n/**\r\n * @ignore\r\n * @internal\r\n * @since 0.5.0\r\n * Returns a function takes an iterable of promises as input and returns a single Promise.\r\n * This returned promise settles with the eventual state of the first promise that settles.\r\n * @description The returned promise is one of the promise concurrency methods. It's useful when you want\r\n * the first async task to complete, but do not care about its eventual state (i.e. it can either succeed\r\n * or fail).\r\n * @param newPromise - The delegate function used to create a new promise object the new promise instance.\r\n * @returns A function to create a promise that will resolve when the first promise to settle is fulfilled,\r\n * and rejects if the first promise to settle is rejected. The returned promise remains pending forever\r\n * if the iterable passed is empty. If the iterable passed is non-empty but contains no pending promises,\r\n * the returned promise is still settled.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function _createRacePromise(newPromise) {\r\n    var _args = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        _args[_i - 1] = arguments[_i];\r\n    }\r\n    return createCachedValue(function (input) {\r\n        var _args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            _args[_i - 1] = arguments[_i];\r\n        }\r\n        var additionalArgs = arrSlice(arguments, 1);\r\n        return newPromise(function (resolve, reject) {\r\n            var isDone = false;\r\n            function processItem(item) {\r\n                doAwaitResponse(item, function (value) {\r\n                    if (!isDone) {\r\n                        isDone = true;\r\n                        if (value.rejected) {\r\n                            reject(value.reason);\r\n                        }\r\n                        else {\r\n                            resolve(value.value);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            try {\r\n                if (isArray(input)) {\r\n                    arrForEach(input, processItem);\r\n                }\r\n                else if (isIterable(input)) {\r\n                    iterForOf(input, processItem);\r\n                }\r\n                else {\r\n                    throwTypeError(\"Input is not an iterable\");\r\n                }\r\n            }\r\n            catch (e) {\r\n                reject(e);\r\n            }\r\n        }, additionalArgs);\r\n    });\r\n}\r\n/**\r\n * @internal\r\n * @ignore\r\n * @since 0.5.0\r\n * Returns a function takes an iterable of promises as input and returns a single Promise.\r\n * This returned promise fulfills when any of the input's promises fulfills, with this first fulfillment\r\n * value. It rejects when all of the input's promises reject (including when an empty iterable is passed),\r\n * with an AggregateError containing an array of rejection reasons.\r\n * @param newPromise - The delegate function used to create a new promise object the new promise instance.\r\n * @returns A function to create a promise that will resolve when the any of the input's promises fulfills,\r\n * with this first fulfillment value. It rejects when all of the input's promises reject (including when\r\n * an empty iterable is passed), with an AggregateError containing an array of rejection reasons.\r\n */\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function _createAnyPromise(newPromise) {\r\n    var _args = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        _args[_i - 1] = arguments[_i];\r\n    }\r\n    return createCachedValue(function (input) {\r\n        var _args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            _args[_i - 1] = arguments[_i];\r\n        }\r\n        var additionalArgs = arrSlice(arguments, 1);\r\n        return newPromise(function (resolve, reject) {\r\n            var theErros = [];\r\n            var pending = 1; // Prefix to 1 so we finish iterating over all of the input promises first\r\n            var isDone = false;\r\n            function processItem(item, idx) {\r\n                pending++;\r\n                doAwaitResponse(item, function (value) {\r\n                    if (!value.rejected) {\r\n                        isDone = true;\r\n                        resolve(value.value);\r\n                        return;\r\n                    }\r\n                    else {\r\n                        theErros[idx] = value.reason;\r\n                    }\r\n                    if (--pending === 0 && !isDone) {\r\n                        reject(_createAggregationError(theErros));\r\n                    }\r\n                });\r\n            }\r\n            try {\r\n                if (isArray(input)) {\r\n                    arrForEach(input, processItem);\r\n                }\r\n                else if (isIterable(input)) {\r\n                    iterForOf(input, processItem);\r\n                }\r\n                else {\r\n                    throwTypeError(\"Input is not an iterable\");\r\n                }\r\n                // Now decrement the pending so that we finish correctly\r\n                pending--;\r\n                if (pending === 0 && !isDone) {\r\n                    // All promises were either resolved or where not a promise\r\n                    reject(_createAggregationError(theErros));\r\n                }\r\n            }\r\n            catch (e) {\r\n                reject(e);\r\n            }\r\n        }, additionalArgs);\r\n    });\r\n}\r\n//# sourceMappingURL=base.js.map","/*\r\n * @nevware21/ts-async\r\n * https://github.com/nevware21/ts-async\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\nimport { arrForEach, isNumber, scheduleIdleCallback, scheduleTimeout } from \"@nevware21/ts-utils\";\r\n/**\r\n * @internal\r\n * @ignore\r\n * Return an item processor that processes all of the pending items synchronously\r\n * @return An item processor\r\n */\r\nexport function syncItemProcessor(pending) {\r\n    arrForEach(pending, function (fn) {\r\n        try {\r\n            fn();\r\n        }\r\n        catch (e) {\r\n            // Don't let 1 failing handler break all others\r\n            // TODO: Add some form of error reporting (i.e. Call any registered JS error handler so the error is reported)\r\n        }\r\n    });\r\n}\r\n/**\r\n * @internal\r\n * @ignore\r\n * Return an item processor that processes all of the pending items asynchronously using the optional timeout.\r\n * @param timeout - Optional timeout to wait before processing the items, defaults to zero.\r\n * @return An item processor\r\n */\r\nexport function timeoutItemProcessor(timeout) {\r\n    var callbackTimeout = isNumber(timeout) ? timeout : 0;\r\n    return function (pending) {\r\n        scheduleTimeout(function () {\r\n            syncItemProcessor(pending);\r\n        }, callbackTimeout);\r\n    };\r\n}\r\n/**\r\n * @internal\r\n * @ignore\r\n * Return an item processor that processes all of the pending items using an idle callback (if available) or based on\r\n * a timeout (when `requestIdenCallback` is not supported) using the optional timeout.\r\n * @param timeout - Optional timeout to wait before processing the items, defaults to zero.\r\n * @return An item processor\r\n */\r\nexport function idleItemProcessor(timeout) {\r\n    var options;\r\n    if (timeout >= 0) {\r\n        options = {\r\n            timeout: +timeout\r\n        };\r\n    }\r\n    return function (pending) {\r\n        scheduleIdleCallback(function (deadline) {\r\n            syncItemProcessor(pending);\r\n        }, options);\r\n    };\r\n}\r\n//# sourceMappingURL=itemProcessor.js.map","/*\r\n * @nevware21/ts-async\r\n * https://github.com/nevware21/ts-async\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\nimport { _createAllPromise, _createAllSettledPromise, _createAnyPromise, _createPromise, _createRacePromise, _createRejectedPromise, _createResolvedPromise } from \"./base\";\r\nimport { timeoutItemProcessor } from \"./itemProcessor\";\r\nvar _allAsyncSettledCreator;\r\nvar _raceAsyncCreator;\r\nvar _anyAsyncCreator;\r\n/**\r\n * Creates an asynchronous Promise instance that when resolved or rejected will execute it's pending chained operations\r\n * __asynchronously__ using the optional provided timeout value to schedule when the chained items will be ececuted.\r\n * @group Async\r\n * @group Promise\r\n * @param executor - The function to be executed during the creation of the promise. Any errors thrown in the executor will\r\n * cause the promise to be rejected. The return value of the executor is always ignored\r\n * @param timeout - Optional timeout to wait before processing the items, defaults to zero.\r\n */\r\nexport function createAsyncPromise(executor, timeout) {\r\n    return _createPromise(createAsyncPromise, timeoutItemProcessor(timeout), executor, timeout);\r\n}\r\n/**\r\n * Returns a single asynchronous Promise instance that resolves to an array of the results from the input promises.\r\n * This returned promise will resolve and execute it's pending chained operations __asynchronously__ using the optional\r\n * provided timeout value to schedule when the chained items will be executed, or if the input contains no promises.\r\n * It rejects immediately upon any of the input promises rejected or non-promises throwing an error,\r\n * and will reject with this first rejection message / error.\r\n * When resolved or rejected any additional chained operations will execute __asynchronously__ using the optional\r\n * timeout value to schedul when the chained item will be executed (eg. `then()`; `catch()`; `finally()`).\r\n * @group Async\r\n * @group Promise\r\n * @group All\r\n * @param input - The array of promises to wait to be resolved / rejected before resolving or rejecting the new promise\r\n * @param timeout - Optional timeout to wait before processing the items, defaults to zero.\r\n * @returns\r\n * <ul>\r\n * <li> An already resolved `Promise`, if the input passed is empty.\r\n * <li> A pending `Promise` in all other cases. This returned promise is then resolved/rejected __synchronously__\r\n * (as soon as the pending items is empty) when all the promises in the given input have resolved, or if any of the\r\n * promises reject.\r\n * </ul>\r\n */\r\nexport var createAsyncAllPromise = /*#__PURE__*/ _createAllPromise(createAsyncPromise);\r\n/**\r\n * Returns a single asynchronous Promise instance that is already resolved with the given value. If the value passed is\r\n * a promise then that promise is returned instead of creating a new asynchronous promise instance.\r\n * If a new instance is returned then any chained operations will execute __asynchronously__ using the optional\r\n * timeout value to schedule when the chained items will be executed.(eg. `then()`; `finally()`).\r\n * @group Async\r\n * @group Promise\r\n * @group Resolved\r\n * @param value - The value to be used by this `Promise`. Can also be a `Promise` or a thenable to resolve.\r\n * @param timeout - Optional timeout to wait before processing the items, defaults to zero.\r\n */\r\nexport var createAsyncResolvedPromise = /*#__PURE__*/ _createResolvedPromise(createAsyncPromise);\r\n/**\r\n * Returns a single asynchronous Promise instance that is already rejected with the given reason.\r\n * Any chained operations will execute __asynchronously__ using the optional timeout value to schedule\r\n * when then chained items will be executed. (eg. `catch()`; `finally()`).\r\n * @group Async\r\n * @group Promise\r\n * @group Rejected\r\n * @param reason - The rejection reason\r\n * @param timeout - Optional timeout to wait before processing the items, defaults to zero.\r\n */\r\nexport var createAsyncRejectedPromise = /*#__PURE__*/ _createRejectedPromise(createAsyncPromise);\r\n/**\r\n * Returns a single Promise instance that resolves to an array of the results from the input promises.\r\n * This returned promise will resolve and execute it's pending chained operations based on the\r\n * {@link createAsyncPromise Aasynchronous} promise implementation. Any chained operations will execute\r\n * __asynchronously__  when the final operation pending promises have resolved, or if the input contains\r\n * no promises. It will resolve only after all of the input promises have either resolved or rejected,\r\n * and will resolve with an array of {@link IPromiseResult } objects that each describe the outcome of\r\n * each promise.\r\n * @since 0.5.0\r\n * @group Async\r\n * @group Promise\r\n * @group AllSettled\r\n * @param input - An array of promises to wait to be resolved / rejected before resolving or rejecting the new promise\r\n * @param timeout - Optional timeout to wait before processing the items, defaults to zero, only used when Native promises are not available.\r\n * @returns A pending `Promise` that will resolve to an array of {@link IPromiseResult } objects that each describe the outcome of each promise.\r\n *\r\n * @example\r\n * ```ts\r\n * const promises = [\r\n *   createResolvedPromise(1),\r\n *   createResolvedPromise(2),\r\n *   createResolvedPromise(3),\r\n *   createRejectedPromise(\"error\"),\r\n * ];\r\n *\r\n * const results = await createAllSettledPromise(promises);\r\n *\r\n * // results is:\r\n * // [\r\n * //   { status: \"fulfilled\", value: 1 },\r\n * //   { status: \"fulfilled\", value: 2 },\r\n * //   { status: \"fulfilled\", value: 3 },\r\n * //   { status: \"rejected\", reason: \"error\" }\r\n * // ]\r\n * ```\r\n */\r\nexport function createAsyncAllSettledPromise(input, timeout) {\r\n    !_allAsyncSettledCreator && (_allAsyncSettledCreator = _createAllSettledPromise(createAsyncPromise));\r\n    return _allAsyncSettledCreator.v(input, timeout);\r\n}\r\n/**\r\n * The `createAsyncRacePromise` method takes an array of promises as input and returns a single Promise. This returned promise\r\n * settles with the eventual state of the first promise that settles.\r\n * @description The `createAsyncRacePromise` method is one of the promise concurrency methods. It's useful when you want the first\r\n * async task to complete, but do not care about its eventual state (i.e. it can either succeed or fail).\r\n * If the iterable contains one or more non-promise values and/or an already settled promise, then Promise.race() will settle to\r\n * the first of these values found in the iterable.\r\n * @since 0.5.0\r\n * @group Async\r\n * @group Promise\r\n * @group Race\r\n * @param values - An the array of promises.\r\n * @param timeout - Optional timeout to wait before processing the items, defaults to zero, only used when Native promises are not available.\r\n * @returns A Promise that settles with the eventual state of the first promise in the iterable to settle. In other words, it fulfills if the\r\n * first promise to settle is fulfilled, and rejects if the first promise to settle is rejected. The returned promise remains pending forever\r\n * if the iterable passed is empty. If the iterable passed is non-empty but contains no pending promises, the returned promise is still\r\n * asynchronously settled.\r\n */\r\nexport function createAsyncRacePromise(values, timeout) {\r\n    !_raceAsyncCreator && (_raceAsyncCreator = _createRacePromise(createAsyncPromise));\r\n    return _raceAsyncCreator.v(values, timeout);\r\n}\r\n/**\r\n * The `createAsyncAnyPromise` method takes an array of promises as input and returns a single Promise.\r\n * This returned promise fulfills when any of the input's promises fulfills, with this first fulfillment value.\r\n * It rejects when all of the input's promises reject (including when an empty iterable is passed), with an\r\n * AggregateError containing an array of rejection reasons.\r\n * @since 0.5.0\r\n * @group Async\r\n * @group Promise\r\n * @group Any\r\n * @param values - An Array promises.\r\n * @param timeout - Optional timeout to wait before processing the items, defaults to zero, only used when Native promises are not available.\r\n * @returns A new Promise that is:\r\n * - Already rejected, if the iterable passed is empty.\r\n * - Asynchronously fulfilled, when any of the promises in the given iterable fulfills. The fulfillment value\r\n * is the fulfillment value of the first promise that was fulfilled.\r\n * - Asynchronously rejected, when all of the promises in the given iterable reject. The rejection reason is\r\n * an AggregateError containing an array of rejection reasons in its errors property. The errors are in the\r\n * order of the promises passed, regardless of completion order. If the iterable passed is non-empty but\r\n * contains no pending promises, the returned promise is still asynchronously (instead of synchronously)\r\n * rejected.\r\n */\r\nexport function createAsyncAnyPromise(values, timeout) {\r\n    !_anyAsyncCreator && (_anyAsyncCreator = _createAnyPromise(createAsyncPromise));\r\n    return _anyAsyncCreator.v(values, timeout);\r\n}\r\n//# sourceMappingURL=asyncPromise.js.map","/*\r\n * @nevware21/ts-async\r\n * https://github.com/nevware21/ts-async\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\nimport { createAsyncPromise } from \"./asyncPromise\";\r\nimport { _createAllPromise, _createAllSettledPromise, _createAnyPromise, _createRacePromise, _createRejectedPromise, _createResolvedPromise } from \"./base\";\r\nimport { STRING_STATES } from \"../internal/state\";\r\nimport { dumpObj, isFunction, objDefineProp, throwTypeError, getInst, createCachedValue, safe } from \"@nevware21/ts-utils\";\r\nimport { STR_PROMISE } from \"../internal/constants\";\r\n/**\r\n * @internal\r\n * @ignore\r\n * Flag to determine if the native Promise class should be used if available, used for testing purposes.\r\n */\r\nvar _useNative = true;\r\n/**\r\n * @internal\r\n * @ignore\r\n * Cached value for the native Promise class\r\n */\r\nvar _promiseCls;\r\n/**\r\n * @internal\r\n * @ignore\r\n * Cached value for the `Promise.all` method\r\n */\r\nvar _allCreator;\r\n/**\r\n * @internal\r\n * @ignore\r\n * Cached value for the `Promise.allSettled` method\r\n */\r\nvar _allNativeSettledCreator;\r\n/**\r\n * @internal\r\n * @ignore\r\n * Cached value for the `Promise.race` method\r\n */\r\nvar _raceNativeCreator;\r\n/**\r\n * @internal\r\n * @ignore\r\n * Cached value for the `Promise.any` method\r\n */\r\nvar _anyNativeCreator;\r\n/**\r\n * @internal\r\n * @ignore\r\n * Test Hook function to clear the cached values and set whether to use the native Promise class\r\n * @param useNative\r\n */\r\nexport function _clearPromiseCache(useNative) {\r\n    //#ifdef _DEBUG\r\n    //#:(!_DEBUG)     _useNative = !!useNative;\r\n    //#:(!_DEBUG)     _promiseCls = null as any;\r\n    //#:(!_DEBUG)     _allCreator = null as any;\r\n    //#:(!_DEBUG)     _allNativeSettledCreator = null as any;\r\n    //#:(!_DEBUG)     _raceNativeCreator = null as any;\r\n    //#:(!_DEBUG)     _anyNativeCreator = null as any;\r\n    //#endif\r\n}\r\n/*#__NO_SIDE_EFFECTS__*/\r\nexport function _createNativePromiseHelper(name, func) {\r\n    !_promiseCls && (_promiseCls = createCachedValue((_useNative && safe(getInst, [STR_PROMISE]).v) || null));\r\n    if (_promiseCls.v && _promiseCls.v[name]) {\r\n        return createCachedValue(function (input, timeout) {\r\n            return createNativePromise(function (resolve, reject) {\r\n                _promiseCls.v[name](input).then(resolve, reject);\r\n            });\r\n        });\r\n    }\r\n    return func();\r\n}\r\n/**\r\n * Creates a Promise instance that when resolved or rejected will execute it's pending chained operations using the\r\n * available native Promise implementation.\r\n * If runtime does not support native `Promise` class (or no polyfill is available) this function will fallback to using\r\n * `createAsyncPromise` which will resolve them __asynchronously__ using the optional provided timeout value to\r\n * schedule when the chained items will be executed.\r\n * @group Alias\r\n * @group Promise\r\n * @group Native\r\n * @param executor - The function to be executed during the creation of the promise. Any errors thrown in the executor will\r\n * cause the promise to be rejected. The return value of the executor is always ignored\r\n * @param timeout - Optional timeout to wait before processing the items, defaults to zero.\r\n */\r\nexport function createNativePromise(executor, timeout) {\r\n    !_promiseCls && (_promiseCls = createCachedValue((_useNative && safe(getInst, [STR_PROMISE]).v) || null));\r\n    var PrmCls = _promiseCls.v;\r\n    if (!PrmCls) {\r\n        return createAsyncPromise(executor);\r\n    }\r\n    if (!isFunction(executor)) {\r\n        throwTypeError(STR_PROMISE + \": executor is not a function - \" + dumpObj(executor));\r\n    }\r\n    var _state = 0 /* ePromiseState.Pending */;\r\n    function _strState() {\r\n        return STRING_STATES[_state];\r\n    }\r\n    var thePromise = new PrmCls(function (resolve, reject) {\r\n        function _resolve(value) {\r\n            _state = 2 /* ePromiseState.Resolved */;\r\n            resolve(value);\r\n        }\r\n        function _reject(reason) {\r\n            _state = 3 /* ePromiseState.Rejected */;\r\n            reject(reason);\r\n        }\r\n        executor(_resolve, _reject);\r\n    });\r\n    objDefineProp(thePromise, \"state\", {\r\n        get: _strState\r\n    });\r\n    return thePromise;\r\n}\r\n/**\r\n * Returns a single asynchronous Promise instance that resolves to an array of the results from the input promises.\r\n * This returned promise will resolve and execute it's pending chained operations __asynchronously__ using the optional\r\n * provided timeout value to schedule when the chained items will be executed, or if the input contains no promises.\r\n * It rejects immediately upon any of the input promises rejected or non-promises throwing an error,\r\n * and will reject with this first rejection message / error.\r\n * If the runtime doesn't support the Promise.all it will fallback back to an asynchronous Promise implementation.\r\n * @group Alias\r\n * @group Promise\r\n * @group All\r\n * @group Native\r\n * @param input - The array of promises to wait to be resolved / rejected before resolving or rejecting the new promise\r\n * @param timeout\r\n * @returns\r\n * <ul>\r\n * <li> An already resolved `Promise`, if the input passed is empty.\r\n * <li> A pending `Promise` in all other cases. This returned promise is then resolved/rejected __synchronously__\r\n * (as soon as the pending items is empty) when all the promises in the given input have resolved, or if any of the\r\n * promises reject.\r\n * </ul>\r\n */\r\nexport function createNativeAllPromise(input, timeout) {\r\n    !_allCreator && (_allCreator = _createNativePromiseHelper(\"all\", function () { return createCachedValue(_createAllPromise(createNativePromise)); }));\r\n    return _allCreator.v(input, timeout);\r\n}\r\n/**\r\n * Returns a single asynchronous Promise instance that is already resolved with the given value. If the value passed is\r\n * a promise then that promise is returned instead of creating a new asynchronous promise instance.\r\n * If a new instance is returned then any chained operations will execute __asynchronously__ using the optional\r\n * timeout value to schedule when the chained items will be executed.(eg. `then()`; `finally()`).\r\n * @group Alias\r\n * @group Promise\r\n * @group Resolved\r\n * @group Native\r\n * @param value - The value to be used by this `Promise`. Can also be a `Promise` or a thenable to resolve.\r\n * @param timeout - Optional timeout to wait before processing the items, defaults to zero.\r\n */\r\nexport var createNativeResolvedPromise = /*#__PURE__*/ _createResolvedPromise(createNativePromise);\r\n/**\r\n * Returns a single asynchronous Promise instance that is already rejected with the given reason.\r\n * Any chained operations will execute __asynchronously__ using the optional timeout value to schedule\r\n * when then chained items will be executed. (eg. `catch()`; `finally()`).\r\n * @group Alias\r\n * @group Promise\r\n * @group Rejected\r\n * @group Native\r\n * @param reason - The rejection reason\r\n * @param timeout - Optional timeout to wait before processing the items, defaults to zero.\r\n */\r\nexport var createNativeRejectedPromise = /*#__PURE__*/ _createRejectedPromise(createNativePromise);\r\n/**\r\n * Returns a single asynchronous Promise instance that resolves to an array of the results from the input promises.\r\n * This returned promise will resolve and execute it's pending chained operations using {@link createNativePromise native}\r\n * environment promise implementation, if the runtime does not provide any native then the optional provided\r\n * timeout value will be used to schedule when the chained items will be executed or if the input contains no promises.\r\n * It will resolve only after all of the input promises have either resolved or rejected, and will resolve with an array\r\n * of {@link IPromiseResult } objects that each describe the outcome of each promise.\r\n * @since 0.5.0\r\n * @group Alias\r\n * @group Promise\r\n * @group AllSettled\r\n * @group Native\r\n * @param input - An array of promises to wait to be resolved / rejected before resolving or rejecting the new promise\r\n * @param timeout - Optional timeout to wait before processing the items, defaults to zero, only used when Native promises are not available.\r\n * @returns A pending `Promise` that will resolve to an array of {@link IPromiseResult } objects that each describe the outcome of each promise.\r\n *\r\n * @example\r\n * ```ts\r\n * const promises = [\r\n *   createNativeResolvedPromise(1),\r\n *   createNativeResolvedPromise(2),\r\n *   createNativeResolvedPromise(3),\r\n *   createNativeRejectedPromise(\"error\"),\r\n * ];\r\n *\r\n * const results = await createNativeAllSettledPromise(promises);\r\n *\r\n * // results is:\r\n * // [\r\n * //   { status: \"fulfilled\", value: 1 },\r\n * //   { status: \"fulfilled\", value: 2 },\r\n * //   { status: \"fulfilled\", value: 3 },\r\n * //   { status: \"rejected\", reason: \"error\" }\r\n * // ]\r\n * ```\r\n */\r\nexport function createNativeAllSettledPromise(input, timeout) {\r\n    !_allNativeSettledCreator && (_allNativeSettledCreator = _createNativePromiseHelper(\"allSettled\", function () { return _createAllSettledPromise(createNativePromise); }));\r\n    return _allNativeSettledCreator.v(input, timeout);\r\n}\r\n/**\r\n * The `createNativeRacePromise` method takes an array of promises as input and returns a single Promise. This returned promise\r\n * settles with the eventual state of the first promise that settles.\r\n * @description The `createNativeRacePromise` method is one of the promise concurrency methods. It's useful when you want the first\r\n * async task to complete, but do not care about its eventual state (i.e. it can either succeed or fail).\r\n * If the iterable contains one or more non-promise values and/or an already settled promise, then Promise.race() will settle to\r\n * the first of these values found in the iterable.\r\n * @since 0.5.0\r\n * @group Alias\r\n * @group Promise\r\n * @group Race\r\n * @group Native\r\n * @param values - An the array of promises.\r\n * @param timeout - Optional timeout to wait before processing the items, defaults to zero, only used when Native promises are not available.\r\n * @returns A Promise that settles with the eventual state of the first promise in the iterable to settle. In other words, it fulfills if the\r\n * first promise to settle is fulfilled, and rejects if the first promise to settle is rejected. The returned promise remains pending forever\r\n * if the iterable passed is empty. If the iterable passed is non-empty but contains no pending promises, the returned promise will settle\r\n * asynchronously.\r\n */\r\nexport function createNativeRacePromise(values, timeout) {\r\n    !_raceNativeCreator && (_raceNativeCreator = _createNativePromiseHelper(\"race\", function () { return _createRacePromise(createNativePromise); }));\r\n    return _raceNativeCreator.v(values, timeout);\r\n}\r\n/**\r\n * The `createNativeAnyPromise` method takes an array of promises as input and returns a single Promise.\r\n * This returned promise fulfills when any of the input's promises fulfills, with this first fulfillment value.\r\n * It rejects when all of the input's promises reject (including when an empty iterable is passed), with an\r\n * AggregateError containing an array of rejection reasons.\r\n * @since 0.5.0\r\n * @group Alias\r\n * @group Promise\r\n * @group Any\r\n * @group Native\r\n * @param values - An Array promises.\r\n * @param timeout - Optional timeout to wait before processing the items, defaults to zero, only used when Native promises are not available.\r\n * @returns A new Promise that is:\r\n * - Already rejected, if the iterable passed is empty.\r\n * - Asynchronously fulfilled, when any of the promises in the given iterable fulfills. The fulfillment value\r\n * is the fulfillment value of the first promise that was fulfilled.\r\n * - Asynchronously rejected, when all of the promises in the given iterable reject. The rejection reason is\r\n * an AggregateError containing an array of rejection reasons in its errors property. The errors are in the\r\n * order of the promises passed, regardless of completion order. If the iterable passed is non-empty but\r\n * contains no pending promises, the returned promise is still asynchronously (instead of synchronously)\r\n * rejected.\r\n */\r\nexport function createNativeAnyPromise(values, timeout) {\r\n    !_anyNativeCreator && (_anyNativeCreator = _createNativePromiseHelper(\"any\", function () { return _createAnyPromise(createNativePromise); }));\r\n    return _anyNativeCreator.v(values, timeout);\r\n}\r\n//# sourceMappingURL=nativePromise.js.map","/*\r\n * @nevware21/ts-async\r\n * https://github.com/nevware21/ts-async\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\nimport { _createAllPromise, _createAllSettledPromise, _createAnyPromise, _createPromise, _createRacePromise, _createRejectedPromise, _createResolvedPromise } from \"./base\";\r\nimport { syncItemProcessor } from \"./itemProcessor\";\r\nvar _allSyncSettledCreator;\r\nvar _raceSyncCreator;\r\nvar _anySyncCreator;\r\n/**\r\n * Creates a synchronous Promise instance that when resolved or rejected will execute it's pending chained operations\r\n * __synchronously__ in the same execution cycle as the operation that calls the `executors`, `resolve` or `reject` functions.\r\n *\r\n * @group Synchronous\r\n * @group Promise\r\n * @param executor - The function to be executed during the creation of the promise. Any errors thrown in the executor will\r\n * cause the promise to be rejected. The return value of the executor is always ignored\r\n */\r\nexport function createSyncPromise(executor) {\r\n    return _createPromise(createSyncPromise, syncItemProcessor, executor);\r\n}\r\n/**\r\n * Returns a single synchronous Promise instance that resolves to an array of the results from the input promises.\r\n * This returned promise will resolve and execute it's pending chained operations __synchronously__ in the same\r\n * execution cycle as the final operation pending promises have resolved, or if the input contains no promises.\r\n * It rejects immediately upon any of the input promises rejected or non-promises throwing an error,\r\n * and will reject with this first rejection message / error.\r\n * When resolved or rejected any additional chained operations will execute __synchronously__ at the point of\r\n * being added (eg. `then()`; `catch()`; `finally()`).\r\n * @group Synchronous\r\n * @group Promise\r\n * @group All\r\n * @param input - The array of promises to wait to be resolved / rejected before resolving or rejecting the new promise\r\n * @returns\r\n * <ul>\r\n * <li> An already resolved `Promise`, if the input passed is empty.\r\n * <li> A pending `Promise` in all other cases. This returned promise is then resolved/rejected __synchronously__\r\n * (as soon as the pending items is empty) when all the promises in the given input have resolved, or if any of the\r\n * promises reject.\r\n * </ul>\r\n */\r\nexport var createSyncAllPromise = /*#__PURE__*/ _createAllPromise(createSyncPromise);\r\n/**\r\n * Returns a single synchronous Promise instance that is already resolved with the given value. If the value passed is\r\n * a promise then that promise is returned instead of creating a new synchronous promise instance.\r\n * If a new instance is returned then any chained operations will execute __synchronously__ at the point of being\r\n * added (calling `then()`).\r\n * @group Synchronous\r\n * @group Promise\r\n * @group Resolved\r\n * @param value - The value to be used by this `Promise`. Can also be a `Promise` or a thenable to resolve.\r\n */\r\nexport var createSyncResolvedPromise = /*#__PURE__*/ _createResolvedPromise(createSyncPromise);\r\n/**\r\n * Returns a single synchronous Promise instance that is already rejected with the given reason.\r\n * Any chained operations will execute __synchronously__ at the point of being added (eg. `catch()`; `finally()`).\r\n * @group Synchronous\r\n * @group Promise\r\n * @group Rejected\r\n * @param reason - The rejection reason\r\n */\r\nexport var createSyncRejectedPromise = /*#__PURE__*/ _createRejectedPromise(createSyncPromise);\r\n/**\r\n * Returns a single Promise instance that resolves to an array of the results from the input promises.\r\n * This returned promise will resolve and execute it's pending chained operations based on the\r\n * {@link createSyncPromise synchronous} promise implementation. Any chained operations will execute\r\n * __synchronously__ in the same execution cycle as the final operation pending promises have resolved,\r\n * or if the input contains no promises. It will resolve only after all of the input promises have either\r\n * resolved or rejected, and will resolve with an array of {@link IPromiseResult } objects that each describe\r\n * the outcome of each promise.\r\n * @since 0.5.0\r\n * @group Synchronous\r\n * @group Promise\r\n * @group AllSettled\r\n * @param input - An array of promises to wait to be resolved / rejected before resolving or rejecting the new promise\r\n * @param timeout - Optional timeout to wait before processing the items, defaults to zero, only used when Native promises are not available.\r\n * @returns A pending `Promise` that will resolve to an array of {@link IPromiseResult } objects that each describe the outcome of each promise.\r\n *\r\n * @example\r\n * ```ts\r\n * const promises = [\r\n *   createResolvedPromise(1),\r\n *   createResolvedPromise(2),\r\n *   createResolvedPromise(3),\r\n *   createRejectedPromise(\"error\"),\r\n * ];\r\n *\r\n * const results = await createAllSettledPromise(promises);\r\n *\r\n * // results is:\r\n * // [\r\n * //   { status: \"fulfilled\", value: 1 },\r\n * //   { status: \"fulfilled\", value: 2 },\r\n * //   { status: \"fulfilled\", value: 3 },\r\n * //   { status: \"rejected\", reason: \"error\" }\r\n * // ]\r\n * ```\r\n */\r\nexport function createSyncAllSettledPromise(input, timeout) {\r\n    !_allSyncSettledCreator && (_allSyncSettledCreator = _createAllSettledPromise(createSyncPromise));\r\n    return _allSyncSettledCreator.v(input, timeout);\r\n}\r\n/**\r\n * The `createSyncRacePromise` method takes an array of promises as input and returns a single Promise. This returned promise\r\n * settles with the eventual state of the first promise that settles.\r\n * @description The `createSyncRacePromise` method is one of the promise concurrency methods. It's useful when you want the first\r\n * async task to complete, but do not care about its eventual state (i.e. it can either succeed or fail).\r\n * If the iterable contains one or more non-promise values and/or an already settled promise, then Promise.race() will settle to\r\n * the first of these values found in the iterable.\r\n * @since 0.5.0\r\n * @group Synchronous\r\n * @group Promise\r\n * @group Race\r\n * @param values - An the array of promises.\r\n * @param timeout - Optional timeout to wait before processing the items, defaults to zero, only used when Native promises are not available.\r\n * @returns A Promise that settles with the eventual state of the first promise in the iterable to settle. In other words, it fulfills if the\r\n * first promise to settle is fulfilled, and rejects if the first promise to settle is rejected. The returned promise remains pending forever\r\n * if the iterable passed is empty. If the iterable passed is non-empty but contains no pending promises, the returned promise will settle\r\n * synchronously.\r\n */\r\nexport function createSyncRacePromise(values, timeout) {\r\n    !_raceSyncCreator && (_raceSyncCreator = _createRacePromise(createSyncPromise));\r\n    return _raceSyncCreator.v(values, timeout);\r\n}\r\n/**\r\n * The `createSyncAnyPromise` method takes an array of promises as input and returns a single Promise.\r\n * This returned promise fulfills when any of the input's promises fulfills, with this first fulfillment value.\r\n * It rejects when all of the input's promises reject (including when an empty iterable is passed), with an\r\n * AggregateError containing an array of rejection reasons.\r\n * @since 0.5.0\r\n * @group Synchronous\r\n * @group Promise\r\n * @group Any\r\n * @param values - An Array promises.\r\n * @param timeout - Optional timeout to wait before processing the items, defaults to zero, only used when Native promises are not available.\r\n * @returns A new Promise that is:\r\n * - Already rejected, if the iterable passed is empty.\r\n * - Asynchronously fulfilled, when any of the promises in the given iterable fulfills. The fulfillment value\r\n * is the fulfillment value of the first promise that was fulfilled.\r\n * - Asynchronously rejected, when all of the promises in the given iterable reject. The rejection reason is\r\n * an AggregateError containing an array of rejection reasons in its errors property. The errors are in the\r\n * order of the promises passed, regardless of completion order. If the iterable passed is non-empty but\r\n * contains no pending promises, the returned promise is still asynchronously (instead of synchronously)\r\n * rejected.\r\n */\r\nexport function createSyncAnyPromise(values, timeout) {\r\n    !_anySyncCreator && (_anySyncCreator = _createAnyPromise(createSyncPromise));\r\n    return _anySyncCreator.v(values, timeout);\r\n}\r\n//# sourceMappingURL=syncPromise.js.map","/*\r\n * @nevware21/ts-async\r\n * https://github.com/nevware21/ts-async\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\nimport { isUndefined } from \"@nevware21/ts-utils\";\r\nimport { _createAllPromise, _createAllSettledPromise, _createAnyPromise, _createPromise, _createRacePromise, _createRejectedPromise, _createResolvedPromise } from \"./base\";\r\nimport { idleItemProcessor } from \"./itemProcessor\";\r\nvar _defaultIdleTimeout;\r\nvar _allIdleSettledCreator;\r\nvar _raceIdleCreator;\r\nvar _anyIdleCreator;\r\n/**\r\n * Sets the global default idle timeout / deadline to use when no timeout is passed during promise creation.\r\n * @param idleDeadline - Specifies the time in milliseconds to use as the idle timeout / deadline by when any\r\n * outstanding chained items should be executed.\r\n * @group Idle\r\n */\r\nexport function setDefaultIdlePromiseTimeout(idleDeadline) {\r\n    _defaultIdleTimeout = idleDeadline;\r\n}\r\n/**\r\n * @deprecated Use `setDefaultIdlePromiseTimeout` instead\r\n * Sets the global default idle timeout / deadline to use when no timeout is passed during promise creation.\r\n * @param idleDeadline - Specifies the time in milliseconds to use as the idle timeout / deadline by when any\r\n * outstanding chained items should be executed.\r\n * @group Idle\r\n */\r\nexport var setDefaultIdleTimeout = ( /*#__PURE__*/setDefaultIdlePromiseTimeout);\r\n/**\r\n * Creates an idle Promise instance that when resolved or rejected will execute it's pending chained operations\r\n * __asynchronously__ using the `requestIdleCallback` API (if available) with the optional provided timeout value to\r\n * schedule when the chained items will be executed. When `requestIdleCallback` is not available this becomes the same as\r\n * `createAsyncPromise` which uses `setTimeout` to schedule executions.\r\n * @group Idle\r\n * @group Promise\r\n * @param executor - The function to be executed during the creation of the promise. Any errors thrown in the executor will\r\n * cause the promise to be rejected. The return value of the executor is always ignored\r\n * @param timeout - Optional deadline timeout to wait before processing the items, defaults to undefined. If the number of\r\n * milliseconds represented by this parameter has elapsed and the callback has not already been called, then a task to execute\r\n * the callback is queued in the event loop (even if doing so risks causing a negative performance impact). timeout must be a\r\n * positive value or it is ignored.\r\n */\r\nexport function createIdlePromise(executor, timeout) {\r\n    var theTimeout = isUndefined(timeout) ? _defaultIdleTimeout : timeout;\r\n    return _createPromise(createIdlePromise, idleItemProcessor(theTimeout), executor, theTimeout);\r\n}\r\n/**\r\n * Returns an idle Promise instance that resolves to an array of the results from the input promises.\r\n * This returned promise will resolve and execute it's pending chained operations __asynchronously__\r\n * using the `requestIdleCallback` API (if available) with the optional provided timeout value to\r\n * schedule when the chained items will be executed.\r\n * It rejects immediately upon any of the input promises rejected or non-promises throwing an error,\r\n * and will reject with this first rejection message / error.\r\n * When resolved or rejected any additional chained operations will execute __asynchronously__ using\r\n * the `requestIdleCallback` API (if available) with the optional provided timeout value to schedule\r\n * when the chained items will be executed. (eg. `then()`; `catch()`; `finally()`).\r\n * @group Idle\r\n * @group Promise\r\n * @group All\r\n * @param input - The array of promises to wait to be resolved / rejected before resolving or rejecting the new promise\r\n * @param timeout\r\n * @returns\r\n * <ul>\r\n * <li> An already resolved `Promise`, if the input passed is empty.\r\n * <li> A pending `Promise` in all other cases. This returned promise is then resolved/rejected __synchronously__\r\n * (as soon as the pending items is empty) when all the promises in the given input have resolved, or if any of the\r\n * promises reject.\r\n * </ul>\r\n */\r\nexport var createIdleAllPromise = /*#__PURE__*/ _createAllPromise(createIdlePromise);\r\n/**\r\n * Returns an idle Promise instance that is already resolved with the given value. If the value passed is\r\n * a promise then that promise is returned instead of creating a new asynchronous promise instance.\r\n * If a new instance is returned then any chained operations will execute __asynchronously__ using the\r\n * `requestIdleCallback` API (if available) with the optional provided timeout value to schedule when\r\n * the chained items will be executed. (eg. `then()`; `finally()`).\r\n * @group Idle\r\n * @group Promise\r\n * @group Resolved\r\n * @param value - The value to be used by this `Promise`. Can also be a `Promise` or a thenable to resolve.\r\n * @param timeout - Optional timeout to wait before processing the items, defaults to zero.\r\n */\r\nexport var createIdleResolvedPromise = /*#__PURE__*/ _createResolvedPromise(createIdlePromise);\r\n/**\r\n * Returns an idle Promise instance that is already rejected with the given reason.\r\n * Any chained operations will execute __asynchronously__ using the o`requestIdleCallback` API\r\n * (if available) with the optional provided timeout value to schedule when the chained items will\r\n * be executed. (eg. `catch()`; `finally()`).\r\n * @group Idle\r\n * @group Promise\r\n * @group Rejected\r\n * @param reason - The rejection reason\r\n * @param timeout - Optional timeout to wait before processing the items, defaults to zero.\r\n */\r\nexport var createIdleRejectedPromise = /*#__PURE__*/ _createRejectedPromise(createIdlePromise);\r\n/**\r\n * Returns a single Promise instance that resolves to an array of the results from the input promises.\r\n * This returned promise will resolve and execute it's pending chained operations based on the\r\n * {@link createIdlePromise idle} promise implementation. Any chained operations will execute\r\n * __asynchronously__ when the environment is idle as the final operation pending promises have resolved,\r\n * or if the input contains no promises. It will resolve only after all of the input promises have either\r\n * resolved or rejected, and will resolve with an array of {@link IPromiseResult } objects that each describe\r\n * the outcome of each promise.\r\n * @since 0.5.0\r\n * @group Idle\r\n * @group Promise\r\n * @group AllSettled\r\n * @param input - An array of promises to wait to be resolved / rejected before resolving or rejecting the new promise\r\n * @param timeout - Optional timeout to wait before processing the items, defaults to zero, only used when Native promises are not available.\r\n * @returns A pending `Promise` that will resolve to an array of {@link IPromiseResult } objects that each describe the outcome of each promise.\r\n *\r\n * @example\r\n * ```ts\r\n * const promises = [\r\n *   createResolvedPromise(1),\r\n *   createResolvedPromise(2),\r\n *   createResolvedPromise(3),\r\n *   createRejectedPromise(\"error\"),\r\n * ];\r\n *\r\n * const results = await createAllSettledPromise(promises);\r\n *\r\n * // results is:\r\n * // [\r\n * //   { status: \"fulfilled\", value: 1 },\r\n * //   { status: \"fulfilled\", value: 2 },\r\n * //   { status: \"fulfilled\", value: 3 },\r\n * //   { status: \"rejected\", reason: \"error\" }\r\n * // ]\r\n * ```\r\n */\r\nexport function createIdleAllSettledPromise(input, timeout) {\r\n    !_allIdleSettledCreator && (_allIdleSettledCreator = _createAllSettledPromise(createIdlePromise));\r\n    return _allIdleSettledCreator.v(input, timeout);\r\n}\r\n/**\r\n * The `createIdleRacePromise` method takes an array of promises as input and returns a single Promise. This returned promise\r\n * settles with the eventual state of the first promise that settles.\r\n * @description The `createIdleRacePromise` method is one of the promise concurrency methods. It's useful when you want the first\r\n * async task to complete, but do not care about its eventual state (i.e. it can either succeed or fail).\r\n * If the iterable contains one or more non-promise values and/or an already settled promise, then Promise.race() will settle to\r\n * the first of these values found in the iterable.\r\n * @since 0.5.0\r\n * @group Idle\r\n * @group Promise\r\n * @group Race\r\n * @param values - An the array of promises.\r\n * @param timeout - Optional timeout to wait before processing the items, defaults to zero, only used when Native promises are not available.\r\n * @returns A Promise that settles with the eventual state of the first promise in the iterable to settle. In other words, it fulfills if the\r\n * first promise to settle is fulfilled, and rejects if the first promise to settle is rejected. The returned promise remains pending forever\r\n * if the iterable passed is empty. If the iterable passed is non-empty but contains no pending promises, the returned promise will settle\r\n * asynchronously when the system detects that the runtime is idle.\r\n */\r\nexport function createIdleRacePromise(values, timeout) {\r\n    !_raceIdleCreator && (_raceIdleCreator = _createRacePromise(createIdlePromise));\r\n    return _raceIdleCreator.v(values, timeout);\r\n}\r\n/**\r\n * The `createIdleAnyPromise` method takes an array of promises as input and returns a single Promise.\r\n * This returned promise fulfills when any of the input's promises fulfills, with this first fulfillment value.\r\n * It rejects when all of the input's promises reject (including when an empty iterable is passed), with an\r\n * AggregateError containing an array of rejection reasons.\r\n * @since 0.5.0\r\n * @group Idle\r\n * @group Promise\r\n * @group Any\r\n * @param values - An Array promises.\r\n * @param timeout - Optional timeout to wait before processing the items, defaults to zero, only used when Native promises are not available.\r\n * @returns A new Promise that is:\r\n * - Already rejected, if the iterable passed is empty.\r\n * - Asynchronously fulfilled, when any of the promises in the given iterable fulfills. The fulfillment value\r\n * is the fulfillment value of the first promise that was fulfilled.\r\n * - Asynchronously rejected, when all of the promises in the given iterable reject. The rejection reason is\r\n * an AggregateError containing an array of rejection reasons in its errors property. The errors are in the\r\n * order of the promises passed, regardless of completion order. If the iterable passed is non-empty but\r\n * contains no pending promises, the returned promise is still asynchronously (instead of synchronously)\r\n * rejected.\r\n */\r\nexport function createIdleAnyPromise(values, timeout) {\r\n    !_anyIdleCreator && (_anyIdleCreator = _createAnyPromise(createIdlePromise));\r\n    return _anyIdleCreator.v(values, timeout);\r\n}\r\n//# sourceMappingURL=idlePromise.js.map","/*\r\n * @nevware21/ts-async\r\n * https://github.com/nevware21/ts-async\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\nimport { createCachedValue } from \"@nevware21/ts-utils\";\r\nimport { _createAllPromise, _createAllSettledPromise, _createAnyPromise, _createRacePromise, _createRejectedPromise, _createResolvedPromise } from \"./base\";\r\nimport { createNativePromise } from \"./nativePromise\";\r\nvar _promiseCreator;\r\nvar _allSettledCreator;\r\nvar _raceCreator;\r\nvar _anyCreator;\r\n/**\r\n * Set the default promise implementation to use when calling `createPromise`; `createAllPromise`; `createResolvedPromise`\r\n * and `createRejectedPromise`. This is effective a global value and changing this will affect ALL callers of these\r\n * functions, as such these functions should only be used when switching implementations would have not unexpected\r\n * consequences like switching from a `createSyncPromise` to `createIdlePromise` where idle promises have a possibility\r\n * of never getting called during application shutdown or during an expected timeframe.\r\n * @group Alias\r\n * @group Promise\r\n * @param creator - The creator function to call when a new promise is required.\r\n */\r\nexport function setCreatePromiseImpl(creator) {\r\n    _promiseCreator = creator ? createCachedValue(creator) : null;\r\n}\r\n/**\r\n * Creates a Promise instance using the current default promise creator that when resolved or rejected will execute\r\n * it's pending chained operations.\r\n * @group Alias\r\n * @group Promise\r\n * @param executor - The function to be executed during the creation of the promise. Any errors thrown in the executor will\r\n * cause the promise to be rejected. The return value of the executor is always ignored\r\n * @param timeout - [Optional] timeout to wait before processing the items, defaults to zero.\r\n */\r\nexport function createPromise(executor, timeout) {\r\n    !_promiseCreator && (_promiseCreator = createCachedValue(createNativePromise));\r\n    return _promiseCreator.v.call(this, executor, timeout);\r\n}\r\n/**\r\n * Returns a single asynchronous Promise instance that resolves to an array of the results from the input promises.\r\n * This returned promise will resolve and execute it's pending chained operations __asynchronously__ using the optional\r\n * provided timeout value to schedule when the chained items will be executed, or if the input contains no promises.\r\n * It rejects immediately upon any of the input promises rejected or non-promises throwing an error,\r\n * and will reject with this first rejection message / error.\r\n * If the runtime doesn't support the Promise.all it will fallback back to an asynchronous Promise implementation.\r\n * @group Alias\r\n * @group Promise\r\n * @group All\r\n * @param input - The array of promises to wait to be resolved / rejected before resolving or rejecting the new promise\r\n * @param timeout\r\n * @returns\r\n * <ul>\r\n * <li> An already resolved `Promise`, if the input passed is empty.\r\n * <li> A pending `Promise` in all other cases. This returned promise is then resolved/rejected __synchronously__\r\n * (as soon as the pending items is empty) when all the promises in the given input have resolved, or if any of the\r\n * promises reject.\r\n * </ul>\r\n */\r\nexport var createAllPromise = /*#__PURE__*/ _createAllPromise(createPromise);\r\n/**\r\n * Returns a single asynchronous Promise instance that is already resolved with the given value. If the value passed is\r\n * a promise then that promise is returned instead of creating a new asynchronous promise instance.\r\n * If a new instance is returned then any chained operations will execute __asynchronously__ using the optional\r\n * timeout value to schedule when the chained items will be executed.(eg. `then()`; `finally()`).\r\n * @group Alias\r\n * @group Promise\r\n * @group Resolved\r\n * @param value - The value to be used by this `Promise`. Can also be a `Promise` or a thenable to resolve.\r\n * @param timeout - Optional timeout to wait before processing the items, defaults to zero.\r\n */\r\nexport var createResolvedPromise = /*#__PURE__*/ _createResolvedPromise(createPromise);\r\n/**\r\n * Returns a single asynchronous Promise instance that is already rejected with the given reason.\r\n * Any chained operations will execute __asynchronously__ using the optional timeout value to schedule\r\n * when then chained items will be executed. (eg. `catch()`; `finally()`).\r\n * @group Alias\r\n * @group Promise\r\n * @group Rejected\r\n * @param reason - The rejection reason\r\n * @param timeout - Optional timeout to wait before processing the items, defaults to zero.\r\n */\r\nexport var createRejectedPromise = /*#__PURE__*/ _createRejectedPromise(createPromise);\r\n/**\r\n * Returns a single Promise instance that resolves to an array of the results from the input promises.\r\n * This returned promise will resolve and execute it's pending chained operations based on the current\r\n * promise implementation. If the current implementation is synchronous then the chained operations will\r\n * execute __synchronously__ in the same execution cycle as the final operation pending promises have resolved,\r\n * or if the input contains no promises. If the current implementation is asynchronous then the chained\r\n * operations will execute __asynchronously__ using the optional provided timeout value to schedule when the\r\n * chained items will be executed or if the input contains no promises.\r\n * It will resolve only after all of the input promises have either resolved or rejected, and will resolve with an array\r\n * of {@link IPromiseResult } objects that each describe the outcome of each promise.\r\n * @since 0.5.0\r\n * @group Alias\r\n * @group Promise\r\n * @group AllSettled\r\n * @param input - An array of promises to wait to be resolved / rejected before resolving or rejecting the new promise\r\n * @param timeout - Optional timeout to wait before processing the items, defaults to zero, only used when Native promises are not available.\r\n * @returns A pending `Promise` that will resolve to an array of {@link IPromiseResult } objects that each describe the outcome of each promise.\r\n *\r\n * @example\r\n * ```ts\r\n * const promises = [\r\n *   createResolvedPromise(1),\r\n *   createResolvedPromise(2),\r\n *   createResolvedPromise(3),\r\n *   createRejectedPromise(\"error\"),\r\n * ];\r\n *\r\n * const results = await createAllSettledPromise(promises);\r\n *\r\n * // results is:\r\n * // [\r\n * //   { status: \"fulfilled\", value: 1 },\r\n * //   { status: \"fulfilled\", value: 2 },\r\n * //   { status: \"fulfilled\", value: 3 },\r\n * //   { status: \"rejected\", reason: \"error\" }\r\n * // ]\r\n * ```\r\n */\r\nexport function createAllSettledPromise(input, timeout) {\r\n    !_allSettledCreator && (_allSettledCreator = _createAllSettledPromise(createPromise));\r\n    return _allSettledCreator.v(input, timeout);\r\n}\r\n/**\r\n * The `createRacePromise` method takes an array of promises as input and returns a single Promise. This returned promise\r\n * settles with the eventual state of the first promise that settles.\r\n * @description The `createRacePromise` method is one of the promise concurrency methods. It's useful when you want the first\r\n * async task to complete, but do not care about its eventual state (i.e. it can either succeed or fail).\r\n * If the iterable contains one or more non-promise values and/or an already settled promise, then Promise.race() will settle to\r\n * the first of these values found in the iterable.\r\n * @since 0.5.0\r\n * @group Alias\r\n * @group Promise\r\n * @group Race\r\n * @param values - An the array of promises.\r\n * @param timeout - Optional timeout to wait before processing the items, defaults to zero, only used when Native promises are not available.\r\n * @returns A Promise that settles with the eventual state of the first promise in the iterable to settle. In other words, it fulfills if the\r\n * first promise to settle is fulfilled, and rejects if the first promise to settle is rejected. The returned promise remains pending forever\r\n * if the iterable passed is empty. If the iterable passed is non-empty but contains no pending promises, the returned promise will settle\r\n * based on the current promise implementation.\r\n */\r\nexport function createRacePromise(values, timeout) {\r\n    !_raceCreator && (_raceCreator = _createRacePromise(createPromise));\r\n    return _raceCreator.v(values, timeout);\r\n}\r\n/**\r\n * The `createAnyPromise` method takes an array of promises as input and returns a single Promise.\r\n * This returned promise fulfills when any of the input's promises fulfills, with this first fulfillment value.\r\n * It rejects when all of the input's promises reject (including when an empty iterable is passed), with an\r\n * AggregateError containing an array of rejection reasons.\r\n * @since 0.5.0\r\n * @group Alias\r\n * @group Promise\r\n * @group Any\r\n * @param values - An Array promises.\r\n * @param timeout - Optional timeout to wait before processing the items, defaults to zero, only used when Native promises are not available.\r\n * @returns A new Promise that is:\r\n * - Already rejected, if the iterable passed is empty.\r\n * - Asynchronously fulfilled, when any of the promises in the given iterable fulfills. The fulfillment value\r\n * is the fulfillment value of the first promise that was fulfilled.\r\n * - Asynchronously rejected, when all of the promises in the given iterable reject. The rejection reason is\r\n * an AggregateError containing an array of rejection reasons in its errors property. The errors are in the\r\n * order of the promises passed, regardless of completion order. If the iterable passed is non-empty but\r\n * contains no pending promises, the returned promise is still asynchronously (instead of synchronously)\r\n * rejected.\r\n */\r\nexport function createAnyPromise(values, timeout) {\r\n    !_anyCreator && (_anyCreator = _createAnyPromise(createPromise));\r\n    return _anyCreator.v(values, timeout);\r\n}\r\n//# sourceMappingURL=promise.js.map","/*\r\n * @nevware21/ts-async\r\n * https://github.com/nevware21/ts-async\r\n *\r\n * Copyright (c) 2024 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\nimport { isUndefined, scheduleTimeout } from \"@nevware21/ts-utils\";\r\nimport { createPromise } from \"./promise\";\r\n/**\r\n * Creates a Promise instance that resolve or reject after the specified timeout.\r\n * @since 0.5.0\r\n * @group Timeout\r\n * @group Promise\r\n * @param timeout - The timeout in milliseconds to wait before resolving or rejecting the promise.\r\n * @param resolveReject - [Optional] If true the promise will resolve, otherwise it will reject.\r\n * @param message - [Optional] The message to use when rejecting the promise, if not supplied (or\r\n * undefined) the default message will be used.\r\n * @returns A promise that will resolve or reject after the specified timeout.\r\n * @example\r\n * ```ts\r\n * // Rejects after 100ms with default message\r\n * const result = await createTimeoutPromise(100);\r\n * // Throws an Error: Timeout of 100ms exceeded\r\n *\r\n * // Resolves after 100ms with default message\r\n * const result = await createTimeoutPromise(100, true);\r\n * console.log(result); // Timeout of 100ms exceeded\r\n *\r\n * // Rejects after 100ms with default message\r\n * const result = await createTimeoutPromise(100, false);\r\n * // throws an Error: Timeout of 100ms exceeded\r\n *\r\n * // Resolves after 100ms with default message\r\n * const result = await createTimeoutPromise(100, true);\r\n * console.log(result); // Timeout of 100ms exceeded\r\n *\r\n * // Rejects after 100ms with the message \"Hello\"\r\n * const result = await createTimeoutPromise(100, false, \"Hello\");\r\n * // throws an Error: Hello\r\n *\r\n * // Resolves after 100ms with the message \"Hello\"\r\n * const result = await createTimeoutPromise(100, true, \"Hello\");\r\n * console.log(result); // Hello\r\n *\r\n * // Resolves after 100ms with the message \"Hello\"\r\n * doAwait(createTimeoutPromise(100, true, \"Hello\"), (result) => {\r\n *  console.log(result); // Hello\r\n * });\r\n *\r\n * // Rejects after 100ms with the message \"Hello\"\r\n * doAwait(createTimeoutPromise(100, false, \"Hello\"), (result) => {\r\n *   // Not called\r\n * }, (err) => {\r\n *   console.log(err); // Hello\r\n * });\r\n *\r\n * // Rejects after 100ms with the message \"Hello\"\r\n * doAwaitResult(createTimeoutPromise(100, false, \"Hello\"), (result) => {\r\n *   console.log(result.rejected); // true\r\n *   console.log(result.reason); // Hello\r\n * });\r\n * ```\r\n */\r\nexport function createTimeoutPromise(timeout, resolveReject, message) {\r\n    return createPromise(function (resolve, reject) {\r\n        scheduleTimeout(function () {\r\n            (resolveReject ? resolve : reject)(!isUndefined(message) ? message : \"Timeout of \" + timeout + \"ms exceeded\");\r\n        }, timeout);\r\n    });\r\n}\r\n//# sourceMappingURL=timeoutPromise.js.map","/*\r\n * @nevware21/ts-async\r\n * https://github.com/nevware21/ts-async\r\n *\r\n * Copyright (c) 2023 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\nimport { isFunction, isPromiseLike, utcNow } from \"@nevware21/ts-utils\";\r\nimport { createPromise } from \"../promise/promise\";\r\nimport { doAwait } from \"../promise/await\";\r\nfunction _doneChk(isDone, state, value, thisArg) {\r\n    var result = isDone;\r\n    state.res = value;\r\n    if (!result) {\r\n        if (state.isDone && isFunction(state.isDone)) {\r\n            // Handle synchronous or asynchronous isDone function\r\n            return doAwait(state.isDone.call(thisArg, state), function (done) {\r\n                state.iter++;\r\n                return !!done;\r\n            });\r\n        }\r\n        else {\r\n            result = !!state.isDone;\r\n        }\r\n    }\r\n    state.iter++;\r\n    return result;\r\n}\r\n/**\r\n * Performs a while loop, calling the provided `callbackFn` function until the `state.isDone`\r\n * property is set to `true` or the optional `isDOneFn` returns `true`. The callback function will\r\n * receive a single {@link IWhileState state} argument and may return either a value or a promise,\r\n * if a promise is returned the while loop will wait until the promise is resolved before calling\r\n * the callback function again. If the callback function never returns a promise the while loop\r\n * will be executed synchronous and last value returned by the callback will be returned, if the\r\n * callback function returns a promise the while loop will be asynchronous and an {@link IPromise}\r\n * will be returned and resolved with the last value returned by the callback or rejected if the\r\n * callback promise rejects or throws an error.\r\n * @since 0.5.0\r\n * @group Loop\r\n * @typeParam T - Identifies the element type returned by the callback function.\r\n * @param callbackFn A function that will be called until the `state.isDone` flag is set to `true`\r\n * the function will receive a single {@link IWhileState state} argument. The callback function\r\n * may return either a value or a promise, if a promise is returned the while loop will wait\r\n * until the promise is resolved before calling the callback function again.\r\n * @param isDoneFn An optional function that will be called after the callback function is called,\r\n * that can be used to stop the while loop. The function will receive a single {@link IWhileState state}\r\n * argument. If the function returns `true` the while loop will stop, otherwise the while loop will continue.\r\n * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n * If thisArg is omitted, null or undefined the array will be used as the this value.\r\n * @remarks\r\n * - If an `isDoneFn` is provided the `state.isDone` property will be set to the provided value and\r\n * is accessible withing the callback function. The callbackFn may overwrite the value of the\r\n * `state.isDone` property within the callback function with a boolean value or another function that\r\n * returns a boolean value.\r\n * - The callback function is called until until the `state.isDone` property is set to `true` or if\r\n * `state.isDone` is a function until the function returns `true.\r\n * - The callback function will receive a single {@link IWhileState state} argument that contains\r\n * the following properties:\r\n *  - `iter` - The zero-based iteration count, which is incremented after each call to the `callbackFn`\r\n * and any `isDone` function (if provided), the `iter` property is accessible withing the callback\r\n * function and may be overwritten within the callback function.\r\n * - `res` - The last resolved result value returned by the `callbackFn` function.\r\n * - `isDone` - A boolean value or a callback function that will be called to check if the while loop\r\n * should stop, the `isDone` property is accessible withing the callback function and may be\r\n * overwritten within the callback function.\r\n * - The callback function may return either a value or a promise, if a promise is returned the while\r\n * loop will wait until the promise is resolved before calling the callback function again.\r\n * - If the callback function throws an error when executing `synchronously` the exception will\r\n * also be thrown `synchronously` otherwise the returned promise will be rejected with the error.\r\n * @example\r\n * ```ts\r\n * // Synchronous example\r\n * const result = doWhileAsync((state) => { // Note: DO NOT use async here unless you use await withing the function\r\n *    if (state.idx < 10) {\r\n *      // Logs each iteration index (will be called synchronously)\r\n *      // Logs 0, 1, 2, 3, 4, 5, 6, 7, 8, 9\r\n *      console.log(state.idx);\r\n *   } else {\r\n *     state.isDone = true;\r\n *     return \"Hello\";\r\n *  }\r\n * });\r\n *\r\n * console.log(result); // returns Hello after logging 0, 1, 2, 3, 4, 5, 6, 7, 8, 9\r\n *\r\n * // Synchronous example with isDoneFn\r\n * const result = doWhileAsync((state) => { // Note: DO NOT use async here unless you use await withing the function\r\n *    if (state.idx < 10) {\r\n *      // Logs each iteration index (will be called synchronously)\r\n *      // Logs 0, 1, 2, 3, 4, 5, 6, 7, 8, 9\r\n *      console.log(state.idx);\r\n *   } else {\r\n *     return \"Hello\";\r\n *  }\r\n * }, (state) => state.idx > 10);\r\n * console.log(result); // returns Hello after logging 0, 1, 2, 3, 4, 5, 6, 7, 8, 9\r\n *\r\n * // Asynchronous examples\r\n * const result = await doWhileAsync((state) => { // Note: DO NOT use async here unless you use await withing the function\r\n *   if (state.idx < 10) {\r\n *     // Logs each iteration index\r\n *     // Logs 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 calling the callback function synchronously\r\n *     console.log(state.idx);\r\n *     // Returning a promise will cause `doWhileAsync` to return a promise to the caller\r\n *     // and wait for the promise to resolve before calling the callback function again.\r\n *     return createTimeoutPromise(10, true, state.idx);\r\n *   }\r\n *\r\n *   state.isDone = true;\r\n *   return createResolvedPromise(\"Darkness\");\r\n * });\r\n * console.log(result); // Darkness\r\n *\r\n * // Asynchronous example with isDoneFn\r\n * const result = await doWhileAsync((state) => { // Note: DO NOT use async here unless you use await withing the function\r\n *   if (state.idx < 10) {\r\n *     // Logs each iteration index\r\n *     // Logs 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 calling the callback function synchronously\r\n *     console.log(state.idx);\r\n *     // Returning a promise will cause `doWhileAsync` to return a promise to the caller\r\n *     // and wait for the promise to resolve before calling the callback function again.\r\n *     return createTimeoutPromise(10, true, state.idx);\r\n *   }\r\n *\r\n *   return createResolvedPromise(\"Darkness\");\r\n * }, (state) => state.idx > 10);\r\n * console.log(result); // returns Darkness after logging 0, 1, 2, 3, 4, 5, 6, 7, 8, 9\r\n *\r\n * // Combination Synchronous and Asynchronous example\r\n * const result = await doWhileAsync((state) => { // Note: DO NOT use async here unless you use await withing the function\r\n *   if (state.idx < 10) {\r\n *     // Logs 0, 1, 2, 3, 4, 5, 6, 7, 8, 9\r\n *     // Logs each iteration index (will be called synchronously)\r\n *     console.log(state.idx);\r\n *   } else {\r\n *     state.isDone = true;\r\n *     // Returning a promise will cause `doWhileAsync` to return a promise to the caller\r\n *     // and wait for the promise to resolve before resolving the returned promise.\r\n *     return createResolvedPromise(\"my old friend\");\r\n *   }\r\n * });\r\n *\r\n * console.log(result); // my old friend\r\n *\r\n * // Asynchronous example using await\r\n * const result = await doWhileAsync(async (state) => {\r\n *   if (state.idx < 10) {\r\n *     // Logs 0, 1, 2, 3, 4, 5, 6, 7, 8, 9\r\n *     // Logs each iteration index (will be called synchronously)\r\n *     await createTimeoutPromise(10, true, state.idx);\r\n *   } else {\r\n *     state.isDone = true;\r\n *     // Returning a promise will cause `doWhileAsync` to return a promise to the caller\r\n *     // and wait for the promise to resolve before resolving the returned promise.\r\n *     return await createResolvedPromise(\"my old friend\");\r\n *   }\r\n * });\r\n *\r\n * console.log(result); // my old friend\r\n *\r\n * // Asynchronous example using await and dynamically setting the isDone function\r\n * const result = await doWhileAsync(async (state) => {\r\n *   // dynamically set the isDone function\r\n *   if (state.idx < 10) {\r\n *     state.isDone = () => return false;\r\n *     // Logs 0, 1, 2, 3, 4, 5, 6, 7, 8, 9\r\n *     // Logs each iteration index (will be called synchronously)\r\n *     await createTimeoutPromise(10, true, state.idx);\r\n *   } else {\r\n *     state.isDone = () => return true;\r\n *     // Returning a promise will cause `doWhileAsync` to return a promise to the caller\r\n *     // and wait for the promise to resolve before resolving the returned promise.\r\n *     return await createResolvedPromise(\"my old friend\");\r\n *   }\r\n * });\r\n *\r\n * console.log(result); // my old friend\r\n * ```\r\n */\r\nexport function doWhileAsync(callbackFn, isDoneFn, thisArg) {\r\n    var promise;\r\n    var resolve;\r\n    var reject = function (reason) {\r\n        isDone = true;\r\n        throw reason;\r\n    };\r\n    var isDone = false;\r\n    var state = {\r\n        st: utcNow(),\r\n        iter: 0,\r\n        isDone: isDoneFn || false\r\n    };\r\n    if (callbackFn) {\r\n        var _createPromise_1 = function () {\r\n            return createPromise(function (res, rej) {\r\n                resolve = res;\r\n                reject = rej;\r\n            });\r\n        };\r\n        var _handleAsyncDone_1 = function (done) {\r\n            isDone = !!done;\r\n            if (!isDone) {\r\n                _processNext_1();\r\n            }\r\n            else {\r\n                resolve(state.res);\r\n            }\r\n        };\r\n        var _processNext_1 = function () {\r\n            // Attempt to process the next item synchronously if possible (for performance -- to reduce the number of promises created)\r\n            while (!isDone) {\r\n                try {\r\n                    var cbResult = callbackFn.call(thisArg, state);\r\n                    if (isPromiseLike(cbResult)) {\r\n                        promise = promise || _createPromise_1();\r\n                        doAwait(cbResult, function (res) {\r\n                            try {\r\n                                doAwait(_doneChk(isDone, state, res, thisArg), _handleAsyncDone_1, reject);\r\n                            }\r\n                            catch (e) {\r\n                                reject(e);\r\n                            }\r\n                        }, reject);\r\n                        // Break out of synchronous loop and wait for promise to resolve\r\n                        return promise;\r\n                    }\r\n                    else {\r\n                        var dnRes = _doneChk(isDone, state, cbResult, thisArg);\r\n                        if (isPromiseLike(dnRes)) {\r\n                            promise = promise || _createPromise_1();\r\n                            doAwait(dnRes, _handleAsyncDone_1, reject);\r\n                            // Break out of synchronous loop and wait for promise to resolve\r\n                            return promise;\r\n                        }\r\n                        else {\r\n                            isDone = !!dnRes;\r\n                        }\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    reject(e);\r\n                    return promise;\r\n                }\r\n            }\r\n            if (isDone && resolve) {\r\n                resolve(state.res);\r\n            }\r\n            return promise || state.res;\r\n        };\r\n        return _processNext_1();\r\n    }\r\n}\r\n//# sourceMappingURL=doWhileAsync.js.map","/*\r\n * @nevware21/ts-async\r\n * https://github.com/nevware21/ts-async\r\n *\r\n * Copyright (c) 2023 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\nimport { getLength } from \"@nevware21/ts-utils\";\r\nimport { doWhileAsync } from \"./doWhileAsync\";\r\n/**\r\n * Calls the provided `callbackFn` function once for each element in an array (or ArratLike) instance in ascending index order. It is not invoked\r\n * for index properties that have been deleted or are uninitialized. And unlike the ES6 forEach() this supports async functions and you CAN stop\r\n * or break the iteration  by returning -1 from the `callbackFn` function.\r\n *\r\n * The range (number of elements) processed by arrForEach() is set before the first call to the `callbackFn`. Any elements added beyond the range\r\n * or elements which as assigned to indexes already processed will not be visited by the `callbackFn`.\r\n *\r\n * The `callbackFn` may execute `synchronously` or `asynchronously` and if the `callbackFn` returns a `Promise` then the next iteration will not be\r\n * called until the promise is resolved. If the `callbackFn` returns a `Promise` that is rejected then the iteration will stop and the promise\r\n * returned by arrForEachAsync will be rejected with the same error.\r\n * @since 0.5.0\r\n * @group Loop\r\n * @group Array\r\n * @group ArrayLike\r\n * @typeParam T - Identifies the element type of the array\r\n * @param theArray - The array or array like object of elements to be searched.\r\n * @param callbackFn A `asynchronous` or `synchronous` function that accepts up to three arguments. arrForEach calls the callbackfn function one\r\n * time for each element in the array.\r\n * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, null or undefined\r\n * the array will be used as the this value.\r\n * @remarks\r\n * arrForEachAsync supports either a `synchronous` or `asynchronous` (returns a `Promise`) callback function. If the callback function returns\r\n * a `Promise` then the next iteration will not be called until the promise is resolved. If the callback function returns a `Promise` that is\r\n * rejected then the iteration will stop and the promise returned by arrForEachAsync will be rejected with the same error.\r\n * @example\r\n * ```ts\r\n * const items = ['item1', 'item2', 'item3', 'item4', 'item5', 'item6', 'item7', 'item8', 'item9', 'item10'];\r\n * const copyItems = [];\r\n *\r\n * arrForEachASync(items, (value, index) => {\r\n *   copyItems.push(value);\r\n *   if (index === 5) {\r\n *     return -1; // Stop the iteration\r\n *   }\r\n * });\r\n * console.log(copyItems); // ['item1', 'item2', 'item3', 'item4', item5']\r\n *\r\n * // Also supports input as an array like object\r\n * const items = { length: 3, 0: 'item1', 1: 'item2', 2: 'item3' };\r\n *\r\n * // Asynchronous examples using await\r\n * const items = ['item1', 'item2', 'item3', 'item4', 'item5', 'item6', 'item7', 'item8', 'item9', 'item10'];\r\n * const copyItems = [];\r\n *\r\n * await arrForEachASync(items, (value, index) => { // Note: DO NOT use async here unless you use await within the function\r\n *   if (index < 5) {\r\n *     // Logs each iteration index\r\n *     // Logs each value\r\n *     console.log(value);\r\n *     // Returning a promise will cause `arrForEachAsync` to return a promise to the caller\r\n *     // and wait for the promise to resolve before calling the callback function again.\r\n *     return createTimeoutPromise(10, true);\r\n *   }\r\n *\r\n *   return -1; // Stop the iteration\r\n * });\r\n * console.log(copyItems); // ['item1', 'item2', 'item3', 'item4', item5']\r\n *\r\n * ```\r\n */\r\nexport function arrForEachAsync(theArray, callbackFn, thisArg) {\r\n    if (theArray) {\r\n        var len_1 = getLength(theArray);\r\n        if (len_1) {\r\n            var isDone = function (state) {\r\n                if (state.iter >= len_1 || state.res === -1) {\r\n                    return true;\r\n                }\r\n            };\r\n            return doWhileAsync(function (state) {\r\n                var idx = state.iter;\r\n                if (idx in theArray) {\r\n                    return callbackFn.call(thisArg || theArray, theArray[idx], idx, theArray);\r\n                }\r\n            }, isDone);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=arrForEachAsync.js.map","/*\r\n * @nevware21/ts-async\r\n * https://github.com/nevware21/ts-async\r\n *\r\n * Copyright (c) 2023 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\nimport { createCachedValue, fnCall, getKnownSymbol, isIterator, isPromiseLike } from \"@nevware21/ts-utils\";\r\nimport { doWhileAsync } from \"./doWhileAsync\";\r\nimport { DONE, RETURN, VALUE } from \"../internal/constants\";\r\nimport { doAwait, doFinally } from \"../promise/await\";\r\nvar _iterSymbol;\r\nvar _iterAsyncSymbol;\r\n/**\r\n * Calls the provided `callbackFn` function once for each element in the iterator or iterator returned by\r\n * the iterable and processed in the same order as returned by the iterator. As with the {@link arrForEachAsync}\r\n * you CAN stop or break the iteration by returning -1 from the `callbackFn` function.\r\n *\r\n * The order of processing is not reset if you add or remove elemenets to the iterator, the actual behavior will\r\n * depend on the iterator implementation.\r\n *\r\n * if the passed `iter` is both an Iterable<T> and Iterator<T> the Iterator<T> interface takes precedence. And if\r\n * an iterable and does not have a `Symbol.iterator` property then the `iter` will be used as the iterator.\r\n *\r\n * The `callbackFn` may execute `synchronously` or `asynchronously` and if the `callbackFn` returns a `Promise`\r\n * then the next iteration will not be called until the promise is resolved. If the `callbackFn` returns a `Promise`\r\n * that is rejected then the iteration will stop and the promise returned by iterForEachAsync will be rejected with\r\n * the same error.\r\n * @remarks\r\n * If Symbols are NOT supported then the iterable MUST be using the same polyFill for the well know symbols, as used\r\n * by the library. If the iterable is using a different polyFill then the `iter` MUST be an Iterator<T> and not an\r\n * Iterable<T>.\r\n * If you are targetting a mixed environment you SHOULD either\r\n * - only use the polyfill Symbol's provided by this library\r\n * - ensure that you add any symbol polyfills BEFORE these utilities\r\n * iterForOfAsync\r\n * @since 0.5.0\r\n * @group Loop\r\n * @group Iterator\r\n * @typeParam T - Identifies the element type of the iterator\r\n * @param iter - The iterator or iterable of elements to be searched.\r\n * @param callbackFn - A `asynchronous` or `synchronous` function that accepts up to three arguments. iterForEach\r\n * calls the callbackfn function one time for each element in the iterator.\r\n * @param thisArg - An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted,\r\n * null or undefined the iterator will be used as the this value.\r\n * @example\r\n * ```ts\r\n * const items = ['item1', 'item2', 'item3', 'item4', 'item5', 'item6', 'item7', 'item8', 'item9', 'item10'];\r\n * const copyItems = [];\r\n *\r\n * // using async / await\r\n * let result = await iterForOfAsync(items, async (value, index) => {\r\n *   copyItems.push(value);\r\n *   if (index === 5) {\r\n *     return -1; // Stop the iteration\r\n *   }\r\n *\r\n *   await createTimeoutPromise(100); // Wait 100ms before processing the next item, you could also just return the promise\r\n *  })\r\n *\r\n * console.log(result); // returns -1 if the loop was stopped, otherwise returns undefined\r\n *\r\n * // using doAwait\r\n * doAwait(iterForOfAsync(items, (value, index) => {\r\n *   copyItems.push(value);\r\n *   if (index === 5) {\r\n *     return -1; // Stop the iteration\r\n *   }\r\n *\r\n *   return createTimeoutPromise(100); // Wait 100ms before processing the next item, you could also just return the promise\r\n *  }), (result) => {\r\n *    console.log(result); // returns -1 if the loop was stopped, otherwise returns undefined\r\n *  });\r\n */\r\nexport function iterForOfAsync(iter, callbackFn, thisArg) {\r\n    var err;\r\n    var iterResult;\r\n    var theIter = iter;\r\n    function onFailed(failed) {\r\n        err = { e: failed };\r\n        if (theIter.throw) {\r\n            iterResult = null;\r\n            theIter.throw(err);\r\n        }\r\n        throw failed;\r\n    }\r\n    function onFinally() {\r\n        try {\r\n            if (iterResult && !iterResult[DONE]) {\r\n                theIter[RETURN] && theIter[RETURN](iterResult);\r\n            }\r\n        }\r\n        finally {\r\n            if (err) {\r\n                // eslint-disable-next-line no-unsafe-finally\r\n                throw err.e;\r\n            }\r\n        }\r\n    }\r\n    if (iter) {\r\n        if (!isIterator(iter)) {\r\n            // Get the asyncIterator from the iterable\r\n            !_iterAsyncSymbol && (_iterAsyncSymbol = createCachedValue(getKnownSymbol(0 /* WellKnownSymbols.asyncIterator */)));\r\n            theIter = iter[_iterAsyncSymbol.v] ? iter[_iterAsyncSymbol.v]() : null;\r\n            if (!theIter) {\r\n                // Get the iterator from the iterable\r\n                !_iterSymbol && (_iterSymbol = createCachedValue(getKnownSymbol(3 /* WellKnownSymbols.iterator */)));\r\n                theIter = iter[_iterSymbol.v] ? iter[_iterSymbol.v]() : null;\r\n            }\r\n        }\r\n        if (theIter && isIterator(theIter)) {\r\n            var result = void 0;\r\n            try {\r\n                result = doWhileAsync(function (state) {\r\n                    return doAwait(theIter.next(), function (res) {\r\n                        iterResult = res;\r\n                        if (!res[DONE]) {\r\n                            return fnCall(callbackFn, thisArg || theIter, iterResult[VALUE], state.iter, theIter);\r\n                        }\r\n                    }, function (reason) {\r\n                        state.isDone = true;\r\n                        onFailed(reason);\r\n                    });\r\n                }, function (state) {\r\n                    if (!iterResult || iterResult[DONE] || state.res === -1) {\r\n                        onFinally();\r\n                        return true;\r\n                    }\r\n                }, thisArg || theIter);\r\n                if (isPromiseLike(result)) {\r\n                    result = doFinally(result.catch(onFailed), onFinally);\r\n                }\r\n                return result;\r\n            }\r\n            catch (failed) {\r\n                onFailed(failed);\r\n            }\r\n            finally {\r\n                if (result && !isPromiseLike(result)) {\r\n                    onFinally();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=iterForOfAsync.js.map","/*\r\n * @nevware21/ts-async\r\n * https://github.com/nevware21/ts-async\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\nimport { arrForEach, arrIndexOf, createCustomError, getLength, isPromiseLike, objDefine, objDefineProp, scheduleTimeout, utcNow } from \"@nevware21/ts-utils\";\r\nimport { doAwait, doAwaitResponse } from \"../promise/await\";\r\nimport { createPromise } from \"../promise/promise\";\r\n//#ifdef DEBUG\r\n//#:(!DEBUG) import { _debugLog } from \"../promise/debug\";\r\n//#endif\r\nvar REJECT = \"reject\";\r\nvar REJECTED_ERROR = \"Rejected\";\r\nvar _schedulerId = 0;\r\nvar _debugName;\r\nvar _debugIntState;\r\n/**\r\n * @internal\r\n * @ignore\r\n */\r\nvar _customErrors = {};\r\n/**\r\n * @internal\r\n * @ignore\r\n * Empty reject function to avoid trying to re-reject\r\n */\r\nfunction _rejectDone() {\r\n    // A Do nothing function\r\n}\r\nfunction _createError(type, evt, message) {\r\n    // Lazily create the class\r\n    !_customErrors[type] && (_customErrors[type] = createCustomError(type));\r\n    var now = utcNow();\r\n    return new (_customErrors[type])(\"Task [\".concat(evt.id, \"] \").concat(message || \"\", \"- \").concat((evt.st ? \"Running\" : \"Waiting\"), \": \").concat(_calcTime(now, evt.st || evt.cr)));\r\n}\r\n/**\r\n * @internal\r\n * @ignore\r\n * Internal function used for displaying the time in milliseconds (during debugging)\r\n * @param now - The current time\r\n * @param start - The start time to subtract\r\n * @returns A string representation of the time difference\r\n */\r\nfunction _calcTime(now, start) {\r\n    return ((now - start) || \"0\") + \" ms\";\r\n}\r\n/**\r\n * Abort any stale tasks in the provided task Queue\r\n * @param taskQueue - The Task Queue to search\r\n * @param staleTimeoutPeriod - The maxumum stale timeout period\r\n */\r\nfunction _abortStaleTasks(taskQueue, staleTimeoutPeriod) {\r\n    var now = utcNow();\r\n    var expired = now - staleTimeoutPeriod;\r\n    arrForEach(taskQueue, function (evt) {\r\n        if (evt && !evt.rj && (evt.st && evt.st < expired) || (!evt.st && evt.cr && evt.cr < expired)) {\r\n            evt && evt[REJECT](evt.rj || _createError(\"Aborted\", evt, \"Stale \"));\r\n        }\r\n    });\r\n}\r\n/**\r\n * @internal\r\n * @ignore\r\n * Remove the `taskDetail` from the `queue` if present\r\n * @param queue - The Task Queue\r\n * @param taskDetail - The Task detail to be removed\r\n */\r\nfunction _removeTask(queue, taskDetail) {\r\n    var idx = arrIndexOf(queue, taskDetail);\r\n    if (idx !== -1) {\r\n        queue.splice(idx, 1);\r\n    }\r\n}\r\n/**\r\n * @internal\r\n * @ignore Internal function to add the debug state to the promise, this code is removed from the production artifacts\r\n * @param theScheduler - The scheduler instance to add the debug accessors to.\r\n * @param nameFn - The function to return then name of this scheduler\r\n * @param stateFn - The function to return the internal state of the scheduler\r\n */\r\nfunction _addDebugState(theScheduler, nameFn, stateFn) {\r\n    _debugName = _debugName || { toString: function () { return \"[[SchedulerName]]\"; } };\r\n    _debugIntState = _debugIntState || { toString: function () { return \"[[SchedulerState]]\"; } };\r\n    objDefineProp(theScheduler, _debugName, { get: nameFn });\r\n    objDefineProp(theScheduler, _debugIntState, { get: stateFn });\r\n}\r\n/**\r\n * Create a Task Scheduler using the optional promise implementation and scheduler name.\r\n * The newPromise can be any value promise creation function, where the execution of the\r\n * queued tasks will be processed based on how the promise implementation processes it's\r\n * chained promises (asynchrounsly; synchronously; idle processing, etc)\r\n *\r\n * The functions used to start each task my return a result (synchronous execution) or an\r\n * {@link IPromise}, `PromiseLike` or `Promise` result (asynchronous execution).\r\n *\r\n * Each task is executed in the order that it was queued and the provided `startTask` function\r\n * will not be called until all previous tasks have completed (whther they resolve or reject).\r\n * The result from any previous task does not affect and is not passed to any later scheduled\r\n * task, if you need this capability then your `startTask` functions will need to co-operate to\r\n * share any common context.\r\n *\r\n * By default, queued tasks which have either been \"waiting\" to run or have been running longer\r\n * then 10 minutes will be Auto-Rejected to try and free up resources. If a task is running when\r\n * it rejected then it will continue to \"run\" based on whatever operation it's `startTask` is\r\n * performing. If a task has not yet had it's `startTask` function called it will never get called.\r\n * In both cases the `IPromise` returned by the call to {@link ITaskScheduler.queue | queue} the\r\n * task will be `rejected`. You can change this default time, including disabling completly via\r\n * the {@link ITaskScheduler.setStaleTimeout | setStaleTimeout}\r\n * function.\r\n * @since 0.2.0\r\n * @group Scheduler\r\n * @param newPromise - The function to use for creating a new promise when required, if not\r\n * provided this will default to {@link createPromise} which will use the default registered\r\n * promise creation function which defaults to runtime native promises or async Promise if not\r\n * supported by the runtime.\r\n * @param name - The name you want to associated with this scheduler, mostly useful for debugging\r\n * @returns A new ITaskScheduler instance\r\n * @example\r\n * ```ts\r\n * let scheduler = createTaskScheduler();\r\n *\r\n * // Schedule a task using the ts-async helper promise functions\r\n * scheduler.queue(() => {\r\n *     return createPromise((resolve, reject) => {\r\n *         scheduleTimeout(() => {\r\n *             // Do something after a delay\r\n *         }, 100);\r\n *     });\r\n * });\r\n *\r\n * // Schedule an asynchronous task which uses async/await\r\n * scheduler.queue(async () => {\r\n *     // This task will only execute after the previous task has completed\r\n *     await performAnotherAsyncTask();\r\n * });\r\n *\r\n * // Schedule a synchronous task that executes and completes immediately\r\n * scheduled.queue(() => {\r\n *     // Do some synchronous task\r\n *     return 42;\r\n * });\r\n *\r\n * // Schedule an asynchronous task which returns a promise\r\n * scheduled.queue(() => {\r\n *     return doAwait(fetch(\"https://github.com/nevware21/ts-async/blob/main/README.md\"), (response) => {\r\n *         let theReadMe = response.text();\r\n *         // Do something with the readme\r\n *     });\r\n * });\r\n * ```\r\n */\r\nexport function createTaskScheduler(newPromise, name) {\r\n    var _theTask;\r\n    var _running = [];\r\n    var _waiting = [];\r\n    var _staleTimeoutPeriod = 600000; // 10 Minutes\r\n    var _staleTimeoutCheckPeriod = _staleTimeoutPeriod / 10; // 1 Minute\r\n    var _taskCount = 0;\r\n    var _schedulerName = (name ? (name + \".\") : \"\") + _schedulerId++;\r\n    var _blockedTimer;\r\n    // Make sure that a promise creator has been assigned\r\n    newPromise = newPromise || createPromise;\r\n    var _startBlockedTimer = function () {\r\n        var hasTasks = (getLength(_running) + getLength(_waiting)) > 0;\r\n        if (_staleTimeoutPeriod > 0) {\r\n            if (!_blockedTimer) {\r\n                // Only attempt to drop stale / blocked tasks if the timeout period is defined\r\n                _blockedTimer = scheduleTimeout(function () {\r\n                    _abortStaleTasks(_running, _staleTimeoutPeriod);\r\n                    _abortStaleTasks(_waiting, _staleTimeoutPeriod);\r\n                    _blockedTimer && (_blockedTimer.enabled = ((getLength(_running) + getLength(_waiting)) > 0));\r\n                }, _staleTimeoutCheckPeriod);\r\n                _blockedTimer.unref();\r\n            }\r\n            _blockedTimer && (_blockedTimer.enabled = hasTasks);\r\n        }\r\n        else {\r\n            //#ifdef DEBUG\r\n            //#:(!DEBUG) _debugLog(_schedulerName, \"Stale Timer disabled\");\r\n            //#endif\r\n        }\r\n    };\r\n    var _queueTask = function (startAction, taskName, timeout) {\r\n        var _a;\r\n        var taskId = _schedulerName + \".\" + _taskCount++;\r\n        if (taskName) {\r\n            taskId += \"-(\" + taskName + \")\";\r\n        }\r\n        var newTask = (_a = {\r\n                id: taskId,\r\n                cr: utcNow(),\r\n                to: timeout\r\n            },\r\n            _a[REJECT] = function (reason) {\r\n                newTask.rj = reason || _createError(REJECTED_ERROR, newTask);\r\n                newTask[REJECT] = _rejectDone;\r\n            },\r\n            _a);\r\n        if (!_theTask) {\r\n            // We don't have any currently running task, so just start the next task\r\n            newTask.p = newPromise(_runTask(newTask, startAction));\r\n        }\r\n        else {\r\n            // Start a new promise which will wait until all current active tasks are completed before starting\r\n            // the new task, it does not resolve this scheduled task until after the new task is resolve to\r\n            // ensure that all scheduled tasks are completed in the correct order\r\n            newTask.p = _waitForPreviousTask(newTask, _theTask, startAction);\r\n        }\r\n        // Set this new task as the last one, so that any future tasks will wait for this one\r\n        _theTask = newTask;\r\n        return newTask.p;\r\n    };\r\n    var _runTask = function (taskDetail, startAction) {\r\n        taskDetail.st = utcNow();\r\n        // There should only ever be a single \"running\" task, but using an array\r\n        // for code reuse.\r\n        _running.push(taskDetail);\r\n        _startBlockedTimer();\r\n        // Create and return the promise executor for this action\r\n        return function (onTaskResolve, onTaskReject) {\r\n            var _promiseReject = function (reason) {\r\n                taskDetail.rj = taskDetail.rj || reason || _createError(REJECTED_ERROR, taskDetail);\r\n                taskDetail[REJECT] = _rejectDone;\r\n                _doCleanup(taskDetail);\r\n                onTaskResolve = null;\r\n                onTaskReject && onTaskReject(reason);\r\n                onTaskReject = null;\r\n            };\r\n            var taskId = taskDetail.id;\r\n            if (taskDetail.rj) {\r\n                // Already aborted / pre-rejected\r\n                _promiseReject(taskDetail.rj);\r\n            }\r\n            else {\r\n                //#ifdef DEBUG\r\n                //#:(!DEBUG) _debugLog(_schedulerName, \"Task [\" + taskId + \"] Started after \" + _calcTime(taskDetail.st, taskDetail.cr));\r\n                //#endif\r\n                taskDetail[REJECT] = _promiseReject;\r\n                try {\r\n                    var startResult = startAction(taskId);\r\n                    if (taskDetail.to && isPromiseLike(startResult)) {\r\n                        taskDetail.t = scheduleTimeout(function () {\r\n                            _promiseReject(_createError(\"Timeout\", taskDetail));\r\n                        }, taskDetail.to);\r\n                    }\r\n                    doAwait(startResult, function (theResult) {\r\n                        _doCleanup(taskDetail);\r\n                        try {\r\n                            onTaskResolve && onTaskResolve(theResult);\r\n                        }\r\n                        catch (e) {\r\n                            onTaskReject && onTaskReject(e);\r\n                        }\r\n                        onTaskReject = null;\r\n                        onTaskResolve = null;\r\n                    }, _promiseReject);\r\n                }\r\n                catch (e) {\r\n                    _promiseReject(e);\r\n                }\r\n            }\r\n        };\r\n    };\r\n    var _waitForPreviousTask = function (taskDetail, prevTask, startAction) {\r\n        _waiting.push(taskDetail);\r\n        _startBlockedTimer();\r\n        return newPromise(function (onWaitResolve, onWaitReject) {\r\n            //#ifdef DEBUG\r\n            //#:(!DEBUG) let taskId = taskDetail.id;\r\n            //#:(!DEBUG) let prevTaskId = prevTask.id;\r\n            //#:(!DEBUG) _debugLog(_schedulerName, \"[\" + taskId + \"] is waiting for [\" + prevTaskId + \"] to complete before starting -- [\" + _waiting.length + \"] waiting\");\r\n            //#endif\r\n            // Wait for the previous tasks to complete before starting this one.\r\n            // This ensures the queue execution order and avoids removing tasks that\r\n            // have not yet been started.\r\n            doAwaitResponse(prevTask.p, function () {\r\n                _removeTask(_waiting, taskDetail);\r\n                _runTask(taskDetail, startAction)(onWaitResolve, onWaitReject);\r\n            });\r\n        });\r\n    };\r\n    var _doCleanup = function (taskDetail) {\r\n        _removeTask(_running, taskDetail);\r\n        // If there was a timeout stop and clear\r\n        taskDetail.t && taskDetail.t.cancel();\r\n        taskDetail.t = null;\r\n        // Clear the matching current task now that it's complete\r\n        if (_theTask && _theTask === taskDetail) {\r\n            _theTask = null;\r\n            if (getLength(_running) + getLength(_waiting) === 0) {\r\n                _blockedTimer && _blockedTimer.cancel();\r\n                _blockedTimer = null;\r\n            }\r\n        }\r\n    };\r\n    var theScheduler = {\r\n        idle: true,\r\n        queue: _queueTask,\r\n        setStaleTimeout: function (staleTimeout, staleCheckPeriod) {\r\n            _blockedTimer && _blockedTimer.cancel();\r\n            _blockedTimer = null;\r\n            _staleTimeoutPeriod = staleTimeout;\r\n            _staleTimeoutCheckPeriod = staleCheckPeriod || staleTimeout / 10;\r\n            _startBlockedTimer();\r\n        }\r\n    };\r\n    // Change the idle property to dynamic\r\n    objDefine(theScheduler, \"idle\", {\r\n        g: function () {\r\n            return getLength(_running) + getLength(_waiting) === 0;\r\n        }\r\n    });\r\n    _addDebugState(theScheduler, function () { return _schedulerName; }, function () {\r\n        return {\r\n            l: _theTask,\r\n            r: _running,\r\n            w: _waiting\r\n        };\r\n    });\r\n    return theScheduler;\r\n}\r\n//# sourceMappingURL=taskScheduler.js.map","/*\r\n * @nevware21/ts-async\r\n * https://github.com/nevware21/ts-async\r\n *\r\n * Copyright (c) 2022 NevWare21 Solutions LLC\r\n * Licensed under the MIT license.\r\n */\r\nimport { getKnownSymbol, objDefineProp } from \"@nevware21/ts-utils\";\r\nimport { createAsyncAllPromise, createAsyncAllSettledPromise, createAsyncAnyPromise, createAsyncPromise, createAsyncRacePromise, createAsyncRejectedPromise, createAsyncResolvedPromise } from \"../promise/asyncPromise\";\r\nvar toStringTagSymbol = getKnownSymbol(11 /* WellKnownSymbols.toStringTag */);\r\n/**\r\n * A full polyfill for the Promise class.\r\n * Represents the completion of an asynchronous operation, and its resulting value.\r\n * @since 0.5.0\r\n * @class\r\n * @group Polyfill\r\n * @group Promise\r\n */\r\nexport var PolyPromise = /*#__PURE__*/ (function () {\r\n    /**\r\n     * Creates a new Promise.\r\n     * @constructor\r\n     * @param executor A callback used to initialize the promise. This callback is passed two arguments:\r\n     * a resolve callback used to resolve the promise with a value or the result of another promise,\r\n     * and a reject callback used to reject the promise with a provided reason or error.\r\n     */\r\n    function PolyPromiseImpl(executor) {\r\n        this._$ = createAsyncPromise(executor);\r\n        if (toStringTagSymbol) {\r\n            this[toStringTagSymbol] = \"Promise\";\r\n        }\r\n        // Re-Expose the state of the underlying promise\r\n        objDefineProp(this, \"state\", {\r\n            get: function () {\r\n                return this._$.state;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     */\r\n    PolyPromiseImpl.all = createAsyncAllPromise;\r\n    PolyPromiseImpl.race = createAsyncRacePromise;\r\n    PolyPromiseImpl.any = createAsyncAnyPromise;\r\n    PolyPromiseImpl.reject = createAsyncRejectedPromise;\r\n    PolyPromiseImpl.resolve = createAsyncResolvedPromise;\r\n    PolyPromiseImpl.allSettled = createAsyncAllSettledPromise;\r\n    var theProto = PolyPromiseImpl.prototype;\r\n    theProto.then = function (onResolved, onRejected) {\r\n        return this._$.then(onResolved, onRejected);\r\n    };\r\n    theProto.catch = function (onRejected) {\r\n        return this._$.catch(onRejected);\r\n    };\r\n    theProto.finally = function (onfinally) {\r\n        return this._$.finally(onfinally);\r\n    };\r\n    return PolyPromiseImpl;\r\n}());\r\n//# sourceMappingURL=promise.js.map"],"names":["isPromiseLike","_addDebugState","objDefineProperties","getDocument","createCachedValue","safe","getInst","dumpObj","isFunction","createCustomError","arrSlice","isUndefined","scheduleTimeout","isNode","getWindow","getGlobal","objDefine","objDefineProp","objToString","hasSymbol","getKnownSymbol","throwTypeError","iterForOf","isArray","arrForEach","isIterable","isNumber","scheduleIdleCallback","utcNow","getLength","isIterator","fnCall","arrIndexOf"],"mappings":"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"}