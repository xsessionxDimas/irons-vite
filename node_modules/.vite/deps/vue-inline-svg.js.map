{
  "version": 3,
  "sources": ["../../vue-inline-svg/src/index.js"],
  "sourcesContent": ["// peer dep is not installed during test\r\n// eslint-disable-next-line import/no-unresolved\r\nimport { h as createElement } from 'vue';\r\n\r\n/** @type {Record<string, PromiseWithState<Element>>} */\r\nconst cache = {};\r\n\r\n/**\r\n * Remove false attrs\r\n * @param {Object} attrs\r\n */\r\nfunction filterAttrs(attrs) {\r\n    return Object.keys(attrs).reduce((result, key) => {\r\n        if (attrs[key] !== false && attrs[key] !== null && attrs[key] !== undefined) {\r\n            result[key] = attrs[key];\r\n        }\r\n        return result;\r\n    }, {});\r\n}\r\n\r\nconst InlineSvg = {\r\n    name: 'InlineSvg',\r\n    inheritAttrs: false,\r\n    render() {\r\n        if (!this.svgElSource) {\r\n            return null;\r\n        }\r\n        return createElement(\r\n            'svg',\r\n            Object.assign(\r\n                {},\r\n                // source attrs\r\n                this.getSvgAttrs(this.svgElSource),\r\n                // component attrs and listeners\r\n                filterAttrs(this.$attrs),\r\n                // content\r\n                { innerHTML: this.getSvgContent(this.svgElSource) },\r\n            ),\r\n        );\r\n    },\r\n    props: {\r\n        src: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n        title: {\r\n            type: String,\r\n        },\r\n        transformSource: {\r\n            type: Function,\r\n            default: (svg) => svg,\r\n        },\r\n        keepDuringLoading: {\r\n            type: Boolean,\r\n            default: true,\r\n        },\r\n    },\r\n    emits: ['loaded', 'unloaded', 'error'],\r\n    data() {\r\n        return {\r\n            /** @type {SVGElement} */\r\n            svgElSource: null,\r\n            /** @type {XMLHttpRequest} */\r\n            request: undefined,\r\n        };\r\n    },\r\n    watch: {\r\n        src(newValue) {\r\n            // re-generate cached svg (`svgElSource`)\r\n            this.getSource(newValue);\r\n        },\r\n    },\r\n    mounted() {\r\n        // generate `svgElSource`\r\n        this.getSource(this.src);\r\n    },\r\n    methods: {\r\n        getSvgAttrs(svgEl) {\r\n            // copy attrs\r\n            let svgAttrs = {};\r\n            const attrs = svgEl.attributes;\r\n            if (!attrs) {\r\n                return svgAttrs;\r\n            }\r\n            for (let i = attrs.length - 1; i >= 0; i--) {\r\n                svgAttrs[attrs[i].name] = attrs[i].value;\r\n            }\r\n            return svgAttrs;\r\n        },\r\n        getSvgContent(svgEl) {\r\n            svgEl = svgEl.cloneNode(true);\r\n            svgEl = this.transformSource(svgEl);\r\n            if (this.title) {\r\n                setTitle(svgEl, this.title);\r\n            }\r\n\r\n            // copy inner html\r\n            return svgEl.innerHTML;\r\n        },\r\n        /**\r\n         * Get svgElSource\r\n         * @param {string} src\r\n         */\r\n        getSource(src) {\r\n            // fill cache by src with promise\r\n            if (!cache[src]) {\r\n                // download\r\n                cache[src] = this.download(src);\r\n            }\r\n            // notify svg is unloaded\r\n            if (this.svgElSource && cache[src].getIsPending() && !this.keepDuringLoading) {\r\n                this.svgElSource = null;\r\n                this.$emit('unloaded');\r\n            }\r\n\r\n            // inline svg when cached promise resolves\r\n            cache[src]\r\n                .then((svg) => {\r\n                    this.svgElSource = svg;\r\n                    // wait to render\r\n                    this.$nextTick(() => {\r\n                        // notify\r\n                        this.$emit('loaded', this.$el);\r\n                    });\r\n                })\r\n                .catch((err) => {\r\n                    // notify svg is unloaded\r\n                    if (this.svgElSource) {\r\n                        this.svgElSource = null;\r\n                        this.$emit('unloaded');\r\n                    }\r\n                    // remove cached rejected promise so next image can try load again\r\n                    delete cache[src];\r\n                    this.$emit('error', err);\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Get the contents of the SVG\r\n         * @param {string} url\r\n         * @returns {PromiseWithState<Element>}\r\n         */\r\n        download(url) {\r\n            return makePromiseState(new Promise((resolve, reject) => {\r\n                const request = new XMLHttpRequest();\r\n                request.open('GET', url, true);\r\n                this.request = request;\r\n\r\n                request.onload = () => {\r\n                    if (request.status >= 200 && request.status < 400) {\r\n                        try {\r\n                            // Setup a parser to convert the response to text/xml in order for it to be manipulated and changed\r\n                            const parser = new DOMParser();\r\n                            const result = parser.parseFromString(request.responseText, 'text/xml');\r\n                            let svgEl = result.getElementsByTagName('svg')[0];\r\n                            if (svgEl) {\r\n                                // svgEl = this.transformSource(svgEl);\r\n                                resolve(svgEl);\r\n                            } else {\r\n                                reject(new Error('Loaded file is not valid SVG\"'));\r\n                            }\r\n                        } catch (e) {\r\n                            reject(e);\r\n                        }\r\n                    } else {\r\n                        reject(new Error('Error loading SVG'));\r\n                    }\r\n                };\r\n\r\n                request.onerror = reject;\r\n                request.send();\r\n            }));\r\n        },\r\n    },\r\n};\r\n\r\n/**\r\n * Create or edit the <title> element of a SVG\r\n * @param {SVGElement} svg\r\n * @param {string} title\r\n */\r\nfunction setTitle(svg, title) {\r\n    const titleTags = svg.getElementsByTagName('title');\r\n    if (titleTags.length) { // overwrite existing title\r\n        titleTags[0].textContent = title;\r\n    } else { // create a title element if one doesn't already exist\r\n        const titleEl = document.createElementNS('http://www.w3.org/2000/svg', 'title');\r\n        titleEl.textContent = title;\r\n        // svg.prepend(titleEl);\r\n        svg.insertBefore(titleEl, svg.firstChild);\r\n    }\r\n}\r\n\r\n/**\r\n * @typedef {Promise & object} PromiseWithState\r\n * @property {function: boolean} getIsPending\r\n * @template T\r\n */\r\n\r\n/**\r\n * This function allow you to modify a JS Promise by adding some status properties.\r\n * @template {any} T\r\n * @param {Promise<T>|PromiseWithState<T>} promise\r\n * @return {PromiseWithState<T>}\r\n */\r\nfunction makePromiseState(promise) {\r\n    // Don't modify any promise that has been already modified.\r\n    if (promise.getIsPending) return promise;\r\n\r\n    // Set initial state\r\n    let isPending = true;\r\n\r\n    // Observe the promise, saving the fulfillment in a closure scope.\r\n    let result = promise.then(\r\n        (v) => {\r\n            isPending = false;\r\n            return v;\r\n        },\r\n        (e) => {\r\n            isPending = false;\r\n            throw e;\r\n        },\r\n    );\r\n\r\n    result.getIsPending = function getIsPending() { return isPending; };\r\n    return result;\r\n}\r\n\r\nexport default InlineSvg;\r\n"],
  "mappings": "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",
  "names": []
}
