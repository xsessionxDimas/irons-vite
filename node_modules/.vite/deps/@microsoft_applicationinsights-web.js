import {
  ActiveStatus,
  AnalyticsPluginIdentifier,
  AppInsightsCore,
  BaseTelemetryPlugin,
  BreezeChannelIdentifier,
  ContextTagKeys,
  CtxTagKeys,
  DEFAULT_BREEZE_ENDPOINT,
  DEFAULT_BREEZE_PATH,
  Data,
  DisabledPropertyName,
  DistributedTracingModes,
  Envelope,
  Event as Event2,
  EventPersistence,
  Exception,
  Extensions,
  HttpMethod,
  InstrumentEvent,
  InstrumentFunc,
  InstrumentProto,
  LoggingSeverity,
  Metric,
  NotificationManager,
  PageView,
  PageViewPerformance,
  PerfEvent,
  PerfManager,
  ProcessLegacy,
  PropertiesPluginIdentifier,
  RemoteDependencyData,
  RequestHeaders,
  SampleRate,
  SenderPostManager,
  SeverityLevel,
  ThrottleMgr,
  Trace,
  _InternalLogMessage,
  __assignFn,
  __extendsFn,
  _logInternalMessage,
  _throwInternal,
  _warnToConsole,
  addPageHideEventListener,
  addPageUnloadEventListener,
  arrForEach,
  arrIndexOf,
  cfgDfBoolean,
  cfgDfMerge,
  cfgDfSet,
  cfgDfString,
  cfgDfValidate,
  correlationIdCanIncludeCorrelationHeader,
  correlationIdGetCorrelationContext,
  createAsyncPromise,
  createDistributedTraceContextFromTrace,
  createDomEvent,
  createDynamicConfig,
  createOfflineListener,
  createProcessTelemetryContext,
  createPromise,
  createTelemetryItem,
  createTraceParent,
  createUniqueNamespace,
  dataSanitizeString,
  dataSanitizeUrl,
  dateTimeUtilsDuration,
  dateTimeUtilsNow,
  doAwaitResponse,
  doPerf,
  dumpObj,
  dynamicProto,
  eventOff,
  eventOn,
  findAllScripts,
  formatErrorMessageXdr,
  formatErrorMessageXhr,
  formatTraceParent,
  generateW3CId,
  getDocument,
  getExceptionName,
  getGlobal,
  getHistory,
  getIEVersion,
  getJSON,
  getLocation,
  getNavigator,
  getPerformance,
  getSetValue,
  getWindow,
  hasDocument,
  hasHistory,
  hasJSON,
  hasWindow,
  isArray,
  isBeaconsSupported,
  isCrossOriginError,
  isError,
  isFeatureEnabled,
  isFetchSupported,
  isFunction,
  isInternalApplicationInsightsEndpoint,
  isNullOrUndefined,
  isNumber,
  isObject,
  isPlainObject,
  isPromiseLike,
  isReactNative,
  isString,
  isTruthy,
  isUndefined,
  isWebWorker,
  isXhrSupported,
  mergeEvtNamespace,
  msToTimeSpan,
  newId,
  normalizeJsName,
  objDeepFreeze,
  objDefine,
  objExtend,
  objExtend2,
  objForEachKey,
  objFreeze,
  objKeys,
  onConfigChange,
  optimizeObject,
  parseConnectionString,
  parseResponse,
  prependTransports,
  proxyAssign,
  proxyFunctions,
  removePageHideEventListener,
  removePageUnloadEventListener,
  runTargetUnload,
  safeGetCookieMgr,
  safeGetLogger,
  scheduleTimeout,
  sendCustomEvent,
  setValue,
  setValueByKey,
  strIndexOf,
  strNotSpecified,
  strShimPrototype,
  strShimUndefined,
  strSplit,
  strSubstr,
  strTrim,
  throwError,
  throwUnsupported,
  toISOString,
  urlGetAbsoluteUrl,
  urlGetCompleteUrl,
  utcNow,
  utlCanUseLocalStorage,
  utlCanUseSessionStorage,
  utlDisableStorage,
  utlEnableStorage,
  utlGetLocalStorage,
  utlGetSessionStorage,
  utlRemoveSessionStorage,
  utlRemoveStorage,
  utlSetLocalStorage,
  utlSetSessionStorage,
  utlSetStoragePrefix
} from "./chunk-6YZSP5GA.js";
import "./chunk-PR4QN5HX.js";

// node_modules/@microsoft/applicationinsights-analytics-js/dist-es5/__DynamicConstants.js
var _DYN_TO_STRING = "toString";
var _DYN_IS_STORAGE_USE_DISAB0 = "isStorageUseDisabled";
var _DYN__ADD_HOOK = "_addHook";
var _DYN_CORE = "core";
var _DYN_DATA_TYPE = "dataType";
var _DYN_ENVELOPE_TYPE = "envelopeType";
var _DYN_DIAG_LOG = "diagLog";
var _DYN_TRACK = "track";
var _DYN_TRACK_PAGE_VIEW = "trackPageView";
var _DYN_TRACK_PREVIOUS_PAGE_1 = "trackPreviousPageVisit";
var _DYN_SEND_PAGE_VIEW_INTER2 = "sendPageViewInternal";
var _DYN_START_TIME = "startTime";
var _DYN_PROPERTIES = "properties";
var _DYN_DURATION = "duration";
var _DYN_SEND_PAGE_VIEW_PERFO3 = "sendPageViewPerformanceInternal";
var _DYN_POPULATE_PAGE_VIEW_P4 = "populatePageViewPerformanceEvent";
var _DYN_HREF = "href";
var _DYN_SEND_EXCEPTION_INTER5 = "sendExceptionInternal";
var _DYN_EXCEPTION = "exception";
var _DYN_ERROR = "error";
var _DYN__ONERROR = "_onerror";
var _DYN_ERROR_SRC = "errorSrc";
var _DYN_LINE_NUMBER = "lineNumber";
var _DYN_COLUMN_NUMBER = "columnNumber";
var _DYN_MESSAGE = "message";
var _DYN__CREATE_AUTO_EXCEPTI6 = "CreateAutoException";
var _DYN_ADD_TELEMETRY_INITIA7 = "addTelemetryInitializer";
var _DYN_OVERRIDE_PAGE_VIEW_D8 = "overridePageViewDuration";
var _DYN_AUTO_TRACK_PAGE_VISI9 = "autoTrackPageVisitTime";
var _DYN_IS_BROWSER_LINK_TRAC10 = "isBrowserLinkTrackingEnabled";
var _DYN_LENGTH = "length";
var _DYN_ENABLE_AUTO_ROUTE_TR11 = "enableAutoRouteTracking";
var _DYN_ENABLE_UNHANDLED_PRO12 = "enableUnhandledPromiseRejectionTracking";
var _DYN_AUTO_UNHANDLED_PROMI13 = "autoUnhandledPromiseInstrumented";
var _DYN_GET_ENTRIES_BY_TYPE = "getEntriesByType";
var _DYN_IS_PERFORMANCE_TIMIN14 = "isPerformanceTimingSupported";
var _DYN_GET_PERFORMANCE_TIMI15 = "getPerformanceTiming";
var _DYN_NAVIGATION_START = "navigationStart";
var _DYN_SHOULD_COLLECT_DURAT16 = "shouldCollectDuration";
var _DYN_IS_PERFORMANCE_TIMIN17 = "isPerformanceTimingDataReady";
var _DYN_RESPONSE_START = "responseStart";
var _DYN_REQUEST_START = "requestStart";
var _DYN_LOAD_EVENT_END = "loadEventEnd";
var _DYN_RESPONSE_END = "responseEnd";
var _DYN_CONNECT_END = "connectEnd";
var _DYN_PAGE_VISIT_START_TIM18 = "pageVisitStartTime";

// node_modules/@microsoft/applicationinsights-analytics-js/dist-es5/JavaScriptSDK/Telemetry/PageViewManager.js
var PageViewManager = (
  /** @class */
  function() {
    function PageViewManager2(appInsights, overridePageViewDuration, core, pageViewPerformanceManager) {
      dynamicProto(PageViewManager2, this, function(_self) {
        var queueTimer = null;
        var itemQueue = [];
        var pageViewPerformanceSent = false;
        var firstPageViewSent = false;
        var _logger;
        if (core) {
          _logger = core.logger;
        }
        function _flushChannels(isAsync) {
          if (core) {
            core.flush(isAsync, function() {
            });
          }
        }
        function _startTimer() {
          if (!queueTimer) {
            queueTimer = scheduleTimeout(function() {
              queueTimer = null;
              var allItems = itemQueue.slice(0);
              var doFlush = false;
              itemQueue = [];
              arrForEach(allItems, function(item) {
                if (!item()) {
                  itemQueue.push(item);
                } else {
                  doFlush = true;
                }
              });
              if (itemQueue[
                _DYN_LENGTH
                /* @min:%2elength */
              ] > 0) {
                _startTimer();
              }
              if (doFlush) {
                _flushChannels(true);
              }
            }, 100);
          }
        }
        function _addQueue(cb) {
          itemQueue.push(cb);
          _startTimer();
        }
        _self[
          _DYN_TRACK_PAGE_VIEW
          /* @min:%2etrackPageView */
        ] = function(pageView, customProperties) {
          var name = pageView.name;
          if (isNullOrUndefined(name) || typeof name !== "string") {
            var doc = getDocument();
            name = pageView.name = doc && doc.title || "";
          }
          var uri = pageView.uri;
          if (isNullOrUndefined(uri) || typeof uri !== "string") {
            var location_1 = getLocation();
            uri = pageView.uri = location_1 && location_1[
              _DYN_HREF
              /* @min:%2ehref */
            ] || "";
          }
          if (!firstPageViewSent) {
            var perf = getPerformance();
            var navigationEntries = perf && perf[
              _DYN_GET_ENTRIES_BY_TYPE
              /* @min:%2egetEntriesByType */
            ] && perf[
              _DYN_GET_ENTRIES_BY_TYPE
              /* @min:%2egetEntriesByType */
            ]("navigation");
            if (navigationEntries && navigationEntries[0] && !isUndefined(perf.timeOrigin)) {
              var loadEventStart = navigationEntries[0].loadEventStart;
              pageView[
                _DYN_START_TIME
                /* @min:%2estartTime */
              ] = new Date(perf.timeOrigin + loadEventStart);
            } else {
              var duration_1 = (customProperties || pageView[
                _DYN_PROPERTIES
                /* @min:%2eproperties */
              ] || {})[
                _DYN_DURATION
                /* @min:%2eduration */
              ] || 0;
              pageView[
                _DYN_START_TIME
                /* @min:%2estartTime */
              ] = new Date((/* @__PURE__ */ new Date()).getTime() - duration_1);
            }
            firstPageViewSent = true;
          }
          if (!pageViewPerformanceManager[
            _DYN_IS_PERFORMANCE_TIMIN14
            /* @min:%2eisPerformanceTimingSupported */
          ]()) {
            appInsights[
              _DYN_SEND_PAGE_VIEW_INTER2
              /* @min:%2esendPageViewInternal */
            ](pageView, customProperties);
            _flushChannels(true);
            if (!isWebWorker()) {
              _throwInternal(_logger, 2, 25, "trackPageView: navigation timing API used for calculation of page duration is not supported in this browser. This page view will be collected without duration and timing info.");
            }
            return;
          }
          var pageViewSent = false;
          var customDuration;
          var start = pageViewPerformanceManager[
            _DYN_GET_PERFORMANCE_TIMI15
            /* @min:%2egetPerformanceTiming */
          ]()[
            _DYN_NAVIGATION_START
            /* @min:%2enavigationStart */
          ];
          if (start > 0) {
            customDuration = dateTimeUtilsDuration(start, +/* @__PURE__ */ new Date());
            if (!pageViewPerformanceManager[
              _DYN_SHOULD_COLLECT_DURAT16
              /* @min:%2eshouldCollectDuration */
            ](customDuration)) {
              customDuration = void 0;
            }
          }
          var duration;
          if (!isNullOrUndefined(customProperties) && !isNullOrUndefined(customProperties[
            _DYN_DURATION
            /* @min:%2eduration */
          ])) {
            duration = customProperties[
              _DYN_DURATION
              /* @min:%2eduration */
            ];
          }
          if (overridePageViewDuration || !isNaN(duration)) {
            if (isNaN(duration)) {
              if (!customProperties) {
                customProperties = {};
              }
              customProperties[
                _DYN_DURATION
                /* @min:%2eduration */
              ] = customDuration;
            }
            appInsights[
              _DYN_SEND_PAGE_VIEW_INTER2
              /* @min:%2esendPageViewInternal */
            ](pageView, customProperties);
            _flushChannels(true);
            pageViewSent = true;
          }
          var maxDurationLimit = 6e4;
          if (!customProperties) {
            customProperties = {};
          }
          _addQueue(function() {
            var processed = false;
            try {
              if (pageViewPerformanceManager[
                _DYN_IS_PERFORMANCE_TIMIN17
                /* @min:%2eisPerformanceTimingDataReady */
              ]()) {
                processed = true;
                var pageViewPerformance = {
                  name,
                  uri
                };
                pageViewPerformanceManager[
                  _DYN_POPULATE_PAGE_VIEW_P4
                  /* @min:%2epopulatePageViewPerformanceEvent */
                ](pageViewPerformance);
                if (!pageViewPerformance.isValid && !pageViewSent) {
                  customProperties[
                    _DYN_DURATION
                    /* @min:%2eduration */
                  ] = customDuration;
                  appInsights[
                    _DYN_SEND_PAGE_VIEW_INTER2
                    /* @min:%2esendPageViewInternal */
                  ](pageView, customProperties);
                } else {
                  if (!pageViewSent) {
                    customProperties[
                      _DYN_DURATION
                      /* @min:%2eduration */
                    ] = pageViewPerformance.durationMs;
                    appInsights[
                      _DYN_SEND_PAGE_VIEW_INTER2
                      /* @min:%2esendPageViewInternal */
                    ](pageView, customProperties);
                  }
                  if (!pageViewPerformanceSent) {
                    appInsights[
                      _DYN_SEND_PAGE_VIEW_PERFO3
                      /* @min:%2esendPageViewPerformanceInternal */
                    ](pageViewPerformance, customProperties);
                    pageViewPerformanceSent = true;
                  }
                }
              } else if (start > 0 && dateTimeUtilsDuration(start, +/* @__PURE__ */ new Date()) > maxDurationLimit) {
                processed = true;
                if (!pageViewSent) {
                  customProperties[
                    _DYN_DURATION
                    /* @min:%2eduration */
                  ] = maxDurationLimit;
                  appInsights[
                    _DYN_SEND_PAGE_VIEW_INTER2
                    /* @min:%2esendPageViewInternal */
                  ](pageView, customProperties);
                }
              }
            } catch (e) {
              _throwInternal(_logger, 1, 38, "trackPageView failed on page load calculation: " + getExceptionName(e), { exception: dumpObj(e) });
            }
            return processed;
          });
        };
        _self.teardown = function(unloadCtx, unloadState) {
          if (queueTimer) {
            queueTimer.cancel();
            queueTimer = null;
            var allItems = itemQueue.slice(0);
            var doFlush_1 = false;
            itemQueue = [];
            arrForEach(allItems, function(item) {
              if (item()) {
                doFlush_1 = true;
              }
            });
          }
        };
      });
    }
    PageViewManager2.__ieDyn = 1;
    return PageViewManager2;
  }()
);

// node_modules/@microsoft/applicationinsights-analytics-js/dist-es5/JavaScriptSDK/Telemetry/PageViewPerformanceManager.js
var MAX_DURATION_ALLOWED = 36e5;
var botAgentNames = ["googlebot", "adsbot-google", "apis-google", "mediapartners-google"];
function _isPerformanceTimingSupported() {
  var perf = getPerformance();
  return perf && !!perf.timing;
}
function _isPerformanceNavigationTimingSupported() {
  var perf = getPerformance();
  return perf && perf.getEntriesByType && perf.getEntriesByType("navigation")[
    _DYN_LENGTH
    /* @min:%2elength */
  ] > 0;
}
function _isPerformanceTimingDataReady() {
  var perf = getPerformance();
  var timing = perf ? perf.timing : 0;
  return timing && timing.domainLookupStart > 0 && timing[
    _DYN_NAVIGATION_START
    /* @min:%2enavigationStart */
  ] > 0 && timing[
    _DYN_RESPONSE_START
    /* @min:%2eresponseStart */
  ] > 0 && timing[
    _DYN_REQUEST_START
    /* @min:%2erequestStart */
  ] > 0 && timing[
    _DYN_LOAD_EVENT_END
    /* @min:%2eloadEventEnd */
  ] > 0 && timing[
    _DYN_RESPONSE_END
    /* @min:%2eresponseEnd */
  ] > 0 && timing[
    _DYN_CONNECT_END
    /* @min:%2econnectEnd */
  ] > 0 && timing.domLoading > 0;
}
function _getPerformanceTiming() {
  if (_isPerformanceTimingSupported()) {
    return getPerformance().timing;
  }
  return null;
}
function _getPerformanceNavigationTiming() {
  if (_isPerformanceNavigationTimingSupported()) {
    return getPerformance()[
      _DYN_GET_ENTRIES_BY_TYPE
      /* @min:%2egetEntriesByType */
    ]("navigation")[0];
  }
  return null;
}
function _shouldCollectDuration() {
  var durations = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    durations[_i] = arguments[_i];
  }
  var _navigator = getNavigator() || {};
  var userAgent = _navigator.userAgent;
  var isGoogleBot = false;
  if (userAgent) {
    for (var i = 0; i < botAgentNames[
      _DYN_LENGTH
      /* @min:%2elength */
    ]; i++) {
      isGoogleBot = isGoogleBot || strIndexOf(userAgent.toLowerCase(), botAgentNames[i]) !== -1;
    }
  }
  if (isGoogleBot) {
    return false;
  } else {
    for (var i = 0; i < durations[
      _DYN_LENGTH
      /* @min:%2elength */
    ]; i++) {
      if (durations[i] < 0 || durations[i] >= MAX_DURATION_ALLOWED) {
        return false;
      }
    }
  }
  return true;
}
var PageViewPerformanceManager = (
  /** @class */
  function() {
    function PageViewPerformanceManager2(core) {
      var _logger = safeGetLogger(core);
      dynamicProto(PageViewPerformanceManager2, this, function(_self) {
        _self[
          _DYN_POPULATE_PAGE_VIEW_P4
          /* @min:%2epopulatePageViewPerformanceEvent */
        ] = function(pageViewPerformance) {
          pageViewPerformance.isValid = false;
          var navigationTiming = _getPerformanceNavigationTiming();
          var timing = _getPerformanceTiming();
          var total = 0;
          var network = 0;
          var request = 0;
          var response = 0;
          var dom = 0;
          if (navigationTiming || timing) {
            if (navigationTiming) {
              total = navigationTiming[
                _DYN_DURATION
                /* @min:%2eduration */
              ];
              network = navigationTiming[
                _DYN_START_TIME
                /* @min:%2estartTime */
              ] === 0 ? navigationTiming[
                _DYN_CONNECT_END
                /* @min:%2econnectEnd */
              ] : dateTimeUtilsDuration(navigationTiming[
                _DYN_START_TIME
                /* @min:%2estartTime */
              ], navigationTiming[
                _DYN_CONNECT_END
                /* @min:%2econnectEnd */
              ]);
              request = dateTimeUtilsDuration(navigationTiming.requestStart, navigationTiming[
                _DYN_RESPONSE_START
                /* @min:%2eresponseStart */
              ]);
              response = dateTimeUtilsDuration(navigationTiming[
                _DYN_RESPONSE_START
                /* @min:%2eresponseStart */
              ], navigationTiming[
                _DYN_RESPONSE_END
                /* @min:%2eresponseEnd */
              ]);
              dom = dateTimeUtilsDuration(navigationTiming.responseEnd, navigationTiming[
                _DYN_LOAD_EVENT_END
                /* @min:%2eloadEventEnd */
              ]);
            } else {
              total = dateTimeUtilsDuration(timing[
                _DYN_NAVIGATION_START
                /* @min:%2enavigationStart */
              ], timing[
                _DYN_LOAD_EVENT_END
                /* @min:%2eloadEventEnd */
              ]);
              network = dateTimeUtilsDuration(timing[
                _DYN_NAVIGATION_START
                /* @min:%2enavigationStart */
              ], timing[
                _DYN_CONNECT_END
                /* @min:%2econnectEnd */
              ]);
              request = dateTimeUtilsDuration(timing.requestStart, timing[
                _DYN_RESPONSE_START
                /* @min:%2eresponseStart */
              ]);
              response = dateTimeUtilsDuration(timing[
                _DYN_RESPONSE_START
                /* @min:%2eresponseStart */
              ], timing[
                _DYN_RESPONSE_END
                /* @min:%2eresponseEnd */
              ]);
              dom = dateTimeUtilsDuration(timing.responseEnd, timing[
                _DYN_LOAD_EVENT_END
                /* @min:%2eloadEventEnd */
              ]);
            }
            if (total === 0) {
              _throwInternal(_logger, 2, 10, "error calculating page view performance.", { total, network, request, response, dom });
            } else if (!_self[
              _DYN_SHOULD_COLLECT_DURAT16
              /* @min:%2eshouldCollectDuration */
            ](total, network, request, response, dom)) {
              _throwInternal(_logger, 2, 45, "Invalid page load duration value. Browser perf data won't be sent.", { total, network, request, response, dom });
            } else if (total < Math.floor(network) + Math.floor(request) + Math.floor(response) + Math.floor(dom)) {
              _throwInternal(_logger, 2, 8, "client performance math error.", { total, network, request, response, dom });
            } else {
              pageViewPerformance.durationMs = total;
              pageViewPerformance.perfTotal = pageViewPerformance[
                _DYN_DURATION
                /* @min:%2eduration */
              ] = msToTimeSpan(total);
              pageViewPerformance.networkConnect = msToTimeSpan(network);
              pageViewPerformance.sentRequest = msToTimeSpan(request);
              pageViewPerformance.receivedResponse = msToTimeSpan(response);
              pageViewPerformance.domProcessing = msToTimeSpan(dom);
              pageViewPerformance.isValid = true;
            }
          }
        };
        _self[
          _DYN_GET_PERFORMANCE_TIMI15
          /* @min:%2egetPerformanceTiming */
        ] = _getPerformanceTiming;
        _self[
          _DYN_IS_PERFORMANCE_TIMIN14
          /* @min:%2eisPerformanceTimingSupported */
        ] = _isPerformanceTimingSupported;
        _self[
          _DYN_IS_PERFORMANCE_TIMIN17
          /* @min:%2eisPerformanceTimingDataReady */
        ] = _isPerformanceTimingDataReady;
        _self[
          _DYN_SHOULD_COLLECT_DURAT16
          /* @min:%2eshouldCollectDuration */
        ] = _shouldCollectDuration;
      });
    }
    PageViewPerformanceManager2.__ieDyn = 1;
    return PageViewPerformanceManager2;
  }()
);

// node_modules/@microsoft/applicationinsights-analytics-js/dist-es5/JavaScriptSDK/Telemetry/PageVisitTimeManager.js
var PageVisitTimeManager = (
  /** @class */
  function() {
    function PageVisitTimeManager2(logger, pageVisitTimeTrackingHandler) {
      var prevPageVisitDataKeyName = "prevPageVisitData";
      dynamicProto(PageVisitTimeManager2, this, function(_self) {
        _self[
          _DYN_TRACK_PREVIOUS_PAGE_1
          /* @min:%2etrackPreviousPageVisit */
        ] = function(currentPageName, currentPageUrl) {
          try {
            var prevPageVisitTimeData = restartPageVisitTimer(currentPageName, currentPageUrl);
            if (prevPageVisitTimeData) {
              pageVisitTimeTrackingHandler(prevPageVisitTimeData.pageName, prevPageVisitTimeData.pageUrl, prevPageVisitTimeData.pageVisitTime);
            }
          } catch (e) {
            _warnToConsole(logger, "Auto track page visit time failed, metric will not be collected: " + dumpObj(e));
          }
        };
        function restartPageVisitTimer(pageName, pageUrl) {
          var prevPageVisitData = null;
          try {
            prevPageVisitData = stopPageVisitTimer();
            if (utlCanUseSessionStorage()) {
              if (utlGetSessionStorage(logger, prevPageVisitDataKeyName) != null) {
                throwError("Cannot call startPageVisit consecutively without first calling stopPageVisit");
              }
              var currPageVisitDataStr = getJSON().stringify(new PageVisitData(pageName, pageUrl));
              utlSetSessionStorage(logger, prevPageVisitDataKeyName, currPageVisitDataStr);
            }
          } catch (e) {
            _warnToConsole(logger, "Call to restart failed: " + dumpObj(e));
            prevPageVisitData = null;
          }
          return prevPageVisitData;
        }
        function stopPageVisitTimer() {
          var prevPageVisitData = null;
          try {
            if (utlCanUseSessionStorage()) {
              var pageVisitEndTime = utcNow();
              var pageVisitDataJsonStr = utlGetSessionStorage(logger, prevPageVisitDataKeyName);
              if (pageVisitDataJsonStr && hasJSON()) {
                prevPageVisitData = getJSON().parse(pageVisitDataJsonStr);
                prevPageVisitData.pageVisitTime = pageVisitEndTime - prevPageVisitData[
                  _DYN_PAGE_VISIT_START_TIM18
                  /* @min:%2epageVisitStartTime */
                ];
                utlRemoveSessionStorage(logger, prevPageVisitDataKeyName);
              }
            }
          } catch (e) {
            _warnToConsole(logger, "Stop page visit timer failed: " + dumpObj(e));
            prevPageVisitData = null;
          }
          return prevPageVisitData;
        }
        objDefine(_self, "_logger", { g: function() {
          return logger;
        } });
        objDefine(_self, "pageVisitTimeTrackingHandler", { g: function() {
          return pageVisitTimeTrackingHandler;
        } });
      });
    }
    PageVisitTimeManager2.__ieDyn = 1;
    return PageVisitTimeManager2;
  }()
);
var PageVisitData = (
  /** @class */
  /* @__PURE__ */ function() {
    function PageVisitData2(pageName, pageUrl) {
      this[
        _DYN_PAGE_VISIT_START_TIM18
        /* @min:%2epageVisitStartTime */
      ] = utcNow();
      this.pageName = pageName;
      this.pageUrl = pageUrl;
    }
    return PageVisitData2;
  }()
);

// node_modules/@microsoft/applicationinsights-analytics-js/dist-es5/JavaScriptSDK/Timing.js
var Timing = (
  /** @class */
  /* @__PURE__ */ function() {
    function Timing2(logger, name) {
      var _self = this;
      var _events = {};
      _self.start = function(name2) {
        if (typeof _events[name2] !== "undefined") {
          _throwInternal(logger, 2, 62, "start was called more than once for this event without calling stop.", { name: name2, key: name2 }, true);
        }
        _events[name2] = +/* @__PURE__ */ new Date();
      };
      _self.stop = function(name2, url, properties, measurements) {
        var start = _events[name2];
        if (isNaN(start)) {
          _throwInternal(logger, 2, 63, "stop was called without a corresponding start.", { name: name2, key: name2 }, true);
        } else {
          var end = +/* @__PURE__ */ new Date();
          var duration = dateTimeUtilsDuration(start, end);
          _self.action(name2, url, duration, properties, measurements);
        }
        delete _events[name2];
        _events[name2] = void 0;
      };
    }
    return Timing2;
  }()
);

// node_modules/@microsoft/applicationinsights-analytics-js/dist-es5/JavaScriptSDK/AnalyticsPlugin.js
var _a;
var strEvent = "event";
function _dispatchEvent(target, evnt) {
  if (target && target.dispatchEvent && evnt) {
    target.dispatchEvent(evnt);
  }
}
function _getReason(error) {
  if (error && error.reason) {
    var reason = error.reason;
    if (!isString(reason) && isFunction(reason[
      _DYN_TO_STRING
      /* @min:%2etoString */
    ])) {
      return reason[
        _DYN_TO_STRING
        /* @min:%2etoString */
      ]();
    }
    return dumpObj(reason);
  }
  return error || "";
}
var MinMilliSeconds = 6e4;
var defaultValues = objDeepFreeze((_a = {
  sessionRenewalMs: cfgDfSet(_chkConfigMilliseconds, 30 * 60 * 1e3),
  sessionExpirationMs: cfgDfSet(_chkConfigMilliseconds, 24 * 60 * 60 * 1e3),
  disableExceptionTracking: cfgDfBoolean()
}, _a[
  _DYN_AUTO_TRACK_PAGE_VISI9
  /* @min:autoTrackPageVisitTime */
] = cfgDfBoolean(), _a[
  _DYN_OVERRIDE_PAGE_VIEW_D8
  /* @min:overridePageViewDuration */
] = cfgDfBoolean(), _a[
  _DYN_ENABLE_UNHANDLED_PRO12
  /* @min:enableUnhandledPromiseRejectionTracking */
] = cfgDfBoolean(), _a[
  _DYN_AUTO_UNHANDLED_PROMI13
  /* @min:autoUnhandledPromiseInstrumented */
] = false, _a.samplingPercentage = cfgDfValidate(_chkSampling, 100), _a[
  _DYN_IS_STORAGE_USE_DISAB0
  /* @min:isStorageUseDisabled */
] = cfgDfBoolean(), _a[
  _DYN_IS_BROWSER_LINK_TRAC10
  /* @min:isBrowserLinkTrackingEnabled */
] = cfgDfBoolean(), _a[
  _DYN_ENABLE_AUTO_ROUTE_TR11
  /* @min:enableAutoRouteTracking */
] = cfgDfBoolean(), _a.namePrefix = cfgDfString(), _a.enableDebug = cfgDfBoolean(), _a.disableFlushOnBeforeUnload = cfgDfBoolean(), _a.disableFlushOnUnload = cfgDfBoolean(false, "disableFlushOnBeforeUnload"), _a.expCfg = cfgDfMerge({ inclScripts: false }), _a));
function _chkConfigMilliseconds(value, defValue) {
  value = value || defValue;
  if (value < MinMilliSeconds) {
    value = MinMilliSeconds;
  }
  return +value;
}
function _chkSampling(value) {
  return !isNaN(value) && value > 0 && value <= 100;
}
function _updateStorageUsage(extConfig) {
  if (!isUndefined(extConfig[
    _DYN_IS_STORAGE_USE_DISAB0
    /* @min:%2eisStorageUseDisabled */
  ])) {
    if (extConfig[
      _DYN_IS_STORAGE_USE_DISAB0
      /* @min:%2eisStorageUseDisabled */
    ]) {
      utlDisableStorage();
    } else {
      utlEnableStorage();
    }
  }
}
var AnalyticsPlugin = (
  /** @class */
  function(_super) {
    __extendsFn(AnalyticsPlugin2, _super);
    function AnalyticsPlugin2() {
      var _this = _super.call(this) || this;
      _this.identifier = AnalyticsPluginIdentifier;
      _this.priority = 180;
      _this.autoRoutePVDelay = 500;
      var _eventTracking;
      var _pageTracking;
      var _pageViewManager;
      var _pageViewPerformanceManager;
      var _pageVisitTimeManager;
      var _preInitTelemetryInitializers;
      var _isBrowserLinkTrackingEnabled;
      var _browserLinkInitializerAdded;
      var _enableAutoRouteTracking;
      var _historyListenerAdded;
      var _disableExceptionTracking;
      var _autoExceptionInstrumented;
      var _enableUnhandledPromiseRejectionTracking;
      var _autoUnhandledPromiseInstrumented;
      var _extConfig;
      var _autoTrackPageVisitTime;
      var _trackAjaxAttempts = 0;
      var _prevUri;
      var _currUri;
      var _evtNamespace;
      dynamicProto(AnalyticsPlugin2, _this, function(_self, _base) {
        var _addHook = _base[
          _DYN__ADD_HOOK
          /* @min:%2e_addHook */
        ];
        _initDefaults();
        _self.getCookieMgr = function() {
          return safeGetCookieMgr(_self[
            _DYN_CORE
            /* @min:%2ecore */
          ]);
        };
        _self.processTelemetry = function(env, itemCtx) {
          _self.processNext(env, itemCtx);
        };
        _self.trackEvent = function(event, customProperties) {
          try {
            var telemetryItem = createTelemetryItem(event, Event2[
              _DYN_DATA_TYPE
              /* @min:%2edataType */
            ], Event2[
              _DYN_ENVELOPE_TYPE
              /* @min:%2eenvelopeType */
            ], _self[
              _DYN_DIAG_LOG
              /* @min:%2ediagLog */
            ](), customProperties);
            _self[
              _DYN_CORE
              /* @min:%2ecore */
            ][
              _DYN_TRACK
              /* @min:%2etrack */
            ](telemetryItem);
          } catch (e) {
            _throwInternal2(2, 39, "trackTrace failed, trace will not be collected: " + getExceptionName(e), { exception: dumpObj(e) });
          }
        };
        _self.startTrackEvent = function(name) {
          try {
            _eventTracking.start(name);
          } catch (e) {
            _throwInternal2(1, 29, "startTrackEvent failed, event will not be collected: " + getExceptionName(e), { exception: dumpObj(e) });
          }
        };
        _self.stopTrackEvent = function(name, properties, measurements) {
          try {
            _eventTracking.stop(name, void 0, properties, measurements);
          } catch (e) {
            _throwInternal2(1, 30, "stopTrackEvent failed, event will not be collected: " + getExceptionName(e), { exception: dumpObj(e) });
          }
        };
        _self.trackTrace = function(trace, customProperties) {
          try {
            var telemetryItem = createTelemetryItem(trace, Trace[
              _DYN_DATA_TYPE
              /* @min:%2edataType */
            ], Trace[
              _DYN_ENVELOPE_TYPE
              /* @min:%2eenvelopeType */
            ], _self[
              _DYN_DIAG_LOG
              /* @min:%2ediagLog */
            ](), customProperties);
            _self[
              _DYN_CORE
              /* @min:%2ecore */
            ][
              _DYN_TRACK
              /* @min:%2etrack */
            ](telemetryItem);
          } catch (e) {
            _throwInternal2(2, 39, "trackTrace failed, trace will not be collected: " + getExceptionName(e), { exception: dumpObj(e) });
          }
        };
        _self.trackMetric = function(metric, customProperties) {
          try {
            var telemetryItem = createTelemetryItem(metric, Metric[
              _DYN_DATA_TYPE
              /* @min:%2edataType */
            ], Metric[
              _DYN_ENVELOPE_TYPE
              /* @min:%2eenvelopeType */
            ], _self[
              _DYN_DIAG_LOG
              /* @min:%2ediagLog */
            ](), customProperties);
            _self[
              _DYN_CORE
              /* @min:%2ecore */
            ][
              _DYN_TRACK
              /* @min:%2etrack */
            ](telemetryItem);
          } catch (e) {
            _throwInternal2(1, 36, "trackMetric failed, metric will not be collected: " + getExceptionName(e), { exception: dumpObj(e) });
          }
        };
        _self[
          _DYN_TRACK_PAGE_VIEW
          /* @min:%2etrackPageView */
        ] = function(pageView, customProperties) {
          try {
            var inPv = pageView || {};
            _pageViewManager[
              _DYN_TRACK_PAGE_VIEW
              /* @min:%2etrackPageView */
            ](inPv, __assignFn(__assignFn(__assignFn({}, inPv.properties), inPv.measurements), customProperties));
            if (_autoTrackPageVisitTime) {
              _pageVisitTimeManager[
                _DYN_TRACK_PREVIOUS_PAGE_1
                /* @min:%2etrackPreviousPageVisit */
              ](inPv.name, inPv.uri);
            }
          } catch (e) {
            _throwInternal2(1, 37, "trackPageView failed, page view will not be collected: " + getExceptionName(e), { exception: dumpObj(e) });
          }
        };
        _self[
          _DYN_SEND_PAGE_VIEW_INTER2
          /* @min:%2esendPageViewInternal */
        ] = function(pageView, properties, systemProperties) {
          var doc = getDocument();
          if (doc) {
            pageView.refUri = pageView.refUri === void 0 ? doc.referrer : pageView.refUri;
          }
          if (isNullOrUndefined(pageView[
            _DYN_START_TIME
            /* @min:%2estartTime */
          ])) {
            var duration = (properties || pageView[
              _DYN_PROPERTIES
              /* @min:%2eproperties */
            ] || {})[
              _DYN_DURATION
              /* @min:%2eduration */
            ] || 0;
            pageView[
              _DYN_START_TIME
              /* @min:%2estartTime */
            ] = new Date((/* @__PURE__ */ new Date()).getTime() - duration);
          }
          var telemetryItem = createTelemetryItem(pageView, PageView[
            _DYN_DATA_TYPE
            /* @min:%2edataType */
          ], PageView[
            _DYN_ENVELOPE_TYPE
            /* @min:%2eenvelopeType */
          ], _self[
            _DYN_DIAG_LOG
            /* @min:%2ediagLog */
          ](), properties, systemProperties);
          _self[
            _DYN_CORE
            /* @min:%2ecore */
          ][
            _DYN_TRACK
            /* @min:%2etrack */
          ](telemetryItem);
          _trackAjaxAttempts = 0;
        };
        _self[
          _DYN_SEND_PAGE_VIEW_PERFO3
          /* @min:%2esendPageViewPerformanceInternal */
        ] = function(pageViewPerformance, properties, systemProperties) {
          var telemetryItem = createTelemetryItem(pageViewPerformance, PageViewPerformance[
            _DYN_DATA_TYPE
            /* @min:%2edataType */
          ], PageViewPerformance[
            _DYN_ENVELOPE_TYPE
            /* @min:%2eenvelopeType */
          ], _self[
            _DYN_DIAG_LOG
            /* @min:%2ediagLog */
          ](), properties, systemProperties);
          _self[
            _DYN_CORE
            /* @min:%2ecore */
          ][
            _DYN_TRACK
            /* @min:%2etrack */
          ](telemetryItem);
        };
        _self.trackPageViewPerformance = function(pageViewPerformance, customProperties) {
          var inPvp = pageViewPerformance || {};
          try {
            _pageViewPerformanceManager[
              _DYN_POPULATE_PAGE_VIEW_P4
              /* @min:%2epopulatePageViewPerformanceEvent */
            ](inPvp);
            _self[
              _DYN_SEND_PAGE_VIEW_PERFO3
              /* @min:%2esendPageViewPerformanceInternal */
            ](inPvp, customProperties);
          } catch (e) {
            _throwInternal2(1, 37, "trackPageViewPerformance failed, page view will not be collected: " + getExceptionName(e), { exception: dumpObj(e) });
          }
        };
        _self.startTrackPage = function(name) {
          try {
            if (typeof name !== "string") {
              var doc = getDocument();
              name = doc && doc.title || "";
            }
            _pageTracking.start(name);
          } catch (e) {
            _throwInternal2(1, 31, "startTrackPage failed, page view may not be collected: " + getExceptionName(e), { exception: dumpObj(e) });
          }
        };
        _self.stopTrackPage = function(name, url, properties, measurement) {
          try {
            if (typeof name !== "string") {
              var doc = getDocument();
              name = doc && doc.title || "";
            }
            if (typeof url !== "string") {
              var loc = getLocation();
              url = loc && loc[
                _DYN_HREF
                /* @min:%2ehref */
              ] || "";
            }
            _pageTracking.stop(name, url, properties, measurement);
            if (_autoTrackPageVisitTime) {
              _pageVisitTimeManager[
                _DYN_TRACK_PREVIOUS_PAGE_1
                /* @min:%2etrackPreviousPageVisit */
              ](name, url);
            }
          } catch (e) {
            _throwInternal2(1, 32, "stopTrackPage failed, page view will not be collected: " + getExceptionName(e), { exception: dumpObj(e) });
          }
        };
        _self[
          _DYN_SEND_EXCEPTION_INTER5
          /* @min:%2esendExceptionInternal */
        ] = function(exception, customProperties, systemProperties) {
          var _a7;
          var theError = exception && (exception[
            _DYN_EXCEPTION
            /* @min:%2eexception */
          ] || exception[
            _DYN_ERROR
            /* @min:%2eerror */
          ]) || // - Handle someone calling trackException based of v1 API where the exception was the Error
          isError(exception) && exception || // - Handles no error being defined and instead of creating a new Error() instance attempt to map so any stacktrace
          //   is preserved and does not list ApplicationInsights code as the source
          { name: exception && typeof exception, message: exception || strNotSpecified };
          exception = exception || {};
          var exceptionPartB = new Exception(_self[
            _DYN_DIAG_LOG
            /* @min:%2ediagLog */
          ](), theError, exception[
            _DYN_PROPERTIES
            /* @min:%2eproperties */
          ] || customProperties, exception.measurements, exception.severityLevel, exception.id).toInterface();
          var doc = getDocument();
          if (doc && ((_a7 = _self.config.expCfg) === null || _a7 === void 0 ? void 0 : _a7.inclScripts)) {
            var scriptsInfo = findAllScripts(doc);
            exceptionPartB[
              _DYN_PROPERTIES
              /* @min:%2eproperties */
            ]["exceptionScripts"] = JSON.stringify(scriptsInfo);
          }
          var telemetryItem = createTelemetryItem(exceptionPartB, Exception[
            _DYN_DATA_TYPE
            /* @min:%2edataType */
          ], Exception[
            _DYN_ENVELOPE_TYPE
            /* @min:%2eenvelopeType */
          ], _self[
            _DYN_DIAG_LOG
            /* @min:%2ediagLog */
          ](), customProperties, systemProperties);
          _self[
            _DYN_CORE
            /* @min:%2ecore */
          ][
            _DYN_TRACK
            /* @min:%2etrack */
          ](telemetryItem);
        };
        _self.trackException = function(exception, customProperties) {
          if (exception && !exception[
            _DYN_EXCEPTION
            /* @min:%2eexception */
          ] && exception[
            _DYN_ERROR
            /* @min:%2eerror */
          ]) {
            exception[
              _DYN_EXCEPTION
              /* @min:%2eexception */
            ] = exception[
              _DYN_ERROR
              /* @min:%2eerror */
            ];
          }
          try {
            _self[
              _DYN_SEND_EXCEPTION_INTER5
              /* @min:%2esendExceptionInternal */
            ](exception, customProperties);
          } catch (e) {
            _throwInternal2(1, 35, "trackException failed, exception will not be collected: " + getExceptionName(e), { exception: dumpObj(e) });
          }
        };
        _self[
          _DYN__ONERROR
          /* @min:%2e_onerror */
        ] = function(exception) {
          var error = exception && exception[
            _DYN_ERROR
            /* @min:%2eerror */
          ];
          var evt = exception && exception.evt;
          try {
            if (!evt) {
              var _window = getWindow();
              if (_window) {
                evt = _window[strEvent];
              }
            }
            var url = exception && exception.url || (getDocument() || {}).URL;
            var errorSrc = exception[
              _DYN_ERROR_SRC
              /* @min:%2eerrorSrc */
            ] || "window.onerror@" + url + ":" + (exception[
              _DYN_LINE_NUMBER
              /* @min:%2elineNumber */
            ] || 0) + ":" + (exception[
              _DYN_COLUMN_NUMBER
              /* @min:%2ecolumnNumber */
            ] || 0);
            var properties = {
              errorSrc,
              url,
              lineNumber: exception[
                _DYN_LINE_NUMBER
                /* @min:%2elineNumber */
              ] || 0,
              columnNumber: exception[
                _DYN_COLUMN_NUMBER
                /* @min:%2ecolumnNumber */
              ] || 0,
              message: exception[
                _DYN_MESSAGE
                /* @min:%2emessage */
              ]
            };
            if (isCrossOriginError(exception.message, exception.url, exception.lineNumber, exception.columnNumber, exception[
              _DYN_ERROR
              /* @min:%2eerror */
            ])) {
              _sendCORSException(Exception[
                _DYN__CREATE_AUTO_EXCEPTI6
                /* @min:%2eCreateAutoException */
              ]("Script error: The browser's same-origin policy prevents us from getting the details of this exception. Consider using the 'crossorigin' attribute.", url, exception[
                _DYN_LINE_NUMBER
                /* @min:%2elineNumber */
              ] || 0, exception[
                _DYN_COLUMN_NUMBER
                /* @min:%2ecolumnNumber */
              ] || 0, error, evt, null, errorSrc), properties);
            } else {
              if (!exception[
                _DYN_ERROR_SRC
                /* @min:%2eerrorSrc */
              ]) {
                exception[
                  _DYN_ERROR_SRC
                  /* @min:%2eerrorSrc */
                ] = errorSrc;
              }
              _self.trackException({
                exception,
                severityLevel: 3
                /* eSeverityLevel.Error */
              }, properties);
            }
          } catch (e) {
            var errorString = error ? error.name + ", " + error[
              _DYN_MESSAGE
              /* @min:%2emessage */
            ] : "null";
            _throwInternal2(1, 11, "_onError threw exception while logging error, error will not be collected: " + getExceptionName(e), { exception: dumpObj(e), errorString });
          }
        };
        _self[
          _DYN_ADD_TELEMETRY_INITIA7
          /* @min:%2eaddTelemetryInitializer */
        ] = function(telemetryInitializer) {
          if (_self[
            _DYN_CORE
            /* @min:%2ecore */
          ]) {
            return _self[
              _DYN_CORE
              /* @min:%2ecore */
            ][
              _DYN_ADD_TELEMETRY_INITIA7
              /* @min:%2eaddTelemetryInitializer */
            ](telemetryInitializer);
          }
          if (!_preInitTelemetryInitializers) {
            _preInitTelemetryInitializers = [];
          }
          _preInitTelemetryInitializers.push(telemetryInitializer);
        };
        _self.initialize = function(config, core, extensions, pluginChain) {
          if (_self.isInitialized()) {
            return;
          }
          if (isNullOrUndefined(core)) {
            throwError("Error initializing");
          }
          _base.initialize(config, core, extensions, pluginChain);
          try {
            _evtNamespace = mergeEvtNamespace(createUniqueNamespace(_self.identifier), core.evtNamespace && core.evtNamespace());
            if (_preInitTelemetryInitializers) {
              arrForEach(_preInitTelemetryInitializers, function(initializer) {
                core[
                  _DYN_ADD_TELEMETRY_INITIA7
                  /* @min:%2eaddTelemetryInitializer */
                ](initializer);
              });
              _preInitTelemetryInitializers = null;
            }
            _populateDefaults(config);
            _pageViewPerformanceManager = new PageViewPerformanceManager(_self[
              _DYN_CORE
              /* @min:%2ecore */
            ]);
            _pageViewManager = new PageViewManager(_self, _extConfig.overridePageViewDuration, _self[
              _DYN_CORE
              /* @min:%2ecore */
            ], _pageViewPerformanceManager);
            _pageVisitTimeManager = new PageVisitTimeManager(_self[
              _DYN_DIAG_LOG
              /* @min:%2ediagLog */
            ](), function(pageName, pageUrl, pageVisitTime) {
              return trackPageVisitTime(pageName, pageUrl, pageVisitTime);
            });
            _eventTracking = new Timing(_self[
              _DYN_DIAG_LOG
              /* @min:%2ediagLog */
            ](), "trackEvent");
            _eventTracking.action = function(name, url, duration, properties, measurements) {
              if (!properties) {
                properties = {};
              }
              if (!measurements) {
                measurements = {};
              }
              properties.duration = duration[
                _DYN_TO_STRING
                /* @min:%2etoString */
              ]();
              _self.trackEvent({ name, properties, measurements });
            };
            _pageTracking = new Timing(_self[
              _DYN_DIAG_LOG
              /* @min:%2ediagLog */
            ](), "trackPageView");
            _pageTracking.action = function(name, url, duration, properties, measurements) {
              if (isNullOrUndefined(properties)) {
                properties = {};
              }
              properties.duration = duration[
                _DYN_TO_STRING
                /* @min:%2etoString */
              ]();
              var pageViewItem = {
                name,
                uri: url,
                properties,
                measurements
              };
              _self[
                _DYN_SEND_PAGE_VIEW_INTER2
                /* @min:%2esendPageViewInternal */
              ](pageViewItem, properties);
            };
            if (hasWindow()) {
              _updateExceptionTracking();
              _updateLocationChange();
            }
          } catch (e) {
            _self.setInitialized(false);
            throw e;
          }
        };
        _self._doTeardown = function(unloadCtx, unloadState) {
          _pageViewManager && _pageViewManager.teardown(unloadCtx, unloadState);
          eventOff(window, null, null, _evtNamespace);
          _initDefaults();
        };
        function _populateDefaults(config) {
          var identifier = _self.identifier;
          var core = _self[
            _DYN_CORE
            /* @min:%2ecore */
          ];
          _self[
            _DYN__ADD_HOOK
            /* @min:%2e_addHook */
          ](onConfigChange(config, function() {
            var ctx = createProcessTelemetryContext(null, config, core);
            _extConfig = ctx.getExtCfg(identifier, defaultValues);
            _autoTrackPageVisitTime = _extConfig[
              _DYN_AUTO_TRACK_PAGE_VISI9
              /* @min:%2eautoTrackPageVisitTime */
            ];
            if (config.storagePrefix) {
              utlSetStoragePrefix(config.storagePrefix);
            }
            _updateStorageUsage(_extConfig);
            _isBrowserLinkTrackingEnabled = _extConfig[
              _DYN_IS_BROWSER_LINK_TRAC10
              /* @min:%2eisBrowserLinkTrackingEnabled */
            ];
            _addDefaultTelemetryInitializers();
          }));
        }
        function trackPageVisitTime(pageName, pageUrl, pageVisitTime) {
          var properties = { PageName: pageName, PageUrl: pageUrl };
          _self.trackMetric({
            name: "PageVisitTime",
            average: pageVisitTime,
            max: pageVisitTime,
            min: pageVisitTime,
            sampleCount: 1
          }, properties);
        }
        function _addDefaultTelemetryInitializers() {
          if (!_browserLinkInitializerAdded && _isBrowserLinkTrackingEnabled) {
            var browserLinkPaths_1 = ["/browserLinkSignalR/", "/__browserLink/"];
            var dropBrowserLinkRequests = function(envelope) {
              if (_isBrowserLinkTrackingEnabled && envelope.baseType === RemoteDependencyData[
                _DYN_DATA_TYPE
                /* @min:%2edataType */
              ]) {
                var remoteData = envelope.baseData;
                if (remoteData) {
                  for (var i = 0; i < browserLinkPaths_1[
                    _DYN_LENGTH
                    /* @min:%2elength */
                  ]; i++) {
                    if (remoteData.target && strIndexOf(remoteData.target, browserLinkPaths_1[i]) >= 0) {
                      return false;
                    }
                  }
                }
              }
              return true;
            };
            _self[
              _DYN__ADD_HOOK
              /* @min:%2e_addHook */
            ](_self[
              _DYN_ADD_TELEMETRY_INITIA7
              /* @min:%2eaddTelemetryInitializer */
            ](dropBrowserLinkRequests));
            _browserLinkInitializerAdded = true;
          }
        }
        function _sendCORSException(exception, properties) {
          var telemetryItem = createTelemetryItem(exception, Exception[
            _DYN_DATA_TYPE
            /* @min:%2edataType */
          ], Exception[
            _DYN_ENVELOPE_TYPE
            /* @min:%2eenvelopeType */
          ], _self[
            _DYN_DIAG_LOG
            /* @min:%2ediagLog */
          ](), properties);
          _self[
            _DYN_CORE
            /* @min:%2ecore */
          ][
            _DYN_TRACK
            /* @min:%2etrack */
          ](telemetryItem);
        }
        function _updateExceptionTracking() {
          var _window = getWindow();
          var locn = getLocation(true);
          _self[
            _DYN__ADD_HOOK
            /* @min:%2e_addHook */
          ](onConfigChange(_extConfig, function() {
            _disableExceptionTracking = _extConfig.disableExceptionTracking;
            if (!_disableExceptionTracking && !_autoExceptionInstrumented && !_extConfig.autoExceptionInstrumented) {
              _addHook(InstrumentEvent(_window, "onerror", {
                ns: _evtNamespace,
                rsp: function(callDetails, message, url, lineNumber, columnNumber, error) {
                  if (!_disableExceptionTracking && callDetails.rslt !== true) {
                    _self[
                      _DYN__ONERROR
                      /* @min:%2e_onerror */
                    ](Exception[
                      _DYN__CREATE_AUTO_EXCEPTI6
                      /* @min:%2eCreateAutoException */
                    ](message, url, lineNumber, columnNumber, error, callDetails.evt));
                  }
                }
              }, false));
              _autoExceptionInstrumented = true;
            }
          }));
          _addUnhandledPromiseRejectionTracking(_window, locn);
        }
        function _updateLocationChange() {
          var win = getWindow();
          var locn = getLocation(true);
          _self[
            _DYN__ADD_HOOK
            /* @min:%2e_addHook */
          ](onConfigChange(_extConfig, function() {
            _enableAutoRouteTracking = _extConfig[
              _DYN_ENABLE_AUTO_ROUTE_TR11
              /* @min:%2eenableAutoRouteTracking */
            ] === true;
            if (win && _enableAutoRouteTracking && !_historyListenerAdded && hasHistory()) {
              var _history = getHistory();
              if (isFunction(_history.pushState) && isFunction(_history.replaceState) && typeof Event !== strShimUndefined) {
                _addHistoryListener(win, _history, locn);
              }
            }
          }));
        }
        function _getDistributedTraceCtx() {
          var distributedTraceCtx = null;
          if (_self[
            _DYN_CORE
            /* @min:%2ecore */
          ] && _self[
            _DYN_CORE
            /* @min:%2ecore */
          ].getTraceCtx) {
            distributedTraceCtx = _self[
              _DYN_CORE
              /* @min:%2ecore */
            ].getTraceCtx(false);
          }
          if (!distributedTraceCtx) {
            var properties = _self[
              _DYN_CORE
              /* @min:%2ecore */
            ].getPlugin(PropertiesPluginIdentifier);
            if (properties) {
              var context = properties.plugin.context;
              if (context) {
                distributedTraceCtx = createDistributedTraceContextFromTrace(context.telemetryTrace);
              }
            }
          }
          return distributedTraceCtx;
        }
        function _addHistoryListener(win, history, locn) {
          if (_historyListenerAdded) {
            return;
          }
          var namePrefix = _extConfig.namePrefix || "";
          function _popstateHandler() {
            if (_enableAutoRouteTracking) {
              _dispatchEvent(win, createDomEvent(namePrefix + "locationchange"));
            }
          }
          function _locationChangeHandler() {
            if (_currUri) {
              _prevUri = _currUri;
              _currUri = locn && locn[
                _DYN_HREF
                /* @min:%2ehref */
              ] || "";
            } else {
              _currUri = locn && locn[
                _DYN_HREF
                /* @min:%2ehref */
              ] || "";
            }
            if (_enableAutoRouteTracking) {
              var distributedTraceCtx = _getDistributedTraceCtx();
              if (distributedTraceCtx) {
                distributedTraceCtx.setTraceId(generateW3CId());
                var traceLocationName = "_unknown_";
                if (locn && locn.pathname) {
                  traceLocationName = locn.pathname + (locn.hash || "");
                }
                distributedTraceCtx.setName(dataSanitizeString(_self[
                  _DYN_DIAG_LOG
                  /* @min:%2ediagLog */
                ](), traceLocationName));
              }
              scheduleTimeout((function(uri) {
                _self[
                  _DYN_TRACK_PAGE_VIEW
                  /* @min:%2etrackPageView */
                ]({ refUri: uri, properties: { duration: 0 } });
              }).bind(_self, _prevUri), _self.autoRoutePVDelay);
            }
          }
          _addHook(InstrumentEvent(history, "pushState", {
            ns: _evtNamespace,
            rsp: function() {
              if (_enableAutoRouteTracking) {
                _dispatchEvent(win, createDomEvent(namePrefix + "pushState"));
                _dispatchEvent(win, createDomEvent(namePrefix + "locationchange"));
              }
            }
          }, true));
          _addHook(InstrumentEvent(history, "replaceState", {
            ns: _evtNamespace,
            rsp: function() {
              if (_enableAutoRouteTracking) {
                _dispatchEvent(win, createDomEvent(namePrefix + "replaceState"));
                _dispatchEvent(win, createDomEvent(namePrefix + "locationchange"));
              }
            }
          }, true));
          eventOn(win, namePrefix + "popstate", _popstateHandler, _evtNamespace);
          eventOn(win, namePrefix + "locationchange", _locationChangeHandler, _evtNamespace);
          _historyListenerAdded = true;
        }
        function _addUnhandledPromiseRejectionTracking(_window, _location) {
          _self[
            _DYN__ADD_HOOK
            /* @min:%2e_addHook */
          ](onConfigChange(_extConfig, function() {
            _enableUnhandledPromiseRejectionTracking = _extConfig[
              _DYN_ENABLE_UNHANDLED_PRO12
              /* @min:%2eenableUnhandledPromiseRejectionTracking */
            ] === true;
            _autoExceptionInstrumented = _autoExceptionInstrumented || _extConfig[
              _DYN_AUTO_UNHANDLED_PROMI13
              /* @min:%2eautoUnhandledPromiseInstrumented */
            ];
            if (_enableUnhandledPromiseRejectionTracking && !_autoUnhandledPromiseInstrumented) {
              _addHook(InstrumentEvent(_window, "onunhandledrejection", {
                ns: _evtNamespace,
                rsp: function(callDetails, error) {
                  if (_enableUnhandledPromiseRejectionTracking && callDetails.rslt !== true) {
                    _self[
                      _DYN__ONERROR
                      /* @min:%2e_onerror */
                    ](Exception[
                      _DYN__CREATE_AUTO_EXCEPTI6
                      /* @min:%2eCreateAutoException */
                    ](_getReason(error), _location ? _location[
                      _DYN_HREF
                      /* @min:%2ehref */
                    ] : "", 0, 0, error, callDetails.evt));
                  }
                }
              }, false));
              _extConfig[
                _DYN_AUTO_UNHANDLED_PROMI13
                /* @min:%2eautoUnhandledPromiseInstrumented */
              ] = _autoUnhandledPromiseInstrumented = true;
            }
          }));
        }
        function _throwInternal2(severity, msgId, msg, properties, isUserAct) {
          _self[
            _DYN_DIAG_LOG
            /* @min:%2ediagLog */
          ]().throwInternal(severity, msgId, msg, properties, isUserAct);
        }
        function _initDefaults() {
          _eventTracking = null;
          _pageTracking = null;
          _pageViewManager = null;
          _pageViewPerformanceManager = null;
          _pageVisitTimeManager = null;
          _preInitTelemetryInitializers = null;
          _isBrowserLinkTrackingEnabled = false;
          _browserLinkInitializerAdded = false;
          _enableAutoRouteTracking = false;
          _historyListenerAdded = false;
          _disableExceptionTracking = false;
          _autoExceptionInstrumented = false;
          _enableUnhandledPromiseRejectionTracking = false;
          _autoUnhandledPromiseInstrumented = false;
          _autoTrackPageVisitTime = false;
          _trackAjaxAttempts = 0;
          var location = getLocation(true);
          _prevUri = location && location[
            _DYN_HREF
            /* @min:%2ehref */
          ] || "";
          _currUri = null;
          _evtNamespace = null;
          _extConfig = null;
          objDefine(_self, "config", {
            g: function() {
              return _extConfig;
            }
          });
        }
        objDefine(_self, "_pageViewManager", { g: function() {
          return _pageViewManager;
        } });
        objDefine(_self, "_pageViewPerformanceManager", { g: function() {
          return _pageViewPerformanceManager;
        } });
        objDefine(_self, "_pageVisitTimeManager", { g: function() {
          return _pageVisitTimeManager;
        } });
        objDefine(_self, "_evtNamespace", { g: function() {
          return "." + _evtNamespace;
        } });
      });
      return _this;
    }
    AnalyticsPlugin2.Version = "3.3.1";
    return AnalyticsPlugin2;
  }(BaseTelemetryPlugin)
);

// node_modules/@microsoft/applicationinsights-cfgsync-js/dist-es5/__DynamicConstants.js
var _DYN_FEATURE_OPT_IN = "featureOptIn";
var _DYN_ON_CFG_CHANGE_RECEIV0 = "onCfgChangeReceive";
var _DYN_NON_OVERRIDE_CONFIGS = "nonOverrideConfigs";
var _DYN_SCHEDULE_FETCH_TIMEO1 = "scheduleFetchTimeout";

// node_modules/@microsoft/applicationinsights-cfgsync-js/dist-es5/CfgSyncHelperFuncs.js
function replaceByNonOverrideCfg(cfg, nonOverrideConfigs, curLevel, maxLevel) {
  try {
    var exceedMaxLevel = curLevel > maxLevel;
    if (exceedMaxLevel) {
      cfg = null;
    }
    var curCfg_1 = curLevel == 0 ? objExtend({}, cfg) : cfg;
    if (curCfg_1 && nonOverrideConfigs && !exceedMaxLevel) {
      objForEachKey(curCfg_1, function(key) {
        var nonOverrideVal = nonOverrideConfigs[key];
        if (!!nonOverrideVal) {
          if (isObject(curCfg_1[key]) && isObject(nonOverrideVal)) {
            curCfg_1[key] = replaceByNonOverrideCfg(curCfg_1[key], nonOverrideVal, ++curLevel, maxLevel);
          } else {
            delete curCfg_1[key];
          }
        }
      });
    }
    return curCfg_1;
  } catch (e) {
  }
  return cfg;
}
var F = "featureOptIn.";
var M = ".mode";
var ON = ".onCfg";
var OFF = ".offCfg";
function resolveCdnFeatureCfg(field, cdnCfg, userOptInDetails) {
  var _a7;
  if (!cdnCfg || !cdnCfg.enabled) {
    return null;
  }
  var cdnFt = (cdnCfg[
    _DYN_FEATURE_OPT_IN
    /* @min:%2efeatureOptIn */
  ] || {})[field] || {
    mode: 1
    /* CdnFeatureMode.none */
  };
  var cdnM = cdnFt.mode;
  var cdnOnV = cdnFt.onCfg;
  var cdnOffV = cdnFt.offCfg;
  var userFt = (userOptInDetails || {})[field] || {
    mode: 2
    /* FeatureOptInMode.disable */
  };
  var userM = userFt.mode;
  var userOnV = userFt.onCfg;
  var userOffV = userFt.offCfg;
  var blockCdn = !!userFt.blockCdnCfg;
  var mFld = F + field + M;
  var onFld = F + field + ON;
  var offFld = F + field + OFF;
  var mode = userM;
  var onV = userOnV;
  var offV = userOffV;
  if (!blockCdn) {
    if (cdnM === 4 || cdnM === 5) {
      mode = cdnM == 4 ? 3 : 2;
      onV = cdnOnV || userOnV;
      offV = cdnOffV || userOffV;
    } else if (cdnM === 2 || userM === 2) {
      mode = 2;
      onV = userOnV || cdnOnV;
      offV = userOffV || cdnOffV;
    } else if (cdnM === 3) {
      mode = 3;
      onV = userOnV || cdnOnV;
      offV = userOffV || cdnOffV;
    } else if (cdnM === 1 && userM === 1) {
      mode = 1;
    }
  }
  return _a7 = {}, _a7[mFld] = mode, _a7[onFld] = onV, _a7[offFld] = offV, _a7;
}
function applyCdnfeatureCfg(cdnCfg, core) {
  try {
    if (!cdnCfg || !cdnCfg.enabled) {
      return null;
    }
    if (!cdnCfg[
      _DYN_FEATURE_OPT_IN
      /* @min:%2efeatureOptIn */
    ]) {
      return cdnCfg.config;
    }
    var optInMap = cdnCfg[
      _DYN_FEATURE_OPT_IN
      /* @min:%2efeatureOptIn */
    ];
    var cdnConfig_1 = cdnCfg.config || {};
    objForEachKey(optInMap, function(key) {
      var featureVal = resolveCdnFeatureCfg(key, cdnCfg, core.config[
        _DYN_FEATURE_OPT_IN
        /* @min:%2efeatureOptIn */
      ]);
      if (!isNullOrUndefined(featureVal)) {
        objForEachKey(featureVal, function(config, val) {
          setValueByKey(cdnConfig_1, config, val);
        });
        _overrideCdnCfgByFeature(key, featureVal, cdnConfig_1);
      }
    });
    return cdnConfig_1;
  } catch (e) {
  }
  return null;
}
function _overrideCdnCfgByFeature(field, ftVal, config) {
  var mode = ftVal[F + field + M];
  var val = ftVal[F + field + ON];
  var dVal = ftVal[F + field + OFF];
  var target = null;
  if (mode === 3) {
    target = val;
  }
  if (mode === 2) {
    target = dVal;
  }
  if (target) {
    objForEachKey(target, function(key, cfg) {
      setValueByKey(config, key, cfg);
    });
  }
}

// node_modules/@microsoft/applicationinsights-cfgsync-js/dist-es5/CfgSyncPlugin.js
var _a2;
var EVENT_NAME = "ai_cfgsync";
var STR_GET_METHOD = "GET";
var FETCH_TIMEOUT = 18e5;
var udfVal = void 0;
var defaultNonOverrideCfg = { instrumentationKey: true, connectionString: true, endpointUrl: true };
var _defaultConfig = objDeepFreeze((_a2 = {
  syncMode: 1,
  blkCdnCfg: udfVal,
  customEvtName: udfVal,
  cfgUrl: udfVal,
  overrideSyncFn: udfVal,
  overrideFetchFn: udfVal
}, _a2[
  _DYN_ON_CFG_CHANGE_RECEIV0
  /* @min:onCfgChangeReceive */
] = udfVal, _a2[
  _DYN_SCHEDULE_FETCH_TIMEO1
  /* @min:scheduleFetchTimeout */
] = FETCH_TIMEOUT, _a2[
  _DYN_NON_OVERRIDE_CONFIGS
  /* @min:nonOverrideConfigs */
] = defaultNonOverrideCfg, _a2));
var CfgSyncPlugin = (
  /** @class */
  function(_super) {
    __extendsFn(CfgSyncPlugin2, _super);
    function CfgSyncPlugin2() {
      var _this = _super.call(this) || this;
      _this.priority = 198;
      _this.identifier = "AppInsightsCfgSyncPlugin";
      var _extensionConfig;
      var _mainConfig;
      var _evtName;
      var _evtNamespace;
      var _cfgUrl;
      var _timeoutHandle;
      var _receiveChanges;
      var _broadcastChanges;
      var _blkCdnCfg;
      var _fetchTimeout;
      var _retryCnt;
      var _onCfgChangeReceive;
      var _nonOverrideConfigs;
      var _fetchFn;
      var _overrideFetchFn;
      var _overrideSyncFn;
      var _paused = false;
      dynamicProto(CfgSyncPlugin2, _this, function(_self, _base) {
        _initDefaults();
        _self.initialize = function(config, core, extensions, pluginChain) {
          _base.initialize(config, core, extensions, pluginChain);
          _evtNamespace = mergeEvtNamespace(createUniqueNamespace(_self.identifier), core.evtNamespace && core.evtNamespace());
          _populateDefaults(config);
        };
        _self.getCfg = function() {
          return _mainConfig;
        };
        _self.pause = function() {
          _paused = true;
          _clearScheduledTimer();
        };
        _self.resume = function() {
          _paused = false;
          _setupTimer();
        };
        _self.setCfg = function(config) {
          return _setCfg(config);
        };
        _self.sync = function(customDetails) {
          return _sendCfgsyncEvents(customDetails);
        };
        _self.updateEventListenerName = function(eventName) {
          return _updateEventListenerName(eventName);
        };
        _self._doTeardown = function(unloadCtx, unloadState) {
          _eventOff();
          _clearScheduledTimer();
          _initDefaults();
        };
        _self["_getDbgPlgTargets"] = function() {
          return [_broadcastChanges, _receiveChanges, _evtName, _blkCdnCfg, _nonOverrideConfigs];
        };
        function _initDefaults() {
          _mainConfig = null;
          _evtName = null;
          _evtNamespace = null;
          _cfgUrl = null;
          _receiveChanges = null;
          _broadcastChanges = null;
          _nonOverrideConfigs = null;
          _timeoutHandle = null;
          _fetchTimeout = null;
          _retryCnt = null;
          _blkCdnCfg = null;
          _overrideFetchFn = null;
          _overrideSyncFn = null;
          _onCfgChangeReceive = null;
        }
        function _populateDefaults(config) {
          var identifier = _self.identifier;
          var core = _self.core;
          _self._addHook(onConfigChange(config, function() {
            var ctx = createProcessTelemetryContext(null, config, core);
            _extensionConfig = ctx.getExtCfg(identifier, _defaultConfig);
            var preBlkCdn = _blkCdnCfg;
            _blkCdnCfg = !!_extensionConfig.blkCdnCfg;
            if (!isNullOrUndefined(preBlkCdn) && preBlkCdn !== _blkCdnCfg) {
              if (!_blkCdnCfg && _cfgUrl) {
                _fetchFn && _fetchFn(_cfgUrl, _onFetchComplete, _broadcastChanges);
              } else {
                _clearScheduledTimer();
              }
            }
            if (isNullOrUndefined(_receiveChanges)) {
              _receiveChanges = _extensionConfig.syncMode === 2;
            }
            if (isNullOrUndefined(_broadcastChanges)) {
              _broadcastChanges = _extensionConfig.syncMode === 1;
            }
            var newEvtName = _extensionConfig.customEvtName || EVENT_NAME;
            if (_evtName !== newEvtName) {
              if (_receiveChanges) {
                _updateEventListenerName(newEvtName);
              } else {
                _eventOff();
                _evtName = newEvtName;
              }
            }
            if (isNullOrUndefined(_cfgUrl)) {
              _cfgUrl = _extensionConfig.cfgUrl;
            }
            if (!_cfgUrl) {
              _mainConfig = config;
              if (_broadcastChanges) {
                _sendCfgsyncEvents();
              }
            }
          }));
          _overrideSyncFn = _extensionConfig.overrideSyncFn;
          _overrideFetchFn = _extensionConfig.overrideFetchFn;
          _onCfgChangeReceive = _extensionConfig[
            _DYN_ON_CFG_CHANGE_RECEIV0
            /* @min:%2eonCfgChangeReceive */
          ];
          _nonOverrideConfigs = _extensionConfig[
            _DYN_NON_OVERRIDE_CONFIGS
            /* @min:%2enonOverrideConfigs */
          ];
          _fetchTimeout = _extensionConfig[
            _DYN_SCHEDULE_FETCH_TIMEO1
            /* @min:%2escheduleFetchTimeout */
          ];
          _fetchFn = _getFetchFnInterface();
          _retryCnt = 0;
          if (_cfgUrl && !_blkCdnCfg) {
            _fetchFn && _fetchFn(_cfgUrl, _onFetchComplete, _broadcastChanges);
          }
        }
        function _setCfg(config, isAutoSync) {
          if (config) {
            _mainConfig = config;
            if (!!isAutoSync && !_paused) {
              return _sendCfgsyncEvents();
            }
            if (_receiveChanges && !_paused) {
              _self.core.updateCfg(config);
              return true;
            }
          }
          return false;
        }
        function _eventOff() {
          try {
            var global_1 = getGlobal();
            if (global_1) {
              eventOff(global_1, null, null, _evtNamespace);
            }
          } catch (e) {
          }
        }
        function _sendCfgsyncEvents(customDetails) {
          try {
            if (!!_overrideSyncFn && isFunction(_overrideSyncFn)) {
              return _overrideSyncFn(_mainConfig, customDetails);
            }
            return sendCustomEvent(_evtName, _mainConfig, customDetails);
          } catch (e) {
          }
          return false;
        }
        function _updateEventListenerName(name) {
          try {
            _eventOff();
            if (name) {
              _evtName = name;
              _addEventListener();
            }
            return true;
          } catch (e) {
          }
          return false;
        }
        function _getFetchFnInterface() {
          var _fetchFn2 = _overrideFetchFn;
          if (isNullOrUndefined(_fetchFn2)) {
            if (isFetchSupported()) {
              _fetchFn2 = _fetchSender;
            } else if (isXhrSupported()) {
              _fetchFn2 = _xhrSender;
            }
          }
          return _fetchFn2;
        }
        function _fetchSender(url, oncomplete, isAutoSync) {
          var global = getGlobal();
          var fetchFn = global && global.fetch || null;
          if (url && fetchFn && isFunction(fetchFn)) {
            try {
              var init = {
                method: STR_GET_METHOD
              };
              var request = new Request(url, init);
              doAwaitResponse(fetch(request), function(result) {
                var response = result.value;
                if (!result.rejected) {
                  if (response.ok) {
                    doAwaitResponse(response.text(), function(res) {
                      _doOnComplete(oncomplete, response.status, res.value, isAutoSync);
                    });
                  } else {
                    _doOnComplete(oncomplete, response.status, null, isAutoSync);
                  }
                } else {
                  _doOnComplete(oncomplete, 400);
                }
              });
            } catch (e) {
            }
          }
        }
        function _xhrSender(url, oncomplete, isAutoSync) {
          try {
            var xhr_1 = new XMLHttpRequest();
            xhr_1.open(STR_GET_METHOD, url);
            xhr_1.onreadystatechange = function() {
              if (xhr_1.readyState === XMLHttpRequest.DONE) {
                _doOnComplete(oncomplete, xhr_1.status, xhr_1.responseText, isAutoSync);
              }
            };
            xhr_1.onerror = function() {
              _doOnComplete(oncomplete, 400);
            };
            xhr_1.ontimeout = function() {
              _doOnComplete(oncomplete, 400);
            };
            xhr_1.send();
          } catch (e) {
          }
        }
        function _onFetchComplete(status, response, isAutoSync) {
          try {
            if (status >= 200 && status < 400 && response) {
              _retryCnt = 0;
              var JSON_1 = getJSON();
              if (JSON_1) {
                var cdnCfg = JSON_1.parse(response);
                var cfg = applyCdnfeatureCfg(cdnCfg, _self.core);
                var newCfg = cfg && isPlainObject(cfg) && _replaceTartgetByKeys(cfg);
                newCfg && _setCfg(newCfg, isAutoSync);
              }
            } else {
              _retryCnt++;
            }
            if (_retryCnt < 3) {
              _setupTimer();
            }
          } catch (e) {
          }
        }
        function _doOnComplete(oncomplete, status, response, isAutoSync) {
          try {
            oncomplete(status, response, isAutoSync);
          } catch (e) {
          }
        }
        function _addEventListener() {
          if (_receiveChanges) {
            var global_2 = getGlobal();
            if (global_2) {
              try {
                eventOn(global_2, _evtName, function(event) {
                  var cfgEvent = event && event.detail;
                  if (_onCfgChangeReceive && cfgEvent) {
                    _onCfgChangeReceive(cfgEvent);
                  } else {
                    var cfg = cfgEvent && cfgEvent.cfg;
                    var newCfg = cfg && isPlainObject(cfg) && _replaceTartgetByKeys(cfg);
                    newCfg && _setCfg(newCfg);
                  }
                }, _evtNamespace, true);
              } catch (e) {
              }
            }
          }
        }
        function _replaceTartgetByKeys(cfg, level) {
          var _cfg = null;
          try {
            if (cfg) {
              _cfg = replaceByNonOverrideCfg(cfg, _nonOverrideConfigs, 0, 5);
            }
          } catch (e) {
          }
          return _cfg;
        }
        function _setupTimer() {
          if (!_timeoutHandle && _fetchTimeout) {
            _timeoutHandle = scheduleTimeout(function() {
              _timeoutHandle = null;
              _fetchFn(_cfgUrl, _onFetchComplete, _broadcastChanges);
            }, _fetchTimeout);
            _timeoutHandle.unref();
          }
        }
        function _clearScheduledTimer() {
          _timeoutHandle && _timeoutHandle.cancel();
          _timeoutHandle = null;
          _retryCnt = 0;
        }
        _self.processTelemetry = function(env, itemCtx) {
          _self.processNext(env, itemCtx);
        };
      });
      return _this;
    }
    CfgSyncPlugin2.__ieDyn = 1;
    return CfgSyncPlugin2;
  }(BaseTelemetryPlugin)
);

// node_modules/@microsoft/applicationinsights-channel-js/dist-es5/InternalConstants.js
var STR_DURATION = "duration";

// node_modules/@microsoft/applicationinsights-channel-js/dist-es5/__DynamicConstants.js
var _DYN_TAGS = "tags";
var _DYN_DEVICE_TYPE = "deviceType";
var _DYN_DATA = "data";
var _DYN_NAME = "name";
var _DYN_TRACE_ID = "traceID";
var _DYN_LENGTH2 = "length";
var _DYN_STRINGIFY = "stringify";
var _DYN_MEASUREMENTS = "measurements";
var _DYN_DATA_TYPE2 = "dataType";
var _DYN_ENVELOPE_TYPE2 = "envelopeType";
var _DYN_TO_STRING2 = "toString";
var _DYN__GET = "_get";
var _DYN_ENQUEUE = "enqueue";
var _DYN_COUNT = "count";
var _DYN_EVENTS_LIMIT_IN_MEM = "eventsLimitInMem";
var _DYN_PUSH = "push";
var _DYN_ITEM = "item";
var _DYN_EMIT_LINE_DELIMITED_0 = "emitLineDelimitedJson";
var _DYN_CLEAR = "clear";
var _DYN_CREATE_NEW = "createNew";
var _DYN_MARK_AS_SENT = "markAsSent";
var _DYN_CLEAR_SENT = "clearSent";
var _DYN_BUFFER_OVERRIDE = "bufferOverride";
var _DYN__BUFFER__KEY = "BUFFER_KEY";
var _DYN__SENT__BUFFER__KEY = "SENT_BUFFER_KEY";
var _DYN_CONCAT = "concat";
var _DYN__MAX__BUFFER__SIZE = "MAX_BUFFER_SIZE";
var _DYN_TRIGGER_SEND = "triggerSend";
var _DYN_DIAG_LOG2 = "diagLog";
var _DYN_INITIALIZE = "initialize";
var _DYN__SENDER = "_sender";
var _DYN_CUSTOM_HEADERS = "customHeaders";
var _DYN_MAX_BATCH_SIZE_IN_BY1 = "maxBatchSizeInBytes";
var _DYN_ONUNLOAD_DISABLE_BEA2 = "onunloadDisableBeacon";
var _DYN_IS_BEACON_API_DISABL3 = "isBeaconApiDisabled";
var _DYN_ALWAYS_USE_XHR_OVERR4 = "alwaysUseXhrOverride";
var _DYN_DISABLE_XHR = "disableXhr";
var _DYN_ENABLE_SESSION_STORA5 = "enableSessionStorageBuffer";
var _DYN__BUFFER = "_buffer";
var _DYN_ONUNLOAD_DISABLE_FET6 = "onunloadDisableFetch";
var _DYN_DISABLE_SEND_BEACON_7 = "disableSendBeaconSplit";
var _DYN_INSTRUMENTATION_KEY = "instrumentationKey";
var _DYN_ENABLE_SEND_PROMISE = "enableSendPromise";
var _DYN_GET_SENDER_INST = "getSenderInst";
var _DYN_UNLOAD_TRANSPORTS = "unloadTransports";
var _DYN_CONVERT_UNDEFINED = "convertUndefined";
var _DYN_MAX_BATCH_INTERVAL = "maxBatchInterval";
var _DYN_SERIALIZE = "serialize";
var _DYN__ON_ERROR = "_onError";
var _DYN__ON_PARTIAL_SUCCESS = "_onPartialSuccess";
var _DYN__ON_SUCCESS = "_onSuccess";
var _DYN_ITEMS_RECEIVED = "itemsReceived";
var _DYN_ITEMS_ACCEPTED = "itemsAccepted";
var _DYN_ORI_PAYLOAD = "oriPayload";
var _DYN_BASE_TYPE = "baseType";
var _DYN_SAMPLE_RATE = "sampleRate";
var _DYN_EVENTS_SEND_REQUEST = "eventsSendRequest";
var _DYN_GET_SAMPLING_SCORE = "getSamplingScore";
var _DYN_GET_HASH_CODE_SCORE = "getHashCodeScore";

// node_modules/@microsoft/applicationinsights-channel-js/dist-es5/EnvelopeCreator.js
var strBaseType = "baseType";
var strBaseData = "baseData";
var strProperties = "properties";
var strTrue = "true";
function _setValueIf(target, field, value) {
  return setValue(target, field, value, isTruthy);
}
function _extractPartAExtensions(logger, item, env) {
  var envTags = env[
    _DYN_TAGS
    /* @min:%2etags */
  ] = env[
    _DYN_TAGS
    /* @min:%2etags */
  ] || {};
  var itmExt = item.ext = item.ext || {};
  var itmTags = item[
    _DYN_TAGS
    /* @min:%2etags */
  ] = item[
    _DYN_TAGS
    /* @min:%2etags */
  ] || [];
  var extUser = itmExt.user;
  if (extUser) {
    _setValueIf(envTags, CtxTagKeys.userAuthUserId, extUser.authId);
    _setValueIf(envTags, CtxTagKeys.userId, extUser.id || extUser.localId);
  }
  var extApp = itmExt.app;
  if (extApp) {
    _setValueIf(envTags, CtxTagKeys.sessionId, extApp.sesId);
  }
  var extDevice = itmExt.device;
  if (extDevice) {
    _setValueIf(envTags, CtxTagKeys.deviceId, extDevice.id || extDevice.localId);
    _setValueIf(envTags, CtxTagKeys[
      _DYN_DEVICE_TYPE
      /* @min:%2edeviceType */
    ], extDevice.deviceClass);
    _setValueIf(envTags, CtxTagKeys.deviceIp, extDevice.ip);
    _setValueIf(envTags, CtxTagKeys.deviceModel, extDevice.model);
    _setValueIf(envTags, CtxTagKeys[
      _DYN_DEVICE_TYPE
      /* @min:%2edeviceType */
    ], extDevice[
      _DYN_DEVICE_TYPE
      /* @min:%2edeviceType */
    ]);
  }
  var web = item.ext.web;
  if (web) {
    _setValueIf(envTags, CtxTagKeys.deviceLanguage, web.browserLang);
    _setValueIf(envTags, CtxTagKeys.deviceBrowserVersion, web.browserVer);
    _setValueIf(envTags, CtxTagKeys.deviceBrowser, web.browser);
    var envData = env[
      _DYN_DATA
      /* @min:%2edata */
    ] = env[
      _DYN_DATA
      /* @min:%2edata */
    ] || {};
    var envBaseData = envData[strBaseData] = envData[strBaseData] || {};
    var envProps = envBaseData[strProperties] = envBaseData[strProperties] || {};
    _setValueIf(envProps, "domain", web.domain);
    _setValueIf(envProps, "isManual", web.isManual ? strTrue : null);
    _setValueIf(envProps, "screenRes", web.screenRes);
    _setValueIf(envProps, "userConsent", web.userConsent ? strTrue : null);
  }
  var extOs = itmExt.os;
  if (extOs) {
    _setValueIf(envTags, CtxTagKeys.deviceOS, extOs[
      _DYN_NAME
      /* @min:%2ename */
    ]);
    _setValueIf(envTags, CtxTagKeys.deviceOSVersion, extOs.osVer);
  }
  var extTrace = itmExt.trace;
  if (extTrace) {
    _setValueIf(envTags, CtxTagKeys.operationParentId, extTrace.parentID);
    _setValueIf(envTags, CtxTagKeys.operationName, dataSanitizeString(logger, extTrace[
      _DYN_NAME
      /* @min:%2ename */
    ]));
    _setValueIf(envTags, CtxTagKeys.operationId, extTrace[
      _DYN_TRACE_ID
      /* @min:%2etraceID */
    ]);
  }
  var tgs = {};
  for (var i = itmTags[
    _DYN_LENGTH2
    /* @min:%2elength */
  ] - 1; i >= 0; i--) {
    var tg = itmTags[i];
    objForEachKey(tg, function(key, value) {
      tgs[key] = value;
    });
    itmTags.splice(i, 1);
  }
  objForEachKey(itmTags, function(tg2, value) {
    tgs[tg2] = value;
  });
  var theTags = __assignFn(__assignFn({}, envTags), tgs);
  if (!theTags[CtxTagKeys.internalSdkVersion]) {
    theTags[CtxTagKeys.internalSdkVersion] = dataSanitizeString(logger, "javascript:".concat(EnvelopeCreator.Version), 64);
  }
  env[
    _DYN_TAGS
    /* @min:%2etags */
  ] = optimizeObject(theTags);
}
function _extractPropsAndMeasurements(data, properties, measurements) {
  if (!isNullOrUndefined(data)) {
    objForEachKey(data, function(key, value) {
      if (isNumber(value)) {
        measurements[key] = value;
      } else if (isString(value)) {
        properties[key] = value;
      } else if (hasJSON()) {
        properties[key] = getJSON()[
          _DYN_STRINGIFY
          /* @min:%2estringify */
        ](value);
      }
    });
  }
}
function _convertPropsUndefinedToCustomDefinedValue(properties, customUndefinedValue) {
  if (!isNullOrUndefined(properties)) {
    objForEachKey(properties, function(key, value) {
      properties[key] = value || customUndefinedValue;
    });
  }
}
function _createEnvelope(logger, envelopeType, telemetryItem, data) {
  var envelope = new Envelope(logger, data, envelopeType);
  _setValueIf(envelope, "sampleRate", telemetryItem[SampleRate]);
  if ((telemetryItem[strBaseData] || {}).startTime) {
    envelope.time = toISOString(telemetryItem[strBaseData].startTime);
  }
  envelope.iKey = telemetryItem.iKey;
  var iKeyNoDashes = telemetryItem.iKey.replace(/-/g, "");
  envelope[
    _DYN_NAME
    /* @min:%2ename */
  ] = envelope[
    _DYN_NAME
    /* @min:%2ename */
  ].replace("{0}", iKeyNoDashes);
  _extractPartAExtensions(logger, telemetryItem, envelope);
  telemetryItem[
    _DYN_TAGS
    /* @min:%2etags */
  ] = telemetryItem[
    _DYN_TAGS
    /* @min:%2etags */
  ] || [];
  return optimizeObject(envelope);
}
function EnvelopeCreatorInit(logger, telemetryItem) {
  if (isNullOrUndefined(telemetryItem[strBaseData])) {
    _throwInternal(logger, 1, 46, "telemetryItem.baseData cannot be null.");
  }
}
var EnvelopeCreator = {
  Version: "3.3.1"
};
function DependencyEnvelopeCreator(logger, telemetryItem, customUndefinedValue) {
  EnvelopeCreatorInit(logger, telemetryItem);
  var customMeasurements = telemetryItem[strBaseData][
    _DYN_MEASUREMENTS
    /* @min:%2emeasurements */
  ] || {};
  var customProperties = telemetryItem[strBaseData][strProperties] || {};
  _extractPropsAndMeasurements(telemetryItem[
    _DYN_DATA
    /* @min:%2edata */
  ], customProperties, customMeasurements);
  if (!isNullOrUndefined(customUndefinedValue)) {
    _convertPropsUndefinedToCustomDefinedValue(customProperties, customUndefinedValue);
  }
  var bd = telemetryItem[strBaseData];
  if (isNullOrUndefined(bd)) {
    _warnToConsole(logger, "Invalid input for dependency data");
    return null;
  }
  var method = bd[strProperties] && bd[strProperties][HttpMethod] ? bd[strProperties][HttpMethod] : "GET";
  var remoteDepData = new RemoteDependencyData(logger, bd.id, bd.target, bd[
    _DYN_NAME
    /* @min:%2ename */
  ], bd[
    STR_DURATION
    /* @min:%2eduration */
  ], bd.success, bd.responseCode, method, bd.type, bd.correlationContext, customProperties, customMeasurements);
  var data = new Data(RemoteDependencyData[
    _DYN_DATA_TYPE2
    /* @min:%2edataType */
  ], remoteDepData);
  return _createEnvelope(logger, RemoteDependencyData[
    _DYN_ENVELOPE_TYPE2
    /* @min:%2eenvelopeType */
  ], telemetryItem, data);
}
function EventEnvelopeCreator(logger, telemetryItem, customUndefinedValue) {
  EnvelopeCreatorInit(logger, telemetryItem);
  var customProperties = {};
  var customMeasurements = {};
  if (telemetryItem[strBaseType] !== Event2[
    _DYN_DATA_TYPE2
    /* @min:%2edataType */
  ]) {
    customProperties["baseTypeSource"] = telemetryItem[strBaseType];
  }
  if (telemetryItem[strBaseType] === Event2[
    _DYN_DATA_TYPE2
    /* @min:%2edataType */
  ]) {
    customProperties = telemetryItem[strBaseData][strProperties] || {};
    customMeasurements = telemetryItem[strBaseData][
      _DYN_MEASUREMENTS
      /* @min:%2emeasurements */
    ] || {};
  } else {
    if (telemetryItem[strBaseData]) {
      _extractPropsAndMeasurements(telemetryItem[strBaseData], customProperties, customMeasurements);
    }
  }
  _extractPropsAndMeasurements(telemetryItem[
    _DYN_DATA
    /* @min:%2edata */
  ], customProperties, customMeasurements);
  if (!isNullOrUndefined(customUndefinedValue)) {
    _convertPropsUndefinedToCustomDefinedValue(customProperties, customUndefinedValue);
  }
  var eventName = telemetryItem[strBaseData][
    _DYN_NAME
    /* @min:%2ename */
  ];
  var eventData = new Event2(logger, eventName, customProperties, customMeasurements);
  var data = new Data(Event2[
    _DYN_DATA_TYPE2
    /* @min:%2edataType */
  ], eventData);
  return _createEnvelope(logger, Event2[
    _DYN_ENVELOPE_TYPE2
    /* @min:%2eenvelopeType */
  ], telemetryItem, data);
}
function ExceptionEnvelopeCreator(logger, telemetryItem, customUndefinedValue) {
  EnvelopeCreatorInit(logger, telemetryItem);
  var customMeasurements = telemetryItem[strBaseData][
    _DYN_MEASUREMENTS
    /* @min:%2emeasurements */
  ] || {};
  var customProperties = telemetryItem[strBaseData][strProperties] || {};
  _extractPropsAndMeasurements(telemetryItem[
    _DYN_DATA
    /* @min:%2edata */
  ], customProperties, customMeasurements);
  if (!isNullOrUndefined(customUndefinedValue)) {
    _convertPropsUndefinedToCustomDefinedValue(customProperties, customUndefinedValue);
  }
  var bd = telemetryItem[strBaseData];
  var exData = Exception.CreateFromInterface(logger, bd, customProperties, customMeasurements);
  var data = new Data(Exception[
    _DYN_DATA_TYPE2
    /* @min:%2edataType */
  ], exData);
  return _createEnvelope(logger, Exception[
    _DYN_ENVELOPE_TYPE2
    /* @min:%2eenvelopeType */
  ], telemetryItem, data);
}
function MetricEnvelopeCreator(logger, telemetryItem, customUndefinedValue) {
  EnvelopeCreatorInit(logger, telemetryItem);
  var baseData = telemetryItem[strBaseData];
  var props = baseData[strProperties] || {};
  var measurements = baseData[
    _DYN_MEASUREMENTS
    /* @min:%2emeasurements */
  ] || {};
  _extractPropsAndMeasurements(telemetryItem[
    _DYN_DATA
    /* @min:%2edata */
  ], props, measurements);
  if (!isNullOrUndefined(customUndefinedValue)) {
    _convertPropsUndefinedToCustomDefinedValue(props, customUndefinedValue);
  }
  var baseMetricData = new Metric(logger, baseData[
    _DYN_NAME
    /* @min:%2ename */
  ], baseData.average, baseData.sampleCount, baseData.min, baseData.max, baseData.stdDev, props, measurements);
  var data = new Data(Metric[
    _DYN_DATA_TYPE2
    /* @min:%2edataType */
  ], baseMetricData);
  return _createEnvelope(logger, Metric[
    _DYN_ENVELOPE_TYPE2
    /* @min:%2eenvelopeType */
  ], telemetryItem, data);
}
function PageViewEnvelopeCreator(logger, telemetryItem, customUndefinedValue) {
  EnvelopeCreatorInit(logger, telemetryItem);
  var duration;
  var baseData = telemetryItem[strBaseData];
  if (!isNullOrUndefined(baseData) && !isNullOrUndefined(baseData[strProperties]) && !isNullOrUndefined(baseData[strProperties][STR_DURATION])) {
    duration = baseData[strProperties][STR_DURATION];
    delete baseData[strProperties][STR_DURATION];
  } else if (!isNullOrUndefined(telemetryItem[
    _DYN_DATA
    /* @min:%2edata */
  ]) && !isNullOrUndefined(telemetryItem[
    _DYN_DATA
    /* @min:%2edata */
  ][STR_DURATION])) {
    duration = telemetryItem[
      _DYN_DATA
      /* @min:%2edata */
    ][STR_DURATION];
    delete telemetryItem[
      _DYN_DATA
      /* @min:%2edata */
    ][STR_DURATION];
  }
  var bd = telemetryItem[strBaseData];
  var currentContextId;
  if (((telemetryItem.ext || {}).trace || {})[
    _DYN_TRACE_ID
    /* @min:%2etraceID */
  ]) {
    currentContextId = telemetryItem.ext.trace[
      _DYN_TRACE_ID
      /* @min:%2etraceID */
    ];
  }
  var id = bd.id || currentContextId;
  var name = bd[
    _DYN_NAME
    /* @min:%2ename */
  ];
  var url = bd.uri;
  var properties = bd[strProperties] || {};
  var measurements = bd[
    _DYN_MEASUREMENTS
    /* @min:%2emeasurements */
  ] || {};
  if (!isNullOrUndefined(bd.refUri)) {
    properties["refUri"] = bd.refUri;
  }
  if (!isNullOrUndefined(bd.pageType)) {
    properties["pageType"] = bd.pageType;
  }
  if (!isNullOrUndefined(bd.isLoggedIn)) {
    properties["isLoggedIn"] = bd.isLoggedIn[
      _DYN_TO_STRING2
      /* @min:%2etoString */
    ]();
  }
  if (!isNullOrUndefined(bd[strProperties])) {
    var pageTags = bd[strProperties];
    objForEachKey(pageTags, function(key, value) {
      properties[key] = value;
    });
  }
  _extractPropsAndMeasurements(telemetryItem[
    _DYN_DATA
    /* @min:%2edata */
  ], properties, measurements);
  if (!isNullOrUndefined(customUndefinedValue)) {
    _convertPropsUndefinedToCustomDefinedValue(properties, customUndefinedValue);
  }
  var pageViewData = new PageView(logger, name, url, duration, properties, measurements, id);
  var data = new Data(PageView[
    _DYN_DATA_TYPE2
    /* @min:%2edataType */
  ], pageViewData);
  return _createEnvelope(logger, PageView[
    _DYN_ENVELOPE_TYPE2
    /* @min:%2eenvelopeType */
  ], telemetryItem, data);
}
function PageViewPerformanceEnvelopeCreator(logger, telemetryItem, customUndefinedValue) {
  EnvelopeCreatorInit(logger, telemetryItem);
  var bd = telemetryItem[strBaseData];
  var name = bd[
    _DYN_NAME
    /* @min:%2ename */
  ];
  var url = bd.uri || bd.url;
  var properties = bd[strProperties] || {};
  var measurements = bd[
    _DYN_MEASUREMENTS
    /* @min:%2emeasurements */
  ] || {};
  _extractPropsAndMeasurements(telemetryItem[
    _DYN_DATA
    /* @min:%2edata */
  ], properties, measurements);
  if (!isNullOrUndefined(customUndefinedValue)) {
    _convertPropsUndefinedToCustomDefinedValue(properties, customUndefinedValue);
  }
  var baseData = new PageViewPerformance(logger, name, url, void 0, properties, measurements, bd);
  var data = new Data(PageViewPerformance[
    _DYN_DATA_TYPE2
    /* @min:%2edataType */
  ], baseData);
  return _createEnvelope(logger, PageViewPerformance[
    _DYN_ENVELOPE_TYPE2
    /* @min:%2eenvelopeType */
  ], telemetryItem, data);
}
function TraceEnvelopeCreator(logger, telemetryItem, customUndefinedValue) {
  EnvelopeCreatorInit(logger, telemetryItem);
  var message = telemetryItem[strBaseData].message;
  var severityLevel = telemetryItem[strBaseData].severityLevel;
  var props = telemetryItem[strBaseData][strProperties] || {};
  var measurements = telemetryItem[strBaseData][
    _DYN_MEASUREMENTS
    /* @min:%2emeasurements */
  ] || {};
  _extractPropsAndMeasurements(telemetryItem[
    _DYN_DATA
    /* @min:%2edata */
  ], props, measurements);
  if (!isNullOrUndefined(customUndefinedValue)) {
    _convertPropsUndefinedToCustomDefinedValue(props, customUndefinedValue);
  }
  var baseData = new Trace(logger, message, severityLevel, props, measurements);
  var data = new Data(Trace[
    _DYN_DATA_TYPE2
    /* @min:%2edataType */
  ], baseData);
  return _createEnvelope(logger, Trace[
    _DYN_ENVELOPE_TYPE2
    /* @min:%2eenvelopeType */
  ], telemetryItem, data);
}

// node_modules/@microsoft/applicationinsights-channel-js/dist-es5/SendBuffer.js
var BaseSendBuffer = (
  /** @class */
  function() {
    function BaseSendBuffer2(logger, config) {
      var _buffer = [];
      var _bufferFullMessageSent = false;
      var _maxRetryCnt = config.maxRetryCnt;
      this[
        _DYN__GET
        /* @min:%2e_get */
      ] = function() {
        return _buffer;
      };
      this._set = function(buffer) {
        _buffer = buffer;
        return _buffer;
      };
      dynamicProto(BaseSendBuffer2, this, function(_self) {
        _self[
          _DYN_ENQUEUE
          /* @min:%2eenqueue */
        ] = function(payload) {
          if (_self[
            _DYN_COUNT
            /* @min:%2ecount */
          ]() >= config[
            _DYN_EVENTS_LIMIT_IN_MEM
            /* @min:%2eeventsLimitInMem */
          ]) {
            if (!_bufferFullMessageSent) {
              _throwInternal(logger, 2, 105, "Maximum in-memory buffer size reached: " + _self[
                _DYN_COUNT
                /* @min:%2ecount */
              ](), true);
              _bufferFullMessageSent = true;
            }
            return;
          }
          payload.cnt = payload.cnt || 0;
          if (!isNullOrUndefined(_maxRetryCnt)) {
            if (payload.cnt > _maxRetryCnt) {
              return;
            }
          }
          _buffer[
            _DYN_PUSH
            /* @min:%2epush */
          ](payload);
          return;
        };
        _self[
          _DYN_COUNT
          /* @min:%2ecount */
        ] = function() {
          return _buffer[
            _DYN_LENGTH2
            /* @min:%2elength */
          ];
        };
        _self.size = function() {
          var size = _buffer[
            _DYN_LENGTH2
            /* @min:%2elength */
          ];
          for (var lp = 0; lp < _buffer[
            _DYN_LENGTH2
            /* @min:%2elength */
          ]; lp++) {
            size += _buffer[lp].item[
              _DYN_LENGTH2
              /* @min:%2elength */
            ];
          }
          if (!config[
            _DYN_EMIT_LINE_DELIMITED_0
            /* @min:%2eemitLineDelimitedJson */
          ]) {
            size += 2;
          }
          return size;
        };
        _self[
          _DYN_CLEAR
          /* @min:%2eclear */
        ] = function() {
          _buffer = [];
          _bufferFullMessageSent = false;
        };
        _self.getItems = function() {
          return _buffer.slice(0);
        };
        _self.batchPayloads = function(payloads) {
          if (payloads && payloads[
            _DYN_LENGTH2
            /* @min:%2elength */
          ] > 0) {
            var payloadStr_1 = [];
            arrForEach(payloads, function(payload) {
              payloadStr_1[
                _DYN_PUSH
                /* @min:%2epush */
              ](payload[
                _DYN_ITEM
                /* @min:%2eitem */
              ]);
            });
            var batch = config[
              _DYN_EMIT_LINE_DELIMITED_0
              /* @min:%2eemitLineDelimitedJson */
            ] ? payloadStr_1.join("\n") : "[" + payloadStr_1.join(",") + "]";
            return batch;
          }
          return null;
        };
        _self[
          _DYN_CREATE_NEW
          /* @min:%2ecreateNew */
        ] = function(newLogger, newConfig, canUseSessionStorage) {
          var items = _buffer.slice(0);
          newLogger = newLogger || logger;
          newConfig = newConfig || {};
          var newBuffer = !!canUseSessionStorage ? new SessionStorageSendBuffer(newLogger, newConfig) : new ArraySendBuffer(newLogger, newConfig);
          arrForEach(items, function(payload) {
            newBuffer[
              _DYN_ENQUEUE
              /* @min:%2eenqueue */
            ](payload);
          });
          return newBuffer;
        };
      });
    }
    BaseSendBuffer2.__ieDyn = 1;
    return BaseSendBuffer2;
  }()
);
var ArraySendBuffer = (
  /** @class */
  function(_super) {
    __extendsFn(ArraySendBuffer2, _super);
    function ArraySendBuffer2(logger, config) {
      var _this = _super.call(this, logger, config) || this;
      dynamicProto(ArraySendBuffer2, _this, function(_self, _base) {
        _self[
          _DYN_MARK_AS_SENT
          /* @min:%2emarkAsSent */
        ] = function(payload) {
          _base[
            _DYN_CLEAR
            /* @min:%2eclear */
          ]();
        };
        _self[
          _DYN_CLEAR_SENT
          /* @min:%2eclearSent */
        ] = function(payload) {
        };
      });
      return _this;
    }
    ArraySendBuffer2.__ieDyn = 1;
    return ArraySendBuffer2;
  }(BaseSendBuffer)
);
var PREVIOUS_KEYS = ["AI_buffer", "AI_sentBuffer"];
var SessionStorageSendBuffer = (
  /** @class */
  function(_super) {
    __extendsFn(SessionStorageSendBuffer2, _super);
    function SessionStorageSendBuffer2(logger, config) {
      var _this = _super.call(this, logger, config) || this;
      var _bufferFullMessageSent = false;
      var _namePrefix = config === null || config === void 0 ? void 0 : config.namePrefix;
      var _b3 = config[
        _DYN_BUFFER_OVERRIDE
        /* @min:%2ebufferOverride */
      ] || { getItem: utlGetSessionStorage, setItem: utlSetSessionStorage }, getItem = _b3.getItem, setItem = _b3.setItem;
      var _maxRetryCnt = config.maxRetryCnt;
      dynamicProto(SessionStorageSendBuffer2, _this, function(_self, _base) {
        var bufferItems = _getBuffer(SessionStorageSendBuffer2[
          _DYN__BUFFER__KEY
          /* @min:%2eBUFFER_KEY */
        ]);
        var itemsInSentBuffer = _getBuffer(SessionStorageSendBuffer2[
          _DYN__SENT__BUFFER__KEY
          /* @min:%2eSENT_BUFFER_KEY */
        ]);
        var previousItems = _getPreviousEvents();
        var notDeliveredItems = itemsInSentBuffer[
          _DYN_CONCAT
          /* @min:%2econcat */
        ](previousItems);
        var buffer = _self._set(bufferItems[
          _DYN_CONCAT
          /* @min:%2econcat */
        ](notDeliveredItems));
        if (buffer[
          _DYN_LENGTH2
          /* @min:%2elength */
        ] > SessionStorageSendBuffer2[
          _DYN__MAX__BUFFER__SIZE
          /* @min:%2eMAX_BUFFER_SIZE */
        ]) {
          buffer[
            _DYN_LENGTH2
            /* @min:%2elength */
          ] = SessionStorageSendBuffer2[
            _DYN__MAX__BUFFER__SIZE
            /* @min:%2eMAX_BUFFER_SIZE */
          ];
        }
        _setBuffer(SessionStorageSendBuffer2[
          _DYN__SENT__BUFFER__KEY
          /* @min:%2eSENT_BUFFER_KEY */
        ], []);
        _setBuffer(SessionStorageSendBuffer2[
          _DYN__BUFFER__KEY
          /* @min:%2eBUFFER_KEY */
        ], buffer);
        _self[
          _DYN_ENQUEUE
          /* @min:%2eenqueue */
        ] = function(payload) {
          if (_self[
            _DYN_COUNT
            /* @min:%2ecount */
          ]() >= SessionStorageSendBuffer2[
            _DYN__MAX__BUFFER__SIZE
            /* @min:%2eMAX_BUFFER_SIZE */
          ]) {
            if (!_bufferFullMessageSent) {
              _throwInternal(logger, 2, 67, "Maximum buffer size reached: " + _self[
                _DYN_COUNT
                /* @min:%2ecount */
              ](), true);
              _bufferFullMessageSent = true;
            }
            return;
          }
          payload.cnt = payload.cnt || 0;
          if (!isNullOrUndefined(_maxRetryCnt)) {
            if (payload.cnt > _maxRetryCnt) {
              return;
            }
          }
          _base[
            _DYN_ENQUEUE
            /* @min:%2eenqueue */
          ](payload);
          _setBuffer(SessionStorageSendBuffer2.BUFFER_KEY, _self[
            _DYN__GET
            /* @min:%2e_get */
          ]());
        };
        _self[
          _DYN_CLEAR
          /* @min:%2eclear */
        ] = function() {
          _base[
            _DYN_CLEAR
            /* @min:%2eclear */
          ]();
          _setBuffer(SessionStorageSendBuffer2.BUFFER_KEY, _self[
            _DYN__GET
            /* @min:%2e_get */
          ]());
          _setBuffer(SessionStorageSendBuffer2[
            _DYN__SENT__BUFFER__KEY
            /* @min:%2eSENT_BUFFER_KEY */
          ], []);
          _bufferFullMessageSent = false;
        };
        _self[
          _DYN_MARK_AS_SENT
          /* @min:%2emarkAsSent */
        ] = function(payload) {
          _setBuffer(SessionStorageSendBuffer2[
            _DYN__BUFFER__KEY
            /* @min:%2eBUFFER_KEY */
          ], _self._set(_removePayloadsFromBuffer(payload, _self[
            _DYN__GET
            /* @min:%2e_get */
          ]())));
          var sentElements = _getBuffer(SessionStorageSendBuffer2[
            _DYN__SENT__BUFFER__KEY
            /* @min:%2eSENT_BUFFER_KEY */
          ]);
          if (sentElements instanceof Array && payload instanceof Array) {
            sentElements = sentElements[
              _DYN_CONCAT
              /* @min:%2econcat */
            ](payload);
            if (sentElements[
              _DYN_LENGTH2
              /* @min:%2elength */
            ] > SessionStorageSendBuffer2[
              _DYN__MAX__BUFFER__SIZE
              /* @min:%2eMAX_BUFFER_SIZE */
            ]) {
              _throwInternal(logger, 1, 67, "Sent buffer reached its maximum size: " + sentElements[
                _DYN_LENGTH2
                /* @min:%2elength */
              ], true);
              sentElements[
                _DYN_LENGTH2
                /* @min:%2elength */
              ] = SessionStorageSendBuffer2[
                _DYN__MAX__BUFFER__SIZE
                /* @min:%2eMAX_BUFFER_SIZE */
              ];
            }
            _setBuffer(SessionStorageSendBuffer2[
              _DYN__SENT__BUFFER__KEY
              /* @min:%2eSENT_BUFFER_KEY */
            ], sentElements);
          }
        };
        _self[
          _DYN_CLEAR_SENT
          /* @min:%2eclearSent */
        ] = function(payload) {
          var sentElements = _getBuffer(SessionStorageSendBuffer2[
            _DYN__SENT__BUFFER__KEY
            /* @min:%2eSENT_BUFFER_KEY */
          ]);
          sentElements = _removePayloadsFromBuffer(payload, sentElements);
          _setBuffer(SessionStorageSendBuffer2[
            _DYN__SENT__BUFFER__KEY
            /* @min:%2eSENT_BUFFER_KEY */
          ], sentElements);
        };
        _self[
          _DYN_CREATE_NEW
          /* @min:%2ecreateNew */
        ] = function(newLogger, newConfig, canUseSessionStorage) {
          canUseSessionStorage = !!canUseSessionStorage;
          var unsentItems = _self[
            _DYN__GET
            /* @min:%2e_get */
          ]().slice(0);
          var sentItems = _getBuffer(SessionStorageSendBuffer2[
            _DYN__SENT__BUFFER__KEY
            /* @min:%2eSENT_BUFFER_KEY */
          ]).slice(0);
          newLogger = newLogger || logger;
          newConfig = newConfig || {};
          _self[
            _DYN_CLEAR
            /* @min:%2eclear */
          ]();
          var newBuffer = canUseSessionStorage ? new SessionStorageSendBuffer2(newLogger, newConfig) : new ArraySendBuffer(newLogger, newConfig);
          arrForEach(unsentItems, function(payload) {
            newBuffer[
              _DYN_ENQUEUE
              /* @min:%2eenqueue */
            ](payload);
          });
          if (canUseSessionStorage) {
            newBuffer[
              _DYN_MARK_AS_SENT
              /* @min:%2emarkAsSent */
            ](sentItems);
          }
          return newBuffer;
        };
        function _removePayloadsFromBuffer(payloads, buffer2) {
          var remaining = [];
          var payloadStr = [];
          arrForEach(payloads, function(payload) {
            payloadStr[
              _DYN_PUSH
              /* @min:%2epush */
            ](payload[
              _DYN_ITEM
              /* @min:%2eitem */
            ]);
          });
          arrForEach(buffer2, function(value) {
            if (!isFunction(value) && arrIndexOf(payloadStr, value[
              _DYN_ITEM
              /* @min:%2eitem */
            ]) === -1) {
              remaining[
                _DYN_PUSH
                /* @min:%2epush */
              ](value);
            }
          });
          return remaining;
        }
        function _getBuffer(key) {
          var prefixedKey = key;
          prefixedKey = _namePrefix ? _namePrefix + "_" + prefixedKey : prefixedKey;
          return _getBufferBase(prefixedKey);
        }
        function _getBufferBase(key) {
          try {
            var bufferJson = getItem(logger, key);
            if (bufferJson) {
              var buffer_1 = getJSON().parse(bufferJson);
              if (isString(buffer_1)) {
                buffer_1 = getJSON().parse(buffer_1);
              }
              if (buffer_1 && isArray(buffer_1)) {
                return buffer_1;
              }
            }
          } catch (e) {
            _throwInternal(logger, 1, 42, " storage key: " + key + ", " + getExceptionName(e), { exception: dumpObj(e) });
          }
          return [];
        }
        function _setBuffer(key, buffer2) {
          var prefixedKey = key;
          try {
            prefixedKey = _namePrefix ? _namePrefix + "_" + prefixedKey : prefixedKey;
            var bufferJson = JSON[
              _DYN_STRINGIFY
              /* @min:%2estringify */
            ](buffer2);
            setItem(logger, prefixedKey, bufferJson);
          } catch (e) {
            setItem(logger, prefixedKey, JSON[
              _DYN_STRINGIFY
              /* @min:%2estringify */
            ]([]));
            _throwInternal(logger, 2, 41, " storage key: " + prefixedKey + ", " + getExceptionName(e) + ". Buffer cleared", { exception: dumpObj(e) });
          }
        }
        function _getPreviousEvents() {
          var items = [];
          try {
            arrForEach(PREVIOUS_KEYS, function(key) {
              var events = _getItemsFromPreviousKey(key);
              items = items[
                _DYN_CONCAT
                /* @min:%2econcat */
              ](events);
              if (_namePrefix) {
                var prefixedKey = _namePrefix + "_" + key;
                var prefixEvents = _getItemsFromPreviousKey(prefixedKey);
                items = items[
                  _DYN_CONCAT
                  /* @min:%2econcat */
                ](prefixEvents);
              }
            });
            return items;
          } catch (e) {
            _throwInternal(logger, 2, 41, "Transfer events from previous buffers: " + getExceptionName(e) + ". previous Buffer items can not be removed", { exception: dumpObj(e) });
          }
          return [];
        }
        function _getItemsFromPreviousKey(key) {
          try {
            var items = _getBufferBase(key);
            var transFormedItems_1 = [];
            arrForEach(items, function(item) {
              var internalItem = {
                item,
                cnt: 0
                // previous events will be default to 0 count
              };
              transFormedItems_1[
                _DYN_PUSH
                /* @min:%2epush */
              ](internalItem);
            });
            utlRemoveSessionStorage(logger, key);
            return transFormedItems_1;
          } catch (e) {
          }
          return [];
        }
      });
      return _this;
    }
    var _a7;
    _a7 = SessionStorageSendBuffer2;
    SessionStorageSendBuffer2.VERSION = "_1";
    SessionStorageSendBuffer2.BUFFER_KEY = "AI_buffer" + _a7.VERSION;
    SessionStorageSendBuffer2.SENT_BUFFER_KEY = "AI_sentBuffer" + _a7.VERSION;
    SessionStorageSendBuffer2.MAX_BUFFER_SIZE = 2e3;
    return SessionStorageSendBuffer2;
  }(BaseSendBuffer)
);

// node_modules/@microsoft/applicationinsights-channel-js/dist-es5/Serializer.js
var Serializer = (
  /** @class */
  function() {
    function Serializer2(logger) {
      dynamicProto(Serializer2, this, function(_self) {
        _self[
          _DYN_SERIALIZE
          /* @min:%2eserialize */
        ] = function(input) {
          var output = _serializeObject(input, "root");
          try {
            return getJSON()[
              _DYN_STRINGIFY
              /* @min:%2estringify */
            ](output);
          } catch (e) {
            _throwInternal(logger, 1, 48, e && isFunction(e[
              _DYN_TO_STRING2
              /* @min:%2etoString */
            ]) ? e[
              _DYN_TO_STRING2
              /* @min:%2etoString */
            ]() : "Error serializing object", null, true);
          }
        };
        function _serializeObject(source, name) {
          var circularReferenceCheck = "__aiCircularRefCheck";
          var output = {};
          if (!source) {
            _throwInternal(logger, 1, 48, "cannot serialize object because it is null or undefined", { name }, true);
            return output;
          }
          if (source[circularReferenceCheck]) {
            _throwInternal(logger, 2, 50, "Circular reference detected while serializing object", { name }, true);
            return output;
          }
          if (!source.aiDataContract) {
            if (name === "measurements") {
              output = _serializeStringMap(source, "number", name);
            } else if (name === "properties") {
              output = _serializeStringMap(source, "string", name);
            } else if (name === "tags") {
              output = _serializeStringMap(source, "string", name);
            } else if (isArray(source)) {
              output = _serializeArray(source, name);
            } else {
              _throwInternal(logger, 2, 49, "Attempting to serialize an object which does not implement ISerializable", { name }, true);
              try {
                getJSON()[
                  _DYN_STRINGIFY
                  /* @min:%2estringify */
                ](source);
                output = source;
              } catch (e) {
                _throwInternal(logger, 1, 48, e && isFunction(e[
                  _DYN_TO_STRING2
                  /* @min:%2etoString */
                ]) ? e[
                  _DYN_TO_STRING2
                  /* @min:%2etoString */
                ]() : "Error serializing object", null, true);
              }
            }
            return output;
          }
          source[circularReferenceCheck] = true;
          objForEachKey(source.aiDataContract, function(field, contract) {
            var isRequired = isFunction(contract) ? contract() & 1 : contract & 1;
            var isHidden = isFunction(contract) ? contract() & 4 : contract & 4;
            var isArray2 = contract & 2;
            var isPresent = source[field] !== void 0;
            var isObj = isObject(source[field]) && source[field] !== null;
            if (isRequired && !isPresent && !isArray2) {
              _throwInternal(logger, 1, 24, "Missing required field specification. The field is required but not present on source", { field, name });
            } else if (!isHidden) {
              var value = void 0;
              if (isObj) {
                if (isArray2) {
                  value = _serializeArray(source[field], field);
                } else {
                  value = _serializeObject(source[field], field);
                }
              } else {
                value = source[field];
              }
              if (value !== void 0) {
                output[field] = value;
              }
            }
          });
          delete source[circularReferenceCheck];
          return output;
        }
        function _serializeArray(sources, name) {
          var output;
          if (!!sources) {
            if (!isArray(sources)) {
              _throwInternal(logger, 1, 54, "This field was specified as an array in the contract but the item is not an array.\r\n", { name }, true);
            } else {
              output = [];
              for (var i = 0; i < sources[
                _DYN_LENGTH2
                /* @min:%2elength */
              ]; i++) {
                var source = sources[i];
                var item = _serializeObject(source, name + "[" + i + "]");
                output[
                  _DYN_PUSH
                  /* @min:%2epush */
                ](item);
              }
            }
          }
          return output;
        }
        function _serializeStringMap(map, expectedType, name) {
          var output;
          if (map) {
            output = {};
            objForEachKey(map, function(field, value) {
              if (expectedType === "string") {
                if (value === void 0) {
                  output[field] = "undefined";
                } else if (value === null) {
                  output[field] = "null";
                } else if (!value[
                  _DYN_TO_STRING2
                  /* @min:%2etoString */
                ]) {
                  output[field] = "invalid field: toString() is not defined.";
                } else {
                  output[field] = value[
                    _DYN_TO_STRING2
                    /* @min:%2etoString */
                  ]();
                }
              } else if (expectedType === "number") {
                if (value === void 0) {
                  output[field] = "undefined";
                } else if (value === null) {
                  output[field] = "null";
                } else {
                  var num = parseFloat(value);
                  output[field] = num;
                }
              } else {
                output[field] = "invalid field: " + name + " is of unknown type.";
                _throwInternal(logger, 1, output[field], null, true);
              }
            });
          }
          return output;
        }
      });
    }
    Serializer2.__ieDyn = 1;
    return Serializer2;
  }()
);

// node_modules/@microsoft/applicationinsights-channel-js/dist-es5/TelemetryProcessors/SamplingScoreGenerators/HashCodeScoreGenerator.js
var MIN_INPUT_LENGTH = 8;
var HashCodeScoreGenerator = (
  /** @class */
  function() {
    function HashCodeScoreGenerator2() {
    }
    HashCodeScoreGenerator2.prototype.getHashCodeScore = function(key) {
      var score = this.getHashCode(key) / HashCodeScoreGenerator2.INT_MAX_VALUE;
      return score * 100;
    };
    HashCodeScoreGenerator2.prototype.getHashCode = function(input) {
      if (input === "") {
        return 0;
      }
      while (input[
        _DYN_LENGTH2
        /* @min:%2elength */
      ] < MIN_INPUT_LENGTH) {
        input = input[
          _DYN_CONCAT
          /* @min:%2econcat */
        ](input);
      }
      var hash = 5381;
      for (var i = 0; i < input[
        _DYN_LENGTH2
        /* @min:%2elength */
      ]; ++i) {
        hash = (hash << 5) + hash + input.charCodeAt(i);
        hash = hash & hash;
      }
      return Math.abs(hash);
    };
    HashCodeScoreGenerator2.INT_MAX_VALUE = 2147483647;
    return HashCodeScoreGenerator2;
  }()
);

// node_modules/@microsoft/applicationinsights-channel-js/dist-es5/TelemetryProcessors/SamplingScoreGenerators/SamplingScoreGenerator.js
var SamplingScoreGenerator = (
  /** @class */
  /* @__PURE__ */ function() {
    function SamplingScoreGenerator2() {
      var _self = this;
      var hashCodeGenerator = new HashCodeScoreGenerator();
      var keys = new ContextTagKeys();
      _self[
        _DYN_GET_SAMPLING_SCORE
        /* @min:%2egetSamplingScore */
      ] = function(item) {
        var score = 0;
        if (item[
          _DYN_TAGS
          /* @min:%2etags */
        ] && item[
          _DYN_TAGS
          /* @min:%2etags */
        ][keys.userId]) {
          score = hashCodeGenerator.getHashCodeScore(item[
            _DYN_TAGS
            /* @min:%2etags */
          ][keys.userId]);
        } else if (item.ext && item.ext.user && item.ext.user.id) {
          score = hashCodeGenerator[
            _DYN_GET_HASH_CODE_SCORE
            /* @min:%2egetHashCodeScore */
          ](item.ext.user.id);
        } else if (item[
          _DYN_TAGS
          /* @min:%2etags */
        ] && item[
          _DYN_TAGS
          /* @min:%2etags */
        ][keys.operationId]) {
          score = hashCodeGenerator.getHashCodeScore(item[
            _DYN_TAGS
            /* @min:%2etags */
          ][keys.operationId]);
        } else if (item.ext && item.ext.telemetryTrace && item.ext.telemetryTrace[
          _DYN_TRACE_ID
          /* @min:%2etraceID */
        ]) {
          score = hashCodeGenerator.getHashCodeScore(item.ext.telemetryTrace[
            _DYN_TRACE_ID
            /* @min:%2etraceID */
          ]);
        } else {
          score = Math.random() * 100;
        }
        return score;
      };
    }
    return SamplingScoreGenerator2;
  }()
);

// node_modules/@microsoft/applicationinsights-channel-js/dist-es5/TelemetryProcessors/Sample.js
var Sample = (
  /** @class */
  function() {
    function Sample2(sampleRate, logger) {
      this.INT_MAX_VALUE = 2147483647;
      var _logger = logger || safeGetLogger(null);
      if (sampleRate > 100 || sampleRate < 0) {
        _logger.throwInternal(2, 58, "Sampling rate is out of range (0..100). Sampling will be disabled, you may be sending too much data which may affect your AI service level.", { samplingRate: sampleRate }, true);
        sampleRate = 100;
      }
      this[
        _DYN_SAMPLE_RATE
        /* @min:%2esampleRate */
      ] = sampleRate;
      this.samplingScoreGenerator = new SamplingScoreGenerator();
    }
    Sample2.prototype.isSampledIn = function(envelope) {
      var samplingPercentage = this[
        _DYN_SAMPLE_RATE
        /* @min:%2esampleRate */
      ];
      var isSampledIn = false;
      if (samplingPercentage === null || samplingPercentage === void 0 || samplingPercentage >= 100) {
        return true;
      } else if (envelope.baseType === Metric[
        _DYN_DATA_TYPE2
        /* @min:%2edataType */
      ]) {
        return true;
      }
      isSampledIn = this.samplingScoreGenerator[
        _DYN_GET_SAMPLING_SCORE
        /* @min:%2egetSamplingScore */
      ](envelope) < samplingPercentage;
      return isSampledIn;
    };
    return Sample2;
  }()
);

// node_modules/@microsoft/applicationinsights-channel-js/dist-es5/Sender.js
var _a3;
var _b;
var UNDEFINED_VALUE = void 0;
var EMPTY_STR = "";
var FetchSyncRequestSizeLimitBytes = 65e3;
function _getResponseText(xhr) {
  try {
    return xhr.responseText;
  } catch (e) {
  }
  return null;
}
function isOverrideFn(httpXHROverride) {
  return httpXHROverride && httpXHROverride.sendPOST;
}
var defaultAppInsightsChannelConfig = objDeepFreeze((_a3 = {
  // Use the default value (handles empty string in the configuration)
  endpointUrl: cfgDfValidate(isTruthy, DEFAULT_BREEZE_ENDPOINT + DEFAULT_BREEZE_PATH)
}, _a3[
  _DYN_EMIT_LINE_DELIMITED_0
  /* @min:emitLineDelimitedJson */
] = cfgDfBoolean(), _a3[
  _DYN_MAX_BATCH_INTERVAL
  /* @min:maxBatchInterval */
] = 15e3, _a3[
  _DYN_MAX_BATCH_SIZE_IN_BY1
  /* @min:maxBatchSizeInBytes */
] = 102400, _a3.disableTelemetry = cfgDfBoolean(), _a3[
  _DYN_ENABLE_SESSION_STORA5
  /* @min:enableSessionStorageBuffer */
] = cfgDfBoolean(true), _a3.isRetryDisabled = cfgDfBoolean(), _a3[
  _DYN_IS_BEACON_API_DISABL3
  /* @min:isBeaconApiDisabled */
] = cfgDfBoolean(true), _a3[
  _DYN_DISABLE_SEND_BEACON_7
  /* @min:disableSendBeaconSplit */
] = cfgDfBoolean(true), _a3[
  _DYN_DISABLE_XHR
  /* @min:disableXhr */
] = cfgDfBoolean(), _a3[
  _DYN_ONUNLOAD_DISABLE_FET6
  /* @min:onunloadDisableFetch */
] = cfgDfBoolean(), _a3[
  _DYN_ONUNLOAD_DISABLE_BEA2
  /* @min:onunloadDisableBeacon */
] = cfgDfBoolean(), _a3[
  _DYN_INSTRUMENTATION_KEY
  /* @min:instrumentationKey */
] = UNDEFINED_VALUE, _a3.namePrefix = UNDEFINED_VALUE, _a3.samplingPercentage = cfgDfValidate(_chkSampling2, 100), _a3[
  _DYN_CUSTOM_HEADERS
  /* @min:customHeaders */
] = UNDEFINED_VALUE, _a3[
  _DYN_CONVERT_UNDEFINED
  /* @min:convertUndefined */
] = UNDEFINED_VALUE, _a3[
  _DYN_EVENTS_LIMIT_IN_MEM
  /* @min:eventsLimitInMem */
] = 1e4, _a3[
  _DYN_BUFFER_OVERRIDE
  /* @min:bufferOverride */
] = false, _a3.httpXHROverride = { isVal: isOverrideFn, v: UNDEFINED_VALUE }, _a3[
  _DYN_ALWAYS_USE_XHR_OVERR4
  /* @min:alwaysUseXhrOverride */
] = cfgDfBoolean(), _a3.transports = UNDEFINED_VALUE, _a3.retryCodes = UNDEFINED_VALUE, _a3.maxRetryCnt = { isVal: isNumber, v: 10 }, _a3));
function _chkSampling2(value) {
  return !isNaN(value) && value > 0 && value <= 100;
}
var EnvelopeTypeCreator = (_b = {}, _b[Event2.dataType] = EventEnvelopeCreator, _b[Trace.dataType] = TraceEnvelopeCreator, _b[PageView.dataType] = PageViewEnvelopeCreator, _b[PageViewPerformance.dataType] = PageViewPerformanceEnvelopeCreator, _b[Exception.dataType] = ExceptionEnvelopeCreator, _b[Metric.dataType] = MetricEnvelopeCreator, _b[RemoteDependencyData.dataType] = DependencyEnvelopeCreator, _b);
var Sender = (
  /** @class */
  function(_super) {
    __extendsFn(Sender2, _super);
    function Sender2() {
      var _this = _super.call(this) || this;
      _this.priority = 1001;
      _this.identifier = BreezeChannelIdentifier;
      var _consecutiveErrors;
      var _retryAt;
      var _lastSend;
      var _paused;
      var _timeoutHandle;
      var _serializer;
      var _stamp_specific_redirects;
      var _headers;
      var _syncFetchPayload = 0;
      var _syncUnloadSender;
      var _offlineListener;
      var _evtNamespace;
      var _endpointUrl;
      var _orgEndpointUrl;
      var _maxBatchSizeInBytes;
      var _beaconSupported;
      var _beaconOnUnloadSupported;
      var _beaconNormalSupported;
      var _customHeaders;
      var _disableTelemetry;
      var _instrumentationKey;
      var _convertUndefined;
      var _isRetryDisabled;
      var _maxBatchInterval;
      var _sessionStorageUsed;
      var _bufferOverrideUsed;
      var _namePrefix;
      var _enableSendPromise;
      var _alwaysUseCustomSend;
      var _disableXhr;
      var _fetchKeepAlive;
      var _xhrSend;
      var _fallbackSend;
      var _disableBeaconSplit;
      var _sendPostMgr;
      var _retryCodes;
      dynamicProto(Sender2, _this, function(_self, _base) {
        _initDefaults();
        _self.pause = function() {
          _clearScheduledTimer();
          _paused = true;
        };
        _self.resume = function() {
          if (_paused) {
            _paused = false;
            _retryAt = null;
            _checkMaxSize();
            _setupTimer();
          }
        };
        _self.flush = function(isAsync, callBack, sendReason) {
          if (isAsync === void 0) {
            isAsync = true;
          }
          if (!_paused) {
            _clearScheduledTimer();
            try {
              return _self[
                _DYN_TRIGGER_SEND
                /* @min:%2etriggerSend */
              ](
                isAsync,
                null,
                sendReason || 1
                /* SendRequestReason.ManualFlush */
              );
            } catch (e) {
              _throwInternal(_self[
                _DYN_DIAG_LOG2
                /* @min:%2ediagLog */
              ](), 1, 22, "flush failed, telemetry will not be collected: " + getExceptionName(e), { exception: dumpObj(e) });
            }
          }
        };
        _self.onunloadFlush = function() {
          if (!_paused) {
            if (_beaconSupported || _alwaysUseCustomSend) {
              try {
                return _self[
                  _DYN_TRIGGER_SEND
                  /* @min:%2etriggerSend */
                ](
                  true,
                  _doUnloadSend,
                  2
                  /* SendRequestReason.Unload */
                );
              } catch (e) {
                _throwInternal(_self[
                  _DYN_DIAG_LOG2
                  /* @min:%2ediagLog */
                ](), 1, 20, "failed to flush with beacon sender on page unload, telemetry will not be collected: " + getExceptionName(e), { exception: dumpObj(e) });
              }
            } else {
              _self.flush(false);
            }
          }
        };
        _self.addHeader = function(name, value) {
          _headers[name] = value;
        };
        _self[
          _DYN_INITIALIZE
          /* @min:%2einitialize */
        ] = function(config, core, extensions, pluginChain) {
          if (_self.isInitialized()) {
            _throwInternal(_self[
              _DYN_DIAG_LOG2
              /* @min:%2ediagLog */
            ](), 1, 28, "Sender is already initialized");
          }
          _base[
            _DYN_INITIALIZE
            /* @min:%2einitialize */
          ](config, core, extensions, pluginChain);
          var identifier = _self.identifier;
          _serializer = new Serializer(core.logger);
          _consecutiveErrors = 0;
          _retryAt = null;
          _lastSend = 0;
          _self[
            _DYN__SENDER
            /* @min:%2e_sender */
          ] = null;
          _stamp_specific_redirects = 0;
          var diagLog = _self[
            _DYN_DIAG_LOG2
            /* @min:%2ediagLog */
          ]();
          _evtNamespace = mergeEvtNamespace(createUniqueNamespace("Sender"), core.evtNamespace && core.evtNamespace());
          _offlineListener = createOfflineListener(_evtNamespace);
          _self._addHook(onConfigChange(config, function(details) {
            var config2 = details.cfg;
            if (config2.storagePrefix) {
              utlSetStoragePrefix(config2.storagePrefix);
            }
            var ctx = createProcessTelemetryContext(null, config2, core);
            var senderConfig = ctx.getExtCfg(identifier, defaultAppInsightsChannelConfig);
            objDefine(_self, "_senderConfig", {
              g: function() {
                return senderConfig;
              }
            });
            if (core.activeStatus() === ActiveStatus.PENDING) {
              _self.pause();
            } else if (core.activeStatus() === ActiveStatus.ACTIVE) {
              _self.resume();
            }
            if (_orgEndpointUrl !== senderConfig.endpointUrl) {
              if (_orgEndpointUrl) {
              }
              _endpointUrl = _orgEndpointUrl = senderConfig.endpointUrl;
            }
            if (_customHeaders && _customHeaders !== senderConfig[
              _DYN_CUSTOM_HEADERS
              /* @min:%2ecustomHeaders */
            ]) {
              arrForEach(_customHeaders, function(customHeader) {
                delete _headers[customHeader.header];
              });
            }
            _maxBatchSizeInBytes = senderConfig[
              _DYN_MAX_BATCH_SIZE_IN_BY1
              /* @min:%2emaxBatchSizeInBytes */
            ];
            _beaconSupported = (senderConfig[
              _DYN_ONUNLOAD_DISABLE_BEA2
              /* @min:%2eonunloadDisableBeacon */
            ] === false || senderConfig[
              _DYN_IS_BEACON_API_DISABL3
              /* @min:%2eisBeaconApiDisabled */
            ] === false) && isBeaconsSupported();
            _beaconOnUnloadSupported = senderConfig[
              _DYN_ONUNLOAD_DISABLE_BEA2
              /* @min:%2eonunloadDisableBeacon */
            ] === false && isBeaconsSupported();
            _beaconNormalSupported = senderConfig[
              _DYN_IS_BEACON_API_DISABL3
              /* @min:%2eisBeaconApiDisabled */
            ] === false && isBeaconsSupported();
            _alwaysUseCustomSend = senderConfig[
              _DYN_ALWAYS_USE_XHR_OVERR4
              /* @min:%2ealwaysUseXhrOverride */
            ];
            _disableXhr = !!senderConfig[
              _DYN_DISABLE_XHR
              /* @min:%2edisableXhr */
            ];
            _retryCodes = senderConfig.retryCodes;
            var bufferOverride = senderConfig[
              _DYN_BUFFER_OVERRIDE
              /* @min:%2ebufferOverride */
            ];
            var canUseSessionStorage = !!senderConfig[
              _DYN_ENABLE_SESSION_STORA5
              /* @min:%2eenableSessionStorageBuffer */
            ] && (!!bufferOverride || utlCanUseSessionStorage());
            var namePrefix = senderConfig.namePrefix;
            var shouldUpdate = canUseSessionStorage !== _sessionStorageUsed || canUseSessionStorage && _namePrefix !== namePrefix || canUseSessionStorage && _bufferOverrideUsed !== bufferOverride;
            if (_self[
              _DYN__BUFFER
              /* @min:%2e_buffer */
            ]) {
              if (shouldUpdate) {
                try {
                  _self._buffer = _self._buffer[
                    _DYN_CREATE_NEW
                    /* @min:%2ecreateNew */
                  ](diagLog, senderConfig, canUseSessionStorage);
                } catch (e) {
                  _throwInternal(_self[
                    _DYN_DIAG_LOG2
                    /* @min:%2ediagLog */
                  ](), 1, 12, "failed to transfer telemetry to different buffer storage, telemetry will be lost: " + getExceptionName(e), { exception: dumpObj(e) });
                }
              }
              _checkMaxSize();
            } else {
              _self[
                _DYN__BUFFER
                /* @min:%2e_buffer */
              ] = canUseSessionStorage ? new SessionStorageSendBuffer(diagLog, senderConfig) : new ArraySendBuffer(diagLog, senderConfig);
            }
            _namePrefix = namePrefix;
            _sessionStorageUsed = canUseSessionStorage;
            _bufferOverrideUsed = bufferOverride;
            _fetchKeepAlive = !senderConfig[
              _DYN_ONUNLOAD_DISABLE_FET6
              /* @min:%2eonunloadDisableFetch */
            ] && isFetchSupported(true);
            _disableBeaconSplit = !!senderConfig[
              _DYN_DISABLE_SEND_BEACON_7
              /* @min:%2edisableSendBeaconSplit */
            ];
            _self._sample = new Sample(senderConfig.samplingPercentage, diagLog);
            _instrumentationKey = senderConfig[
              _DYN_INSTRUMENTATION_KEY
              /* @min:%2einstrumentationKey */
            ];
            if (!_validateInstrumentationKey(_instrumentationKey, config2)) {
              _throwInternal(diagLog, 1, 100, "Invalid Instrumentation key " + _instrumentationKey);
            }
            _customHeaders = senderConfig[
              _DYN_CUSTOM_HEADERS
              /* @min:%2ecustomHeaders */
            ];
            if (isString(_endpointUrl) && !isInternalApplicationInsightsEndpoint(_endpointUrl) && _customHeaders && _customHeaders[
              _DYN_LENGTH2
              /* @min:%2elength */
            ] > 0) {
              arrForEach(_customHeaders, function(customHeader) {
                _this.addHeader(customHeader.header, customHeader.value);
              });
            } else {
              _customHeaders = null;
            }
            _enableSendPromise = senderConfig[
              _DYN_ENABLE_SEND_PROMISE
              /* @min:%2eenableSendPromise */
            ];
            var sendPostConfig = _getSendPostMgrConfig();
            if (!_sendPostMgr) {
              _sendPostMgr = new SenderPostManager();
              _sendPostMgr[
                _DYN_INITIALIZE
                /* @min:%2einitialize */
              ](sendPostConfig, diagLog);
            } else {
              _sendPostMgr.SetConfig(sendPostConfig);
            }
            var customInterface = senderConfig.httpXHROverride;
            var httpInterface = null;
            var syncInterface = null;
            var theTransports = prependTransports([
              3,
              1,
              2
              /* TransportType.Fetch */
            ], senderConfig.transports);
            httpInterface = _sendPostMgr && _sendPostMgr[
              _DYN_GET_SENDER_INST
              /* @min:%2egetSenderInst */
            ](theTransports, false);
            var xhrInterface = _sendPostMgr && _sendPostMgr.getFallbackInst();
            _xhrSend = function(payload, isAsync) {
              return _doSend(xhrInterface, payload, isAsync);
            };
            _fallbackSend = function(payload, isAsync) {
              return _doSend(xhrInterface, payload, isAsync, false);
            };
            httpInterface = _alwaysUseCustomSend ? customInterface : httpInterface || customInterface || xhrInterface;
            _self[
              _DYN__SENDER
              /* @min:%2e_sender */
            ] = function(payload, isAsync) {
              return _doSend(httpInterface, payload, isAsync);
            };
            if (_fetchKeepAlive) {
              _syncUnloadSender = _fetchKeepAliveSender;
            }
            var syncTransports = prependTransports([
              3,
              1
              /* TransportType.Xhr */
            ], senderConfig[
              _DYN_UNLOAD_TRANSPORTS
              /* @min:%2eunloadTransports */
            ]);
            if (!_fetchKeepAlive) {
              syncTransports = syncTransports.filter(function(transport) {
                return transport !== 2;
              });
            }
            syncInterface = _sendPostMgr && _sendPostMgr[
              _DYN_GET_SENDER_INST
              /* @min:%2egetSenderInst */
            ](syncTransports, true);
            syncInterface = _alwaysUseCustomSend ? customInterface : syncInterface || customInterface;
            if ((_alwaysUseCustomSend || senderConfig[
              _DYN_UNLOAD_TRANSPORTS
              /* @min:%2eunloadTransports */
            ] || !_syncUnloadSender) && syncInterface) {
              _syncUnloadSender = function(payload, isAsync) {
                return _doSend(syncInterface, payload, isAsync);
              };
            }
            if (!_syncUnloadSender) {
              _syncUnloadSender = _xhrSend;
            }
            _disableTelemetry = senderConfig.disableTelemetry;
            _convertUndefined = senderConfig[
              _DYN_CONVERT_UNDEFINED
              /* @min:%2econvertUndefined */
            ] || UNDEFINED_VALUE;
            _isRetryDisabled = senderConfig.isRetryDisabled;
            _maxBatchInterval = senderConfig[
              _DYN_MAX_BATCH_INTERVAL
              /* @min:%2emaxBatchInterval */
            ];
          }));
        };
        _self.processTelemetry = function(telemetryItem, itemCtx) {
          var _a7;
          itemCtx = _self._getTelCtx(itemCtx);
          var diagLogger = itemCtx[
            _DYN_DIAG_LOG2
            /* @min:%2ediagLog */
          ]();
          try {
            var isValidate = _validate(telemetryItem, diagLogger);
            if (!isValidate) {
              return;
            }
            var aiEnvelope = _getEnvelope(telemetryItem, diagLogger);
            if (!aiEnvelope) {
              return;
            }
            var payload = _serializer[
              _DYN_SERIALIZE
              /* @min:%2eserialize */
            ](aiEnvelope);
            var buffer = _self[
              _DYN__BUFFER
              /* @min:%2e_buffer */
            ];
            _checkMaxSize(payload);
            var payloadItem = (_a7 = {}, _a7[
              _DYN_ITEM
              /* @min:item */
            ] = payload, _a7.cnt = 0, _a7);
            buffer[
              _DYN_ENQUEUE
              /* @min:%2eenqueue */
            ](payloadItem);
            _setupTimer();
          } catch (e) {
            _throwInternal(diagLogger, 2, 12, "Failed adding telemetry to the sender's buffer, some telemetry will be lost: " + getExceptionName(e), { exception: dumpObj(e) });
          }
          _self.processNext(telemetryItem, itemCtx);
        };
        _self.isCompletelyIdle = function() {
          return !_paused && _syncFetchPayload === 0 && _self._buffer[
            _DYN_COUNT
            /* @min:%2ecount */
          ]() === 0;
        };
        _self._xhrReadyStateChange = function(xhr, payload, countOfItemsInPayload) {
          if (_isStringArr(payload)) {
            return;
          }
          return _xhrReadyStateChange(xhr, payload, countOfItemsInPayload);
        };
        _self[
          _DYN_TRIGGER_SEND
          /* @min:%2etriggerSend */
        ] = function(async, forcedSender, sendReason) {
          if (async === void 0) {
            async = true;
          }
          var result;
          if (!_paused) {
            try {
              var buffer = _self[
                _DYN__BUFFER
                /* @min:%2e_buffer */
              ];
              if (!_disableTelemetry) {
                if (buffer[
                  _DYN_COUNT
                  /* @min:%2ecount */
                ]() > 0) {
                  var payload = buffer.getItems();
                  _notifySendRequest(sendReason || 0, async);
                  if (forcedSender) {
                    result = forcedSender.call(_self, payload, async);
                  } else {
                    result = _self[
                      _DYN__SENDER
                      /* @min:%2e_sender */
                    ](payload, async);
                  }
                }
                _lastSend = +/* @__PURE__ */ new Date();
              } else {
                buffer[
                  _DYN_CLEAR
                  /* @min:%2eclear */
                ]();
              }
              _clearScheduledTimer();
            } catch (e) {
              var ieVer = getIEVersion();
              if (!ieVer || ieVer > 9) {
                _throwInternal(_self[
                  _DYN_DIAG_LOG2
                  /* @min:%2ediagLog */
                ](), 1, 40, "Telemetry transmission failed, some telemetry will be lost: " + getExceptionName(e), { exception: dumpObj(e) });
              }
            }
          }
          return result;
        };
        _self.getOfflineSupport = function() {
          var _a7;
          return _a7 = {
            getUrl: function() {
              return _endpointUrl;
            },
            createPayload: _createPayload
          }, _a7[
            _DYN_SERIALIZE
            /* @min:serialize */
          ] = _serialize, _a7.batch = _batch, _a7.shouldProcess = function(evt) {
            return !!_validate(evt);
          }, _a7;
        };
        _self._doTeardown = function(unloadCtx, unloadState) {
          _self.onunloadFlush();
          runTargetUnload(_offlineListener, false);
          _initDefaults();
        };
        _self[
          _DYN__ON_ERROR
          /* @min:%2e_onError */
        ] = function(payload, message, event) {
          if (_isStringArr(payload)) {
            return;
          }
          return _onError(payload, message, event);
        };
        _self[
          _DYN__ON_PARTIAL_SUCCESS
          /* @min:%2e_onPartialSuccess */
        ] = function(payload, results) {
          if (_isStringArr(payload)) {
            return;
          }
          return _onPartialSuccess(payload, results);
        };
        _self[
          _DYN__ON_SUCCESS
          /* @min:%2e_onSuccess */
        ] = function(payload, countOfItemsInPayload) {
          if (_isStringArr(payload)) {
            return;
          }
          return _onSuccess(payload, countOfItemsInPayload);
        };
        _self._xdrOnLoad = function(xdr, payload) {
          if (_isStringArr(payload)) {
            return;
          }
          return _xdrOnLoad(xdr, payload);
        };
        function _xdrOnLoad(xdr, payload) {
          var responseText = _getResponseText(xdr);
          if (xdr && (responseText + "" === "200" || responseText === "")) {
            _consecutiveErrors = 0;
            _self[
              _DYN__ON_SUCCESS
              /* @min:%2e_onSuccess */
            ](payload, 0);
          } else {
            var results = parseResponse(responseText);
            if (results && results[
              _DYN_ITEMS_RECEIVED
              /* @min:%2eitemsReceived */
            ] && results[
              _DYN_ITEMS_RECEIVED
              /* @min:%2eitemsReceived */
            ] > results[
              _DYN_ITEMS_ACCEPTED
              /* @min:%2eitemsAccepted */
            ] && !_isRetryDisabled) {
              _self[
                _DYN__ON_PARTIAL_SUCCESS
                /* @min:%2e_onPartialSuccess */
              ](payload, results);
            } else {
              _self[
                _DYN__ON_ERROR
                /* @min:%2e_onError */
              ](payload, formatErrorMessageXdr(xdr));
            }
          }
        }
        function _getSendPostMgrConfig() {
          var _a7;
          try {
            var onCompleteFuncs = {
              xdrOnComplete: function(xdr, oncomplete, payload) {
                var data = _getPayloadArr(payload);
                if (!data) {
                  return;
                }
                return _xdrOnLoad(xdr, data);
              },
              fetchOnComplete: function(response, onComplete, resValue, payload) {
                var data = _getPayloadArr(payload);
                if (!data) {
                  return;
                }
                return _checkResponsStatus(response.status, data, response.url, data[
                  _DYN_LENGTH2
                  /* @min:%2elength */
                ], response.statusText, resValue || "");
              },
              xhrOnComplete: function(request, oncomplete, payload) {
                var data = _getPayloadArr(payload);
                if (!data) {
                  return;
                }
                return _xhrReadyStateChange(request, data, data[
                  _DYN_LENGTH2
                  /* @min:%2elength */
                ]);
              },
              beaconOnRetry: function(data, onComplete, canSend) {
                return _onBeaconRetry(data, onComplete, canSend);
              }
            };
            var config = (_a7 = {}, _a7[
              _DYN_ENABLE_SEND_PROMISE
              /* @min:enableSendPromise */
            ] = _enableSendPromise, _a7.isOneDs = false, _a7.disableCredentials = false, _a7[
              _DYN_DISABLE_XHR
              /* @min:disableXhr */
            ] = _disableXhr, _a7.disableBeacon = !_beaconNormalSupported, _a7.disableBeaconSync = !_beaconOnUnloadSupported, _a7.senderOnCompleteCallBack = onCompleteFuncs, _a7);
            return config;
          } catch (e) {
          }
          return null;
        }
        function _xhrReadyStateChange(xhr, payload, countOfItemsInPayload) {
          if (xhr.readyState === 4) {
            _checkResponsStatus(xhr.status, payload, xhr.responseURL, countOfItemsInPayload, formatErrorMessageXhr(xhr), _getResponseText(xhr) || xhr.response);
          }
        }
        function _onError(payload, message, event) {
          _throwInternal(_self[
            _DYN_DIAG_LOG2
            /* @min:%2ediagLog */
          ](), 2, 26, "Failed to send telemetry.", { message });
          _self._buffer && _self._buffer[
            _DYN_CLEAR_SENT
            /* @min:%2eclearSent */
          ](payload);
        }
        function _onPartialSuccess(payload, results) {
          var failed = [];
          var retry = [];
          var errors = results.errors.reverse();
          for (var _i = 0, errors_1 = errors; _i < errors_1.length; _i++) {
            var error = errors_1[_i];
            var extracted = payload.splice(error.index, 1)[0];
            if (_isRetriable(error.statusCode)) {
              retry[
                _DYN_PUSH
                /* @min:%2epush */
              ](extracted);
            } else {
              failed[
                _DYN_PUSH
                /* @min:%2epush */
              ](extracted);
            }
          }
          if (payload[
            _DYN_LENGTH2
            /* @min:%2elength */
          ] > 0) {
            _self[
              _DYN__ON_SUCCESS
              /* @min:%2e_onSuccess */
            ](payload, results[
              _DYN_ITEMS_ACCEPTED
              /* @min:%2eitemsAccepted */
            ]);
          }
          if (failed[
            _DYN_LENGTH2
            /* @min:%2elength */
          ] > 0) {
            _self[
              _DYN__ON_ERROR
              /* @min:%2e_onError */
            ](failed, formatErrorMessageXhr(null, ["partial success", results[
              _DYN_ITEMS_ACCEPTED
              /* @min:%2eitemsAccepted */
            ], "of", results.itemsReceived].join(" ")));
          }
          if (retry[
            _DYN_LENGTH2
            /* @min:%2elength */
          ] > 0) {
            _resendPayload(retry);
            _throwInternal(_self[
              _DYN_DIAG_LOG2
              /* @min:%2ediagLog */
            ](), 2, 40, "Partial success. Delivered: " + payload[
              _DYN_LENGTH2
              /* @min:%2elength */
            ] + ", Failed: " + failed[
              _DYN_LENGTH2
              /* @min:%2elength */
            ] + ". Will retry to send " + retry[
              _DYN_LENGTH2
              /* @min:%2elength */
            ] + " our of " + results[
              _DYN_ITEMS_RECEIVED
              /* @min:%2eitemsReceived */
            ] + " items");
          }
        }
        function _onSuccess(payload, countOfItemsInPayload) {
          _self._buffer && _self._buffer[
            _DYN_CLEAR_SENT
            /* @min:%2eclearSent */
          ](payload);
        }
        function _getPayloadArr(payload) {
          try {
            if (payload) {
              var internalPayload = payload;
              var arr = internalPayload[
                _DYN_ORI_PAYLOAD
                /* @min:%2eoriPayload */
              ];
              if (arr && arr[
                _DYN_LENGTH2
                /* @min:%2elength */
              ]) {
                return arr;
              }
              return null;
            }
          } catch (e) {
          }
          return null;
        }
        function _validate(telemetryItem, diagLogger) {
          if (_disableTelemetry) {
            return false;
          }
          if (!telemetryItem) {
            diagLogger && _throwInternal(diagLogger, 1, 7, "Cannot send empty telemetry");
            return false;
          }
          if (telemetryItem.baseData && !telemetryItem[
            _DYN_BASE_TYPE
            /* @min:%2ebaseType */
          ]) {
            diagLogger && _throwInternal(diagLogger, 1, 70, "Cannot send telemetry without baseData and baseType");
            return false;
          }
          if (!telemetryItem[
            _DYN_BASE_TYPE
            /* @min:%2ebaseType */
          ]) {
            telemetryItem[
              _DYN_BASE_TYPE
              /* @min:%2ebaseType */
            ] = "EventData";
          }
          if (!_self[
            _DYN__SENDER
            /* @min:%2e_sender */
          ]) {
            diagLogger && _throwInternal(diagLogger, 1, 28, "Sender was not initialized");
            return false;
          }
          if (!_isSampledIn(telemetryItem)) {
            diagLogger && _throwInternal(diagLogger, 2, 33, "Telemetry item was sampled out and not sent", { SampleRate: _self._sample[
              _DYN_SAMPLE_RATE
              /* @min:%2esampleRate */
            ] });
            return false;
          } else {
            telemetryItem[SampleRate] = _self._sample[
              _DYN_SAMPLE_RATE
              /* @min:%2esampleRate */
            ];
          }
          return true;
        }
        function _getEnvelope(telemetryItem, diagLogger) {
          var defaultEnvelopeIkey = telemetryItem.iKey || _instrumentationKey;
          var aiEnvelope = Sender2.constructEnvelope(telemetryItem, defaultEnvelopeIkey, diagLogger, _convertUndefined);
          if (!aiEnvelope) {
            _throwInternal(diagLogger, 1, 47, "Unable to create an AppInsights envelope");
            return;
          }
          var doNotSendItem = false;
          if (telemetryItem[
            _DYN_TAGS
            /* @min:%2etags */
          ] && telemetryItem[
            _DYN_TAGS
            /* @min:%2etags */
          ][ProcessLegacy]) {
            arrForEach(telemetryItem[
              _DYN_TAGS
              /* @min:%2etags */
            ][ProcessLegacy], function(callBack) {
              try {
                if (callBack && callBack(aiEnvelope) === false) {
                  doNotSendItem = true;
                  _warnToConsole(diagLogger, "Telemetry processor check returns false");
                }
              } catch (e) {
                _throwInternal(diagLogger, 1, 64, "One of telemetry initializers failed, telemetry item will not be sent: " + getExceptionName(e), { exception: dumpObj(e) }, true);
              }
            });
            delete telemetryItem[
              _DYN_TAGS
              /* @min:%2etags */
            ][ProcessLegacy];
          }
          if (doNotSendItem) {
            return;
          }
          return aiEnvelope;
        }
        function _serialize(item) {
          var rlt = EMPTY_STR;
          var diagLogger = _self[
            _DYN_DIAG_LOG2
            /* @min:%2ediagLog */
          ]();
          try {
            var valid = _validate(item, diagLogger);
            var envelope = null;
            if (valid) {
              envelope = _getEnvelope(item, diagLogger);
            }
            if (envelope) {
              rlt = _serializer[
                _DYN_SERIALIZE
                /* @min:%2eserialize */
              ](envelope);
            }
          } catch (e) {
          }
          return rlt;
        }
        function _batch(arr) {
          var rlt = EMPTY_STR;
          if (arr && arr[
            _DYN_LENGTH2
            /* @min:%2elength */
          ]) {
            rlt = "[" + arr.join(",") + "]";
          }
          return rlt;
        }
        function _createPayload(data) {
          var _a7;
          var headers = _getHeaders();
          return _a7 = {
            urlString: _endpointUrl
          }, _a7[
            _DYN_DATA
            /* @min:data */
          ] = data, _a7.headers = headers, _a7;
        }
        function _isSampledIn(envelope) {
          return _self._sample.isSampledIn(envelope);
        }
        function _getOnComplete(payload, status, headers, response) {
          if (status === 200 && payload) {
            _self._onSuccess(payload, payload[
              _DYN_LENGTH2
              /* @min:%2elength */
            ]);
          } else {
            response && _self[
              _DYN__ON_ERROR
              /* @min:%2e_onError */
            ](payload, response);
          }
        }
        function _doSend(sendInterface, payload, isAsync, markAsSent) {
          if (markAsSent === void 0) {
            markAsSent = true;
          }
          var onComplete = function(status, headers, response) {
            return _getOnComplete(payload, status, headers, response);
          };
          var payloadData = _getPayload(payload);
          var sendPostFunc = sendInterface && sendInterface.sendPOST;
          if (sendPostFunc && payloadData) {
            if (markAsSent) {
              _self._buffer[
                _DYN_MARK_AS_SENT
                /* @min:%2emarkAsSent */
              ](payload);
            }
            return sendPostFunc(payloadData, onComplete, !isAsync);
          }
          return null;
        }
        function _getPayload(payload) {
          var _a7;
          if (isArray(payload) && payload[
            _DYN_LENGTH2
            /* @min:%2elength */
          ] > 0) {
            var batch = _self[
              _DYN__BUFFER
              /* @min:%2e_buffer */
            ].batchPayloads(payload);
            var headers = _getHeaders();
            var payloadData = (_a7 = {}, _a7[
              _DYN_DATA
              /* @min:data */
            ] = batch, _a7.urlString = _endpointUrl, _a7.headers = headers, _a7.disableXhrSync = _disableXhr, _a7.disableFetchKeepAlive = !_fetchKeepAlive, _a7[
              _DYN_ORI_PAYLOAD
              /* @min:oriPayload */
            ] = payload, _a7);
            return payloadData;
          }
          return null;
        }
        function _getHeaders() {
          try {
            var headers = _headers || {};
            if (isInternalApplicationInsightsEndpoint(_endpointUrl)) {
              headers[RequestHeaders[
                6
                /* eRequestHeaders.sdkContextHeader */
              ]] = RequestHeaders[
                7
                /* eRequestHeaders.sdkContextHeaderAppIdRequest */
              ];
            }
            return headers;
          } catch (e) {
          }
          return null;
        }
        function _checkMaxSize(incomingPayload) {
          var incomingSize = incomingPayload ? incomingPayload[
            _DYN_LENGTH2
            /* @min:%2elength */
          ] : 0;
          if (_self[
            _DYN__BUFFER
            /* @min:%2e_buffer */
          ].size() + incomingSize > _maxBatchSizeInBytes) {
            if (!_offlineListener || _offlineListener.isOnline()) {
              _self[
                _DYN_TRIGGER_SEND
                /* @min:%2etriggerSend */
              ](
                true,
                null,
                10
                /* SendRequestReason.MaxBatchSize */
              );
            }
            return true;
          }
          return false;
        }
        function _checkResponsStatus(status, payload, responseUrl, countOfItemsInPayload, errorMessage, res) {
          var response = null;
          if (!_self._appId) {
            response = parseResponse(res);
            if (response && response.appId) {
              _self._appId = response.appId;
            }
          }
          if ((status < 200 || status >= 300) && status !== 0) {
            if (status === 301 || status === 307 || status === 308) {
              if (!_checkAndUpdateEndPointUrl(responseUrl)) {
                _self[
                  _DYN__ON_ERROR
                  /* @min:%2e_onError */
                ](payload, errorMessage);
                return;
              }
            }
            if (_offlineListener && !_offlineListener.isOnline()) {
              if (!_isRetryDisabled) {
                var offlineBackOffMultiplier = 10;
                _resendPayload(payload, offlineBackOffMultiplier);
                _throwInternal(_self[
                  _DYN_DIAG_LOG2
                  /* @min:%2ediagLog */
                ](), 2, 40, ". Offline - Response Code: ".concat(status, ". Offline status: ").concat(!_offlineListener.isOnline(), ". Will retry to send ").concat(payload.length, " items."));
              }
              return;
            }
            if (!_isRetryDisabled && _isRetriable(status)) {
              _resendPayload(payload);
              _throwInternal(_self[
                _DYN_DIAG_LOG2
                /* @min:%2ediagLog */
              ](), 2, 40, ". Response code " + status + ". Will retry to send " + payload[
                _DYN_LENGTH2
                /* @min:%2elength */
              ] + " items.");
            } else {
              _self[
                _DYN__ON_ERROR
                /* @min:%2e_onError */
              ](payload, errorMessage);
            }
          } else {
            _checkAndUpdateEndPointUrl(responseUrl);
            if (status === 206) {
              if (!response) {
                response = parseResponse(res);
              }
              if (response && !_isRetryDisabled) {
                _self[
                  _DYN__ON_PARTIAL_SUCCESS
                  /* @min:%2e_onPartialSuccess */
                ](payload, response);
              } else {
                _self[
                  _DYN__ON_ERROR
                  /* @min:%2e_onError */
                ](payload, errorMessage);
              }
            } else {
              _consecutiveErrors = 0;
              _self[
                _DYN__ON_SUCCESS
                /* @min:%2e_onSuccess */
              ](payload, countOfItemsInPayload);
            }
          }
        }
        function _checkAndUpdateEndPointUrl(responseUrl) {
          if (_stamp_specific_redirects >= 10) {
            return false;
          }
          if (!isNullOrUndefined(responseUrl) && responseUrl !== "") {
            if (responseUrl !== _endpointUrl) {
              _endpointUrl = responseUrl;
              ++_stamp_specific_redirects;
              return true;
            }
          }
          return false;
        }
        function _doUnloadSend(payload, isAsync) {
          if (_syncUnloadSender) {
            _syncUnloadSender(payload, false);
          } else {
            var beaconInst = _sendPostMgr && _sendPostMgr[
              _DYN_GET_SENDER_INST
              /* @min:%2egetSenderInst */
            ]([
              3
              /* TransportType.Beacon */
            ], true);
            return _doSend(beaconInst, payload, isAsync);
          }
        }
        function _onBeaconRetry(payload, onComplete, canSend) {
          var internalPayload = payload;
          var data = internalPayload && internalPayload[
            _DYN_ORI_PAYLOAD
            /* @min:%2eoriPayload */
          ];
          if (!_disableBeaconSplit) {
            var droppedPayload = [];
            for (var lp = 0; lp < data[
              _DYN_LENGTH2
              /* @min:%2elength */
            ]; lp++) {
              var thePayload = data[lp];
              var arr = [thePayload];
              var item = _getPayload(arr);
              if (!canSend(item, onComplete)) {
                droppedPayload[
                  _DYN_PUSH
                  /* @min:%2epush */
                ](thePayload);
              } else {
                _self._onSuccess(arr, arr[
                  _DYN_LENGTH2
                  /* @min:%2elength */
                ]);
              }
            }
            if (droppedPayload[
              _DYN_LENGTH2
              /* @min:%2elength */
            ] > 0) {
              _fallbackSend && _fallbackSend(droppedPayload, true);
              _throwInternal(_self[
                _DYN_DIAG_LOG2
                /* @min:%2ediagLog */
              ](), 2, 40, ". Failed to send telemetry with Beacon API, retried with normal sender.");
            }
          } else {
            _fallbackSend && _fallbackSend(data, true);
            _throwInternal(_self[
              _DYN_DIAG_LOG2
              /* @min:%2ediagLog */
            ](), 2, 40, ". Failed to send telemetry with Beacon API, retried with normal sender.");
          }
        }
        function _isStringArr(arr) {
          try {
            if (arr && arr[
              _DYN_LENGTH2
              /* @min:%2elength */
            ]) {
              return isString(arr[0]);
            }
          } catch (e) {
          }
          return null;
        }
        function _fetchKeepAliveSender(payload, isAsync) {
          var transport = null;
          if (isArray(payload)) {
            var payloadSize = payload[
              _DYN_LENGTH2
              /* @min:%2elength */
            ];
            for (var lp = 0; lp < payload[
              _DYN_LENGTH2
              /* @min:%2elength */
            ]; lp++) {
              payloadSize += payload[lp].item[
                _DYN_LENGTH2
                /* @min:%2elength */
              ];
            }
            var syncFetchPayload = _sendPostMgr.getSyncFetchPayload();
            if (syncFetchPayload + payloadSize <= FetchSyncRequestSizeLimitBytes) {
              transport = 2;
            } else if (isBeaconsSupported()) {
              transport = 3;
            } else {
              transport = 1;
              _throwInternal(_self[
                _DYN_DIAG_LOG2
                /* @min:%2ediagLog */
              ](), 2, 40, ". Failed to send telemetry with Beacon API, retried with xhrSender.");
            }
            var inst = _sendPostMgr && _sendPostMgr[
              _DYN_GET_SENDER_INST
              /* @min:%2egetSenderInst */
            ]([transport], true);
            return _doSend(inst, payload, isAsync);
          }
          return null;
        }
        function _resendPayload(payload, linearFactor) {
          if (linearFactor === void 0) {
            linearFactor = 1;
          }
          if (!payload || payload[
            _DYN_LENGTH2
            /* @min:%2elength */
          ] === 0) {
            return;
          }
          var buffer = _self[
            _DYN__BUFFER
            /* @min:%2e_buffer */
          ];
          buffer[
            _DYN_CLEAR_SENT
            /* @min:%2eclearSent */
          ](payload);
          _consecutiveErrors++;
          for (var _i = 0, payload_1 = payload; _i < payload_1.length; _i++) {
            var item = payload_1[_i];
            item.cnt = item.cnt || 0;
            item.cnt++;
            buffer[
              _DYN_ENQUEUE
              /* @min:%2eenqueue */
            ](item);
          }
          _setRetryTime(linearFactor);
          _setupTimer();
        }
        function _setRetryTime(linearFactor) {
          var SlotDelayInSeconds = 10;
          var delayInSeconds;
          if (_consecutiveErrors <= 1) {
            delayInSeconds = SlotDelayInSeconds;
          } else {
            var backOffSlot = (Math.pow(2, _consecutiveErrors) - 1) / 2;
            var backOffDelay = Math.floor(Math.random() * backOffSlot * SlotDelayInSeconds) + 1;
            backOffDelay = linearFactor * backOffDelay;
            delayInSeconds = Math.max(Math.min(backOffDelay, 3600), SlotDelayInSeconds);
          }
          var retryAfterTimeSpan = utcNow() + delayInSeconds * 1e3;
          _retryAt = retryAfterTimeSpan;
        }
        function _setupTimer() {
          if (!_timeoutHandle && !_paused) {
            var retryInterval = _retryAt ? Math.max(0, _retryAt - utcNow()) : 0;
            var timerValue = Math.max(_maxBatchInterval, retryInterval);
            _timeoutHandle = scheduleTimeout(function() {
              _timeoutHandle = null;
              _self[
                _DYN_TRIGGER_SEND
                /* @min:%2etriggerSend */
              ](
                true,
                null,
                1
                /* SendRequestReason.NormalSchedule */
              );
            }, timerValue);
          }
        }
        function _clearScheduledTimer() {
          _timeoutHandle && _timeoutHandle.cancel();
          _timeoutHandle = null;
          _retryAt = null;
        }
        function _isRetriable(statusCode) {
          if (!isNullOrUndefined(_retryCodes)) {
            return _retryCodes[
              _DYN_LENGTH2
              /* @min:%2elength */
            ] && _retryCodes.indexOf(statusCode) > -1;
          }
          return statusCode === 401 || statusCode === 408 || statusCode === 429 || statusCode === 500 || statusCode === 502 || statusCode === 503 || statusCode === 504;
        }
        function _getNotifyMgr() {
          var func = "getNotifyMgr";
          if (_self.core[func]) {
            return _self.core[func]();
          }
          return _self.core["_notificationManager"];
        }
        function _notifySendRequest(sendRequest, isAsync) {
          var manager = _getNotifyMgr();
          if (manager && manager[
            _DYN_EVENTS_SEND_REQUEST
            /* @min:%2eeventsSendRequest */
          ]) {
            try {
              manager[
                _DYN_EVENTS_SEND_REQUEST
                /* @min:%2eeventsSendRequest */
              ](sendRequest, isAsync);
            } catch (e) {
              _throwInternal(_self[
                _DYN_DIAG_LOG2
                /* @min:%2ediagLog */
              ](), 1, 74, "send request notification failed: " + getExceptionName(e), { exception: dumpObj(e) });
            }
          }
        }
        function _validateInstrumentationKey(instrumentationKey, config) {
          var disableValidation = config.disableInstrumentationKeyValidation;
          var disableIKeyValidationFlag = isNullOrUndefined(disableValidation) ? false : disableValidation;
          if (disableIKeyValidationFlag) {
            return true;
          }
          var UUID_Regex = "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$";
          var regexp = new RegExp(UUID_Regex);
          return regexp.test(instrumentationKey);
        }
        function _initDefaults() {
          _self[
            _DYN__SENDER
            /* @min:%2e_sender */
          ] = null;
          _self[
            _DYN__BUFFER
            /* @min:%2e_buffer */
          ] = null;
          _self._appId = null;
          _self._sample = null;
          _headers = {};
          _offlineListener = null;
          _consecutiveErrors = 0;
          _retryAt = null;
          _lastSend = null;
          _paused = false;
          _timeoutHandle = null;
          _serializer = null;
          _stamp_specific_redirects = 0;
          _syncFetchPayload = 0;
          _syncUnloadSender = null;
          _evtNamespace = null;
          _endpointUrl = null;
          _orgEndpointUrl = null;
          _maxBatchSizeInBytes = 0;
          _beaconSupported = false;
          _customHeaders = null;
          _disableTelemetry = false;
          _instrumentationKey = null;
          _convertUndefined = UNDEFINED_VALUE;
          _isRetryDisabled = false;
          _sessionStorageUsed = null;
          _namePrefix = UNDEFINED_VALUE;
          _disableXhr = false;
          _fetchKeepAlive = false;
          _disableBeaconSplit = false;
          _xhrSend = null;
          _fallbackSend = null;
          _sendPostMgr = null;
          objDefine(_self, "_senderConfig", {
            g: function() {
              return objExtend2({}, defaultAppInsightsChannelConfig);
            }
          });
        }
      });
      return _this;
    }
    Sender2.constructEnvelope = function(orig, iKey, logger, convertUndefined) {
      var envelope;
      if (iKey !== orig.iKey && !isNullOrUndefined(iKey)) {
        envelope = __assignFn(__assignFn({}, orig), { iKey });
      } else {
        envelope = orig;
      }
      var creator = EnvelopeTypeCreator[envelope.baseType] || EventEnvelopeCreator;
      return creator(logger, envelope, convertUndefined);
    };
    return Sender2;
  }(BaseTelemetryPlugin)
);

// node_modules/@microsoft/applicationinsights-dependencies-js/dist-es5/InternalConstants.js
var STR_DURATION2 = "duration";
var STR_PROPERTIES = "properties";

// node_modules/@microsoft/applicationinsights-dependencies-js/dist-es5/__DynamicConstants.js
var _DYN_REQUEST_URL = "requestUrl";
var _DYN_INST = "inst";
var _DYN_LENGTH3 = "length";
var _DYN_TRACE_ID2 = "traceID";
var _DYN_SPAN_ID = "spanID";
var _DYN_TRACE_FLAGS = "traceFlags";
var _DYN_CONTEXT = "context";
var _DYN_ABORTED = "aborted";
var _DYN_TRACE_ID0 = "traceId";
var _DYN_SPAN_ID1 = "spanId";
var _DYN__ADD_HOOK2 = "_addHook";
var _DYN_CORE2 = "core";
var _DYN_INCLUDE_CORRELATION_2 = "includeCorrelationHeaders";
var _DYN_GET_ABSOLUTE_URL = "getAbsoluteUrl";
var _DYN_HEADERS = "headers";
var _DYN_REQUEST_HEADERS = "requestHeaders";
var _DYN_SET_REQUEST_HEADER = "setRequestHeader";
var _DYN_TRACK_DEPENDENCY_DAT3 = "trackDependencyDataInternal";
var _DYN_START_TIME2 = "startTime";
var _DYN_TO_LOWER_CASE = "toLowerCase";
var _DYN_ENABLE_REQUEST_HEADE4 = "enableRequestHeaderTracking";
var _DYN_ENABLE_AJAX_ERROR_ST5 = "enableAjaxErrorStatusText";
var _DYN_ENABLE_AJAX_PERF_TRA6 = "enableAjaxPerfTracking";
var _DYN_MAX_AJAX_CALLS_PER_V7 = "maxAjaxCallsPerView";
var _DYN_EXCLUDE_REQUEST_FROM8 = "excludeRequestFromAutoTrackingPatterns";
var _DYN_ADD_REQUEST_CONTEXT = "addRequestContext";
var _DYN_DISABLE_AJAX_TRACKIN9 = "disableAjaxTracking";
var _DYN_AJAX_PERF_LOOKUP_DEL10 = "ajaxPerfLookupDelay";
var _DYN_DISABLE_FETCH_TRACKI11 = "disableFetchTracking";
var _DYN_ENABLE_RESPONSE_HEAD12 = "enableResponseHeaderTracking";
var _DYN_STATUS = "status";
var _DYN_STATUS_TEXT = "statusText";
var _DYN_HEADER_MAP = "headerMap";
var _DYN_OPEN_DONE = "openDone";
var _DYN_SEND_DONE = "sendDone";
var _DYN_REQUEST_SENT_TIME = "requestSentTime";
var _DYN_ABORT_DONE = "abortDone";
var _DYN_GET_TRACE_ID = "getTraceId";
var _DYN_GET_TRACE_FLAGS = "getTraceFlags";
var _DYN_METHOD = "method";
var _DYN_ERROR_STATUS_TEXT = "errorStatusText";
var _DYN_STATE_CHANGE_ATTACHE13 = "stateChangeAttached";
var _DYN_RESPONSE_TEXT = "responseText";
var _DYN_RESPONSE_FINISHED_TI14 = "responseFinishedTime";
var _DYN__CREATE_TRACK_ITEM = "CreateTrackItem";
var _DYN_RESPONSE = "response";
var _DYN_GET_ALL_RESPONSE_HEA15 = "getAllResponseHeaders";
var _DYN_GET_PART_APROPS = "getPartAProps";
var _DYN_PERF_MARK = "perfMark";
var _DYN_NAME2 = "name";
var _DYN_PERF_TIMING = "perfTiming";
var _DYN_EXCEPTION2 = "exception";
var _DYN_AJAX_DIAGNOSTICS_MES16 = "ajaxDiagnosticsMessage";
var _DYN_CORRELATION_CONTEXT = "correlationContext";
var _DYN_AJAX_TOTAL_DURATION = "ajaxTotalDuration";
var _DYN_EVENT_TRACE_CTX = "eventTraceCtx";

// node_modules/@microsoft/applicationinsights-dependencies-js/dist-es5/ajaxRecord.js
function _calcPerfDuration(resourceEntry, start, end) {
  var result = 0;
  var from = resourceEntry[start];
  var to = resourceEntry[end];
  if (from && to) {
    result = dateTimeUtilsDuration(from, to);
  }
  return result;
}
function _setPerfDuration(props, name, resourceEntry, start, end) {
  var result = 0;
  var value = _calcPerfDuration(resourceEntry, start, end);
  if (value) {
    result = _setPerfValue(props, name, msToTimeSpan(value));
  }
  return result;
}
function _setPerfValue(props, name, value) {
  var strPerf = "ajaxPerf";
  var result = 0;
  if (props && name && value) {
    var perfData = props[strPerf] = props[strPerf] || {};
    perfData[name] = value;
    result = 1;
  }
  return result;
}
function _populatePerfData(ajaxData, dependency) {
  var resourceEntry = ajaxData[
    _DYN_PERF_TIMING
    /* @min:%2eperfTiming */
  ];
  var props = dependency[
    STR_PROPERTIES
    /* @min:%2eproperties */
  ] || {};
  var propsSet = 0;
  var strName = "name";
  var strStart = "Start";
  var strEnd = "End";
  var strDomainLookup = "domainLookup";
  var strConnect = "connect";
  var strRedirect = "redirect";
  var strRequest = "request";
  var strResponse = "response";
  var strStartTime = "startTime";
  var strDomainLookupStart = strDomainLookup + strStart;
  var strDomainLookupEnd = strDomainLookup + strEnd;
  var strConnectStart = strConnect + strStart;
  var strConnectEnd = strConnect + strEnd;
  var strRequestStart = strRequest + strStart;
  var strRequestEnd = strRequest + strEnd;
  var strResponseStart = strResponse + strStart;
  var strResponseEnd = strResponse + strEnd;
  var strRedirectStart = strRedirect + strStart;
  var strRedirectEnd = strRedirect = strEnd;
  var strTransferSize = "transferSize";
  var strEncodedBodySize = "encodedBodySize";
  var strDecodedBodySize = "decodedBodySize";
  var strServerTiming = "serverTiming";
  if (resourceEntry) {
    propsSet |= _setPerfDuration(props, strRedirect, resourceEntry, strRedirectStart, strRedirectEnd);
    propsSet |= _setPerfDuration(props, strDomainLookup, resourceEntry, strDomainLookupStart, strDomainLookupEnd);
    propsSet |= _setPerfDuration(props, strConnect, resourceEntry, strConnectStart, strConnectEnd);
    propsSet |= _setPerfDuration(props, strRequest, resourceEntry, strRequestStart, strRequestEnd);
    propsSet |= _setPerfDuration(props, strResponse, resourceEntry, strResponseStart, strResponseEnd);
    propsSet |= _setPerfDuration(props, "networkConnect", resourceEntry, strStartTime, strConnectEnd);
    propsSet |= _setPerfDuration(props, "sentRequest", resourceEntry, strRequestStart, strResponseEnd);
    var duration = resourceEntry[
      STR_DURATION2
      /* @min:%2eduration */
    ];
    if (!duration) {
      duration = _calcPerfDuration(resourceEntry, strStartTime, strResponseEnd) || 0;
    }
    propsSet |= _setPerfValue(props, STR_DURATION2, duration);
    propsSet |= _setPerfValue(props, "perfTotal", duration);
    var serverTiming = resourceEntry[strServerTiming];
    if (serverTiming) {
      var server_1 = {};
      arrForEach(serverTiming, function(value, idx) {
        var name = normalizeJsName(value[strName] || "" + idx);
        var newValue = server_1[name] || {};
        objForEachKey(value, function(key, val) {
          if (key !== strName && isString(val) || isNumber(val)) {
            if (newValue[key]) {
              val = newValue[key] + ";" + val;
            }
            if (val || !isString(val)) {
              newValue[key] = val;
            }
          }
        });
        server_1[name] = newValue;
      });
      propsSet |= _setPerfValue(props, strServerTiming, server_1);
    }
    propsSet |= _setPerfValue(props, strTransferSize, resourceEntry[strTransferSize]);
    propsSet |= _setPerfValue(props, strEncodedBodySize, resourceEntry[strEncodedBodySize]);
    propsSet |= _setPerfValue(props, strDecodedBodySize, resourceEntry[strDecodedBodySize]);
  } else {
    if (ajaxData[
      _DYN_PERF_MARK
      /* @min:%2eperfMark */
    ]) {
      propsSet |= _setPerfValue(props, "missing", ajaxData.perfAttempts);
    }
  }
  if (propsSet) {
    dependency[
      STR_PROPERTIES
      /* @min:%2eproperties */
    ] = props;
  }
}
var XHRMonitoringState = (
  /** @class */
  /* @__PURE__ */ function() {
    function XHRMonitoringState2() {
      var self = this;
      self[
        _DYN_OPEN_DONE
        /* @min:%2eopenDone */
      ] = false;
      self.setRequestHeaderDone = false;
      self[
        _DYN_SEND_DONE
        /* @min:%2esendDone */
      ] = false;
      self[
        _DYN_ABORT_DONE
        /* @min:%2eabortDone */
      ] = false;
      self[
        _DYN_STATE_CHANGE_ATTACHE13
        /* @min:%2estateChangeAttached */
      ] = false;
    }
    return XHRMonitoringState2;
  }()
);
var ajaxRecord = (
  /** @class */
  function() {
    function ajaxRecord2(traceId, spanId, logger, traceCtx) {
      var _a7;
      var self = this;
      var _logger = logger;
      var strResponseText = "responseText";
      self[
        _DYN_PERF_MARK
        /* @min:%2eperfMark */
      ] = null;
      self.completed = false;
      self.requestHeadersSize = null;
      self[
        _DYN_REQUEST_HEADERS
        /* @min:%2erequestHeaders */
      ] = null;
      self.responseReceivingDuration = null;
      self.callbackDuration = null;
      self[
        _DYN_AJAX_TOTAL_DURATION
        /* @min:%2eajaxTotalDuration */
      ] = null;
      self[
        _DYN_ABORTED
        /* @min:%2eaborted */
      ] = 0;
      self.pageUrl = null;
      self[
        _DYN_REQUEST_URL
        /* @min:%2erequestUrl */
      ] = null;
      self.requestSize = 0;
      self[
        _DYN_METHOD
        /* @min:%2emethod */
      ] = null;
      self[
        _DYN_STATUS
        /* @min:%2estatus */
      ] = null;
      self[
        _DYN_REQUEST_SENT_TIME
        /* @min:%2erequestSentTime */
      ] = null;
      self.responseStartedTime = null;
      self[
        _DYN_RESPONSE_FINISHED_TI14
        /* @min:%2eresponseFinishedTime */
      ] = null;
      self.callbackFinishedTime = null;
      self.endTime = null;
      self.xhrMonitoringState = new XHRMonitoringState();
      self.clientFailure = 0;
      self[
        _DYN_TRACE_ID2
        /* @min:%2etraceID */
      ] = traceId;
      self[
        _DYN_SPAN_ID
        /* @min:%2espanID */
      ] = spanId;
      self[
        _DYN_TRACE_FLAGS
        /* @min:%2etraceFlags */
      ] = traceCtx === null || traceCtx === void 0 ? void 0 : traceCtx.getTraceFlags();
      if (traceCtx) {
        self[
          _DYN_EVENT_TRACE_CTX
          /* @min:%2eeventTraceCtx */
        ] = (_a7 = {}, _a7[
          _DYN_TRACE_ID0
          /* @min:traceId */
        ] = traceCtx[
          _DYN_GET_TRACE_ID
          /* @min:%2egetTraceId */
        ](), _a7[
          _DYN_SPAN_ID1
          /* @min:spanId */
        ] = traceCtx.getSpanId(), _a7[
          _DYN_TRACE_FLAGS
          /* @min:traceFlags */
        ] = traceCtx[
          _DYN_GET_TRACE_FLAGS
          /* @min:%2egetTraceFlags */
        ](), _a7);
      } else {
        self[
          _DYN_EVENT_TRACE_CTX
          /* @min:%2eeventTraceCtx */
        ] = null;
      }
      dynamicProto(ajaxRecord2, self, function(self2) {
        self2.getAbsoluteUrl = function() {
          return self2[
            _DYN_REQUEST_URL
            /* @min:%2erequestUrl */
          ] ? urlGetAbsoluteUrl(self2[
            _DYN_REQUEST_URL
            /* @min:%2erequestUrl */
          ]) : null;
        };
        self2.getPathName = function() {
          return self2[
            _DYN_REQUEST_URL
            /* @min:%2erequestUrl */
          ] ? dataSanitizeUrl(_logger, urlGetCompleteUrl(self2[
            _DYN_METHOD
            /* @min:%2emethod */
          ], self2[
            _DYN_REQUEST_URL
            /* @min:%2erequestUrl */
          ])) : null;
        };
        self2[
          _DYN__CREATE_TRACK_ITEM
          /* @min:%2eCreateTrackItem */
        ] = function(ajaxType, enableRequestHeaderTracking, getResponse) {
          var _a8;
          self2.ajaxTotalDuration = Math.round(dateTimeUtilsDuration(self2.requestSentTime, self2.responseFinishedTime) * 1e3) / 1e3;
          if (self2[
            _DYN_AJAX_TOTAL_DURATION
            /* @min:%2eajaxTotalDuration */
          ] < 0) {
            return null;
          }
          var dependency = (_a8 = {
            id: "|" + self2[
              _DYN_TRACE_ID2
              /* @min:%2etraceID */
            ] + "." + self2[
              _DYN_SPAN_ID
              /* @min:%2espanID */
            ],
            target: self2[
              _DYN_GET_ABSOLUTE_URL
              /* @min:%2egetAbsoluteUrl */
            ]()
          }, _a8[
            _DYN_NAME2
            /* @min:name */
          ] = self2.getPathName(), _a8.type = ajaxType, _a8[
            _DYN_START_TIME2
            /* @min:startTime */
          ] = null, _a8.duration = self2[
            _DYN_AJAX_TOTAL_DURATION
            /* @min:%2eajaxTotalDuration */
          ], _a8.success = +self2[
            _DYN_STATUS
            /* @min:%2estatus */
          ] >= 200 && +self2[
            _DYN_STATUS
            /* @min:%2estatus */
          ] < 400, _a8.responseCode = +self2[
            _DYN_STATUS
            /* @min:%2estatus */
          ], _a8[STR_PROPERTIES] = { HttpMethod: self2[
            _DYN_METHOD
            /* @min:%2emethod */
          ] }, _a8);
          var props = dependency[STR_PROPERTIES];
          if (self2[
            _DYN_ABORTED
            /* @min:%2eaborted */
          ]) {
            props[
              _DYN_ABORTED
              /* @min:%2eaborted */
            ] = true;
          }
          if (self2[
            _DYN_REQUEST_SENT_TIME
            /* @min:%2erequestSentTime */
          ]) {
            dependency[
              _DYN_START_TIME2
              /* @min:%2estartTime */
            ] = /* @__PURE__ */ new Date();
            dependency[
              _DYN_START_TIME2
              /* @min:%2estartTime */
            ].setTime(self2[
              _DYN_REQUEST_SENT_TIME
              /* @min:%2erequestSentTime */
            ]);
          }
          _populatePerfData(self2, dependency);
          if (enableRequestHeaderTracking) {
            if (objKeys(self2.requestHeaders)[
              _DYN_LENGTH3
              /* @min:%2elength */
            ] > 0) {
              props[
                _DYN_REQUEST_HEADERS
                /* @min:%2erequestHeaders */
              ] = self2[
                _DYN_REQUEST_HEADERS
                /* @min:%2erequestHeaders */
              ];
            }
          }
          if (getResponse) {
            var response = getResponse();
            if (response) {
              var correlationContext = response[
                _DYN_CORRELATION_CONTEXT
                /* @min:%2ecorrelationContext */
              ];
              if (correlationContext) {
                dependency.correlationContext = /* dependency.target + " | " + */
                correlationContext;
              }
              if (response[
                _DYN_HEADER_MAP
                /* @min:%2eheaderMap */
              ]) {
                if (objKeys(response.headerMap)[
                  _DYN_LENGTH3
                  /* @min:%2elength */
                ] > 0) {
                  props.responseHeaders = response[
                    _DYN_HEADER_MAP
                    /* @min:%2eheaderMap */
                  ];
                }
              }
              if (self2[
                _DYN_ERROR_STATUS_TEXT
                /* @min:%2eerrorStatusText */
              ]) {
                if (self2[
                  _DYN_STATUS
                  /* @min:%2estatus */
                ] >= 400) {
                  var responseType = response.type;
                  if (responseType === "" || responseType === "text") {
                    props.responseText = response.responseText ? response[
                      _DYN_STATUS_TEXT
                      /* @min:%2estatusText */
                    ] + " - " + response[strResponseText] : response[
                      _DYN_STATUS_TEXT
                      /* @min:%2estatusText */
                    ];
                  }
                  if (responseType === "json") {
                    props.responseText = response.response ? response[
                      _DYN_STATUS_TEXT
                      /* @min:%2estatusText */
                    ] + " - " + JSON.stringify(response[
                      _DYN_RESPONSE
                      /* @min:%2eresponse */
                    ]) : response[
                      _DYN_STATUS_TEXT
                      /* @min:%2estatusText */
                    ];
                  }
                } else if (self2[
                  _DYN_STATUS
                  /* @min:%2estatus */
                ] === 0) {
                  props.responseText = response[
                    _DYN_STATUS_TEXT
                    /* @min:%2estatusText */
                  ] || "";
                }
              }
            }
          }
          return dependency;
        };
        self2[
          _DYN_GET_PART_APROPS
          /* @min:%2egetPartAProps */
        ] = function() {
          var _a8;
          var partA = null;
          var traceCtx2 = self2[
            _DYN_EVENT_TRACE_CTX
            /* @min:%2eeventTraceCtx */
          ];
          if (traceCtx2 && (traceCtx2[
            _DYN_TRACE_ID0
            /* @min:%2etraceId */
          ] || traceCtx2[
            _DYN_SPAN_ID1
            /* @min:%2espanId */
          ])) {
            partA = {};
            var traceExt = partA[Extensions.TraceExt] = (_a8 = {}, _a8[
              _DYN_TRACE_ID2
              /* @min:traceID */
            ] = traceCtx2[
              _DYN_TRACE_ID0
              /* @min:%2etraceId */
            ], _a8.parentID = traceCtx2[
              _DYN_SPAN_ID1
              /* @min:%2espanId */
            ], _a8);
            if (!isNullOrUndefined(traceCtx2[
              _DYN_TRACE_FLAGS
              /* @min:%2etraceFlags */
            ])) {
              traceExt[
                _DYN_TRACE_FLAGS
                /* @min:%2etraceFlags */
              ] = traceCtx2[
                _DYN_TRACE_FLAGS
                /* @min:%2etraceFlags */
              ];
            }
          }
          return partA;
        };
      });
    }
    ajaxRecord2.__ieDyn = 1;
    return ajaxRecord2;
  }()
);

// node_modules/@microsoft/applicationinsights-dependencies-js/dist-es5/ajax.js
var _a4;
var strDiagLog = "diagLog";
var AJAX_DATA_CONTAINER = "_ajaxData";
var STR_FETCH = "fetch";
var ERROR_HEADER = "Failed to monitor XMLHttpRequest";
var ERROR_PREFIX = ", monitoring data for this ajax call ";
var ERROR_POSTFIX = ERROR_PREFIX + "may be incorrect.";
var ERROR_NOT_SENT = ERROR_PREFIX + "won't be sent.";
var CORRELATION_HEADER_ERROR = "Failed to get Request-Context correlation header as it may be not included in the response or not accessible.";
var CUSTOM_REQUEST_CONTEXT_ERROR = "Failed to add custom defined request context as configured call back may missing a null check.";
var FAILED_TO_CALCULATE_DURATION_ERROR = "Failed to calculate the duration of the ";
var _markCount = 0;
function _supportsFetch() {
  var _global = getGlobal();
  if (!_global || isNullOrUndefined(_global.Request) || isNullOrUndefined(_global.Request[strShimPrototype]) || isNullOrUndefined(_global[STR_FETCH])) {
    return null;
  }
  return _global[STR_FETCH];
}
function _supportsAjaxMonitoring(ajaxMonitorInstance, ajaxDataId) {
  var _a7, _b3;
  var result = false;
  if (isXhrSupported()) {
    var proto = XMLHttpRequest[strShimPrototype];
    result = !isNullOrUndefined(proto) && !isNullOrUndefined(proto.open) && // eslint-disable-line security/detect-non-literal-fs-filename -- false positive
    !isNullOrUndefined(proto.send) && !isNullOrUndefined(proto.abort);
  }
  var ieVer = getIEVersion();
  if (ieVer && ieVer < 9) {
    result = false;
  }
  if (result) {
    try {
      var xhr = new XMLHttpRequest();
      var xhrData = {
        xh: [],
        i: (_a7 = {}, _a7[ajaxDataId] = {}, _a7)
      };
      xhr[AJAX_DATA_CONTAINER] = xhrData;
      var theOpen = XMLHttpRequest[strShimPrototype].open;
      XMLHttpRequest[strShimPrototype].open = theOpen;
    } catch (e) {
      result = false;
      _throwInternalCritical(ajaxMonitorInstance, 15, "Failed to enable XMLHttpRequest monitoring, extension is not supported", (_b3 = {}, _b3[
        _DYN_EXCEPTION2
        /* @min:exception */
      ] = dumpObj(e), _b3));
    }
  }
  return result;
}
var _getAjaxData = function(xhr, ajaxDataId) {
  if (xhr && ajaxDataId && xhr[AJAX_DATA_CONTAINER]) {
    return (xhr[AJAX_DATA_CONTAINER].i || {})[ajaxDataId];
  }
  return null;
};
var _addSharedXhrHeaders = function(xhr, name, value) {
  if (xhr) {
    var headers = (xhr[AJAX_DATA_CONTAINER] || {}).xh;
    if (headers) {
      headers.push({
        n: name,
        v: value
      });
    }
  }
};
var _isHeaderSet = function(xhr, name) {
  var isPresent = false;
  if (xhr) {
    var headers = (xhr[AJAX_DATA_CONTAINER] || {}).xh;
    if (headers) {
      arrForEach(headers, function(header) {
        if (header.n === name) {
          isPresent = true;
          return -1;
        }
      });
    }
  }
  return isPresent;
};
function _getFailedAjaxDiagnosticsMessage(xhr, ajaxDataId) {
  var result = "";
  try {
    var ajaxData = _getAjaxData(xhr, ajaxDataId);
    if (ajaxData && ajaxData[
      _DYN_REQUEST_URL
      /* @min:%2erequestUrl */
    ]) {
      result += "(url: '" + ajaxData[
        _DYN_REQUEST_URL
        /* @min:%2erequestUrl */
      ] + "')";
    }
  } catch (e) {
  }
  return result;
}
function _throwInternalCritical(ajaxMonitorInstance, msgId, message, properties, isUserAct) {
  _throwInternal(ajaxMonitorInstance[strDiagLog](), 1, msgId, message, properties, isUserAct);
}
function _throwInternalWarning(ajaxMonitorInstance, msgId, message, properties, isUserAct) {
  _throwInternal(ajaxMonitorInstance[strDiagLog](), 2, msgId, message, properties, isUserAct);
}
function _createErrorCallbackFunc(ajaxMonitorInstance, internalMessage, message) {
  return function(callDetails) {
    var _a7;
    _throwInternalCritical(ajaxMonitorInstance, internalMessage, message, (_a7 = {
      ajaxDiagnosticsMessage: _getFailedAjaxDiagnosticsMessage(callDetails[
        _DYN_INST
        /* @min:%2einst */
      ], ajaxMonitorInstance._ajaxDataId)
    }, _a7[
      _DYN_EXCEPTION2
      /* @min:exception */
    ] = dumpObj(callDetails.err), _a7));
  };
}
function _indexOf(value, match) {
  if (value && match) {
    return strIndexOf(value, match);
  }
  return -1;
}
function _addHandler(container, id, theFunc) {
  var theHandler = {
    id,
    fn: theFunc
  };
  container.push(theHandler);
  return {
    remove: function() {
      arrForEach(container, function(initializer, idx) {
        if (initializer.id === theHandler.id) {
          container.splice(idx, 1);
          return -1;
        }
      });
    }
  };
}
function _processDependencyContainer(core, container, details, message) {
  var result = true;
  arrForEach(container, function(theFunc, idx) {
    try {
      if (theFunc.fn.call(null, details) === false) {
        result = false;
      }
    } catch (e) {
      _throwInternal(core && core.logger, 1, 64, "Dependency " + message + " [#" + idx + "] failed: " + getExceptionName(e), { exception: dumpObj(e) }, true);
    }
  });
  return result;
}
function _processDependencyListeners(listeners, core, ajaxData, xhr, input, init) {
  var _a7;
  var initializersCount = listeners[
    _DYN_LENGTH3
    /* @min:%2elength */
  ];
  if (initializersCount > 0) {
    var details = (_a7 = {}, _a7[
      _DYN_CORE2
      /* @min:core */
    ] = core, _a7.xhr = xhr, _a7.input = input, _a7.init = init, _a7.traceId = ajaxData[
      _DYN_TRACE_ID2
      /* @min:%2etraceID */
    ], _a7.spanId = ajaxData[
      _DYN_SPAN_ID
      /* @min:%2espanID */
    ], _a7.traceFlags = ajaxData[
      _DYN_TRACE_FLAGS
      /* @min:%2etraceFlags */
    ], _a7.context = ajaxData[
      _DYN_CONTEXT
      /* @min:%2econtext */
    ] || {}, _a7.aborted = !!ajaxData[
      _DYN_ABORTED
      /* @min:%2eaborted */
    ], _a7);
    _processDependencyContainer(core, listeners, details, "listener");
    ajaxData[
      _DYN_TRACE_ID2
      /* @min:%2etraceID */
    ] = details[
      _DYN_TRACE_ID0
      /* @min:%2etraceId */
    ];
    ajaxData[
      _DYN_SPAN_ID
      /* @min:%2espanID */
    ] = details[
      _DYN_SPAN_ID1
      /* @min:%2espanId */
    ];
    ajaxData[
      _DYN_TRACE_FLAGS
      /* @min:%2etraceFlags */
    ] = details[
      _DYN_TRACE_FLAGS
      /* @min:%2etraceFlags */
    ];
    ajaxData[
      _DYN_CONTEXT
      /* @min:%2econtext */
    ] = details[
      _DYN_CONTEXT
      /* @min:%2econtext */
    ];
  }
}
var BLOB_CORE = "*.blob.core.";
var DfltAjaxCorrelationHeaderExDomains = objFreeze([
  BLOB_CORE + "windows.net",
  BLOB_CORE + "chinacloudapi.cn",
  BLOB_CORE + "cloudapi.de",
  BLOB_CORE + "usgovcloudapi.net"
]);
var _internalExcludeEndpoints = [
  /https:\/\/[^\/]*(\.pipe\.aria|aria\.pipe|events\.data|collector\.azure)\.[^\/]+\/(OneCollector\/1|Collector\/3)\.0/i
];
var _defaultConfig2 = objFreeze((_a4 = {}, _a4[
  _DYN_MAX_AJAX_CALLS_PER_V7
  /* @min:maxAjaxCallsPerView */
] = 500, _a4[
  _DYN_DISABLE_AJAX_TRACKIN9
  /* @min:disableAjaxTracking */
] = false, _a4[
  _DYN_DISABLE_FETCH_TRACKI11
  /* @min:disableFetchTracking */
] = false, _a4[
  _DYN_EXCLUDE_REQUEST_FROM8
  /* @min:excludeRequestFromAutoTrackingPatterns */
] = void 0, _a4.disableCorrelationHeaders = false, _a4.distributedTracingMode = 1, _a4.correlationHeaderExcludedDomains = DfltAjaxCorrelationHeaderExDomains, _a4.correlationHeaderDomains = void 0, _a4.correlationHeaderExcludePatterns = void 0, _a4.appId = void 0, _a4.enableCorsCorrelation = false, _a4[
  _DYN_ENABLE_REQUEST_HEADE4
  /* @min:enableRequestHeaderTracking */
] = false, _a4[
  _DYN_ENABLE_RESPONSE_HEAD12
  /* @min:enableResponseHeaderTracking */
] = false, _a4[
  _DYN_ENABLE_AJAX_ERROR_ST5
  /* @min:enableAjaxErrorStatusText */
] = false, _a4[
  _DYN_ENABLE_AJAX_PERF_TRA6
  /* @min:enableAjaxPerfTracking */
] = false, _a4.maxAjaxPerfLookupAttempts = 3, _a4[
  _DYN_AJAX_PERF_LOOKUP_DEL10
  /* @min:ajaxPerfLookupDelay */
] = 25, _a4.ignoreHeaders = [
  "Authorization",
  "X-API-Key",
  "WWW-Authenticate"
], _a4[
  _DYN_ADD_REQUEST_CONTEXT
  /* @min:addRequestContext */
] = void 0, _a4.addIntEndpoints = true, _a4));
var AjaxMonitor = (
  /** @class */
  function(_super) {
    __extendsFn(AjaxMonitor2, _super);
    function AjaxMonitor2() {
      var _this = _super.call(this) || this;
      _this.identifier = AjaxMonitor2.identifier;
      _this.priority = 120;
      var _fetchInitialized;
      var _xhrInitialized;
      var _currentWindowHost;
      var _extensionConfig;
      var _enableRequestHeaderTracking;
      var _enableAjaxErrorStatusText;
      var _trackAjaxAttempts;
      var _context;
      var _isUsingW3CHeaders;
      var _isUsingAIHeaders;
      var _markPrefix;
      var _enableAjaxPerfTracking;
      var _maxAjaxCallsPerView;
      var _enableResponseHeaderTracking;
      var _disabledUrls;
      var _disableAjaxTracking;
      var _disableFetchTracking;
      var _excludeRequestFromAutoTrackingPatterns;
      var _addRequestContext;
      var _evtNamespace;
      var _ajaxDataId;
      var _dependencyHandlerId;
      var _dependencyListeners;
      var _dependencyInitializers;
      var _ignoreHeaders;
      var _maxAjaxPerfLookupAttempts;
      var _ajaxPerfLookupDelay;
      var _distributedTracingMode;
      var _appId;
      var _polyfillInitialized;
      dynamicProto(AjaxMonitor2, _this, function(_self, _base) {
        var _addHook = _base[
          _DYN__ADD_HOOK2
          /* @min:%2e_addHook */
        ];
        _initDefaults();
        _self.initialize = function(config, core, extensions, pluginChain) {
          if (!_self.isInitialized()) {
            _base.initialize(config, core, extensions, pluginChain);
            _evtNamespace = mergeEvtNamespace(createUniqueNamespace("ajax"), core && core.evtNamespace && core.evtNamespace());
            _populateDefaults(config);
            _instrumentXhr();
            _instrumentFetch();
            _populateContext();
          }
        };
        _self._doTeardown = function() {
          _initDefaults();
        };
        _self.trackDependencyData = function(dependency, properties) {
          _reportDependencyInternal(_dependencyInitializers, _self[
            _DYN_CORE2
            /* @min:%2ecore */
          ], null, dependency, properties);
        };
        _self[
          _DYN_INCLUDE_CORRELATION_2
          /* @min:%2eincludeCorrelationHeaders */
        ] = function(ajaxData, input, init, xhr) {
          var currentWindowHost = _self["_currentWindowHost"] || _currentWindowHost;
          _processDependencyListeners(_dependencyListeners, _self[
            _DYN_CORE2
            /* @min:%2ecore */
          ], ajaxData, xhr, input, init);
          if (input || input === "") {
            if (correlationIdCanIncludeCorrelationHeader(_extensionConfig, ajaxData[
              _DYN_GET_ABSOLUTE_URL
              /* @min:%2egetAbsoluteUrl */
            ](), currentWindowHost)) {
              if (!init) {
                init = {};
              }
              var headers = new Headers(init[
                _DYN_HEADERS
                /* @min:%2eheaders */
              ] || (input instanceof Request ? input[
                _DYN_HEADERS
                /* @min:%2eheaders */
              ] || {} : {}));
              if (_isUsingAIHeaders) {
                var id = "|" + ajaxData[
                  _DYN_TRACE_ID2
                  /* @min:%2etraceID */
                ] + "." + ajaxData[
                  _DYN_SPAN_ID
                  /* @min:%2espanID */
                ];
                headers.set(RequestHeaders[
                  3
                  /* eRequestHeaders.requestIdHeader */
                ], id);
                if (_enableRequestHeaderTracking) {
                  ajaxData[
                    _DYN_REQUEST_HEADERS
                    /* @min:%2erequestHeaders */
                  ][RequestHeaders[
                    3
                    /* eRequestHeaders.requestIdHeader */
                  ]] = id;
                }
              }
              var appId = _appId || _context && _context.appId();
              if (appId) {
                headers.set(RequestHeaders[
                  0
                  /* eRequestHeaders.requestContextHeader */
                ], RequestHeaders[
                  2
                  /* eRequestHeaders.requestContextAppIdFormat */
                ] + appId);
                if (_enableRequestHeaderTracking) {
                  ajaxData[
                    _DYN_REQUEST_HEADERS
                    /* @min:%2erequestHeaders */
                  ][RequestHeaders[
                    0
                    /* eRequestHeaders.requestContextHeader */
                  ]] = RequestHeaders[
                    2
                    /* eRequestHeaders.requestContextAppIdFormat */
                  ] + appId;
                }
              }
              if (_isUsingW3CHeaders) {
                var traceFlags = ajaxData[
                  _DYN_TRACE_FLAGS
                  /* @min:%2etraceFlags */
                ];
                if (isNullOrUndefined(traceFlags)) {
                  traceFlags = 1;
                }
                var traceParent = formatTraceParent(createTraceParent(ajaxData[
                  _DYN_TRACE_ID2
                  /* @min:%2etraceID */
                ], ajaxData[
                  _DYN_SPAN_ID
                  /* @min:%2espanID */
                ], traceFlags));
                headers.set(RequestHeaders[
                  4
                  /* eRequestHeaders.traceParentHeader */
                ], traceParent);
                if (_enableRequestHeaderTracking) {
                  ajaxData[
                    _DYN_REQUEST_HEADERS
                    /* @min:%2erequestHeaders */
                  ][RequestHeaders[
                    4
                    /* eRequestHeaders.traceParentHeader */
                  ]] = traceParent;
                }
              }
              init[
                _DYN_HEADERS
                /* @min:%2eheaders */
              ] = headers;
            }
            return init;
          } else if (xhr) {
            if (correlationIdCanIncludeCorrelationHeader(_extensionConfig, ajaxData[
              _DYN_GET_ABSOLUTE_URL
              /* @min:%2egetAbsoluteUrl */
            ](), currentWindowHost)) {
              if (_isUsingAIHeaders) {
                if (!_isHeaderSet(xhr, RequestHeaders[
                  3
                  /* eRequestHeaders.requestIdHeader */
                ])) {
                  var id = "|" + ajaxData[
                    _DYN_TRACE_ID2
                    /* @min:%2etraceID */
                  ] + "." + ajaxData[
                    _DYN_SPAN_ID
                    /* @min:%2espanID */
                  ];
                  xhr[
                    _DYN_SET_REQUEST_HEADER
                    /* @min:%2esetRequestHeader */
                  ](RequestHeaders[
                    3
                    /* eRequestHeaders.requestIdHeader */
                  ], id);
                  if (_enableRequestHeaderTracking) {
                    ajaxData[
                      _DYN_REQUEST_HEADERS
                      /* @min:%2erequestHeaders */
                    ][RequestHeaders[
                      3
                      /* eRequestHeaders.requestIdHeader */
                    ]] = id;
                  }
                } else {
                  _throwInternalWarning(_self, 71, "Unable to set [" + RequestHeaders[
                    3
                    /* eRequestHeaders.requestIdHeader */
                  ] + "] as it has already been set by another instance");
                }
              }
              var appId = _appId || _context && _context.appId();
              if (appId) {
                if (!_isHeaderSet(xhr, RequestHeaders[
                  0
                  /* eRequestHeaders.requestContextHeader */
                ])) {
                  xhr[
                    _DYN_SET_REQUEST_HEADER
                    /* @min:%2esetRequestHeader */
                  ](RequestHeaders[
                    0
                    /* eRequestHeaders.requestContextHeader */
                  ], RequestHeaders[
                    2
                    /* eRequestHeaders.requestContextAppIdFormat */
                  ] + appId);
                  if (_enableRequestHeaderTracking) {
                    ajaxData[
                      _DYN_REQUEST_HEADERS
                      /* @min:%2erequestHeaders */
                    ][RequestHeaders[
                      0
                      /* eRequestHeaders.requestContextHeader */
                    ]] = RequestHeaders[
                      2
                      /* eRequestHeaders.requestContextAppIdFormat */
                    ] + appId;
                  }
                } else {
                  _throwInternalWarning(_self, 71, "Unable to set [" + RequestHeaders[
                    0
                    /* eRequestHeaders.requestContextHeader */
                  ] + "] as it has already been set by another instance");
                }
              }
              if (_isUsingW3CHeaders) {
                var traceFlags = ajaxData[
                  _DYN_TRACE_FLAGS
                  /* @min:%2etraceFlags */
                ];
                if (isNullOrUndefined(traceFlags)) {
                  traceFlags = 1;
                }
                if (!_isHeaderSet(xhr, RequestHeaders[
                  4
                  /* eRequestHeaders.traceParentHeader */
                ])) {
                  var traceParent = formatTraceParent(createTraceParent(ajaxData[
                    _DYN_TRACE_ID2
                    /* @min:%2etraceID */
                  ], ajaxData[
                    _DYN_SPAN_ID
                    /* @min:%2espanID */
                  ], traceFlags));
                  xhr[
                    _DYN_SET_REQUEST_HEADER
                    /* @min:%2esetRequestHeader */
                  ](RequestHeaders[
                    4
                    /* eRequestHeaders.traceParentHeader */
                  ], traceParent);
                  if (_enableRequestHeaderTracking) {
                    ajaxData[
                      _DYN_REQUEST_HEADERS
                      /* @min:%2erequestHeaders */
                    ][RequestHeaders[
                      4
                      /* eRequestHeaders.traceParentHeader */
                    ]] = traceParent;
                  }
                } else {
                  _throwInternalWarning(_self, 71, "Unable to set [" + RequestHeaders[
                    4
                    /* eRequestHeaders.traceParentHeader */
                  ] + "] as it has already been set by another instance");
                }
              }
            }
            return xhr;
          }
          return void 0;
        };
        _self[
          _DYN_TRACK_DEPENDENCY_DAT3
          /* @min:%2etrackDependencyDataInternal */
        ] = function(dependency, properties, systemProperties) {
          if (_maxAjaxCallsPerView === -1 || _trackAjaxAttempts < _maxAjaxCallsPerView) {
            if ((_distributedTracingMode === 2 || _distributedTracingMode === 1) && typeof dependency.id === "string" && dependency.id[dependency.id[
              _DYN_LENGTH3
              /* @min:%2elength */
            ] - 1] !== ".") {
              dependency.id += ".";
            }
            if (isNullOrUndefined(dependency[
              _DYN_START_TIME2
              /* @min:%2estartTime */
            ])) {
              dependency[
                _DYN_START_TIME2
                /* @min:%2estartTime */
              ] = /* @__PURE__ */ new Date();
            }
            var item = createTelemetryItem(dependency, RemoteDependencyData.dataType, RemoteDependencyData.envelopeType, _self[strDiagLog](), properties, systemProperties);
            _self[
              _DYN_CORE2
              /* @min:%2ecore */
            ].track(item);
          } else if (_trackAjaxAttempts === _maxAjaxCallsPerView) {
            _throwInternalCritical(_self, 55, "Maximum ajax per page view limit reached, ajax monitoring is paused until the next trackPageView(). In order to increase the limit set the maxAjaxCallsPerView configuration parameter.", true);
          }
          ++_trackAjaxAttempts;
        };
        _self.addDependencyListener = function(dependencyListener) {
          return _addHandler(_dependencyListeners, _dependencyHandlerId++, dependencyListener);
        };
        _self.addDependencyInitializer = function(dependencyInitializer) {
          return _addHandler(_dependencyInitializers, _dependencyHandlerId++, dependencyInitializer);
        };
        function _initDefaults() {
          var location = getLocation();
          _fetchInitialized = false;
          _xhrInitialized = false;
          _polyfillInitialized = false;
          _currentWindowHost = location && location.host && location.host[
            _DYN_TO_LOWER_CASE
            /* @min:%2etoLowerCase */
          ]();
          _extensionConfig = null;
          _enableRequestHeaderTracking = false;
          _enableAjaxErrorStatusText = false;
          _trackAjaxAttempts = 0;
          _context = null;
          _isUsingW3CHeaders = false;
          _isUsingAIHeaders = false;
          _markPrefix = null;
          _enableAjaxPerfTracking = false;
          _maxAjaxCallsPerView = 0;
          _enableResponseHeaderTracking = false;
          _disabledUrls = {};
          _disableAjaxTracking = false;
          _disableFetchTracking = false;
          _excludeRequestFromAutoTrackingPatterns = null;
          _addRequestContext = null;
          _evtNamespace = null;
          _dependencyHandlerId = 0;
          _dependencyListeners = [];
          _dependencyInitializers = [];
          _ajaxDataId = createUniqueNamespace("ajaxData");
          _self._ajaxDataId = _ajaxDataId;
          _ignoreHeaders = null;
          _maxAjaxPerfLookupAttempts = 1;
          _ajaxPerfLookupDelay = 1;
          _distributedTracingMode = 1;
          _appId = null;
        }
        function _populateDefaults(config) {
          _self[
            _DYN__ADD_HOOK2
            /* @min:%2e_addHook */
          ](onConfigChange(config, function(details) {
            var config2 = details.cfg;
            var ctx = createProcessTelemetryContext(null, config2, _self[
              _DYN_CORE2
              /* @min:%2ecore */
            ]);
            _extensionConfig = ctx.getExtCfg(AjaxMonitor2.identifier, _defaultConfig2);
            _distributedTracingMode = _extensionConfig.distributedTracingMode;
            _enableRequestHeaderTracking = _extensionConfig[
              _DYN_ENABLE_REQUEST_HEADE4
              /* @min:%2eenableRequestHeaderTracking */
            ];
            _enableAjaxErrorStatusText = _extensionConfig[
              _DYN_ENABLE_AJAX_ERROR_ST5
              /* @min:%2eenableAjaxErrorStatusText */
            ];
            _enableAjaxPerfTracking = _extensionConfig[
              _DYN_ENABLE_AJAX_PERF_TRA6
              /* @min:%2eenableAjaxPerfTracking */
            ];
            _maxAjaxCallsPerView = _extensionConfig[
              _DYN_MAX_AJAX_CALLS_PER_V7
              /* @min:%2emaxAjaxCallsPerView */
            ];
            _excludeRequestFromAutoTrackingPatterns = [].concat(_extensionConfig[
              _DYN_EXCLUDE_REQUEST_FROM8
              /* @min:%2eexcludeRequestFromAutoTrackingPatterns */
            ] || [], _extensionConfig.addIntEndpoints !== false ? _internalExcludeEndpoints : []);
            _addRequestContext = _extensionConfig[
              _DYN_ADD_REQUEST_CONTEXT
              /* @min:%2eaddRequestContext */
            ];
            _isUsingAIHeaders = _distributedTracingMode === 0 || _distributedTracingMode === 1;
            _isUsingW3CHeaders = _distributedTracingMode === 1 || _distributedTracingMode === 2;
            if (_enableAjaxPerfTracking) {
              _markPrefix = _ajaxDataId;
            }
            _disableAjaxTracking = !!_extensionConfig[
              _DYN_DISABLE_AJAX_TRACKIN9
              /* @min:%2edisableAjaxTracking */
            ];
            _maxAjaxPerfLookupAttempts = _extensionConfig.maxAjaxPerfLookupAttempts;
            _ajaxPerfLookupDelay = _extensionConfig[
              _DYN_AJAX_PERF_LOOKUP_DEL10
              /* @min:%2eajaxPerfLookupDelay */
            ];
            _ignoreHeaders = _extensionConfig.ignoreHeaders;
            _appId = _extensionConfig.appId;
          }));
        }
        function _populateContext() {
          var propExt = _self[
            _DYN_CORE2
            /* @min:%2ecore */
          ].getPlugin(PropertiesPluginIdentifier);
          if (propExt) {
            _context = propExt.plugin[
              _DYN_CONTEXT
              /* @min:%2econtext */
            ];
          }
        }
        function _canIncludeHeaders(header) {
          var rlt = true;
          if (header || _ignoreHeaders) {
            arrForEach(_ignoreHeaders, function(key) {
              if (key[
                _DYN_TO_LOWER_CASE
                /* @min:%2etoLowerCase */
              ]() === header[
                _DYN_TO_LOWER_CASE
                /* @min:%2etoLowerCase */
              ]()) {
                rlt = false;
                return -1;
              }
            });
          }
          return rlt;
        }
        function _instrumentFetch() {
          var fetch2 = _supportsFetch();
          if (!fetch2) {
            return;
          }
          var global = getGlobal();
          var isPolyfill = fetch2.polyfill;
          _self[
            _DYN__ADD_HOOK2
            /* @min:%2e_addHook */
          ](onConfigChange(_extensionConfig, function() {
            _disableFetchTracking = !!_extensionConfig[
              _DYN_DISABLE_FETCH_TRACKI11
              /* @min:%2edisableFetchTracking */
            ];
            _enableResponseHeaderTracking = _extensionConfig[
              _DYN_ENABLE_RESPONSE_HEAD12
              /* @min:%2eenableResponseHeaderTracking */
            ];
            if (!_disableFetchTracking && !_fetchInitialized) {
              _addHook(InstrumentFunc(global, STR_FETCH, {
                ns: _evtNamespace,
                // Add request hook
                req: function(callDetails, input, init) {
                  var fetchData;
                  if (!_disableFetchTracking && _fetchInitialized && !_isDisabledRequest(null, input, init) && // If we have a polyfil and XHR instrumented then let XHR report otherwise we get duplicates
                  !(isPolyfill && _xhrInitialized)) {
                    var ctx = callDetails.ctx();
                    fetchData = _createFetchRecord(input, init);
                    var newInit = _self[
                      _DYN_INCLUDE_CORRELATION_2
                      /* @min:%2eincludeCorrelationHeaders */
                    ](fetchData, input, init);
                    if (newInit !== init) {
                      callDetails.set(1, newInit);
                    }
                    ctx.data = fetchData;
                  }
                },
                rsp: function(callDetails, input) {
                  if (!_disableFetchTracking) {
                    var fetchData_1 = callDetails.ctx().data;
                    if (fetchData_1) {
                      callDetails.rslt = callDetails.rslt.then(function(response) {
                        _reportFetchMetrics(callDetails, (response || {})[
                          _DYN_STATUS
                          /* @min:%2estatus */
                        ], input, response, fetchData_1, function() {
                          var _a7;
                          var ajaxResponse = (_a7 = {
                            statusText: (response || {})[
                              _DYN_STATUS_TEXT
                              /* @min:%2estatusText */
                            ]
                          }, _a7[
                            _DYN_HEADER_MAP
                            /* @min:headerMap */
                          ] = null, _a7[
                            _DYN_CORRELATION_CONTEXT
                            /* @min:correlationContext */
                          ] = _getFetchCorrelationContext(response), _a7);
                          if (_enableResponseHeaderTracking && response) {
                            var responseHeaderMap_1 = {};
                            response.headers.forEach(function(value, name) {
                              if (_canIncludeHeaders(name)) {
                                responseHeaderMap_1[name] = value;
                              }
                            });
                            ajaxResponse[
                              _DYN_HEADER_MAP
                              /* @min:%2eheaderMap */
                            ] = responseHeaderMap_1;
                          }
                          return ajaxResponse;
                        });
                        return response;
                      }).catch(function(reason) {
                        _reportFetchMetrics(callDetails, 0, input, null, fetchData_1, null, { error: reason.message || dumpObj(reason) });
                        throw reason;
                      });
                    }
                  }
                },
                // Create an error callback to report any hook errors
                hkErr: _createErrorCallbackFunc(_self, 15, "Failed to monitor Window.fetch" + ERROR_POSTFIX)
              }, true, isWebWorker()));
              _fetchInitialized = true;
            } else if (isPolyfill && !_polyfillInitialized) {
              _addHook(InstrumentFunc(global, STR_FETCH, {
                ns: _evtNamespace,
                req: function(callDetails, input, init) {
                  _isDisabledRequest(null, input, init);
                }
              }));
              _polyfillInitialized = true;
            }
          }));
          if (isPolyfill) {
            global[STR_FETCH].polyfill = isPolyfill;
          }
        }
        function _hookProto(target, funcName, callbacks) {
          _addHook(InstrumentProto(target, funcName, callbacks));
        }
        function _instrumentXhr() {
          if (!_supportsAjaxMonitoring(_self, _ajaxDataId)) {
            return;
          }
          _self[
            _DYN__ADD_HOOK2
            /* @min:%2e_addHook */
          ](onConfigChange(_extensionConfig, function() {
            _disableAjaxTracking = !!_extensionConfig[
              _DYN_DISABLE_AJAX_TRACKIN9
              /* @min:%2edisableAjaxTracking */
            ];
            _enableRequestHeaderTracking = _extensionConfig[
              _DYN_ENABLE_REQUEST_HEADE4
              /* @min:%2eenableRequestHeaderTracking */
            ];
            if (!_disableAjaxTracking && !_xhrInitialized) {
              _hookProto(XMLHttpRequest, "open", {
                ns: _evtNamespace,
                req: function(callDetails, method, url, async) {
                  if (!_disableAjaxTracking) {
                    var xhr = callDetails[
                      _DYN_INST
                      /* @min:%2einst */
                    ];
                    var ajaxData = _getAjaxData(xhr, _ajaxDataId);
                    if (!_isDisabledRequest(xhr, url) && _isMonitoredXhrInstance(xhr, ajaxData, true)) {
                      if (!ajaxData || !ajaxData.xhrMonitoringState[
                        _DYN_OPEN_DONE
                        /* @min:%2eopenDone */
                      ]) {
                        ajaxData = _openHandler(xhr, method, url, async);
                      }
                      _attachToOnReadyStateChange(xhr, ajaxData);
                    }
                  }
                },
                hkErr: _createErrorCallbackFunc(_self, 15, ERROR_HEADER + ".open" + ERROR_POSTFIX)
              });
              _hookProto(XMLHttpRequest, "send", {
                ns: _evtNamespace,
                req: function(callDetails, context) {
                  if (!_disableAjaxTracking) {
                    var xhr = callDetails[
                      _DYN_INST
                      /* @min:%2einst */
                    ];
                    var ajaxData = _getAjaxData(xhr, _ajaxDataId);
                    if (_isMonitoredXhrInstance(xhr, ajaxData) && !ajaxData.xhrMonitoringState[
                      _DYN_SEND_DONE
                      /* @min:%2esendDone */
                    ]) {
                      _createMarkId("xhr", ajaxData);
                      ajaxData[
                        _DYN_REQUEST_SENT_TIME
                        /* @min:%2erequestSentTime */
                      ] = dateTimeUtilsNow();
                      _self[
                        _DYN_INCLUDE_CORRELATION_2
                        /* @min:%2eincludeCorrelationHeaders */
                      ](ajaxData, void 0, void 0, xhr);
                      ajaxData.xhrMonitoringState[
                        _DYN_SEND_DONE
                        /* @min:%2esendDone */
                      ] = true;
                    }
                  }
                },
                hkErr: _createErrorCallbackFunc(_self, 17, ERROR_HEADER + ERROR_POSTFIX)
              });
              _hookProto(XMLHttpRequest, "abort", {
                ns: _evtNamespace,
                req: function(callDetails) {
                  if (!_disableAjaxTracking) {
                    var xhr = callDetails[
                      _DYN_INST
                      /* @min:%2einst */
                    ];
                    var ajaxData = _getAjaxData(xhr, _ajaxDataId);
                    if (_isMonitoredXhrInstance(xhr, ajaxData) && !ajaxData.xhrMonitoringState[
                      _DYN_ABORT_DONE
                      /* @min:%2eabortDone */
                    ]) {
                      ajaxData[
                        _DYN_ABORTED
                        /* @min:%2eaborted */
                      ] = 1;
                      ajaxData.xhrMonitoringState[
                        _DYN_ABORT_DONE
                        /* @min:%2eabortDone */
                      ] = true;
                    }
                  }
                },
                hkErr: _createErrorCallbackFunc(_self, 13, ERROR_HEADER + ".abort" + ERROR_POSTFIX)
              });
              _hookProto(XMLHttpRequest, "setRequestHeader", {
                ns: _evtNamespace,
                req: function(callDetails, header, value) {
                  if (!_disableAjaxTracking) {
                    var xhr = callDetails[
                      _DYN_INST
                      /* @min:%2einst */
                    ];
                    var ajaxData = _getAjaxData(xhr, _ajaxDataId);
                    if (ajaxData && _isMonitoredXhrInstance(xhr, ajaxData)) {
                      _addSharedXhrHeaders(xhr, header, value);
                      if (_enableRequestHeaderTracking && _canIncludeHeaders(header)) {
                        if (ajaxData) {
                          ajaxData[
                            _DYN_REQUEST_HEADERS
                            /* @min:%2erequestHeaders */
                          ][header] = value;
                        }
                      }
                    }
                  }
                },
                hkErr: _createErrorCallbackFunc(_self, 71, ERROR_HEADER + ".setRequestHeader" + ERROR_POSTFIX)
              });
              _xhrInitialized = true;
            }
          }));
        }
        function _isDisabledRequest(xhr, request, init) {
          var isDisabled = false;
          var theUrl = ((!isString(request) ? (request || {}).url || "" : request) || "")[
            _DYN_TO_LOWER_CASE
            /* @min:%2etoLowerCase */
          ]();
          arrForEach(_excludeRequestFromAutoTrackingPatterns, function(regex) {
            var theRegex = regex;
            if (isString(regex)) {
              theRegex = new RegExp(regex);
            }
            if (!isDisabled) {
              isDisabled = theRegex.test(theUrl);
            }
          });
          if (isDisabled) {
            return isDisabled;
          }
          var idx = _indexOf(theUrl, "?");
          var idx2 = _indexOf(theUrl, "#");
          if (idx === -1 || idx2 !== -1 && idx2 < idx) {
            idx = idx2;
          }
          if (idx !== -1) {
            theUrl = theUrl.substring(0, idx);
          }
          if (!isNullOrUndefined(xhr)) {
            isDisabled = xhr[DisabledPropertyName] === true || theUrl[DisabledPropertyName] === true;
          } else if (!isNullOrUndefined(request)) {
            isDisabled = (typeof request === "object" ? request[DisabledPropertyName] === true : false) || (init ? init[DisabledPropertyName] === true : false);
          }
          if (!isDisabled && theUrl && isInternalApplicationInsightsEndpoint(theUrl)) {
            isDisabled = true;
          }
          if (isDisabled) {
            if (!_disabledUrls[theUrl]) {
              _disabledUrls[theUrl] = 1;
            }
          } else {
            if (_disabledUrls[theUrl]) {
              isDisabled = true;
            }
          }
          return isDisabled;
        }
        function _isMonitoredXhrInstance(xhr, ajaxData, excludeAjaxDataValidation) {
          var ajaxValidation = true;
          var initialized = _xhrInitialized;
          if (!isNullOrUndefined(xhr)) {
            ajaxValidation = excludeAjaxDataValidation === true || !isNullOrUndefined(ajaxData);
          }
          return initialized && ajaxValidation;
        }
        function _getDistributedTraceCtx() {
          var distributedTraceCtx = null;
          if (_self[
            _DYN_CORE2
            /* @min:%2ecore */
          ] && _self[
            _DYN_CORE2
            /* @min:%2ecore */
          ].getTraceCtx) {
            distributedTraceCtx = _self[
              _DYN_CORE2
              /* @min:%2ecore */
            ].getTraceCtx(false);
          }
          if (!distributedTraceCtx && _context && _context.telemetryTrace) {
            distributedTraceCtx = createDistributedTraceContextFromTrace(_context.telemetryTrace);
          }
          return distributedTraceCtx;
        }
        function _openHandler(xhr, method, url, async) {
          var _a7;
          var distributedTraceCtx = _getDistributedTraceCtx();
          var traceID = distributedTraceCtx && distributedTraceCtx[
            _DYN_GET_TRACE_ID
            /* @min:%2egetTraceId */
          ]() || generateW3CId();
          var spanID = strSubstr(generateW3CId(), 0, 16);
          var xhrRequestData = xhr[AJAX_DATA_CONTAINER] = xhr[AJAX_DATA_CONTAINER] || { xh: [], i: {} };
          var ajaxDataCntr = xhrRequestData.i = xhrRequestData.i || {};
          var ajaxData = ajaxDataCntr[_ajaxDataId] = ajaxDataCntr[_ajaxDataId] || new ajaxRecord(traceID, spanID, _self[strDiagLog](), (_a7 = _self.core) === null || _a7 === void 0 ? void 0 : _a7.getTraceCtx());
          ajaxData[
            _DYN_TRACE_FLAGS
            /* @min:%2etraceFlags */
          ] = distributedTraceCtx && distributedTraceCtx[
            _DYN_GET_TRACE_FLAGS
            /* @min:%2egetTraceFlags */
          ]();
          ajaxData[
            _DYN_METHOD
            /* @min:%2emethod */
          ] = method;
          ajaxData[
            _DYN_REQUEST_URL
            /* @min:%2erequestUrl */
          ] = url;
          ajaxData.xhrMonitoringState[
            _DYN_OPEN_DONE
            /* @min:%2eopenDone */
          ] = true;
          ajaxData[
            _DYN_REQUEST_HEADERS
            /* @min:%2erequestHeaders */
          ] = {};
          ajaxData.async = async;
          ajaxData[
            _DYN_ERROR_STATUS_TEXT
            /* @min:%2eerrorStatusText */
          ] = _enableAjaxErrorStatusText;
          return ajaxData;
        }
        function _attachToOnReadyStateChange(xhr, ajaxData) {
          ajaxData.xhrMonitoringState[
            _DYN_STATE_CHANGE_ATTACHE13
            /* @min:%2estateChangeAttached */
          ] = eventOn(xhr, "readystatechange", function() {
            var _a7;
            try {
              if (xhr && xhr.readyState === 4 && _isMonitoredXhrInstance(xhr, ajaxData)) {
                _onAjaxComplete(xhr);
              }
            } catch (e) {
              var exceptionText = dumpObj(e);
              if (!exceptionText || _indexOf(exceptionText[
                _DYN_TO_LOWER_CASE
                /* @min:%2etoLowerCase */
              ](), "c00c023f") === -1) {
                _throwInternalCritical(_self, 16, ERROR_HEADER + " 'readystatechange' event handler" + ERROR_POSTFIX, (_a7 = {}, _a7[
                  _DYN_AJAX_DIAGNOSTICS_MES16
                  /* @min:ajaxDiagnosticsMessage */
                ] = _getFailedAjaxDiagnosticsMessage(xhr, _ajaxDataId), _a7[
                  _DYN_EXCEPTION2
                  /* @min:exception */
                ] = exceptionText, _a7));
              }
            }
          }, _evtNamespace);
        }
        function _getResponseText2(xhr) {
          try {
            var responseType = xhr.responseType;
            if (responseType === "" || responseType === "text") {
              return xhr[
                _DYN_RESPONSE_TEXT
                /* @min:%2eresponseText */
              ];
            }
          } catch (e) {
          }
          return null;
        }
        function _onAjaxComplete(xhr) {
          var ajaxData = _getAjaxData(xhr, _ajaxDataId);
          ajaxData[
            _DYN_RESPONSE_FINISHED_TI14
            /* @min:%2eresponseFinishedTime */
          ] = dateTimeUtilsNow();
          ajaxData[
            _DYN_STATUS
            /* @min:%2estatus */
          ] = xhr[
            _DYN_STATUS
            /* @min:%2estatus */
          ];
          function _reportXhrError(e, failedProps) {
            var errorProps = failedProps || {};
            errorProps["ajaxDiagnosticsMessage"] = _getFailedAjaxDiagnosticsMessage(xhr, _ajaxDataId);
            if (e) {
              errorProps["exception"] = dumpObj(e);
            }
            _throwInternalWarning(_self, 14, FAILED_TO_CALCULATE_DURATION_ERROR + "ajax call" + ERROR_NOT_SENT, errorProps);
          }
          _findPerfResourceEntry("xmlhttprequest", ajaxData, function() {
            try {
              var dependency = ajaxData[
                _DYN__CREATE_TRACK_ITEM
                /* @min:%2eCreateTrackItem */
              ]("Ajax", _enableRequestHeaderTracking, function() {
                var _a7;
                var ajaxResponse = (_a7 = {
                  statusText: xhr[
                    _DYN_STATUS_TEXT
                    /* @min:%2estatusText */
                  ]
                }, _a7[
                  _DYN_HEADER_MAP
                  /* @min:headerMap */
                ] = null, _a7[
                  _DYN_CORRELATION_CONTEXT
                  /* @min:correlationContext */
                ] = _getAjaxCorrelationContext(xhr), _a7.type = xhr.responseType, _a7[
                  _DYN_RESPONSE_TEXT
                  /* @min:responseText */
                ] = _getResponseText2(xhr), _a7.response = xhr[
                  _DYN_RESPONSE
                  /* @min:%2eresponse */
                ], _a7);
                if (_enableResponseHeaderTracking) {
                  var headers = xhr[
                    _DYN_GET_ALL_RESPONSE_HEA15
                    /* @min:%2egetAllResponseHeaders */
                  ]();
                  if (headers) {
                    var arr = strTrim(headers).split(/[\r\n]+/);
                    var responseHeaderMap_2 = {};
                    arrForEach(arr, function(line) {
                      var parts = line.split(": ");
                      var header = parts.shift();
                      var value = parts.join(": ");
                      if (_canIncludeHeaders(header)) {
                        responseHeaderMap_2[header] = value;
                      }
                    });
                    ajaxResponse[
                      _DYN_HEADER_MAP
                      /* @min:%2eheaderMap */
                    ] = responseHeaderMap_2;
                  }
                }
                return ajaxResponse;
              });
              var properties = void 0;
              try {
                if (!!_addRequestContext) {
                  properties = _addRequestContext({ status: xhr[
                    _DYN_STATUS
                    /* @min:%2estatus */
                  ], xhr });
                }
              } catch (e) {
                _throwInternalWarning(_self, 104, CUSTOM_REQUEST_CONTEXT_ERROR);
              }
              if (dependency) {
                if (properties !== void 0) {
                  dependency[
                    STR_PROPERTIES
                    /* @min:%2eproperties */
                  ] = __assignFn(__assignFn({}, dependency.properties), properties);
                }
                var sysProperties = ajaxData[
                  _DYN_GET_PART_APROPS
                  /* @min:%2egetPartAProps */
                ]();
                _reportDependencyInternal(_dependencyInitializers, _self[
                  _DYN_CORE2
                  /* @min:%2ecore */
                ], ajaxData, dependency, null, sysProperties);
              } else {
                _reportXhrError(null, {
                  requestSentTime: ajaxData[
                    _DYN_REQUEST_SENT_TIME
                    /* @min:%2erequestSentTime */
                  ],
                  responseFinishedTime: ajaxData[
                    _DYN_RESPONSE_FINISHED_TI14
                    /* @min:%2eresponseFinishedTime */
                  ]
                });
              }
            } finally {
              try {
                var xhrRequestData = xhr[AJAX_DATA_CONTAINER] || { i: {} };
                var ajaxDataCntr = xhrRequestData.i || {};
                if (ajaxDataCntr[_ajaxDataId]) {
                  ajaxDataCntr[_ajaxDataId] = null;
                }
              } catch (e) {
              }
            }
          }, function(e) {
            _reportXhrError(e, null);
          });
        }
        function _getAjaxCorrelationContext(xhr) {
          var _a7;
          try {
            var responseHeadersString = xhr[
              _DYN_GET_ALL_RESPONSE_HEA15
              /* @min:%2egetAllResponseHeaders */
            ]();
            if (responseHeadersString !== null) {
              var index = _indexOf(responseHeadersString[
                _DYN_TO_LOWER_CASE
                /* @min:%2etoLowerCase */
              ](), RequestHeaders[
                8
                /* eRequestHeaders.requestContextHeaderLowerCase */
              ]);
              if (index !== -1) {
                var responseHeader = xhr.getResponseHeader(RequestHeaders[
                  0
                  /* eRequestHeaders.requestContextHeader */
                ]);
                return correlationIdGetCorrelationContext(responseHeader);
              }
            }
          } catch (e) {
            _throwInternalWarning(_self, 18, CORRELATION_HEADER_ERROR, (_a7 = {}, _a7[
              _DYN_AJAX_DIAGNOSTICS_MES16
              /* @min:ajaxDiagnosticsMessage */
            ] = _getFailedAjaxDiagnosticsMessage(xhr, _ajaxDataId), _a7[
              _DYN_EXCEPTION2
              /* @min:exception */
            ] = dumpObj(e), _a7));
          }
        }
        function _createMarkId(type, ajaxData) {
          if (ajaxData[
            _DYN_REQUEST_URL
            /* @min:%2erequestUrl */
          ] && _markPrefix && _enableAjaxPerfTracking) {
            var performance_1 = getPerformance();
            if (performance_1 && isFunction(performance_1.mark)) {
              _markCount++;
              var markId = _markPrefix + type + "#" + _markCount;
              performance_1.mark(markId);
              var entries = performance_1.getEntriesByName(markId);
              if (entries && entries[
                _DYN_LENGTH3
                /* @min:%2elength */
              ] === 1) {
                ajaxData[
                  _DYN_PERF_MARK
                  /* @min:%2eperfMark */
                ] = entries[0];
              }
            }
          }
        }
        function _findPerfResourceEntry(initiatorType, ajaxData, trackCallback, reportError) {
          var perfMark = ajaxData[
            _DYN_PERF_MARK
            /* @min:%2eperfMark */
          ];
          var performance = getPerformance();
          var maxAttempts = _maxAjaxPerfLookupAttempts;
          var retryDelay = _ajaxPerfLookupDelay;
          var requestUrl = ajaxData[
            _DYN_REQUEST_URL
            /* @min:%2erequestUrl */
          ];
          var attempt = 0;
          (function locateResourceTiming() {
            try {
              if (performance && perfMark) {
                attempt++;
                var perfTiming = null;
                var entries = performance.getEntries();
                for (var lp = entries[
                  _DYN_LENGTH3
                  /* @min:%2elength */
                ] - 1; lp >= 0; lp--) {
                  var entry = entries[lp];
                  if (entry) {
                    if (entry.entryType === "resource") {
                      if (entry.initiatorType === initiatorType && (_indexOf(entry[
                        _DYN_NAME2
                        /* @min:%2ename */
                      ], requestUrl) !== -1 || _indexOf(requestUrl, entry[
                        _DYN_NAME2
                        /* @min:%2ename */
                      ]) !== -1)) {
                        perfTiming = entry;
                      }
                    } else if (entry.entryType === "mark" && entry[
                      _DYN_NAME2
                      /* @min:%2ename */
                    ] === perfMark[
                      _DYN_NAME2
                      /* @min:%2ename */
                    ]) {
                      ajaxData[
                        _DYN_PERF_TIMING
                        /* @min:%2eperfTiming */
                      ] = perfTiming;
                      break;
                    }
                    if (entry[
                      _DYN_START_TIME2
                      /* @min:%2estartTime */
                    ] < perfMark[
                      _DYN_START_TIME2
                      /* @min:%2estartTime */
                    ] - 1e3) {
                      break;
                    }
                  }
                }
              }
              if (!perfMark || // - we don't have a perfMark or
              ajaxData[
                _DYN_PERF_TIMING
                /* @min:%2eperfTiming */
              ] || // - we have not found the perf entry or
              attempt >= maxAttempts || // - we have tried too many attempts or
              ajaxData.async === false) {
                if (perfMark && isFunction(performance.clearMarks)) {
                  performance.clearMarks(perfMark[
                    _DYN_NAME2
                    /* @min:%2ename */
                  ]);
                }
                ajaxData.perfAttempts = attempt;
                trackCallback();
              } else {
                scheduleTimeout(locateResourceTiming, retryDelay);
              }
            } catch (e) {
              reportError(e);
            }
          })();
        }
        function _createFetchRecord(input, init) {
          var _a7;
          var distributedTraceCtx = _getDistributedTraceCtx();
          var traceID = distributedTraceCtx && distributedTraceCtx[
            _DYN_GET_TRACE_ID
            /* @min:%2egetTraceId */
          ]() || generateW3CId();
          var spanID = strSubstr(generateW3CId(), 0, 16);
          var ajaxData = new ajaxRecord(traceID, spanID, _self[strDiagLog](), (_a7 = _self.core) === null || _a7 === void 0 ? void 0 : _a7.getTraceCtx());
          ajaxData[
            _DYN_TRACE_FLAGS
            /* @min:%2etraceFlags */
          ] = distributedTraceCtx && distributedTraceCtx[
            _DYN_GET_TRACE_FLAGS
            /* @min:%2egetTraceFlags */
          ]();
          ajaxData[
            _DYN_REQUEST_SENT_TIME
            /* @min:%2erequestSentTime */
          ] = dateTimeUtilsNow();
          ajaxData[
            _DYN_ERROR_STATUS_TEXT
            /* @min:%2eerrorStatusText */
          ] = _enableAjaxErrorStatusText;
          var requestUrl;
          if (input instanceof Request) {
            requestUrl = (input || {}).url || "";
          } else {
            requestUrl = input;
          }
          if (requestUrl === "") {
            var location_1 = getLocation();
            if (location_1 && location_1.href) {
              requestUrl = strSplit(location_1.href, "#")[0];
            }
          }
          ajaxData[
            _DYN_REQUEST_URL
            /* @min:%2erequestUrl */
          ] = requestUrl;
          var method = "GET";
          if (init && init[
            _DYN_METHOD
            /* @min:%2emethod */
          ]) {
            method = init[
              _DYN_METHOD
              /* @min:%2emethod */
            ];
          } else if (input && input instanceof Request) {
            method = input[
              _DYN_METHOD
              /* @min:%2emethod */
            ];
          }
          ajaxData[
            _DYN_METHOD
            /* @min:%2emethod */
          ] = method;
          var requestHeaders = {};
          if (_enableRequestHeaderTracking) {
            var headers = new Headers((init ? init[
              _DYN_HEADERS
              /* @min:%2eheaders */
            ] : 0) || (input instanceof Request ? input[
              _DYN_HEADERS
              /* @min:%2eheaders */
            ] || {} : {}));
            headers.forEach(function(value, key) {
              if (_canIncludeHeaders(key)) {
                requestHeaders[key] = value;
              }
            });
          }
          ajaxData[
            _DYN_REQUEST_HEADERS
            /* @min:%2erequestHeaders */
          ] = requestHeaders;
          _createMarkId(STR_FETCH, ajaxData);
          return ajaxData;
        }
        function _getFailedFetchDiagnosticsMessage(input) {
          var result = "";
          try {
            if (!isNullOrUndefined(input)) {
              if (typeof input === "string") {
                result += "(url: '".concat(input, "')");
              } else {
                result += "(url: '".concat(input.url, "')");
              }
            }
          } catch (e) {
            _throwInternalCritical(_self, 15, "Failed to grab failed fetch diagnostics message", { exception: dumpObj(e) });
          }
          return result;
        }
        function _reportFetchMetrics(callDetails, status, input, response, ajaxData, getResponse, properties) {
          if (!ajaxData) {
            return;
          }
          function _reportFetchError(msgId, e, failedProps) {
            var errorProps = failedProps || {};
            errorProps["fetchDiagnosticsMessage"] = _getFailedFetchDiagnosticsMessage(input);
            if (e) {
              errorProps["exception"] = dumpObj(e);
            }
            _throwInternalWarning(_self, msgId, FAILED_TO_CALCULATE_DURATION_ERROR + "fetch call" + ERROR_NOT_SENT, errorProps);
          }
          ajaxData[
            _DYN_RESPONSE_FINISHED_TI14
            /* @min:%2eresponseFinishedTime */
          ] = dateTimeUtilsNow();
          ajaxData[
            _DYN_STATUS
            /* @min:%2estatus */
          ] = status;
          _findPerfResourceEntry(STR_FETCH, ajaxData, function() {
            var dependency = ajaxData[
              _DYN__CREATE_TRACK_ITEM
              /* @min:%2eCreateTrackItem */
            ]("Fetch", _enableRequestHeaderTracking, getResponse);
            var properties2;
            try {
              if (!!_addRequestContext) {
                properties2 = _addRequestContext({ status, request: input, response });
              }
            } catch (e) {
              _throwInternalWarning(_self, 104, CUSTOM_REQUEST_CONTEXT_ERROR);
            }
            if (dependency) {
              if (properties2 !== void 0) {
                dependency[
                  STR_PROPERTIES
                  /* @min:%2eproperties */
                ] = __assignFn(__assignFn({}, dependency.properties), properties2);
              }
              var sysProperties = ajaxData[
                _DYN_GET_PART_APROPS
                /* @min:%2egetPartAProps */
              ]();
              _reportDependencyInternal(_dependencyInitializers, _self[
                _DYN_CORE2
                /* @min:%2ecore */
              ], ajaxData, dependency, null, sysProperties);
            } else {
              _reportFetchError(14, null, {
                requestSentTime: ajaxData[
                  _DYN_REQUEST_SENT_TIME
                  /* @min:%2erequestSentTime */
                ],
                responseFinishedTime: ajaxData[
                  _DYN_RESPONSE_FINISHED_TI14
                  /* @min:%2eresponseFinishedTime */
                ]
              });
            }
          }, function(e) {
            _reportFetchError(18, e, null);
          });
        }
        function _getFetchCorrelationContext(response) {
          var _a7;
          if (response && response[
            _DYN_HEADERS
            /* @min:%2eheaders */
          ]) {
            try {
              var responseHeader = response[
                _DYN_HEADERS
                /* @min:%2eheaders */
              ].get(RequestHeaders[
                0
                /* eRequestHeaders.requestContextHeader */
              ]);
              return correlationIdGetCorrelationContext(responseHeader);
            } catch (e) {
              _throwInternalWarning(_self, 18, CORRELATION_HEADER_ERROR, (_a7 = {
                fetchDiagnosticsMessage: _getFailedFetchDiagnosticsMessage(response)
              }, _a7[
                _DYN_EXCEPTION2
                /* @min:exception */
              ] = dumpObj(e), _a7));
            }
          }
        }
        function _reportDependencyInternal(initializers, core, ajaxData, dependency, properties, systemProperties) {
          var _a7;
          var result = true;
          var initializersCount = initializers[
            _DYN_LENGTH3
            /* @min:%2elength */
          ];
          if (initializersCount > 0) {
            var details = (_a7 = {
              item: dependency
            }, _a7[
              STR_PROPERTIES
              /* @min:properties */
            ] = properties, _a7.sysProperties = systemProperties, _a7.context = ajaxData ? ajaxData[
              _DYN_CONTEXT
              /* @min:%2econtext */
            ] : null, _a7.aborted = ajaxData ? !!ajaxData[
              _DYN_ABORTED
              /* @min:%2eaborted */
            ] : false, _a7);
            result = _processDependencyContainer(core, initializers, details, "initializer");
          }
          if (result) {
            _self[
              _DYN_TRACK_DEPENDENCY_DAT3
              /* @min:%2etrackDependencyDataInternal */
            ](dependency, properties, systemProperties);
          }
        }
      });
      return _this;
    }
    AjaxMonitor2.prototype.processTelemetry = function(item, itemCtx) {
      this.processNext(item, itemCtx);
    };
    AjaxMonitor2.prototype.addDependencyInitializer = function(dependencyInitializer) {
      return null;
    };
    AjaxMonitor2.identifier = "AjaxDependencyPlugin";
    return AjaxMonitor2;
  }(BaseTelemetryPlugin)
);

// node_modules/@microsoft/applicationinsights-properties-js/dist-es5/Context/Application.js
var Application = (
  /** @class */
  /* @__PURE__ */ function() {
    function Application2() {
    }
    return Application2;
  }()
);

// node_modules/@microsoft/applicationinsights-properties-js/dist-es5/Context/Device.js
var Device = (
  /** @class */
  /* @__PURE__ */ function() {
    function Device2() {
      this.id = "browser";
      this.deviceClass = "Browser";
    }
    return Device2;
  }()
);

// node_modules/@microsoft/applicationinsights-properties-js/dist-es5/Context/Internal.js
var Version = "3.3.1";
var Internal = (
  /** @class */
  /* @__PURE__ */ function() {
    function Internal2(config, unloadHookContainer) {
      var _this = this;
      var unloadHook = onConfigChange(config, function() {
        var prefix = config.sdkExtension;
        _this.sdkVersion = (prefix ? prefix + "_" : "") + "javascript:" + Version;
      });
      unloadHookContainer && unloadHookContainer.add(unloadHook);
    }
    return Internal2;
  }()
);

// node_modules/@microsoft/applicationinsights-properties-js/dist-es5/Context/Location.js
var Location = (
  /** @class */
  /* @__PURE__ */ function() {
    function Location2() {
    }
    return Location2;
  }()
);

// node_modules/@microsoft/applicationinsights-properties-js/dist-es5/__DynamicConstants.js
var _DYN_SESSION_MANAGER = "sessionManager";
var _DYN_UPDATE = "update";
var _DYN_IS_USER_COOKIE_SET = "isUserCookieSet";
var _DYN_IS_NEW_USER = "isNewUser";
var _DYN_GET_TRACE_CTX = "getTraceCtx";
var _DYN_TELEMETRY_TRACE = "telemetryTrace";
var _DYN_APPLY_SESSION_CONTEX0 = "applySessionContext";
var _DYN_APPLY_APPLICATION_CO1 = "applyApplicationContext";
var _DYN_APPLY_DEVICE_CONTEXT = "applyDeviceContext";
var _DYN_APPLY_OPERATION_CONT2 = "applyOperationContext";
var _DYN_APPLY_USER_CONTEXT = "applyUserContext";
var _DYN_APPLY_OPERATING_SYST3 = "applyOperatingSystemContxt";
var _DYN_APPLY_LOCATION_CONTE4 = "applyLocationContext";
var _DYN_APPLY_INTERNAL_CONTE5 = "applyInternalContext";
var _DYN_ACCOUNT_ID = "accountId";
var _DYN_GET_SESSION_ID = "getSessionId";
var _DYN_NAME_PREFIX = "namePrefix";
var _DYN_SESSION_COOKIE_POSTF6 = "sessionCookiePostfix";
var _DYN_USER_COOKIE_POSTFIX = "userCookiePostfix";
var _DYN_ID_LENGTH = "idLength";
var _DYN_GET_NEW_ID = "getNewId";
var _DYN_LENGTH4 = "length";
var _DYN_AUTOMATIC_SESSION = "automaticSession";
var _DYN_AUTHENTICATED_ID = "authenticatedId";
var _DYN_ACQUISITION_DATE = "acquisitionDate";
var _DYN_RENEWAL_DATE = "renewalDate";
var _DYN_JOIN = "join";
var _DYN_COOKIE_SEPARATOR = "cookieSeparator";
var _DYN_AUTH_USER_COOKIE_NAM7 = "authUserCookieName";

// node_modules/@microsoft/applicationinsights-properties-js/dist-es5/Context/Session.js
var SESSION_COOKIE_NAME = "ai_session";
var ACQUISITION_SPAN = 864e5;
var RENEWAL_SPAN = 18e5;
var COOKIE_UPDATE_INTERVAL = 6e4;
var Session = (
  /** @class */
  /* @__PURE__ */ function() {
    function Session2() {
    }
    return Session2;
  }()
);
var _SessionManager = (
  /** @class */
  function() {
    function _SessionManager2(config, core, unloadHookContainer) {
      var self = this;
      var _storageNamePrefix;
      var _cookieUpdatedTimestamp;
      var _logger = safeGetLogger(core);
      var _cookieManager = safeGetCookieMgr(core);
      var _sessionExpirationMs;
      var _sessionRenewalMs;
      dynamicProto(_SessionManager2, self, function(_self) {
        if (!config) {
          config = {};
        }
        var unloadHook = onConfigChange(config, function(details) {
          _sessionExpirationMs = config.sessionExpirationMs || ACQUISITION_SPAN;
          _sessionRenewalMs = config.sessionRenewalMs || RENEWAL_SPAN;
          var sessionCookiePostfix = config.sessionCookiePostfix || config[
            _DYN_NAME_PREFIX
            /* @min:%2enamePrefix */
          ] || "";
          _storageNamePrefix = SESSION_COOKIE_NAME + sessionCookiePostfix;
        });
        unloadHookContainer && unloadHookContainer.add(unloadHook);
        _self[
          _DYN_AUTOMATIC_SESSION
          /* @min:%2eautomaticSession */
        ] = new Session();
        _self[
          _DYN_UPDATE
          /* @min:%2eupdate */
        ] = function() {
          var nowMs = utcNow();
          var isExpired = false;
          var session = _self[
            _DYN_AUTOMATIC_SESSION
            /* @min:%2eautomaticSession */
          ];
          if (!session.id) {
            isExpired = !_initializeAutomaticSession(session, nowMs);
          }
          if (!isExpired && _sessionExpirationMs > 0) {
            var timeSinceAcqMs = nowMs - session[
              _DYN_ACQUISITION_DATE
              /* @min:%2eacquisitionDate */
            ];
            var timeSinceRenewalMs = nowMs - session[
              _DYN_RENEWAL_DATE
              /* @min:%2erenewalDate */
            ];
            isExpired = timeSinceAcqMs < 0 || timeSinceRenewalMs < 0;
            isExpired = isExpired || timeSinceAcqMs > _sessionExpirationMs;
            isExpired = isExpired || timeSinceRenewalMs > _sessionRenewalMs;
          }
          if (isExpired) {
            _renew(nowMs);
          } else {
            if (!_cookieUpdatedTimestamp || nowMs - _cookieUpdatedTimestamp > COOKIE_UPDATE_INTERVAL) {
              _setCookie(session, nowMs);
            }
          }
        };
        _self.backup = function() {
          var session = _self[
            _DYN_AUTOMATIC_SESSION
            /* @min:%2eautomaticSession */
          ];
          _setStorage(session.id, session[
            _DYN_ACQUISITION_DATE
            /* @min:%2eacquisitionDate */
          ], session[
            _DYN_RENEWAL_DATE
            /* @min:%2erenewalDate */
          ]);
        };
        function _initializeAutomaticSession(session, now) {
          var isValid = false;
          var cookieValue = _cookieManager.get(_storageNamePrefix);
          if (cookieValue && isFunction(cookieValue.split)) {
            isValid = _initializeAutomaticSessionWithData(session, cookieValue);
          } else {
            var storageValue = utlGetLocalStorage(_logger, _storageNamePrefix);
            if (storageValue) {
              isValid = _initializeAutomaticSessionWithData(session, storageValue);
            }
          }
          return isValid || !!session.id;
        }
        function _initializeAutomaticSessionWithData(session, sessionData) {
          var isValid = false;
          var sessionReset = ", session will be reset";
          var tokens = sessionData.split("|");
          if (tokens[
            _DYN_LENGTH4
            /* @min:%2elength */
          ] >= 2) {
            try {
              var acqMs = +tokens[1] || 0;
              var renewalMs = +tokens[2] || 0;
              if (isNaN(acqMs) || acqMs <= 0) {
                _throwInternal(_logger, 2, 27, "AI session acquisition date is 0" + sessionReset);
              } else if (isNaN(renewalMs) || renewalMs <= 0) {
                _throwInternal(_logger, 2, 27, "AI session renewal date is 0" + sessionReset);
              } else if (tokens[0]) {
                session.id = tokens[0];
                session[
                  _DYN_ACQUISITION_DATE
                  /* @min:%2eacquisitionDate */
                ] = acqMs;
                session[
                  _DYN_RENEWAL_DATE
                  /* @min:%2erenewalDate */
                ] = renewalMs;
                isValid = true;
              }
            } catch (e) {
              _throwInternal(_logger, 1, 9, "Error parsing ai_session value [" + (sessionData || "") + "]" + sessionReset + " - " + getExceptionName(e), { exception: dumpObj(e) });
            }
          }
          return isValid;
        }
        function _renew(nowMs) {
          var getNewId = config[
            _DYN_GET_NEW_ID
            /* @min:%2egetNewId */
          ] || newId;
          _self.automaticSession.id = getNewId(config[
            _DYN_ID_LENGTH
            /* @min:%2eidLength */
          ] || 22);
          _self[
            _DYN_AUTOMATIC_SESSION
            /* @min:%2eautomaticSession */
          ][
            _DYN_ACQUISITION_DATE
            /* @min:%2eacquisitionDate */
          ] = nowMs;
          _setCookie(_self[
            _DYN_AUTOMATIC_SESSION
            /* @min:%2eautomaticSession */
          ], nowMs);
          if (!utlCanUseLocalStorage()) {
            _throwInternal(_logger, 2, 0, "Browser does not support local storage. Session durations will be inaccurate.");
          }
        }
        function _setCookie(session, nowMs) {
          var acq = session[
            _DYN_ACQUISITION_DATE
            /* @min:%2eacquisitionDate */
          ];
          session[
            _DYN_RENEWAL_DATE
            /* @min:%2erenewalDate */
          ] = nowMs;
          var renewalPeriodMs = _sessionRenewalMs;
          var acqTimeLeftMs = acq + _sessionExpirationMs - nowMs;
          var cookie = [session.id, acq, nowMs];
          var maxAgeSec = 0;
          if (acqTimeLeftMs < renewalPeriodMs) {
            maxAgeSec = acqTimeLeftMs / 1e3;
          } else {
            maxAgeSec = renewalPeriodMs / 1e3;
          }
          var cookieDomain = config.cookieDomain || null;
          _cookieManager.set(_storageNamePrefix, cookie[
            _DYN_JOIN
            /* @min:%2ejoin */
          ]("|"), _sessionExpirationMs > 0 ? maxAgeSec : null, cookieDomain);
          _cookieUpdatedTimestamp = nowMs;
        }
        function _setStorage(guid, acq, renewal) {
          utlSetLocalStorage(_logger, _storageNamePrefix, [guid, acq, renewal][
            _DYN_JOIN
            /* @min:%2ejoin */
          ]("|"));
        }
      });
    }
    _SessionManager2.__ieDyn = 1;
    return _SessionManager2;
  }()
);

// node_modules/@microsoft/applicationinsights-properties-js/dist-es5/Context/TelemetryTrace.js
var TelemetryTrace = (
  /** @class */
  /* @__PURE__ */ function() {
    function TelemetryTrace2(id, parentId, name, logger) {
      var _self = this;
      _self.traceID = id || generateW3CId();
      _self.parentID = parentId;
      var location = getLocation();
      if (!name && location && location.pathname) {
        name = location.pathname;
      }
      _self.name = dataSanitizeString(logger, name);
    }
    return TelemetryTrace2;
  }()
);

// node_modules/@microsoft/applicationinsights-properties-js/dist-es5/Context/User.js
function _validateUserInput(id) {
  if (typeof id !== "string" || !id || id.match(/,|;|=| |\|/)) {
    return false;
  }
  return true;
}
var User = (
  /** @class */
  function() {
    function User2(config, core, unloadHookContainer) {
      this.isNewUser = false;
      this.isUserCookieSet = false;
      var _logger = safeGetLogger(core);
      var _cookieManager = safeGetCookieMgr(core);
      var _storageNamePrefix;
      dynamicProto(User2, this, function(_self) {
        objDefine(_self, "config", {
          g: function() {
            return config;
          }
        });
        var unloadHook = onConfigChange(config, function() {
          var userCookiePostfix = config[
            _DYN_USER_COOKIE_POSTFIX
            /* @min:%2euserCookiePostfix */
          ] || "";
          _storageNamePrefix = User2.userCookieName + userCookiePostfix;
          var cookie = _cookieManager.get(_storageNamePrefix);
          if (cookie) {
            _self[
              _DYN_IS_NEW_USER
              /* @min:%2eisNewUser */
            ] = false;
            var params = cookie.split(User2[
              _DYN_COOKIE_SEPARATOR
              /* @min:%2ecookieSeparator */
            ]);
            if (params[
              _DYN_LENGTH4
              /* @min:%2elength */
            ] > 0) {
              _self.id = params[0];
              _self[
                _DYN_IS_USER_COOKIE_SET
                /* @min:%2eisUserCookieSet */
              ] = !!_self.id;
            }
          }
          if (!_self.id) {
            _self.id = _generateNewId();
            var newCookie = _generateNewCookie(_self.id);
            _setUserCookie(newCookie[
              _DYN_JOIN
              /* @min:%2ejoin */
            ](User2[
              _DYN_COOKIE_SEPARATOR
              /* @min:%2ecookieSeparator */
            ]));
            var name_1 = (config[
              _DYN_NAME_PREFIX
              /* @min:%2enamePrefix */
            ] || "") + "ai_session";
            utlRemoveStorage(_logger, name_1);
          }
          _self[
            _DYN_ACCOUNT_ID
            /* @min:%2eaccountId */
          ] = config[
            _DYN_ACCOUNT_ID
            /* @min:%2eaccountId */
          ] || void 0;
          var authCookie = _cookieManager.get(User2[
            _DYN_AUTH_USER_COOKIE_NAM7
            /* @min:%2eauthUserCookieName */
          ]);
          if (authCookie) {
            authCookie = decodeURI(authCookie);
            var authCookieString = authCookie.split(User2[
              _DYN_COOKIE_SEPARATOR
              /* @min:%2ecookieSeparator */
            ]);
            if (authCookieString[0]) {
              _self[
                _DYN_AUTHENTICATED_ID
                /* @min:%2eauthenticatedId */
              ] = authCookieString[0];
            }
            if (authCookieString[
              _DYN_LENGTH4
              /* @min:%2elength */
            ] > 1 && authCookieString[1]) {
              _self[
                _DYN_ACCOUNT_ID
                /* @min:%2eaccountId */
              ] = authCookieString[1];
            }
          }
        });
        unloadHookContainer && unloadHookContainer.add(unloadHook);
        function _generateNewId() {
          var theConfig = config || {};
          var getNewId = theConfig[
            _DYN_GET_NEW_ID
            /* @min:%2egetNewId */
          ] || newId;
          var id = getNewId(theConfig[
            _DYN_ID_LENGTH
            /* @min:%2eidLength */
          ] ? config[
            _DYN_ID_LENGTH
            /* @min:%2eidLength */
          ] : 22);
          return id;
        }
        function _generateNewCookie(userId) {
          var acqStr = toISOString(/* @__PURE__ */ new Date());
          _self.accountAcquisitionDate = acqStr;
          _self[
            _DYN_IS_NEW_USER
            /* @min:%2eisNewUser */
          ] = true;
          var newCookie = [userId, acqStr];
          return newCookie;
        }
        function _setUserCookie(cookie) {
          var oneYear = 31536e3;
          _self[
            _DYN_IS_USER_COOKIE_SET
            /* @min:%2eisUserCookieSet */
          ] = _cookieManager.set(_storageNamePrefix, cookie, oneYear);
        }
        _self.setAuthenticatedUserContext = function(authenticatedUserId, accountId, storeInCookie) {
          if (storeInCookie === void 0) {
            storeInCookie = false;
          }
          var isInvalidInput = !_validateUserInput(authenticatedUserId) || accountId && !_validateUserInput(accountId);
          if (isInvalidInput) {
            _throwInternal(_logger, 2, 60, "Setting auth user context failed. User auth/account id should be of type string, and not contain commas, semi-colons, equal signs, spaces, or vertical-bars.", true);
            return;
          }
          _self[
            _DYN_AUTHENTICATED_ID
            /* @min:%2eauthenticatedId */
          ] = authenticatedUserId;
          var authCookie = _self[
            _DYN_AUTHENTICATED_ID
            /* @min:%2eauthenticatedId */
          ];
          if (accountId) {
            _self[
              _DYN_ACCOUNT_ID
              /* @min:%2eaccountId */
            ] = accountId;
            authCookie = [_self[
              _DYN_AUTHENTICATED_ID
              /* @min:%2eauthenticatedId */
            ], _self.accountId][
              _DYN_JOIN
              /* @min:%2ejoin */
            ](User2[
              _DYN_COOKIE_SEPARATOR
              /* @min:%2ecookieSeparator */
            ]);
          }
          if (storeInCookie) {
            _cookieManager.set(User2[
              _DYN_AUTH_USER_COOKIE_NAM7
              /* @min:%2eauthUserCookieName */
            ], encodeURI(authCookie));
          }
        };
        _self.clearAuthenticatedUserContext = function() {
          _self[
            _DYN_AUTHENTICATED_ID
            /* @min:%2eauthenticatedId */
          ] = null;
          _self[
            _DYN_ACCOUNT_ID
            /* @min:%2eaccountId */
          ] = null;
          _cookieManager.del(User2[
            _DYN_AUTH_USER_COOKIE_NAM7
            /* @min:%2eauthUserCookieName */
          ]);
        };
        _self[
          _DYN_UPDATE
          /* @min:%2eupdate */
        ] = function(userId) {
          if (_self.id !== userId || !_self[
            _DYN_IS_USER_COOKIE_SET
            /* @min:%2eisUserCookieSet */
          ]) {
            var user_id = userId ? userId : _generateNewId();
            var user_cookie = _generateNewCookie(user_id);
            _setUserCookie(user_cookie[
              _DYN_JOIN
              /* @min:%2ejoin */
            ](User2[
              _DYN_COOKIE_SEPARATOR
              /* @min:%2ecookieSeparator */
            ]));
          }
        };
      });
    }
    User2.cookieSeparator = "|";
    User2.userCookieName = "ai_user";
    User2.authUserCookieName = "ai_authUser";
    return User2;
  }()
);

// node_modules/@microsoft/applicationinsights-properties-js/dist-es5/TelemetryContext.js
var strExt = "ext";
var strTags = "tags";
function _removeEmpty(target, name) {
  if (target && target[name] && objKeys(target[name])[
    _DYN_LENGTH4
    /* @min:%2elength */
  ] === 0) {
    delete target[name];
  }
}
function _nullResult() {
  return null;
}
var TelemetryContext = (
  /** @class */
  function() {
    function TelemetryContext2(core, defaultConfig, previousTraceCtx, unloadHookContainer) {
      var _this = this;
      var logger = core.logger;
      dynamicProto(TelemetryContext2, this, function(_self) {
        _self.appId = _nullResult;
        _self[
          _DYN_GET_SESSION_ID
          /* @min:%2egetSessionId */
        ] = _nullResult;
        _self.application = new Application();
        _self.internal = new Internal(defaultConfig, unloadHookContainer);
        if (hasWindow()) {
          _self[
            _DYN_SESSION_MANAGER
            /* @min:%2esessionManager */
          ] = new _SessionManager(defaultConfig, core, unloadHookContainer);
          _self.device = new Device();
          _self.location = new Location();
          _self.user = new User(defaultConfig, core, unloadHookContainer);
          var traceId = void 0;
          var parentId = void 0;
          var name_1;
          if (previousTraceCtx) {
            traceId = previousTraceCtx.getTraceId();
            parentId = previousTraceCtx.getSpanId();
            name_1 = previousTraceCtx.getName();
          }
          _self[
            _DYN_TELEMETRY_TRACE
            /* @min:%2etelemetryTrace */
          ] = new TelemetryTrace(traceId, parentId, name_1, logger);
          _self.session = new Session();
        }
        _self[
          _DYN_GET_SESSION_ID
          /* @min:%2egetSessionId */
        ] = function() {
          var session = _self.session;
          var sesId = null;
          if (session && isString(session.id)) {
            sesId = session.id;
          } else {
            var autoSession = (_self[
              _DYN_SESSION_MANAGER
              /* @min:%2esessionManager */
            ] || {})[
              _DYN_AUTOMATIC_SESSION
              /* @min:%2eautomaticSession */
            ];
            sesId = autoSession && isString(autoSession.id) ? autoSession.id : null;
          }
          return sesId;
        };
        _self[
          _DYN_APPLY_SESSION_CONTEX0
          /* @min:%2eapplySessionContext */
        ] = function(evt, itemCtx) {
          setValue(getSetValue(evt.ext, Extensions.AppExt), "sesId", _self[
            _DYN_GET_SESSION_ID
            /* @min:%2egetSessionId */
          ](), isString);
        };
        _self[
          _DYN_APPLY_OPERATING_SYST3
          /* @min:%2eapplyOperatingSystemContxt */
        ] = function(evt, itemCtx) {
          setValue(evt.ext, Extensions.OSExt, _self.os);
        };
        _self[
          _DYN_APPLY_APPLICATION_CO1
          /* @min:%2eapplyApplicationContext */
        ] = function(evt, itemCtx) {
          var application = _self.application;
          if (application) {
            var tags = getSetValue(evt, strTags);
            setValue(tags, CtxTagKeys.applicationVersion, application.ver, isString);
            setValue(tags, CtxTagKeys.applicationBuild, application.build, isString);
          }
        };
        _self[
          _DYN_APPLY_DEVICE_CONTEXT
          /* @min:%2eapplyDeviceContext */
        ] = function(evt, itemCtx) {
          var device = _self.device;
          if (device) {
            var extDevice = getSetValue(getSetValue(evt, strExt), Extensions.DeviceExt);
            setValue(extDevice, "localId", device.id, isString);
            setValue(extDevice, "ip", device.ip, isString);
            setValue(extDevice, "model", device.model, isString);
            setValue(extDevice, "deviceClass", device.deviceClass, isString);
          }
        };
        _self[
          _DYN_APPLY_INTERNAL_CONTE5
          /* @min:%2eapplyInternalContext */
        ] = function(evt, itemCtx) {
          var internal = _self.internal;
          if (internal) {
            var tags = getSetValue(evt, strTags);
            setValue(tags, CtxTagKeys.internalAgentVersion, internal.agentVersion, isString);
            setValue(tags, CtxTagKeys.internalSdkVersion, dataSanitizeString(logger, internal.sdkVersion, 64), isString);
            if (evt.baseType === _InternalLogMessage.dataType || evt.baseType === PageView.dataType) {
              setValue(tags, CtxTagKeys.internalSnippet, internal.snippetVer, isString);
              setValue(tags, CtxTagKeys.internalSdkSrc, internal.sdkSrc, isString);
            }
          }
        };
        _self[
          _DYN_APPLY_LOCATION_CONTE4
          /* @min:%2eapplyLocationContext */
        ] = function(evt, itemCtx) {
          var location = _this.location;
          if (location) {
            setValue(getSetValue(evt, strTags, []), CtxTagKeys.locationIp, location.ip, isString);
          }
        };
        _self[
          _DYN_APPLY_OPERATION_CONT2
          /* @min:%2eapplyOperationContext */
        ] = function(evt, itemCtx) {
          var telemetryTrace = _self[
            _DYN_TELEMETRY_TRACE
            /* @min:%2etelemetryTrace */
          ];
          if (telemetryTrace) {
            var extTrace = getSetValue(getSetValue(evt, strExt), Extensions.TraceExt, { traceID: void 0, parentID: void 0 });
            setValue(extTrace, "traceID", telemetryTrace.traceID, isString, isNullOrUndefined);
            setValue(extTrace, "name", telemetryTrace.name, isString, isNullOrUndefined);
            setValue(extTrace, "parentID", telemetryTrace.parentID, isString, isNullOrUndefined);
          }
        };
        _self.applyWebContext = function(evt, itemCtx) {
          var web = _this.web;
          if (web) {
            setValue(getSetValue(evt, strExt), Extensions.WebExt, web);
          }
        };
        _self[
          _DYN_APPLY_USER_CONTEXT
          /* @min:%2eapplyUserContext */
        ] = function(evt, itemCtx) {
          var user = _self.user;
          if (user) {
            var tags = getSetValue(evt, strTags, []);
            setValue(tags, CtxTagKeys.userAccountId, user[
              _DYN_ACCOUNT_ID
              /* @min:%2eaccountId */
            ], isString);
            var extUser = getSetValue(getSetValue(evt, strExt), Extensions.UserExt);
            setValue(extUser, "id", user.id, isString);
            setValue(extUser, "authId", user[
              _DYN_AUTHENTICATED_ID
              /* @min:%2eauthenticatedId */
            ], isString);
          }
        };
        _self.cleanUp = function(evt, itemCtx) {
          var ext = evt.ext;
          if (ext) {
            _removeEmpty(ext, Extensions.DeviceExt);
            _removeEmpty(ext, Extensions.UserExt);
            _removeEmpty(ext, Extensions.WebExt);
            _removeEmpty(ext, Extensions.OSExt);
            _removeEmpty(ext, Extensions.AppExt);
            _removeEmpty(ext, Extensions.TraceExt);
          }
        };
      });
    }
    TelemetryContext2.__ieDyn = 1;
    return TelemetryContext2;
  }()
);

// node_modules/@microsoft/applicationinsights-properties-js/dist-es5/PropertiesPlugin.js
var _a5;
var undefString;
var nullValue = null;
var _defaultConfig3 = objDeepFreeze((_a5 = {}, _a5[
  _DYN_ACCOUNT_ID
  /* @min:accountId */
] = nullValue, _a5.sessionRenewalMs = 30 * 60 * 1e3, _a5.samplingPercentage = 100, _a5.sessionExpirationMs = 24 * 60 * 60 * 1e3, _a5.cookieDomain = nullValue, _a5.sdkExtension = nullValue, _a5.isBrowserLinkTrackingEnabled = false, _a5.appId = nullValue, _a5[
  _DYN_GET_SESSION_ID
  /* @min:getSessionId */
] = nullValue, _a5[
  _DYN_NAME_PREFIX
  /* @min:namePrefix */
] = undefString, _a5[
  _DYN_SESSION_COOKIE_POSTF6
  /* @min:sessionCookiePostfix */
] = undefString, _a5[
  _DYN_USER_COOKIE_POSTFIX
  /* @min:userCookiePostfix */
] = undefString, _a5[
  _DYN_ID_LENGTH
  /* @min:idLength */
] = 22, _a5[
  _DYN_GET_NEW_ID
  /* @min:getNewId */
] = nullValue, _a5));
var PropertiesPlugin = (
  /** @class */
  function(_super) {
    __extendsFn(PropertiesPlugin2, _super);
    function PropertiesPlugin2() {
      var _this = _super.call(this) || this;
      _this.priority = 110;
      _this.identifier = PropertiesPluginIdentifier;
      var _extensionConfig;
      var _distributedTraceCtx;
      var _previousTraceCtx;
      var _context;
      var _disableUserInitMessage;
      dynamicProto(PropertiesPlugin2, _this, function(_self, _base) {
        _initDefaults();
        objDefine(_self, "context", {
          g: function() {
            return _context;
          }
        });
        _self.initialize = function(config, core, extensions, pluginChain) {
          _base.initialize(config, core, extensions, pluginChain);
          _populateDefaults(config);
        };
        _self.processTelemetry = function(event, itemCtx) {
          if (!isNullOrUndefined(event)) {
            itemCtx = _self._getTelCtx(itemCtx);
            if (event.name === PageView.envelopeType) {
              itemCtx.diagLog().resetInternalMessageCount();
            }
            var theContext = _context || {};
            if (theContext.session) {
              if (typeof _context.session.id !== "string" && theContext[
                _DYN_SESSION_MANAGER
                /* @min:%2esessionManager */
              ]) {
                theContext[
                  _DYN_SESSION_MANAGER
                  /* @min:%2esessionManager */
                ][
                  _DYN_UPDATE
                  /* @min:%2eupdate */
                ]();
              }
            }
            var userCtx = theContext.user;
            if (userCtx && !userCtx[
              _DYN_IS_USER_COOKIE_SET
              /* @min:%2eisUserCookieSet */
            ]) {
              userCtx[
                _DYN_UPDATE
                /* @min:%2eupdate */
              ](theContext.user.id);
            }
            _processTelemetryInternal(event, itemCtx);
            if (userCtx && userCtx[
              _DYN_IS_NEW_USER
              /* @min:%2eisNewUser */
            ]) {
              userCtx[
                _DYN_IS_NEW_USER
                /* @min:%2eisNewUser */
              ] = false;
              if (!_disableUserInitMessage) {
                var message = new _InternalLogMessage(72, (getNavigator() || {}).userAgent || "");
                _logInternalMessage(itemCtx.diagLog(), 1, message);
              }
            }
            _self.processNext(event, itemCtx);
          }
        };
        _self._doTeardown = function(unloadCtx, unloadState) {
          var core = (unloadCtx || {}).core();
          if (core && core[
            _DYN_GET_TRACE_CTX
            /* @min:%2egetTraceCtx */
          ]) {
            var traceCtx = core[
              _DYN_GET_TRACE_CTX
              /* @min:%2egetTraceCtx */
            ](false);
            if (traceCtx === _distributedTraceCtx) {
              core.setTraceCtx(_previousTraceCtx);
            }
          }
          _initDefaults();
        };
        function _initDefaults() {
          _extensionConfig = null;
          _distributedTraceCtx = null;
          _previousTraceCtx = null;
          _context = null;
          _disableUserInitMessage = true;
        }
        function _populateDefaults(config) {
          var identifier = _self.identifier;
          var core = _self.core;
          _self._addHook(onConfigChange(config, function() {
            var ctx = createProcessTelemetryContext(null, config, core);
            if (config.storagePrefix) {
              utlSetStoragePrefix(config.storagePrefix);
            }
            _disableUserInitMessage = config.disableUserInitMessage === false ? false : true;
            _extensionConfig = ctx.getExtCfg(identifier, _defaultConfig3);
            _self["_extConfig"] = _extensionConfig;
          }));
          _previousTraceCtx = core[
            _DYN_GET_TRACE_CTX
            /* @min:%2egetTraceCtx */
          ](false);
          _context = new TelemetryContext(core, _extensionConfig, _previousTraceCtx, _self._unloadHooks);
          _distributedTraceCtx = createDistributedTraceContextFromTrace(_self.context[
            _DYN_TELEMETRY_TRACE
            /* @min:%2etelemetryTrace */
          ], _previousTraceCtx);
          core.setTraceCtx(_distributedTraceCtx);
          _self.context.appId = function() {
            var breezeChannel = core.getPlugin(BreezeChannelIdentifier);
            return breezeChannel ? breezeChannel.plugin["_appId"] : null;
          };
        }
        function _processTelemetryInternal(evt, itemCtx) {
          getSetValue(evt, "tags", []);
          getSetValue(evt, "ext", {});
          var ctx = _self.context;
          ctx[
            _DYN_APPLY_SESSION_CONTEX0
            /* @min:%2eapplySessionContext */
          ](evt, itemCtx);
          ctx[
            _DYN_APPLY_APPLICATION_CO1
            /* @min:%2eapplyApplicationContext */
          ](evt, itemCtx);
          ctx[
            _DYN_APPLY_DEVICE_CONTEXT
            /* @min:%2eapplyDeviceContext */
          ](evt, itemCtx);
          ctx[
            _DYN_APPLY_OPERATION_CONT2
            /* @min:%2eapplyOperationContext */
          ](evt, itemCtx);
          ctx[
            _DYN_APPLY_USER_CONTEXT
            /* @min:%2eapplyUserContext */
          ](evt, itemCtx);
          ctx[
            _DYN_APPLY_OPERATING_SYST3
            /* @min:%2eapplyOperatingSystemContxt */
          ](evt, itemCtx);
          ctx.applyWebContext(evt, itemCtx);
          ctx[
            _DYN_APPLY_LOCATION_CONTE4
            /* @min:%2eapplyLocationContext */
          ](evt, itemCtx);
          ctx[
            _DYN_APPLY_INTERNAL_CONTE5
            /* @min:%2eapplyInternalContext */
          ](evt, itemCtx);
          ctx.cleanUp(evt, itemCtx);
        }
      });
      return _this;
    }
    PropertiesPlugin2.__ieDyn = 1;
    return PropertiesPlugin2;
  }(BaseTelemetryPlugin)
);
var PropertiesPlugin_default = PropertiesPlugin;

// node_modules/@microsoft/applicationinsights-web/dist-es5/InternalConstants.js
var _AUTHENTICATED_USER_CONTEXT = "AuthenticatedUserContext";
var _TRACK = "track";
var STR_SNIPPET = "snippet";
var STR_GET_COOKIE_MGR = "getCookieMgr";
var STR_START_TRACK_PAGE = "startTrackPage";
var STR_STOP_TRACK_PAGE = "stopTrackPage";
var STR_FLUSH = "flush";
var STR_START_TRACK_EVENT = "startTrackEvent";
var STR_STOP_TRACK_EVENT = "stopTrackEvent";
var STR_ADD_TELEMETRY_INITIALIZER = "addTelemetryInitializer";
var STR_ADD_TELEMETRY_INITIALIZERS = STR_ADD_TELEMETRY_INITIALIZER + "s";
var STR_POLL_INTERNAL_LOGS = "pollInternalLogs";
var STR_GET_PLUGIN = "getPlugin";
var STR_EVT_NAMESPACE = "evtNamespace";
var STR_TRACK_EVENT = _TRACK + "Event";
var STR_TRACK_TRACE = _TRACK + "Trace";
var STR_TRACK_METRIC = _TRACK + "Metric";
var STR_TRACK_PAGE_VIEW = _TRACK + "PageView";
var STR_TRACK_EXCEPTION = _TRACK + "Exception";
var STR_TRACK_DEPENDENCY_DATA = _TRACK + "DependencyData";
var STR_SET_AUTHENTICATED_USER_CONTEXT = "set" + _AUTHENTICATED_USER_CONTEXT;
var STR_CLEAR_AUTHENTICATED_USER_CONTEXT = "clear" + _AUTHENTICATED_USER_CONTEXT;
var CONFIG_ENDPOINT_URL = "https://js.monitor.azure.com/scripts/b/ai.config.1.cfg.json";

// node_modules/@microsoft/applicationinsights-web/dist-es5/__DynamicConstants.js
var _DYN_VERSION = "version";
var _DYN_QUEUE = "queue";
var _DYN_CONNECTION_STRING = "connectionString";
var _DYN_INSTRUMENTATION_KEY2 = "instrumentationKey";
var _DYN_INSTRUMENTATIONKEY0 = "instrumentationkey";
var _DYN_USER_OVERRIDE_ENDPOI1 = "userOverrideEndpointUrl";
var _DYN_ENDPOINT_URL = "endpointUrl";
var _DYN_INGESTIONENDPOINT = "ingestionendpoint";
var _DYN_ONUNLOAD_FLUSH = "onunloadFlush";
var _DYN_CONTEXT2 = "context";
var _DYN_ADD_HOUSEKEEPING_BEF2 = "addHousekeepingBeforeUnload";
var _DYN_SEND_MESSAGE = "sendMessage";
var _DYN_UPDATE_SNIPPET_DEFIN3 = "updateSnippetDefinitions";

// node_modules/@microsoft/applicationinsights-web/dist-es5/AISku.js
var _a6;
var _b2;
var _c;
var _d;
var _internalSdkSrc;
var _ignoreUpdateSnippetProperties = [
  STR_SNIPPET,
  "dependencies",
  "properties",
  "_snippetVersion",
  "appInsightsNew",
  "getSKUDefaults"
];
var IKEY_USAGE = "iKeyUsage";
var CDN_USAGE = "CdnUsage";
var SDK_LOADER_VER = "SdkLoaderVer";
var UNDEFINED_VALUE2 = void 0;
var default_limit = {
  samplingRate: 100,
  maxSendNumber: 1
};
var default_interval = {
  monthInterval: 3,
  daysOfMonth: [28]
};
var default_throttle_config = {
  disabled: true,
  limit: cfgDfMerge(default_limit),
  interval: cfgDfMerge(default_interval)
};
var defaultConfigValues = (_a6 = {}, _a6[
  _DYN_CONNECTION_STRING
  /* @min:connectionString */
] = UNDEFINED_VALUE2, _a6[
  _DYN_ENDPOINT_URL
  /* @min:endpointUrl */
] = UNDEFINED_VALUE2, _a6[
  _DYN_INSTRUMENTATION_KEY2
  /* @min:instrumentationKey */
] = UNDEFINED_VALUE2, _a6[
  _DYN_USER_OVERRIDE_ENDPOI1
  /* @min:userOverrideEndpointUrl */
] = UNDEFINED_VALUE2, _a6.diagnosticLogInterval = cfgDfValidate(_chkDiagLevel, 1e4), _a6.featureOptIn = (_b2 = {}, _b2[IKEY_USAGE] = {
  mode: 3
  /* FeatureOptInMode.enable */
}, _b2[CDN_USAGE] = {
  mode: 2
  /* FeatureOptInMode.disable */
}, _b2[SDK_LOADER_VER] = {
  mode: 2
  /* FeatureOptInMode.disable */
}, _b2), _a6.throttleMgrCfg = cfgDfMerge((_c = {}, _c[
  109
  /* _eInternalMessageId.DefaultThrottleMsgKey */
] = cfgDfMerge(default_throttle_config), _c[
  106
  /* _eInternalMessageId.InstrumentationKeyDeprecation */
] = cfgDfMerge(default_throttle_config), _c[
  111
  /* _eInternalMessageId.SdkLdrUpdate */
] = cfgDfMerge(default_throttle_config), _c[
  110
  /* _eInternalMessageId.CdnDeprecation */
] = cfgDfMerge(default_throttle_config), _c)), _a6.extensionConfig = cfgDfMerge((_d = {}, _d["AppInsightsCfgSyncPlugin"] = cfgDfMerge({
  cfgUrl: CONFIG_ENDPOINT_URL,
  syncMode: 2
  /* ICfgSyncMode.Receive */
}), _d)), _a6);
function _chkDiagLevel(value) {
  return value && value > 0;
}
var AppInsightsSku = (
  /** @class */
  function() {
    function AppInsightsSku2(snippet) {
      var _this = this;
      var dependencies;
      var properties;
      var _sender;
      var _snippetVersion;
      var _evtNamespace;
      var _houseKeepingNamespace;
      var _core;
      var _config;
      var _analyticsPlugin;
      var _cfgSyncPlugin;
      var _throttleMgr;
      var _iKeySentMessage;
      var _cdnSentMessage;
      var _sdkVerSentMessage;
      dynamicProto(AppInsightsSku2, this, function(_self) {
        _initDefaults();
        objDefine(_self, "config", {
          g: function() {
            return _config;
          }
        });
        arrForEach(["pluginVersionStringArr", "pluginVersionString"], function(key) {
          objDefine(_self, key, {
            g: function() {
              if (_core) {
                return _core[key];
              }
              return null;
            }
          });
        });
        _snippetVersion = "" + (snippet.sv || snippet[
          _DYN_VERSION
          /* @min:%2eversion */
        ] || "");
        snippet[
          _DYN_QUEUE
          /* @min:%2equeue */
        ] = snippet[
          _DYN_QUEUE
          /* @min:%2equeue */
        ] || [];
        snippet[
          _DYN_VERSION
          /* @min:%2eversion */
        ] = snippet[
          _DYN_VERSION
          /* @min:%2eversion */
        ] || 2;
        var cfgHandler = createDynamicConfig(snippet.config || {}, defaultConfigValues);
        _config = cfgHandler.cfg;
        _analyticsPlugin = new AnalyticsPlugin();
        objDefine(_self, "appInsights", {
          g: function() {
            return _analyticsPlugin;
          }
        });
        properties = new PropertiesPlugin_default();
        dependencies = new AjaxMonitor();
        _sender = new Sender();
        _core = new AppInsightsCore();
        objDefine(_self, "core", {
          g: function() {
            return _core;
          }
        });
        _addUnloadHook(onConfigChange(cfgHandler, function() {
          var configCs = _config[
            _DYN_CONNECTION_STRING
            /* @min:%2econnectionString */
          ];
          function _parseCs() {
            return createAsyncPromise(function(resolve, reject) {
              doAwaitResponse(configCs, function(res) {
                var curCs = res && res.value;
                var parsedCs = null;
                if (!res.rejected && curCs) {
                  _config[
                    _DYN_CONNECTION_STRING
                    /* @min:%2econnectionString */
                  ] = curCs;
                  parsedCs = parseConnectionString(curCs);
                }
                resolve(parsedCs);
              });
            });
          }
          if (isPromiseLike(configCs)) {
            var ikeyPromise = createAsyncPromise(function(resolve, reject) {
              _parseCs().then(function(cs2) {
                var ikey = _config[
                  _DYN_INSTRUMENTATION_KEY2
                  /* @min:%2einstrumentationKey */
                ];
                ikey = cs2 && cs2[
                  _DYN_INSTRUMENTATIONKEY0
                  /* @min:%2einstrumentationkey */
                ] || ikey;
                resolve(ikey);
              }).catch(function(e) {
                resolve(null);
              });
            });
            var url = _config[
              _DYN_USER_OVERRIDE_ENDPOI1
              /* @min:%2euserOverrideEndpointUrl */
            ];
            if (isNullOrUndefined(url)) {
              url = createAsyncPromise(function(resolve, reject) {
                _parseCs().then(function(cs2) {
                  var url2 = _config[
                    _DYN_ENDPOINT_URL
                    /* @min:%2eendpointUrl */
                  ];
                  var ingest2 = cs2 && cs2[
                    _DYN_INGESTIONENDPOINT
                    /* @min:%2eingestionendpoint */
                  ];
                  url2 = ingest2 ? ingest2 + DEFAULT_BREEZE_PATH : url2;
                  resolve(url2);
                }).catch(function(e) {
                  resolve(null);
                });
              });
            }
            _config[
              _DYN_INSTRUMENTATION_KEY2
              /* @min:%2einstrumentationKey */
            ] = ikeyPromise;
            _config[
              _DYN_ENDPOINT_URL
              /* @min:%2eendpointUrl */
            ] = url;
          }
          if (isString(configCs)) {
            var cs = parseConnectionString(configCs);
            var ingest = cs[
              _DYN_INGESTIONENDPOINT
              /* @min:%2eingestionendpoint */
            ];
            _config.endpointUrl = _config[
              _DYN_USER_OVERRIDE_ENDPOI1
              /* @min:%2euserOverrideEndpointUrl */
            ] ? _config[
              _DYN_USER_OVERRIDE_ENDPOI1
              /* @min:%2euserOverrideEndpointUrl */
            ] : ingest + DEFAULT_BREEZE_PATH;
            _config[
              _DYN_INSTRUMENTATION_KEY2
              /* @min:%2einstrumentationKey */
            ] = cs[
              _DYN_INSTRUMENTATIONKEY0
              /* @min:%2einstrumentationkey */
            ] || _config[
              _DYN_INSTRUMENTATION_KEY2
              /* @min:%2einstrumentationKey */
            ];
          }
          _config.endpointUrl = _config[
            _DYN_USER_OVERRIDE_ENDPOI1
            /* @min:%2euserOverrideEndpointUrl */
          ] ? _config[
            _DYN_USER_OVERRIDE_ENDPOI1
            /* @min:%2euserOverrideEndpointUrl */
          ] : _config[
            _DYN_ENDPOINT_URL
            /* @min:%2eendpointUrl */
          ];
        }));
        _self[
          STR_SNIPPET
          /* @min:%2esnippet */
        ] = snippet;
        _self[
          STR_FLUSH
          /* @min:%2eflush */
        ] = function(async, callBack) {
          if (async === void 0) {
            async = true;
          }
          var result;
          doPerf(_core, function() {
            return "AISKU.flush";
          }, function() {
            if (async && !callBack) {
              result = createPromise(function(resolve) {
                callBack = resolve;
              });
            }
            var waiting = 1;
            var flushDone = function() {
              waiting--;
              if (waiting === 0) {
                callBack();
              }
            };
            arrForEach(_core.getChannels(), function(channel) {
              if (channel) {
                waiting++;
                channel[
                  STR_FLUSH
                  /* @min:%2eflush */
                ](async, flushDone);
              }
            });
            flushDone();
          }, null, async);
          return result;
        };
        _self[
          _DYN_ONUNLOAD_FLUSH
          /* @min:%2eonunloadFlush */
        ] = function(async) {
          if (async === void 0) {
            async = true;
          }
          arrForEach(_core.getChannels(), function(channel) {
            if (channel[
              _DYN_ONUNLOAD_FLUSH
              /* @min:%2eonunloadFlush */
            ]) {
              channel[
                _DYN_ONUNLOAD_FLUSH
                /* @min:%2eonunloadFlush */
              ]();
            } else {
              channel[
                STR_FLUSH
                /* @min:%2eflush */
              ](async);
            }
          });
        };
        _self.loadAppInsights = function(legacyMode, logger, notificationManager) {
          if (legacyMode === void 0) {
            legacyMode = false;
          }
          if (legacyMode) {
            throwUnsupported("Legacy Mode is no longer supported");
          }
          function _updateSnippetProperties(snippet2) {
            if (snippet2) {
              var snippetVer = "";
              if (!isNullOrUndefined(_snippetVersion)) {
                snippetVer += _snippetVersion;
              }
              if (_self[
                _DYN_CONTEXT2
                /* @min:%2econtext */
              ] && _self[
                _DYN_CONTEXT2
                /* @min:%2econtext */
              ].internal) {
                _self[
                  _DYN_CONTEXT2
                  /* @min:%2econtext */
                ].internal.snippetVer = snippetVer || "-";
              }
              objForEachKey(_self, function(field, value) {
                if (isString(field) && !isFunction(value) && field && field[0] !== "_" && // Don't copy "internal" values
                arrIndexOf(_ignoreUpdateSnippetProperties, field) === -1) {
                  if (snippet2[field] !== value) {
                    snippet2[field] = value;
                  }
                }
              });
            }
          }
          doPerf(_self.core, function() {
            return "AISKU.loadAppInsights";
          }, function() {
            _core.initialize(_config, [_sender, properties, dependencies, _analyticsPlugin, _cfgSyncPlugin], logger, notificationManager);
            objDefine(_self, "context", {
              g: function() {
                return properties[
                  _DYN_CONTEXT2
                  /* @min:%2econtext */
                ];
              }
            });
            if (!_throttleMgr) {
              _throttleMgr = new ThrottleMgr(_core);
            }
            var sdkSrc = _findSdkSourceFile();
            if (sdkSrc && _self[
              _DYN_CONTEXT2
              /* @min:%2econtext */
            ]) {
              _self[
                _DYN_CONTEXT2
                /* @min:%2econtext */
              ].internal.sdkSrc = sdkSrc;
            }
            _updateSnippetProperties(_self[
              STR_SNIPPET
              /* @min:%2esnippet */
            ]);
            _self.emptyQueue();
            _self[
              STR_POLL_INTERNAL_LOGS
              /* @min:%2epollInternalLogs */
            ]();
            _self[
              _DYN_ADD_HOUSEKEEPING_BEF2
              /* @min:%2eaddHousekeepingBeforeUnload */
            ](_self);
            _addUnloadHook(onConfigChange(cfgHandler, function() {
              var defaultEnable = false;
              if (_config.throttleMgrCfg[
                109
                /* _eInternalMessageId.DefaultThrottleMsgKey */
              ]) {
                defaultEnable = !_config.throttleMgrCfg[
                  109
                  /* _eInternalMessageId.DefaultThrottleMsgKey */
                ].disabled;
              }
              if (!_throttleMgr.isReady() && _config.extensionConfig && _config.extensionConfig[_cfgSyncPlugin.identifier] && defaultEnable) {
                _throttleMgr.onReadyState(true);
              }
              var result;
              if (!_iKeySentMessage && !_config[
                _DYN_CONNECTION_STRING
                /* @min:%2econnectionString */
              ] && isFeatureEnabled(IKEY_USAGE, _config)) {
                result = _throttleMgr[
                  _DYN_SEND_MESSAGE
                  /* @min:%2esendMessage */
                ](106, "See Instrumentation key support at aka.ms/IkeyMigrate");
                _iKeySentMessage = true;
              }
              if (!_cdnSentMessage && _self[
                _DYN_CONTEXT2
                /* @min:%2econtext */
              ].internal.sdkSrc && _self[
                _DYN_CONTEXT2
                /* @min:%2econtext */
              ].internal.sdkSrc.indexOf("az416426") != -1 && isFeatureEnabled(CDN_USAGE, _config)) {
                result = _throttleMgr[
                  _DYN_SEND_MESSAGE
                  /* @min:%2esendMessage */
                ](110, "See Cdn support notice at aka.ms/JsActiveCdn");
                _cdnSentMessage = true;
              }
              if (!_sdkVerSentMessage && parseInt(_snippetVersion) < 6 && isFeatureEnabled(SDK_LOADER_VER, _config)) {
                result = _throttleMgr[
                  _DYN_SEND_MESSAGE
                  /* @min:%2esendMessage */
                ](111, "An updated Sdk Loader is available, see aka.ms/SnippetVer");
                _sdkVerSentMessage = true;
              }
            }));
          });
          return _self;
        };
        _self[
          _DYN_UPDATE_SNIPPET_DEFIN3
          /* @min:%2eupdateSnippetDefinitions */
        ] = function(snippet2) {
          proxyAssign(snippet2, _self, function(name) {
            return name && arrIndexOf(_ignoreUpdateSnippetProperties, name) === -1;
          });
        };
        _self.emptyQueue = function() {
          try {
            if (isArray(_self.snippet[
              _DYN_QUEUE
              /* @min:%2equeue */
            ])) {
              var length_1 = _self.snippet[
                _DYN_QUEUE
                /* @min:%2equeue */
              ].length;
              for (var i = 0; i < length_1; i++) {
                var call = _self.snippet[
                  _DYN_QUEUE
                  /* @min:%2equeue */
                ][i];
                call();
              }
              _self.snippet[
                _DYN_QUEUE
                /* @min:%2equeue */
              ] = void 0;
              delete _self.snippet[
                _DYN_QUEUE
                /* @min:%2equeue */
              ];
            }
          } catch (exception) {
            var properties_1 = {};
            if (exception && isFunction(exception.toString)) {
              properties_1.exception = exception.toString();
            }
          }
        };
        _self[
          _DYN_ADD_HOUSEKEEPING_BEF2
          /* @min:%2eaddHousekeepingBeforeUnload */
        ] = function(appInsightsInstance) {
          if (hasWindow() || hasDocument()) {
            var performHousekeeping_1 = function() {
              appInsightsInstance[
                _DYN_ONUNLOAD_FLUSH
                /* @min:%2eonunloadFlush */
              ](false);
              if (isFunction(_self.core[
                STR_GET_PLUGIN
                /* @min:%2egetPlugin */
              ])) {
                var loadedPlugin = _this.core[
                  STR_GET_PLUGIN
                  /* @min:%2egetPlugin */
                ](PropertiesPluginIdentifier);
                if (loadedPlugin) {
                  var propertiesPlugin = loadedPlugin.plugin;
                  if (propertiesPlugin && propertiesPlugin[
                    _DYN_CONTEXT2
                    /* @min:%2econtext */
                  ] && propertiesPlugin[
                    _DYN_CONTEXT2
                    /* @min:%2econtext */
                  ]._sessionManager) {
                    propertiesPlugin[
                      _DYN_CONTEXT2
                      /* @min:%2econtext */
                    ]._sessionManager.backup();
                  }
                }
              }
            };
            var added_1 = false;
            if (!_houseKeepingNamespace) {
              _houseKeepingNamespace = mergeEvtNamespace(_evtNamespace, _core[
                STR_EVT_NAMESPACE
                /* @min:%2eevtNamespace */
              ] && _core[
                STR_EVT_NAMESPACE
                /* @min:%2eevtNamespace */
              ]());
            }
            _addUnloadHook(onConfigChange(_config, function(details) {
              var coreConfig = details.cfg;
              var analyticsPlugin = appInsightsInstance.appInsights;
              var ctx = createProcessTelemetryContext(null, coreConfig, analyticsPlugin.core);
              var extConfig = ctx.getExtCfg(analyticsPlugin.identifier || AnalyticsPluginIdentifier);
              _removePageEventHandlers();
              var excludePageUnloadEvents = coreConfig.disablePageUnloadEvents;
              if (!extConfig.disableFlushOnBeforeUnload) {
                if (addPageUnloadEventListener(performHousekeeping_1, excludePageUnloadEvents, _houseKeepingNamespace)) {
                  added_1 = true;
                }
                if (addPageHideEventListener(performHousekeeping_1, excludePageUnloadEvents, _houseKeepingNamespace)) {
                  added_1 = true;
                }
                if (!added_1 && !isReactNative()) {
                  _throwInternal(_core.logger, 1, 19, "Could not add handler for beforeunload and pagehide");
                }
              }
              if (!added_1 && !extConfig.disableFlushOnUnload) {
                addPageHideEventListener(performHousekeeping_1, excludePageUnloadEvents, _houseKeepingNamespace);
              }
            }));
          }
        };
        _self.getSender = function() {
          return _sender;
        };
        _self.unload = function(isAsync, unloadComplete, cbTimeout) {
          var unloadDone = false;
          var result;
          if (isAsync && !unloadComplete) {
            result = createPromise(function(resolve) {
              unloadComplete = resolve;
            });
          }
          function _unloadCallback(unloadState) {
            if (!unloadDone) {
              unloadDone = true;
              _initDefaults();
              unloadComplete && unloadComplete(unloadState);
            }
          }
          _self[
            _DYN_ONUNLOAD_FLUSH
            /* @min:%2eonunloadFlush */
          ](isAsync);
          _removePageEventHandlers();
          _core.unload && _core.unload(isAsync, _unloadCallback, cbTimeout);
          return result;
        };
        proxyFunctions(_self, _analyticsPlugin, [
          STR_GET_COOKIE_MGR,
          STR_TRACK_EVENT,
          STR_TRACK_PAGE_VIEW,
          "trackPageViewPerformance",
          STR_TRACK_EXCEPTION,
          "_onerror",
          STR_TRACK_TRACE,
          STR_TRACK_METRIC,
          STR_START_TRACK_PAGE,
          STR_STOP_TRACK_PAGE,
          STR_START_TRACK_EVENT,
          STR_STOP_TRACK_EVENT
        ]);
        proxyFunctions(_self, _getCurrentDependencies, [
          STR_TRACK_DEPENDENCY_DATA,
          "addDependencyListener",
          "addDependencyInitializer"
        ]);
        proxyFunctions(_self, _core, [
          STR_ADD_TELEMETRY_INITIALIZER,
          STR_POLL_INTERNAL_LOGS,
          "stopPollingInternalLogs",
          STR_GET_PLUGIN,
          "addPlugin",
          STR_EVT_NAMESPACE,
          "addUnloadCb",
          "getTraceCtx",
          "updateCfg",
          "onCfgChange"
        ]);
        proxyFunctions(_self, function() {
          var context = properties[
            _DYN_CONTEXT2
            /* @min:%2econtext */
          ];
          return context ? context.user : null;
        }, [
          STR_SET_AUTHENTICATED_USER_CONTEXT,
          STR_CLEAR_AUTHENTICATED_USER_CONTEXT
        ]);
        function _getCurrentDependencies() {
          return dependencies;
        }
        function _initDefaults() {
          _evtNamespace = createUniqueNamespace("AISKU");
          _houseKeepingNamespace = null;
          dependencies = null;
          properties = null;
          _sender = null;
          _snippetVersion = null;
          _throttleMgr = null;
          _iKeySentMessage = false;
          _cdnSentMessage = false;
          _sdkVerSentMessage = false;
          _cfgSyncPlugin = new CfgSyncPlugin();
        }
        function _removePageEventHandlers() {
          if (_houseKeepingNamespace) {
            removePageUnloadEventListener(null, _houseKeepingNamespace);
            removePageHideEventListener(null, _houseKeepingNamespace);
          }
        }
        function _addUnloadHook(hooks) {
          _core.addUnloadHook(hooks);
        }
      });
    }
    AppInsightsSku2.prototype.addDependencyInitializer = function(dependencyInitializer) {
      return null;
    };
    return AppInsightsSku2;
  }()
);
function _findSdkSourceFile() {
  if (_internalSdkSrc) {
    return _internalSdkSrc;
  }
  var sdkSrc = null;
  var isModule = false;
  var cdns = [
    "://js.monitor.azure.com/",
    "://az416426.vo.msecnd.net/"
  ];
  try {
    var scrpt = (document || {}).currentScript;
    if (scrpt) {
      sdkSrc = scrpt.src;
    }
  } catch (e) {
  }
  if (sdkSrc) {
    try {
      var url_1 = sdkSrc.toLowerCase();
      if (url_1) {
        var src_1 = "";
        arrForEach(cdns, function(value, idx) {
          if (strIndexOf(url_1, value) !== -1) {
            src_1 = "cdn" + (idx + 1);
            if (strIndexOf(url_1, "/scripts/") === -1) {
              if (strIndexOf(url_1, "/next/") !== -1) {
                src_1 += "-next";
              } else if (strIndexOf(url_1, "/beta/") !== -1) {
                src_1 += "-beta";
              }
            }
            _internalSdkSrc = src_1 + (isModule ? ".mod" : "");
            return -1;
          }
        });
      }
    } catch (e) {
    }
    _internalSdkSrc = sdkSrc;
  }
  return _internalSdkSrc;
}

// node_modules/@microsoft/applicationinsights-web/dist-es5/ApplicationInsightsContainer.js
var ApplicationInsightsContainer = (
  /** @class */
  function() {
    function ApplicationInsightsContainer2() {
    }
    ApplicationInsightsContainer2.getAppInsights = function(snippet, version) {
      var theSku = new AppInsightsSku(snippet);
      if (version >= 2) {
        theSku[
          _DYN_UPDATE_SNIPPET_DEFIN3
          /* @min:%2eupdateSnippetDefinitions */
        ](snippet);
        theSku.loadAppInsights(false);
        return theSku;
      }
      throwUnsupported("V1 API compatibility is no longer supported");
    };
    return ApplicationInsightsContainer2;
  }()
);
export {
  AppInsightsCore,
  AnalyticsPlugin as ApplicationAnalytics,
  AppInsightsSku as ApplicationInsights,
  ApplicationInsightsContainer,
  BaseTelemetryPlugin,
  CfgSyncPlugin,
  AjaxMonitor as DependenciesPlugin,
  DistributedTracingModes,
  Event2 as Event,
  EventPersistence,
  Exception,
  LoggingSeverity,
  Metric,
  NotificationManager,
  PageView,
  PageViewPerformance,
  PerfEvent,
  PerfManager,
  PropertiesPlugin_default as PropertiesPlugin,
  RemoteDependencyData,
  Sender,
  SeverityLevel,
  Trace,
  doPerf
};
//# sourceMappingURL=@microsoft_applicationinsights-web.js.map
