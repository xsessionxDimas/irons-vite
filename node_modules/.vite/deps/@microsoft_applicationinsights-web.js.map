{
  "version": 3,
  "sources": ["../../@microsoft/applicationinsights-analytics-js/dist-es5/__DynamicConstants.js", "../../@microsoft/applicationinsights-analytics-js/dist-es5/JavaScriptSDK/Telemetry/PageViewManager.js", "../../@microsoft/applicationinsights-analytics-js/dist-es5/JavaScriptSDK/Telemetry/PageViewPerformanceManager.js", "../../@microsoft/applicationinsights-analytics-js/dist-es5/JavaScriptSDK/Telemetry/PageVisitTimeManager.js", "../../@microsoft/applicationinsights-analytics-js/dist-es5/JavaScriptSDK/Timing.js", "../../@microsoft/applicationinsights-analytics-js/dist-es5/JavaScriptSDK/AnalyticsPlugin.js", "../../@microsoft/applicationinsights-cfgsync-js/dist-es5/__DynamicConstants.js", "../../@microsoft/applicationinsights-cfgsync-js/dist-es5/CfgSyncHelperFuncs.js", "../../@microsoft/applicationinsights-cfgsync-js/dist-es5/CfgSyncPlugin.js", "../../@microsoft/applicationinsights-channel-js/dist-es5/InternalConstants.js", "../../@microsoft/applicationinsights-channel-js/dist-es5/__DynamicConstants.js", "../../@microsoft/applicationinsights-channel-js/dist-es5/EnvelopeCreator.js", "../../@microsoft/applicationinsights-channel-js/dist-es5/SendBuffer.js", "../../@microsoft/applicationinsights-channel-js/dist-es5/Serializer.js", "../../@microsoft/applicationinsights-channel-js/dist-es5/TelemetryProcessors/SamplingScoreGenerators/HashCodeScoreGenerator.js", "../../@microsoft/applicationinsights-channel-js/dist-es5/TelemetryProcessors/SamplingScoreGenerators/SamplingScoreGenerator.js", "../../@microsoft/applicationinsights-channel-js/dist-es5/TelemetryProcessors/Sample.js", "../../@microsoft/applicationinsights-channel-js/dist-es5/Sender.js", "../../@microsoft/applicationinsights-dependencies-js/dist-es5/InternalConstants.js", "../../@microsoft/applicationinsights-dependencies-js/dist-es5/__DynamicConstants.js", "../../@microsoft/applicationinsights-dependencies-js/dist-es5/ajaxRecord.js", "../../@microsoft/applicationinsights-dependencies-js/dist-es5/ajax.js", "../../@microsoft/applicationinsights-properties-js/dist-es5/Context/Application.js", "../../@microsoft/applicationinsights-properties-js/dist-es5/Context/Device.js", "../../@microsoft/applicationinsights-properties-js/dist-es5/Context/Internal.js", "../../@microsoft/applicationinsights-properties-js/dist-es5/Context/Location.js", "../../@microsoft/applicationinsights-properties-js/dist-es5/__DynamicConstants.js", "../../@microsoft/applicationinsights-properties-js/dist-es5/Context/Session.js", "../../@microsoft/applicationinsights-properties-js/dist-es5/Context/TelemetryTrace.js", "../../@microsoft/applicationinsights-properties-js/dist-es5/Context/User.js", "../../@microsoft/applicationinsights-properties-js/dist-es5/TelemetryContext.js", "../../@microsoft/applicationinsights-properties-js/dist-es5/PropertiesPlugin.js", "../../@microsoft/applicationinsights-web/dist-es5/InternalConstants.js", "../../@microsoft/applicationinsights-web/dist-es5/__DynamicConstants.js", "../../@microsoft/applicationinsights-web/dist-es5/AISku.js", "../../@microsoft/applicationinsights-web/dist-es5/ApplicationInsightsContainer.js"],
  "sourcesContent": ["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n// @skip-file-minify\r\n// ##############################################################\r\n// AUTO GENERATED FILE: This file is Auto Generated during build.\r\n// ##############################################################\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n// Note: DON'T Export these const from the package as we are still targeting ES3 this will export a mutable variables that someone could change!!!\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\nexport var _DYN_TO_STRING = \"toString\"; // Count: 4\r\nexport var _DYN_IS_STORAGE_USE_DISAB0 = \"isStorageUseDisabled\"; // Count: 3\r\nexport var _DYN__ADD_HOOK = \"_addHook\"; // Count: 6\r\nexport var _DYN_CORE = \"core\"; // Count: 7\r\nexport var _DYN_DATA_TYPE = \"dataType\"; // Count: 8\r\nexport var _DYN_ENVELOPE_TYPE = \"envelopeType\"; // Count: 7\r\nexport var _DYN_DIAG_LOG = \"diagLog\"; // Count: 13\r\nexport var _DYN_TRACK = \"track\"; // Count: 7\r\nexport var _DYN_TRACK_PAGE_VIEW = \"trackPageView\"; // Count: 4\r\nexport var _DYN_TRACK_PREVIOUS_PAGE_1 = \"trackPreviousPageVisit\"; // Count: 3\r\nexport var _DYN_SEND_PAGE_VIEW_INTER2 = \"sendPageViewInternal\"; // Count: 7\r\nexport var _DYN_START_TIME = \"startTime\"; // Count: 6\r\nexport var _DYN_PROPERTIES = \"properties\"; // Count: 4\r\nexport var _DYN_DURATION = \"duration\"; // Count: 12\r\nexport var _DYN_SEND_PAGE_VIEW_PERFO3 = \"sendPageViewPerformanceInternal\"; // Count: 3\r\nexport var _DYN_POPULATE_PAGE_VIEW_P4 = \"populatePageViewPerformanceEvent\"; // Count: 3\r\nexport var _DYN_HREF = \"href\"; // Count: 6\r\nexport var _DYN_SEND_EXCEPTION_INTER5 = \"sendExceptionInternal\"; // Count: 2\r\nexport var _DYN_EXCEPTION = \"exception\"; // Count: 3\r\nexport var _DYN_ERROR = \"error\"; // Count: 5\r\nexport var _DYN__ONERROR = \"_onerror\"; // Count: 3\r\nexport var _DYN_ERROR_SRC = \"errorSrc\"; // Count: 3\r\nexport var _DYN_LINE_NUMBER = \"lineNumber\"; // Count: 5\r\nexport var _DYN_COLUMN_NUMBER = \"columnNumber\"; // Count: 5\r\nexport var _DYN_MESSAGE = \"message\"; // Count: 4\r\nexport var _DYN__CREATE_AUTO_EXCEPTI6 = \"CreateAutoException\"; // Count: 3\r\nexport var _DYN_ADD_TELEMETRY_INITIA7 = \"addTelemetryInitializer\"; // Count: 4\r\nexport var _DYN_OVERRIDE_PAGE_VIEW_D8 = \"overridePageViewDuration\"; // Count: 2\r\nexport var _DYN_AUTO_TRACK_PAGE_VISI9 = \"autoTrackPageVisitTime\"; // Count: 2\r\nexport var _DYN_IS_BROWSER_LINK_TRAC10 = \"isBrowserLinkTrackingEnabled\"; // Count: 2\r\nexport var _DYN_LENGTH = \"length\"; // Count: 5\r\nexport var _DYN_ENABLE_AUTO_ROUTE_TR11 = \"enableAutoRouteTracking\"; // Count: 2\r\nexport var _DYN_ENABLE_UNHANDLED_PRO12 = \"enableUnhandledPromiseRejectionTracking\"; // Count: 2\r\nexport var _DYN_AUTO_UNHANDLED_PROMI13 = \"autoUnhandledPromiseInstrumented\"; // Count: 3\r\nexport var _DYN_GET_ENTRIES_BY_TYPE = \"getEntriesByType\"; // Count: 5\r\nexport var _DYN_IS_PERFORMANCE_TIMIN14 = \"isPerformanceTimingSupported\"; // Count: 2\r\nexport var _DYN_GET_PERFORMANCE_TIMI15 = \"getPerformanceTiming\"; // Count: 2\r\nexport var _DYN_NAVIGATION_START = \"navigationStart\"; // Count: 4\r\nexport var _DYN_SHOULD_COLLECT_DURAT16 = \"shouldCollectDuration\"; // Count: 3\r\nexport var _DYN_IS_PERFORMANCE_TIMIN17 = \"isPerformanceTimingDataReady\"; // Count: 2\r\nexport var _DYN_RESPONSE_START = \"responseStart\"; // Count: 5\r\nexport var _DYN_REQUEST_START = \"requestStart\"; // Count: 3\r\nexport var _DYN_LOAD_EVENT_END = \"loadEventEnd\"; // Count: 4\r\nexport var _DYN_RESPONSE_END = \"responseEnd\"; // Count: 5\r\nexport var _DYN_CONNECT_END = \"connectEnd\"; // Count: 4\r\nexport var _DYN_PAGE_VISIT_START_TIM18 = \"pageVisitStartTime\"; // Count: 2\r\n//# sourceMappingURL=__DynamicConstants.js.map", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { dateTimeUtilsDuration } from \"@microsoft/applicationinsights-common\";\r\nimport { _throwInternal, arrForEach, dumpObj, getDocument, getExceptionName, getLocation, isNullOrUndefined } from \"@microsoft/applicationinsights-core-js\";\r\nimport { getPerformance, isUndefined, isWebWorker, scheduleTimeout } from \"@nevware21/ts-utils\";\r\nimport { _DYN_DURATION, _DYN_GET_ENTRIES_BY_TYPE, _DYN_GET_PERFORMANCE_TIMI15, _DYN_HREF, _DYN_IS_PERFORMANCE_TIMIN14, _DYN_IS_PERFORMANCE_TIMIN17, _DYN_LENGTH, _DYN_NAVIGATION_START, _DYN_POPULATE_PAGE_VIEW_P4, _DYN_PROPERTIES, _DYN_SEND_PAGE_VIEW_INTER2, _DYN_SEND_PAGE_VIEW_PERFO3, _DYN_SHOULD_COLLECT_DURAT16, _DYN_START_TIME, _DYN_TRACK_PAGE_VIEW } from \"../../__DynamicConstants\";\r\n/**\r\n * Class encapsulates sending page views and page view performance telemetry.\r\n */\r\nvar PageViewManager = /** @class */ (function () {\r\n    function PageViewManager(appInsights, overridePageViewDuration, core, pageViewPerformanceManager) {\r\n        dynamicProto(PageViewManager, this, function (_self) {\r\n            var queueTimer = null;\r\n            var itemQueue = [];\r\n            var pageViewPerformanceSent = false;\r\n            var firstPageViewSent = false;\r\n            var _logger;\r\n            if (core) {\r\n                _logger = core.logger;\r\n            }\r\n            function _flushChannels(isAsync) {\r\n                if (core) {\r\n                    core.flush(isAsync, function () {\r\n                        // Event flushed, callback added to prevent promise creation\r\n                    });\r\n                }\r\n            }\r\n            function _startTimer() {\r\n                if (!queueTimer) {\r\n                    queueTimer = scheduleTimeout((function () {\r\n                        queueTimer = null;\r\n                        var allItems = itemQueue.slice(0);\r\n                        var doFlush = false;\r\n                        itemQueue = [];\r\n                        arrForEach(allItems, function (item) {\r\n                            if (!item()) {\r\n                                // Not processed so rescheduled\r\n                                itemQueue.push(item);\r\n                            }\r\n                            else {\r\n                                doFlush = true;\r\n                            }\r\n                        });\r\n                        if (itemQueue[_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n                            _startTimer();\r\n                        }\r\n                        if (doFlush) {\r\n                            // We process at least one item so flush the queue\r\n                            _flushChannels(true);\r\n                        }\r\n                    }), 100);\r\n                }\r\n            }\r\n            function _addQueue(cb) {\r\n                itemQueue.push(cb);\r\n                _startTimer();\r\n            }\r\n            _self[_DYN_TRACK_PAGE_VIEW /* @min:%2etrackPageView */] = function (pageView, customProperties) {\r\n                var name = pageView.name;\r\n                if (isNullOrUndefined(name) || typeof name !== \"string\") {\r\n                    var doc = getDocument();\r\n                    name = pageView.name = doc && doc.title || \"\";\r\n                }\r\n                var uri = pageView.uri;\r\n                if (isNullOrUndefined(uri) || typeof uri !== \"string\") {\r\n                    var location_1 = getLocation();\r\n                    uri = pageView.uri = location_1 && location_1[_DYN_HREF /* @min:%2ehref */] || \"\";\r\n                }\r\n                if (!firstPageViewSent) {\r\n                    var perf = getPerformance();\r\n                    // Access the performance timing object\r\n                    var navigationEntries = (perf && perf[_DYN_GET_ENTRIES_BY_TYPE /* @min:%2egetEntriesByType */] && perf[_DYN_GET_ENTRIES_BY_TYPE /* @min:%2egetEntriesByType */](\"navigation\"));\r\n                    // Edge Case the navigation Entries may return an empty array and the timeOrigin is not supported on IE\r\n                    if (navigationEntries && navigationEntries[0] && !isUndefined(perf.timeOrigin)) {\r\n                        // Get the value of loadEventStart\r\n                        var loadEventStart = navigationEntries[0].loadEventStart;\r\n                        pageView[_DYN_START_TIME /* @min:%2estartTime */] = new Date(perf.timeOrigin + loadEventStart);\r\n                    }\r\n                    else {\r\n                        // calculate the start time manually\r\n                        var duration_1 = ((customProperties || pageView[_DYN_PROPERTIES /* @min:%2eproperties */] || {})[_DYN_DURATION /* @min:%2eduration */] || 0);\r\n                        pageView[_DYN_START_TIME /* @min:%2estartTime */] = new Date(new Date().getTime() - duration_1);\r\n                    }\r\n                    firstPageViewSent = true;\r\n                }\r\n                // case 1a. if performance timing is not supported by the browser, send the page view telemetry with the duration provided by the user. If the user\r\n                // do not provide the duration, set duration to undefined\r\n                // Also this is case 4\r\n                if (!pageViewPerformanceManager[_DYN_IS_PERFORMANCE_TIMIN14 /* @min:%2eisPerformanceTimingSupported */]()) {\r\n                    appInsights[_DYN_SEND_PAGE_VIEW_INTER2 /* @min:%2esendPageViewInternal */](pageView, customProperties);\r\n                    _flushChannels(true);\r\n                    if (!isWebWorker()) {\r\n                        // no navigation timing (IE 8, iOS Safari 8.4, Opera Mini 8 - see http://caniuse.com/#feat=nav-timing)\r\n                        _throwInternal(_logger, 2 /* eLoggingSeverity.WARNING */, 25 /* _eInternalMessageId.NavigationTimingNotSupported */, \"trackPageView: navigation timing API used for calculation of page duration is not supported in this browser. This page view will be collected without duration and timing info.\");\r\n                    }\r\n                    return;\r\n                }\r\n                var pageViewSent = false;\r\n                var customDuration;\r\n                // if the performance timing is supported by the browser, calculate the custom duration\r\n                var start = pageViewPerformanceManager[_DYN_GET_PERFORMANCE_TIMI15 /* @min:%2egetPerformanceTiming */]()[_DYN_NAVIGATION_START /* @min:%2enavigationStart */];\r\n                if (start > 0) {\r\n                    customDuration = dateTimeUtilsDuration(start, +new Date);\r\n                    if (!pageViewPerformanceManager[_DYN_SHOULD_COLLECT_DURAT16 /* @min:%2eshouldCollectDuration */](customDuration)) {\r\n                        customDuration = undefined;\r\n                    }\r\n                }\r\n                // if the user has provided duration, send a page view telemetry with the provided duration. Otherwise, if\r\n                // overridePageViewDuration is set to true, send a page view telemetry with the custom duration calculated earlier\r\n                var duration;\r\n                if (!isNullOrUndefined(customProperties) &&\r\n                    !isNullOrUndefined(customProperties[_DYN_DURATION /* @min:%2eduration */])) {\r\n                    duration = customProperties[_DYN_DURATION /* @min:%2eduration */];\r\n                }\r\n                if (overridePageViewDuration || !isNaN(duration)) {\r\n                    if (isNaN(duration)) {\r\n                        // case 3\r\n                        if (!customProperties) {\r\n                            customProperties = {};\r\n                        }\r\n                        customProperties[_DYN_DURATION /* @min:%2eduration */] = customDuration;\r\n                    }\r\n                    // case 2\r\n                    appInsights[_DYN_SEND_PAGE_VIEW_INTER2 /* @min:%2esendPageViewInternal */](pageView, customProperties);\r\n                    _flushChannels(true);\r\n                    pageViewSent = true;\r\n                }\r\n                // now try to send the page view performance telemetry\r\n                var maxDurationLimit = 60000;\r\n                if (!customProperties) {\r\n                    customProperties = {};\r\n                }\r\n                // Queue the event for processing\r\n                _addQueue(function () {\r\n                    var processed = false;\r\n                    try {\r\n                        if (pageViewPerformanceManager[_DYN_IS_PERFORMANCE_TIMIN17 /* @min:%2eisPerformanceTimingDataReady */]()) {\r\n                            processed = true;\r\n                            var pageViewPerformance = {\r\n                                name: name,\r\n                                uri: uri\r\n                            };\r\n                            pageViewPerformanceManager[_DYN_POPULATE_PAGE_VIEW_P4 /* @min:%2epopulatePageViewPerformanceEvent */](pageViewPerformance);\r\n                            if (!pageViewPerformance.isValid && !pageViewSent) {\r\n                                // If navigation timing gives invalid numbers, then go back to \"override page view duration\" mode.\r\n                                // That's the best value we can get that makes sense.\r\n                                customProperties[_DYN_DURATION /* @min:%2eduration */] = customDuration;\r\n                                appInsights[_DYN_SEND_PAGE_VIEW_INTER2 /* @min:%2esendPageViewInternal */](pageView, customProperties);\r\n                            }\r\n                            else {\r\n                                if (!pageViewSent) {\r\n                                    customProperties[_DYN_DURATION /* @min:%2eduration */] = pageViewPerformance.durationMs;\r\n                                    appInsights[_DYN_SEND_PAGE_VIEW_INTER2 /* @min:%2esendPageViewInternal */](pageView, customProperties);\r\n                                }\r\n                                if (!pageViewPerformanceSent) {\r\n                                    appInsights[_DYN_SEND_PAGE_VIEW_PERFO3 /* @min:%2esendPageViewPerformanceInternal */](pageViewPerformance, customProperties);\r\n                                    pageViewPerformanceSent = true;\r\n                                }\r\n                            }\r\n                        }\r\n                        else if (start > 0 && dateTimeUtilsDuration(start, +new Date) > maxDurationLimit) {\r\n                            // if performance timings are not ready but we exceeded the maximum duration limit, just log a page view telemetry\r\n                            // with the maximum duration limit. Otherwise, keep waiting until performance timings are ready\r\n                            processed = true;\r\n                            if (!pageViewSent) {\r\n                                customProperties[_DYN_DURATION /* @min:%2eduration */] = maxDurationLimit;\r\n                                appInsights[_DYN_SEND_PAGE_VIEW_INTER2 /* @min:%2esendPageViewInternal */](pageView, customProperties);\r\n                            }\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        _throwInternal(_logger, 1 /* eLoggingSeverity.CRITICAL */, 38 /* _eInternalMessageId.TrackPVFailedCalc */, \"trackPageView failed on page load calculation: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                    }\r\n                    return processed;\r\n                });\r\n            };\r\n            _self.teardown = function (unloadCtx, unloadState) {\r\n                if (queueTimer) {\r\n                    queueTimer.cancel();\r\n                    queueTimer = null;\r\n                    var allItems = itemQueue.slice(0);\r\n                    var doFlush_1 = false;\r\n                    itemQueue = [];\r\n                    arrForEach(allItems, function (item) {\r\n                        if (item()) {\r\n                            doFlush_1 = true;\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n        });\r\n    }\r\n    /**\r\n     * Currently supported cases:\r\n     * 1) (default case) track page view called with default parameters, overridePageViewDuration = false. Page view is sent with page view performance when navigation timing data is available.\r\n     *    a. If navigation timing is not supported then page view is sent right away with undefined duration. Page view performance is not sent.\r\n     * 2) overridePageViewDuration = true, custom duration provided. Custom duration is used, page view sends right away.\r\n     * 3) overridePageViewDuration = true, custom duration NOT provided. Page view is sent right away, duration is time spent from page load till now (or undefined if navigation timing is not supported).\r\n     * 4) overridePageViewDuration = false, custom duration is provided. Page view is sent right away with custom duration.\r\n     *\r\n     * In all cases page view performance is sent once (only for the 1st call of trackPageView), or not sent if navigation timing is not supported.\r\n     */\r\n    PageViewManager.prototype.trackPageView = function (pageView, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    PageViewManager.prototype.teardown = function (unloadCtx, unloadState) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    return PageViewManager;\r\n}());\r\nexport { PageViewManager };\r\n//# sourceMappingURL=PageViewManager.js.map", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { dateTimeUtilsDuration, msToTimeSpan } from \"@microsoft/applicationinsights-common\";\r\nimport { _throwInternal, getNavigator, getPerformance, safeGetLogger } from \"@microsoft/applicationinsights-core-js\";\r\nimport { strIndexOf } from \"@nevware21/ts-utils\";\r\nimport { _DYN_CONNECT_END, _DYN_DURATION, _DYN_GET_ENTRIES_BY_TYPE, _DYN_GET_PERFORMANCE_TIMI15, _DYN_IS_PERFORMANCE_TIMIN14, _DYN_IS_PERFORMANCE_TIMIN17, _DYN_LENGTH, _DYN_LOAD_EVENT_END, _DYN_NAVIGATION_START, _DYN_POPULATE_PAGE_VIEW_P4, _DYN_REQUEST_START, _DYN_RESPONSE_END, _DYN_RESPONSE_START, _DYN_SHOULD_COLLECT_DURAT16, _DYN_START_TIME } from \"../../__DynamicConstants\";\r\nvar MAX_DURATION_ALLOWED = 3600000; // 1h\r\nvar botAgentNames = [\"googlebot\", \"adsbot-google\", \"apis-google\", \"mediapartners-google\"];\r\nfunction _isPerformanceTimingSupported() {\r\n    var perf = getPerformance();\r\n    return perf && !!perf.timing;\r\n}\r\nfunction _isPerformanceNavigationTimingSupported() {\r\n    var perf = getPerformance();\r\n    return perf && perf.getEntriesByType && perf.getEntriesByType(\"navigation\")[_DYN_LENGTH /* @min:%2elength */] > 0;\r\n}\r\nfunction _isPerformanceTimingDataReady() {\r\n    var perf = getPerformance();\r\n    var timing = perf ? perf.timing : 0;\r\n    return timing\r\n        && timing.domainLookupStart > 0\r\n        && timing[_DYN_NAVIGATION_START /* @min:%2enavigationStart */] > 0\r\n        && timing[_DYN_RESPONSE_START /* @min:%2eresponseStart */] > 0\r\n        && timing[_DYN_REQUEST_START /* @min:%2erequestStart */] > 0\r\n        && timing[_DYN_LOAD_EVENT_END /* @min:%2eloadEventEnd */] > 0\r\n        && timing[_DYN_RESPONSE_END /* @min:%2eresponseEnd */] > 0\r\n        && timing[_DYN_CONNECT_END /* @min:%2econnectEnd */] > 0\r\n        && timing.domLoading > 0;\r\n}\r\nfunction _getPerformanceTiming() {\r\n    if (_isPerformanceTimingSupported()) {\r\n        return getPerformance().timing;\r\n    }\r\n    return null;\r\n}\r\nfunction _getPerformanceNavigationTiming() {\r\n    if (_isPerformanceNavigationTimingSupported()) {\r\n        return getPerformance()[_DYN_GET_ENTRIES_BY_TYPE /* @min:%2egetEntriesByType */](\"navigation\")[0];\r\n    }\r\n    return null;\r\n}\r\n/**\r\n* This method tells if given durations should be excluded from collection.\r\n*/\r\nfunction _shouldCollectDuration() {\r\n    var durations = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        durations[_i] = arguments[_i];\r\n    }\r\n    var _navigator = getNavigator() || {};\r\n    // a full list of Google crawlers user agent strings - https://support.google.com/webmasters/answer/1061943?hl=en\r\n    var userAgent = _navigator.userAgent;\r\n    var isGoogleBot = false;\r\n    if (userAgent) {\r\n        for (var i = 0; i < botAgentNames[_DYN_LENGTH /* @min:%2elength */]; i++) {\r\n            isGoogleBot = isGoogleBot || strIndexOf(userAgent.toLowerCase(), botAgentNames[i]) !== -1;\r\n        }\r\n    }\r\n    if (isGoogleBot) {\r\n        // Don't report durations for GoogleBot, it is returning invalid values in performance.timing API.\r\n        return false;\r\n    }\r\n    else {\r\n        // for other page views, don't report if it's outside of a reasonable range\r\n        for (var i = 0; i < durations[_DYN_LENGTH /* @min:%2elength */]; i++) {\r\n            if (durations[i] < 0 || durations[i] >= MAX_DURATION_ALLOWED) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Class encapsulates sending page view performance telemetry.\r\n */\r\nvar PageViewPerformanceManager = /** @class */ (function () {\r\n    function PageViewPerformanceManager(core) {\r\n        var _logger = safeGetLogger(core);\r\n        dynamicProto(PageViewPerformanceManager, this, function (_self) {\r\n            _self[_DYN_POPULATE_PAGE_VIEW_P4 /* @min:%2epopulatePageViewPerformanceEvent */] = function (pageViewPerformance) {\r\n                pageViewPerformance.isValid = false;\r\n                /*\r\n                 * http://www.w3.org/TR/navigation-timing/#processing-model\r\n                 *  |-navigationStart\r\n                 *  |             |-connectEnd\r\n                 *  |             ||-requestStart\r\n                 *  |             ||             |-responseStart\r\n                 *  |             ||             |              |-responseEnd\r\n                 *  |             ||             |              |\r\n                 *  |             ||             |              |         |-loadEventEnd\r\n                 *  |---network---||---request---|---response---|---dom---|\r\n                 *  |--------------------------total----------------------|\r\n                 *\r\n                 *  total = The difference between the load event of the current document is completed and the first recorded timestamp of the performance entry : https://developer.mozilla.org/en-US/docs/Web/Performance/Navigation_and_resource_timings#duration\r\n                 *  network = Redirect time + App Cache + DNS lookup time + TCP connection time\r\n                 *  request = Request time : https://developer.mozilla.org/en-US/docs/Web/Performance/Navigation_and_resource_timings#request_time\r\n                 *  response = Response time\r\n                 *  dom = Document load time : https://html.spec.whatwg.org/multipage/dom.html#document-load-timing-info\r\n                 *      = Document processing time : https://developers.google.com/web/fundamentals/performance/navigation-and-resource-timing/#document_processing\r\n                 *      + Loading time : https://developers.google.com/web/fundamentals/performance/navigation-and-resource-timing/#loading\r\n                 */\r\n                var navigationTiming = _getPerformanceNavigationTiming();\r\n                var timing = _getPerformanceTiming();\r\n                var total = 0;\r\n                var network = 0;\r\n                var request = 0;\r\n                var response = 0;\r\n                var dom = 0;\r\n                if (navigationTiming || timing) {\r\n                    if (navigationTiming) {\r\n                        total = navigationTiming[_DYN_DURATION /* @min:%2eduration */];\r\n                        /**\r\n                         * support both cases:\r\n                         * - startTime is always zero: https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming\r\n                         * - for older browsers where the startTime is not zero\r\n                         */\r\n                        network = navigationTiming[_DYN_START_TIME /* @min:%2estartTime */] === 0 ? navigationTiming[_DYN_CONNECT_END /* @min:%2econnectEnd */] : dateTimeUtilsDuration(navigationTiming[_DYN_START_TIME /* @min:%2estartTime */], navigationTiming[_DYN_CONNECT_END /* @min:%2econnectEnd */]);\r\n                        request = dateTimeUtilsDuration(navigationTiming.requestStart, navigationTiming[_DYN_RESPONSE_START /* @min:%2eresponseStart */]);\r\n                        response = dateTimeUtilsDuration(navigationTiming[_DYN_RESPONSE_START /* @min:%2eresponseStart */], navigationTiming[_DYN_RESPONSE_END /* @min:%2eresponseEnd */]);\r\n                        dom = dateTimeUtilsDuration(navigationTiming.responseEnd, navigationTiming[_DYN_LOAD_EVENT_END /* @min:%2eloadEventEnd */]);\r\n                    }\r\n                    else {\r\n                        total = dateTimeUtilsDuration(timing[_DYN_NAVIGATION_START /* @min:%2enavigationStart */], timing[_DYN_LOAD_EVENT_END /* @min:%2eloadEventEnd */]);\r\n                        network = dateTimeUtilsDuration(timing[_DYN_NAVIGATION_START /* @min:%2enavigationStart */], timing[_DYN_CONNECT_END /* @min:%2econnectEnd */]);\r\n                        request = dateTimeUtilsDuration(timing.requestStart, timing[_DYN_RESPONSE_START /* @min:%2eresponseStart */]);\r\n                        response = dateTimeUtilsDuration(timing[_DYN_RESPONSE_START /* @min:%2eresponseStart */], timing[_DYN_RESPONSE_END /* @min:%2eresponseEnd */]);\r\n                        dom = dateTimeUtilsDuration(timing.responseEnd, timing[_DYN_LOAD_EVENT_END /* @min:%2eloadEventEnd */]);\r\n                    }\r\n                    if (total === 0) {\r\n                        _throwInternal(_logger, 2 /* eLoggingSeverity.WARNING */, 10 /* _eInternalMessageId.ErrorPVCalc */, \"error calculating page view performance.\", { total: total, network: network, request: request, response: response, dom: dom });\r\n                    }\r\n                    else if (!_self[_DYN_SHOULD_COLLECT_DURAT16 /* @min:%2eshouldCollectDuration */](total, network, request, response, dom)) {\r\n                        _throwInternal(_logger, 2 /* eLoggingSeverity.WARNING */, 45 /* _eInternalMessageId.InvalidDurationValue */, \"Invalid page load duration value. Browser perf data won't be sent.\", { total: total, network: network, request: request, response: response, dom: dom });\r\n                    }\r\n                    else if (total < Math.floor(network) + Math.floor(request) + Math.floor(response) + Math.floor(dom)) {\r\n                        // some browsers may report individual components incorrectly so that the sum of the parts will be bigger than total PLT\r\n                        // in this case, don't report client performance from this page\r\n                        _throwInternal(_logger, 2 /* eLoggingSeverity.WARNING */, 8 /* _eInternalMessageId.ClientPerformanceMathError */, \"client performance math error.\", { total: total, network: network, request: request, response: response, dom: dom });\r\n                    }\r\n                    else {\r\n                        pageViewPerformance.durationMs = total;\r\n                        // // convert to timespans\r\n                        pageViewPerformance.perfTotal = pageViewPerformance[_DYN_DURATION /* @min:%2eduration */] = msToTimeSpan(total);\r\n                        pageViewPerformance.networkConnect = msToTimeSpan(network);\r\n                        pageViewPerformance.sentRequest = msToTimeSpan(request);\r\n                        pageViewPerformance.receivedResponse = msToTimeSpan(response);\r\n                        pageViewPerformance.domProcessing = msToTimeSpan(dom);\r\n                        pageViewPerformance.isValid = true;\r\n                    }\r\n                }\r\n            };\r\n            _self[_DYN_GET_PERFORMANCE_TIMI15 /* @min:%2egetPerformanceTiming */] = _getPerformanceTiming;\r\n            _self[_DYN_IS_PERFORMANCE_TIMIN14 /* @min:%2eisPerformanceTimingSupported */] = _isPerformanceTimingSupported;\r\n            _self[_DYN_IS_PERFORMANCE_TIMIN17 /* @min:%2eisPerformanceTimingDataReady */] = _isPerformanceTimingDataReady;\r\n            _self[_DYN_SHOULD_COLLECT_DURAT16 /* @min:%2eshouldCollectDuration */] = _shouldCollectDuration;\r\n        });\r\n    }\r\n    PageViewPerformanceManager.prototype.populatePageViewPerformanceEvent = function (pageViewPerformance) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    PageViewPerformanceManager.prototype.getPerformanceTiming = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n    * Returns true is window performance timing API is supported, false otherwise.\r\n    */\r\n    PageViewPerformanceManager.prototype.isPerformanceTimingSupported = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return true;\r\n    };\r\n    /**\r\n    * As page loads different parts of performance timing numbers get set. When all of them are set we can report it.\r\n    * Returns true if ready, false otherwise.\r\n    */\r\n    PageViewPerformanceManager.prototype.isPerformanceTimingDataReady = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return true;\r\n    };\r\n    /**\r\n    * This method tells if given durations should be excluded from collection.\r\n    */\r\n    PageViewPerformanceManager.prototype.shouldCollectDuration = function () {\r\n        var durations = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            durations[_i] = arguments[_i];\r\n        }\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return true;\r\n    };\r\n    return PageViewPerformanceManager;\r\n}());\r\nexport { PageViewPerformanceManager };\r\n//# sourceMappingURL=PageViewPerformanceManager.js.map", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { utlCanUseSessionStorage, utlGetSessionStorage, utlRemoveSessionStorage, utlSetSessionStorage } from \"@microsoft/applicationinsights-common\";\r\nimport { _warnToConsole, dateNow, dumpObj, getJSON, hasJSON, throwError } from \"@microsoft/applicationinsights-core-js\";\r\nimport { objDefine } from \"@nevware21/ts-utils\";\r\nimport { _DYN_PAGE_VISIT_START_TIM18, _DYN_TRACK_PREVIOUS_PAGE_1 } from \"../../__DynamicConstants\";\r\n/**\r\n * Used to track page visit durations\r\n */\r\nvar PageVisitTimeManager = /** @class */ (function () {\r\n    /**\r\n     * Creates a new instance of PageVisitTimeManager\r\n     * @param pageVisitTimeTrackingHandler - Delegate that will be called to send telemetry data to AI (when trackPreviousPageVisit is called)\r\n     * @returns {}\r\n     */\r\n    function PageVisitTimeManager(logger, pageVisitTimeTrackingHandler) {\r\n        var prevPageVisitDataKeyName = \"prevPageVisitData\";\r\n        dynamicProto(PageVisitTimeManager, this, function (_self) {\r\n            _self[_DYN_TRACK_PREVIOUS_PAGE_1 /* @min:%2etrackPreviousPageVisit */] = function (currentPageName, currentPageUrl) {\r\n                try {\r\n                    // Restart timer for new page view\r\n                    var prevPageVisitTimeData = restartPageVisitTimer(currentPageName, currentPageUrl);\r\n                    // If there was a page already being timed, track the visit time for it now.\r\n                    if (prevPageVisitTimeData) {\r\n                        pageVisitTimeTrackingHandler(prevPageVisitTimeData.pageName, prevPageVisitTimeData.pageUrl, prevPageVisitTimeData.pageVisitTime);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    _warnToConsole(logger, \"Auto track page visit time failed, metric will not be collected: \" + dumpObj(e));\r\n                }\r\n            };\r\n            /**\r\n             * Stops timing of current page (if exists) and starts timing for duration of visit to pageName\r\n             * @param pageName - Name of page to begin timing visit duration\r\n             * @returns {PageVisitData} Page visit data (including duration) of pageName from last call to start or restart, if exists. Null if not.\r\n             */\r\n            function restartPageVisitTimer(pageName, pageUrl) {\r\n                var prevPageVisitData = null;\r\n                try {\r\n                    prevPageVisitData = stopPageVisitTimer();\r\n                    if (utlCanUseSessionStorage()) {\r\n                        if (utlGetSessionStorage(logger, prevPageVisitDataKeyName) != null) {\r\n                            throwError(\"Cannot call startPageVisit consecutively without first calling stopPageVisit\");\r\n                        }\r\n                        var currPageVisitDataStr = getJSON().stringify(new PageVisitData(pageName, pageUrl));\r\n                        utlSetSessionStorage(logger, prevPageVisitDataKeyName, currPageVisitDataStr);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    _warnToConsole(logger, \"Call to restart failed: \" + dumpObj(e));\r\n                    prevPageVisitData = null;\r\n                }\r\n                return prevPageVisitData;\r\n            }\r\n            /**\r\n             * Stops timing of current page, if exists.\r\n             * @returns {PageVisitData} Page visit data (including duration) of pageName from call to start, if exists. Null if not.\r\n             */\r\n            function stopPageVisitTimer() {\r\n                var prevPageVisitData = null;\r\n                try {\r\n                    if (utlCanUseSessionStorage()) {\r\n                        // Define end time of page's visit\r\n                        var pageVisitEndTime = dateNow();\r\n                        // Try to retrieve  page name and start time from session storage\r\n                        var pageVisitDataJsonStr = utlGetSessionStorage(logger, prevPageVisitDataKeyName);\r\n                        if (pageVisitDataJsonStr && hasJSON()) {\r\n                            // if previous page data exists, set end time of visit\r\n                            prevPageVisitData = getJSON().parse(pageVisitDataJsonStr);\r\n                            prevPageVisitData.pageVisitTime = pageVisitEndTime - prevPageVisitData[_DYN_PAGE_VISIT_START_TIM18 /* @min:%2epageVisitStartTime */];\r\n                            // Remove data from storage since we already used it\r\n                            utlRemoveSessionStorage(logger, prevPageVisitDataKeyName);\r\n                        }\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    _warnToConsole(logger, \"Stop page visit timer failed: \" + dumpObj(e));\r\n                    prevPageVisitData = null;\r\n                }\r\n                return prevPageVisitData;\r\n            }\r\n            // For backward compatibility\r\n            objDefine(_self, \"_logger\", { g: function () { return logger; } });\r\n            objDefine(_self, \"pageVisitTimeTrackingHandler\", { g: function () { return pageVisitTimeTrackingHandler; } });\r\n        });\r\n    }\r\n    /**\r\n    * Tracks the previous page visit time telemetry (if exists) and starts timing of new page visit time\r\n    * @param currentPageName - Name of page to begin timing for visit duration\r\n    * @param currentPageUrl - Url of page to begin timing for visit duration\r\n    */\r\n    PageVisitTimeManager.prototype.trackPreviousPageVisit = function (currentPageName, currentPageUrl) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    return PageVisitTimeManager;\r\n}());\r\nexport { PageVisitTimeManager };\r\nvar PageVisitData = /** @class */ (function () {\r\n    function PageVisitData(pageName, pageUrl) {\r\n        this[_DYN_PAGE_VISIT_START_TIM18 /* @min:%2epageVisitStartTime */] = dateNow();\r\n        this.pageName = pageName;\r\n        this.pageUrl = pageUrl;\r\n    }\r\n    return PageVisitData;\r\n}());\r\nexport { PageVisitData };\r\n//# sourceMappingURL=PageVisitTimeManager.js.map", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { dateTimeUtilsDuration } from \"@microsoft/applicationinsights-common\";\r\nimport { _throwInternal } from \"@microsoft/applicationinsights-core-js\";\r\n/**\r\n * Used to record timed events and page views.\r\n */\r\nvar Timing = /** @class */ (function () {\r\n    function Timing(logger, name) {\r\n        var _self = this;\r\n        var _events = {};\r\n        _self.start = function (name) {\r\n            if (typeof _events[name] !== \"undefined\") {\r\n                _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 62 /* _eInternalMessageId.StartCalledMoreThanOnce */, \"start was called more than once for this event without calling stop.\", { name: name, key: name }, true);\r\n            }\r\n            _events[name] = +new Date;\r\n        };\r\n        _self.stop = function (name, url, properties, measurements) {\r\n            var start = _events[name];\r\n            if (isNaN(start)) {\r\n                _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 63 /* _eInternalMessageId.StopCalledWithoutStart */, \"stop was called without a corresponding start.\", { name: name, key: name }, true);\r\n            }\r\n            else {\r\n                var end = +new Date;\r\n                var duration = dateTimeUtilsDuration(start, end);\r\n                _self.action(name, url, duration, properties, measurements);\r\n            }\r\n            delete _events[name];\r\n            _events[name] = undefined;\r\n        };\r\n    }\r\n    return Timing;\r\n}());\r\nexport { Timing };\r\n//# sourceMappingURL=Timing.js.map", "/**\r\n* ApplicationInsights.ts\r\n* @copyright Microsoft 2018\r\n*/\r\nvar _a;\r\nimport { __assign, __extends } from \"tslib\";\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { AnalyticsPluginIdentifier, Event as EventTelemetry, Exception, Metric, PageView, PageViewPerformance, PropertiesPluginIdentifier, RemoteDependencyData, Trace, createDistributedTraceContextFromTrace, createDomEvent, createTelemetryItem, dataSanitizeString, isCrossOriginError, strNotSpecified, utlDisableStorage, utlEnableStorage, utlSetStoragePrefix } from \"@microsoft/applicationinsights-common\";\r\nimport { BaseTelemetryPlugin, InstrumentEvent, arrForEach, cfgDfBoolean, cfgDfMerge, cfgDfSet, cfgDfString, cfgDfValidate, createProcessTelemetryContext, createUniqueNamespace, dumpObj, eventOff, eventOn, findAllScripts, generateW3CId, getDocument, getExceptionName, getHistory, getLocation, getWindow, hasHistory, hasWindow, isFunction, isNullOrUndefined, isString, isUndefined, mergeEvtNamespace, onConfigChange, safeGetCookieMgr, strUndefined, throwError } from \"@microsoft/applicationinsights-core-js\";\r\nimport { isError, objDeepFreeze, objDefine, scheduleTimeout, strIndexOf } from \"@nevware21/ts-utils\";\r\nimport { _DYN_ADD_TELEMETRY_INITIA7, _DYN_AUTO_TRACK_PAGE_VISI9, _DYN_AUTO_UNHANDLED_PROMI13, _DYN_COLUMN_NUMBER, _DYN_CORE, _DYN_DATA_TYPE, _DYN_DIAG_LOG, _DYN_DURATION, _DYN_ENABLE_AUTO_ROUTE_TR11, _DYN_ENABLE_UNHANDLED_PRO12, _DYN_ENVELOPE_TYPE, _DYN_ERROR, _DYN_ERROR_SRC, _DYN_EXCEPTION, _DYN_HREF, _DYN_IS_BROWSER_LINK_TRAC10, _DYN_IS_STORAGE_USE_DISAB0, _DYN_LENGTH, _DYN_LINE_NUMBER, _DYN_MESSAGE, _DYN_OVERRIDE_PAGE_VIEW_D8, _DYN_POPULATE_PAGE_VIEW_P4, _DYN_PROPERTIES, _DYN_SEND_EXCEPTION_INTER5, _DYN_SEND_PAGE_VIEW_INTER2, _DYN_SEND_PAGE_VIEW_PERFO3, _DYN_START_TIME, _DYN_TO_STRING, _DYN_TRACK, _DYN_TRACK_PAGE_VIEW, _DYN_TRACK_PREVIOUS_PAGE_1, _DYN__ADD_HOOK, _DYN__CREATE_AUTO_EXCEPTI6, _DYN__ONERROR } from \"../__DynamicConstants\";\r\nimport { PageViewManager } from \"./Telemetry/PageViewManager\";\r\nimport { PageViewPerformanceManager } from \"./Telemetry/PageViewPerformanceManager\";\r\nimport { PageVisitTimeManager } from \"./Telemetry/PageVisitTimeManager\";\r\nimport { Timing } from \"./Timing\";\r\nvar strEvent = \"event\";\r\nfunction _dispatchEvent(target, evnt) {\r\n    if (target && target.dispatchEvent && evnt) {\r\n        target.dispatchEvent(evnt);\r\n    }\r\n}\r\nfunction _getReason(error) {\r\n    if (error && error.reason) {\r\n        var reason = error.reason;\r\n        if (!isString(reason) && isFunction(reason[_DYN_TO_STRING /* @min:%2etoString */])) {\r\n            return reason[_DYN_TO_STRING /* @min:%2etoString */]();\r\n        }\r\n        return dumpObj(reason);\r\n    }\r\n    // Pass the original object down which will eventually get evaluated for any message or description\r\n    return error || \"\";\r\n}\r\nvar MinMilliSeconds = 60000;\r\nvar defaultValues = objDeepFreeze((_a = {\r\n        sessionRenewalMs: cfgDfSet(_chkConfigMilliseconds, 30 * 60 * 1000),\r\n        sessionExpirationMs: cfgDfSet(_chkConfigMilliseconds, 24 * 60 * 60 * 1000),\r\n        disableExceptionTracking: cfgDfBoolean()\r\n    },\r\n    _a[_DYN_AUTO_TRACK_PAGE_VISI9 /* @min:autoTrackPageVisitTime */] = cfgDfBoolean(),\r\n    _a[_DYN_OVERRIDE_PAGE_VIEW_D8 /* @min:overridePageViewDuration */] = cfgDfBoolean(),\r\n    _a[_DYN_ENABLE_UNHANDLED_PRO12 /* @min:enableUnhandledPromiseRejectionTracking */] = cfgDfBoolean(),\r\n    _a[_DYN_AUTO_UNHANDLED_PROMI13 /* @min:autoUnhandledPromiseInstrumented */] = false,\r\n    _a.samplingPercentage = cfgDfValidate(_chkSampling, 100),\r\n    _a[_DYN_IS_STORAGE_USE_DISAB0 /* @min:isStorageUseDisabled */] = cfgDfBoolean(),\r\n    _a[_DYN_IS_BROWSER_LINK_TRAC10 /* @min:isBrowserLinkTrackingEnabled */] = cfgDfBoolean(),\r\n    _a[_DYN_ENABLE_AUTO_ROUTE_TR11 /* @min:enableAutoRouteTracking */] = cfgDfBoolean(),\r\n    _a.namePrefix = cfgDfString(),\r\n    _a.enableDebug = cfgDfBoolean(),\r\n    _a.disableFlushOnBeforeUnload = cfgDfBoolean(),\r\n    _a.disableFlushOnUnload = cfgDfBoolean(false, \"disableFlushOnBeforeUnload\"),\r\n    _a.expCfg = cfgDfMerge({ inclScripts: false }),\r\n    _a));\r\nfunction _chkConfigMilliseconds(value, defValue) {\r\n    value = value || defValue;\r\n    if (value < MinMilliSeconds) {\r\n        value = MinMilliSeconds;\r\n    }\r\n    return +value;\r\n}\r\nfunction _chkSampling(value) {\r\n    return !isNaN(value) && value > 0 && value <= 100;\r\n}\r\nfunction _updateStorageUsage(extConfig) {\r\n    // Not resetting the storage usage as someone may have manually called utlDisableStorage, so this will only\r\n    // reset based if the configuration option is provided\r\n    if (!isUndefined(extConfig[_DYN_IS_STORAGE_USE_DISAB0 /* @min:%2eisStorageUseDisabled */])) {\r\n        if (extConfig[_DYN_IS_STORAGE_USE_DISAB0 /* @min:%2eisStorageUseDisabled */]) {\r\n            utlDisableStorage();\r\n        }\r\n        else {\r\n            utlEnableStorage();\r\n        }\r\n    }\r\n}\r\nvar AnalyticsPlugin = /** @class */ (function (_super) {\r\n    __extends(AnalyticsPlugin, _super);\r\n    function AnalyticsPlugin() {\r\n        var _this = _super.call(this) || this;\r\n        _this.identifier = AnalyticsPluginIdentifier; // do not change name or priority\r\n        _this.priority = 180; // take from reserved priority range 100- 200\r\n        _this.autoRoutePVDelay = 500; // ms; Time to wait after a route change before triggering a pageview to allow DOM changes to take place\r\n        var _eventTracking;\r\n        var _pageTracking;\r\n        var _pageViewManager;\r\n        var _pageViewPerformanceManager;\r\n        var _pageVisitTimeManager;\r\n        var _preInitTelemetryInitializers;\r\n        var _isBrowserLinkTrackingEnabled;\r\n        var _browserLinkInitializerAdded;\r\n        var _enableAutoRouteTracking;\r\n        var _historyListenerAdded;\r\n        var _disableExceptionTracking;\r\n        var _autoExceptionInstrumented;\r\n        var _enableUnhandledPromiseRejectionTracking;\r\n        var _autoUnhandledPromiseInstrumented;\r\n        var _extConfig;\r\n        var _autoTrackPageVisitTime;\r\n        // Counts number of trackAjax invocations.\r\n        // By default we only monitor X ajax call per view to avoid too much load.\r\n        // Default value is set in config.\r\n        // This counter keeps increasing even after the limit is reached.\r\n        var _trackAjaxAttempts = 0;\r\n        // array with max length of 2 that store current url and previous url for SPA page route change trackPageview use.\r\n        var _prevUri; // Assigned in the constructor\r\n        var _currUri;\r\n        var _evtNamespace;\r\n        dynamicProto(AnalyticsPlugin, _this, function (_self, _base) {\r\n            var _addHook = _base[_DYN__ADD_HOOK /* @min:%2e_addHook */];\r\n            _initDefaults();\r\n            _self.getCookieMgr = function () {\r\n                return safeGetCookieMgr(_self[_DYN_CORE /* @min:%2ecore */]);\r\n            };\r\n            _self.processTelemetry = function (env, itemCtx) {\r\n                _self.processNext(env, itemCtx);\r\n            };\r\n            _self.trackEvent = function (event, customProperties) {\r\n                try {\r\n                    var telemetryItem = createTelemetryItem(event, EventTelemetry[_DYN_DATA_TYPE /* @min:%2edataType */], EventTelemetry[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], _self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), customProperties);\r\n                    _self[_DYN_CORE /* @min:%2ecore */][_DYN_TRACK /* @min:%2etrack */](telemetryItem);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(2 /* eLoggingSeverity.WARNING */, 39 /* _eInternalMessageId.TrackTraceFailed */, \"trackTrace failed, trace will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * Start timing an extended event. Call `stopTrackEvent` to log the event when it ends.\r\n             * @param   name    A string that identifies this event uniquely within the document.\r\n             */\r\n            _self.startTrackEvent = function (name) {\r\n                try {\r\n                    _eventTracking.start(name);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 29 /* _eInternalMessageId.StartTrackEventFailed */, \"startTrackEvent failed, event will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * Log an extended event that you started timing with `startTrackEvent`.\r\n             * @param   name    The string you used to identify this event in `startTrackEvent`.\r\n             * @param   properties  map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.\r\n             * @param   measurements    map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n             */\r\n            _self.stopTrackEvent = function (name, properties, measurements) {\r\n                try {\r\n                    _eventTracking.stop(name, undefined, properties, measurements);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 30 /* _eInternalMessageId.StopTrackEventFailed */, \"stopTrackEvent failed, event will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * @description Log a diagnostic message\r\n             * @param trace\r\n             * @param ICustomProperties.\r\n             * @memberof ApplicationInsights\r\n             */\r\n            _self.trackTrace = function (trace, customProperties) {\r\n                try {\r\n                    var telemetryItem = createTelemetryItem(trace, Trace[_DYN_DATA_TYPE /* @min:%2edataType */], Trace[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], _self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), customProperties);\r\n                    _self[_DYN_CORE /* @min:%2ecore */][_DYN_TRACK /* @min:%2etrack */](telemetryItem);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(2 /* eLoggingSeverity.WARNING */, 39 /* _eInternalMessageId.TrackTraceFailed */, \"trackTrace failed, trace will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * @description Log a numeric value that is not associated with a specific event. Typically\r\n             * used to send regular reports of performance indicators. To send single measurement, just\r\n             * use the name and average fields of {@link IMetricTelemetry}. If you take measurements\r\n             * frequently, you can reduce the telemetry bandwidth by aggregating multiple measurements\r\n             * and sending the resulting average at intervals\r\n             * @param metric - input object argument. Only name and average are mandatory.\r\n             * @param } customProperties additional data used to filter metrics in the\r\n             * portal. Defaults to empty.\r\n             * @memberof ApplicationInsights\r\n             */\r\n            _self.trackMetric = function (metric, customProperties) {\r\n                try {\r\n                    var telemetryItem = createTelemetryItem(metric, Metric[_DYN_DATA_TYPE /* @min:%2edataType */], Metric[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], _self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), customProperties);\r\n                    _self[_DYN_CORE /* @min:%2ecore */][_DYN_TRACK /* @min:%2etrack */](telemetryItem);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 36 /* _eInternalMessageId.TrackMetricFailed */, \"trackMetric failed, metric will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * Logs that a page or other item was viewed.\r\n             * @param IPageViewTelemetry - The string you used as the name in startTrackPage. Defaults to the document title.\r\n             * @param customProperties - Additional data used to filter events and metrics. Defaults to empty.\r\n             * If a user wants to provide duration for pageLoad, it'll have to be in pageView.properties.duration\r\n             */\r\n            _self[_DYN_TRACK_PAGE_VIEW /* @min:%2etrackPageView */] = function (pageView, customProperties) {\r\n                try {\r\n                    var inPv = pageView || {};\r\n                    _pageViewManager[_DYN_TRACK_PAGE_VIEW /* @min:%2etrackPageView */](inPv, __assign(__assign(__assign({}, inPv.properties), inPv.measurements), customProperties));\r\n                    if (_autoTrackPageVisitTime) {\r\n                        _pageVisitTimeManager[_DYN_TRACK_PREVIOUS_PAGE_1 /* @min:%2etrackPreviousPageVisit */](inPv.name, inPv.uri);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 37 /* _eInternalMessageId.TrackPVFailed */, \"trackPageView failed, page view will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * Create a page view telemetry item and send it to the SDK pipeline through the core.track API\r\n             * @param pageView - Page view item to be sent\r\n             * @param properties - Custom properties (Part C) that a user can add to the telemetry item\r\n             * @param systemProperties - System level properties (Part A) that a user can add to the telemetry item\r\n             */\r\n            _self[_DYN_SEND_PAGE_VIEW_INTER2 /* @min:%2esendPageViewInternal */] = function (pageView, properties, systemProperties) {\r\n                var doc = getDocument();\r\n                if (doc) {\r\n                    pageView.refUri = pageView.refUri === undefined ? doc.referrer : pageView.refUri;\r\n                }\r\n                if (isNullOrUndefined(pageView[_DYN_START_TIME /* @min:%2estartTime */])) {\r\n                    // calculate the start time manually\r\n                    var duration = ((properties || pageView[_DYN_PROPERTIES /* @min:%2eproperties */] || {})[_DYN_DURATION /* @min:%2eduration */] || 0);\r\n                    pageView[_DYN_START_TIME /* @min:%2estartTime */] = new Date(new Date().getTime() - duration);\r\n                }\r\n                var telemetryItem = createTelemetryItem(pageView, PageView[_DYN_DATA_TYPE /* @min:%2edataType */], PageView[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], _self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), properties, systemProperties);\r\n                _self[_DYN_CORE /* @min:%2ecore */][_DYN_TRACK /* @min:%2etrack */](telemetryItem);\r\n                // reset ajaxes counter\r\n                _trackAjaxAttempts = 0;\r\n            };\r\n            /**\r\n             * @ignore INTERNAL ONLY\r\n             * @param pageViewPerformance\r\n             * @param properties\r\n             */\r\n            _self[_DYN_SEND_PAGE_VIEW_PERFO3 /* @min:%2esendPageViewPerformanceInternal */] = function (pageViewPerformance, properties, systemProperties) {\r\n                var telemetryItem = createTelemetryItem(pageViewPerformance, PageViewPerformance[_DYN_DATA_TYPE /* @min:%2edataType */], PageViewPerformance[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], _self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), properties, systemProperties);\r\n                _self[_DYN_CORE /* @min:%2ecore */][_DYN_TRACK /* @min:%2etrack */](telemetryItem);\r\n            };\r\n            /**\r\n             * Send browser performance metrics.\r\n             * @param pageViewPerformance\r\n             * @param customProperties\r\n             */\r\n            _self.trackPageViewPerformance = function (pageViewPerformance, customProperties) {\r\n                var inPvp = pageViewPerformance || {};\r\n                try {\r\n                    _pageViewPerformanceManager[_DYN_POPULATE_PAGE_VIEW_P4 /* @min:%2epopulatePageViewPerformanceEvent */](inPvp);\r\n                    _self[_DYN_SEND_PAGE_VIEW_PERFO3 /* @min:%2esendPageViewPerformanceInternal */](inPvp, customProperties);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 37 /* _eInternalMessageId.TrackPVFailed */, \"trackPageViewPerformance failed, page view will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * Starts the timer for tracking a page load time. Use this instead of `trackPageView` if you want to control when the page view timer starts and stops,\r\n             * but don't want to calculate the duration yourself. This method doesn't send any telemetry. Call `stopTrackPage` to log the end of the page view\r\n             * and send the event.\r\n             * @param name - A string that idenfities this item, unique within this HTML document. Defaults to the document title.\r\n             */\r\n            _self.startTrackPage = function (name) {\r\n                try {\r\n                    if (typeof name !== \"string\") {\r\n                        var doc = getDocument();\r\n                        name = doc && doc.title || \"\";\r\n                    }\r\n                    _pageTracking.start(name);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 31 /* _eInternalMessageId.StartTrackFailed */, \"startTrackPage failed, page view may not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * Stops the timer that was started by calling `startTrackPage` and sends the pageview load time telemetry with the specified properties and measurements.\r\n             * The duration of the page view will be the time between calling `startTrackPage` and `stopTrackPage`.\r\n             * @param   name  The string you used as the name in startTrackPage. Defaults to the document title.\r\n             * @param   url   String - a relative or absolute URL that identifies the page or other item. Defaults to the window location.\r\n             * @param   properties  map[string, string] - additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n             * @param   measurements    map[string, number] - metrics associated with this page, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n             */\r\n            _self.stopTrackPage = function (name, url, properties, measurement) {\r\n                try {\r\n                    if (typeof name !== \"string\") {\r\n                        var doc = getDocument();\r\n                        name = doc && doc.title || \"\";\r\n                    }\r\n                    if (typeof url !== \"string\") {\r\n                        var loc = getLocation();\r\n                        url = loc && loc[_DYN_HREF /* @min:%2ehref */] || \"\";\r\n                    }\r\n                    _pageTracking.stop(name, url, properties, measurement);\r\n                    if (_autoTrackPageVisitTime) {\r\n                        _pageVisitTimeManager[_DYN_TRACK_PREVIOUS_PAGE_1 /* @min:%2etrackPreviousPageVisit */](name, url);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 32 /* _eInternalMessageId.StopTrackFailed */, \"stopTrackPage failed, page view will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n            * @ignore INTERNAL ONLY\r\n            * @param exception\r\n            * @param properties\r\n            * @param systemProperties\r\n            */\r\n            _self[_DYN_SEND_EXCEPTION_INTER5 /* @min:%2esendExceptionInternal */] = function (exception, customProperties, systemProperties) {\r\n                var _a;\r\n                // Adding additional edge cases to handle\r\n                // - Not passing anything (null / undefined)\r\n                var theError = (exception && (exception[_DYN_EXCEPTION /* @min:%2eexception */] || exception[_DYN_ERROR /* @min:%2eerror */])) ||\r\n                    // - Handle someone calling trackException based of v1 API where the exception was the Error\r\n                    isError(exception) && exception ||\r\n                    // - Handles no error being defined and instead of creating a new Error() instance attempt to map so any stacktrace\r\n                    //   is preserved and does not list ApplicationInsights code as the source\r\n                    { name: (exception && typeof exception), message: exception || strNotSpecified };\r\n                // If no exception object was passed assign to an empty object to avoid internal exceptions\r\n                exception = exception || {};\r\n                var exceptionPartB = new Exception(_self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), theError, exception[_DYN_PROPERTIES /* @min:%2eproperties */] || customProperties, exception.measurements, exception.severityLevel, exception.id).toInterface();\r\n                var doc = getDocument();\r\n                if (doc && ((_a = _self.config.expCfg) === null || _a === void 0 ? void 0 : _a.inclScripts)) {\r\n                    var scriptsInfo = findAllScripts(doc);\r\n                    exceptionPartB[_DYN_PROPERTIES /* @min:%2eproperties */][\"exceptionScripts\"] = JSON.stringify(scriptsInfo);\r\n                }\r\n                var telemetryItem = createTelemetryItem(exceptionPartB, Exception[_DYN_DATA_TYPE /* @min:%2edataType */], Exception[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], _self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), customProperties, systemProperties);\r\n                _self[_DYN_CORE /* @min:%2ecore */][_DYN_TRACK /* @min:%2etrack */](telemetryItem);\r\n            };\r\n            /**\r\n             * Log an exception you have caught.\r\n             *\r\n             * @param exception -   Object which contains exception to be sent\r\n             * @param } customProperties   Additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n             *\r\n             * Any property of type double will be considered a measurement, and will be treated by Application Insights as a metric.\r\n             * @memberof ApplicationInsights\r\n             */\r\n            _self.trackException = function (exception, customProperties) {\r\n                if (exception && !exception[_DYN_EXCEPTION /* @min:%2eexception */] && exception[_DYN_ERROR /* @min:%2eerror */]) {\r\n                    exception[_DYN_EXCEPTION /* @min:%2eexception */] = exception[_DYN_ERROR /* @min:%2eerror */];\r\n                }\r\n                try {\r\n                    _self[_DYN_SEND_EXCEPTION_INTER5 /* @min:%2esendExceptionInternal */](exception, customProperties);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 35 /* _eInternalMessageId.TrackExceptionFailed */, \"trackException failed, exception will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            /**\r\n             * @description Custom error handler for Application Insights Analytics\r\n             * @param exception\r\n             * @memberof ApplicationInsights\r\n             */\r\n            _self[_DYN__ONERROR /* @min:%2e_onerror */] = function (exception) {\r\n                var error = exception && exception[_DYN_ERROR /* @min:%2eerror */];\r\n                var evt = exception && exception.evt;\r\n                try {\r\n                    if (!evt) {\r\n                        var _window = getWindow();\r\n                        if (_window) {\r\n                            evt = _window[strEvent];\r\n                        }\r\n                    }\r\n                    var url = (exception && exception.url) || (getDocument() || {}).URL;\r\n                    // If no error source is provided assume the default window.onerror handler\r\n                    var errorSrc = exception[_DYN_ERROR_SRC /* @min:%2eerrorSrc */] || \"window.onerror@\" + url + \":\" + (exception[_DYN_LINE_NUMBER /* @min:%2elineNumber */] || 0) + \":\" + (exception[_DYN_COLUMN_NUMBER /* @min:%2ecolumnNumber */] || 0);\r\n                    var properties = {\r\n                        errorSrc: errorSrc,\r\n                        url: url,\r\n                        lineNumber: exception[_DYN_LINE_NUMBER /* @min:%2elineNumber */] || 0,\r\n                        columnNumber: exception[_DYN_COLUMN_NUMBER /* @min:%2ecolumnNumber */] || 0,\r\n                        message: exception[_DYN_MESSAGE /* @min:%2emessage */]\r\n                    };\r\n                    if (isCrossOriginError(exception.message, exception.url, exception.lineNumber, exception.columnNumber, exception[_DYN_ERROR /* @min:%2eerror */])) {\r\n                        _sendCORSException(Exception[_DYN__CREATE_AUTO_EXCEPTI6 /* @min:%2eCreateAutoException */](\"Script error: The browser's same-origin policy prevents us from getting the details of this exception. Consider using the 'crossorigin' attribute.\", url, exception[_DYN_LINE_NUMBER /* @min:%2elineNumber */] || 0, exception[_DYN_COLUMN_NUMBER /* @min:%2ecolumnNumber */] || 0, error, evt, null, errorSrc), properties);\r\n                    }\r\n                    else {\r\n                        if (!exception[_DYN_ERROR_SRC /* @min:%2eerrorSrc */]) {\r\n                            exception[_DYN_ERROR_SRC /* @min:%2eerrorSrc */] = errorSrc;\r\n                        }\r\n                        _self.trackException({ exception: exception, severityLevel: 3 /* eSeverityLevel.Error */ }, properties);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    var errorString = error ? (error.name + \", \" + error[_DYN_MESSAGE /* @min:%2emessage */]) : \"null\";\r\n                    _throwInternal(1 /* eLoggingSeverity.CRITICAL */, 11 /* _eInternalMessageId.ExceptionWhileLoggingError */, \"_onError threw exception while logging error, error will not be collected: \"\r\n                        + getExceptionName(e), { exception: dumpObj(e), errorString: errorString });\r\n                }\r\n            };\r\n            _self[_DYN_ADD_TELEMETRY_INITIA7 /* @min:%2eaddTelemetryInitializer */] = function (telemetryInitializer) {\r\n                if (_self[_DYN_CORE /* @min:%2ecore */]) {\r\n                    // Just add to the core\r\n                    return _self[_DYN_CORE /* @min:%2ecore */][_DYN_ADD_TELEMETRY_INITIA7 /* @min:%2eaddTelemetryInitializer */](telemetryInitializer);\r\n                }\r\n                // Handle \"pre-initialization\" telemetry initializers (for backward compatibility)\r\n                if (!_preInitTelemetryInitializers) {\r\n                    _preInitTelemetryInitializers = [];\r\n                }\r\n                _preInitTelemetryInitializers.push(telemetryInitializer);\r\n            };\r\n            _self.initialize = function (config, core, extensions, pluginChain) {\r\n                if (_self.isInitialized()) {\r\n                    return;\r\n                }\r\n                if (isNullOrUndefined(core)) {\r\n                    throwError(\"Error initializing\");\r\n                }\r\n                _base.initialize(config, core, extensions, pluginChain);\r\n                try {\r\n                    _evtNamespace = mergeEvtNamespace(createUniqueNamespace(_self.identifier), core.evtNamespace && core.evtNamespace());\r\n                    if (_preInitTelemetryInitializers) {\r\n                        arrForEach(_preInitTelemetryInitializers, function (initializer) {\r\n                            core[_DYN_ADD_TELEMETRY_INITIA7 /* @min:%2eaddTelemetryInitializer */](initializer);\r\n                        });\r\n                        _preInitTelemetryInitializers = null;\r\n                    }\r\n                    _populateDefaults(config);\r\n                    _pageViewPerformanceManager = new PageViewPerformanceManager(_self[_DYN_CORE /* @min:%2ecore */]);\r\n                    _pageViewManager = new PageViewManager(_self, _extConfig.overridePageViewDuration, _self[_DYN_CORE /* @min:%2ecore */], _pageViewPerformanceManager);\r\n                    _pageVisitTimeManager = new PageVisitTimeManager(_self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), function (pageName, pageUrl, pageVisitTime) { return trackPageVisitTime(pageName, pageUrl, pageVisitTime); });\r\n                    _eventTracking = new Timing(_self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), \"trackEvent\");\r\n                    _eventTracking.action =\r\n                        function (name, url, duration, properties, measurements) {\r\n                            if (!properties) {\r\n                                properties = {};\r\n                            }\r\n                            if (!measurements) {\r\n                                measurements = {};\r\n                            }\r\n                            properties.duration = duration[_DYN_TO_STRING /* @min:%2etoString */]();\r\n                            _self.trackEvent({ name: name, properties: properties, measurements: measurements });\r\n                        };\r\n                    // initialize page view timing\r\n                    _pageTracking = new Timing(_self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), \"trackPageView\");\r\n                    _pageTracking.action = function (name, url, duration, properties, measurements) {\r\n                        // duration must be a custom property in order for the collector to extract it\r\n                        if (isNullOrUndefined(properties)) {\r\n                            properties = {};\r\n                        }\r\n                        properties.duration = duration[_DYN_TO_STRING /* @min:%2etoString */]();\r\n                        var pageViewItem = {\r\n                            name: name,\r\n                            uri: url,\r\n                            properties: properties,\r\n                            measurements: measurements\r\n                        };\r\n                        _self[_DYN_SEND_PAGE_VIEW_INTER2 /* @min:%2esendPageViewInternal */](pageViewItem, properties);\r\n                    };\r\n                    if (hasWindow()) {\r\n                        _updateExceptionTracking();\r\n                        _updateLocationChange();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // resetting the initialized state because of failure\r\n                    _self.setInitialized(false);\r\n                    throw e;\r\n                }\r\n            };\r\n            _self._doTeardown = function (unloadCtx, unloadState) {\r\n                _pageViewManager && _pageViewManager.teardown(unloadCtx, unloadState);\r\n                // Just register to remove all events associated with this namespace\r\n                eventOff(window, null, null, _evtNamespace);\r\n                _initDefaults();\r\n            };\r\n            function _populateDefaults(config) {\r\n                var identifier = _self.identifier;\r\n                var core = _self[_DYN_CORE /* @min:%2ecore */];\r\n                _self[_DYN__ADD_HOOK /* @min:%2e_addHook */](onConfigChange(config, function () {\r\n                    var ctx = createProcessTelemetryContext(null, config, core);\r\n                    _extConfig = ctx.getExtCfg(identifier, defaultValues);\r\n                    _autoTrackPageVisitTime = _extConfig[_DYN_AUTO_TRACK_PAGE_VISI9 /* @min:%2eautoTrackPageVisitTime */];\r\n                    if (config.storagePrefix) {\r\n                        utlSetStoragePrefix(config.storagePrefix);\r\n                    }\r\n                    _updateStorageUsage(_extConfig);\r\n                    // _updateBrowserLinkTracking\r\n                    _isBrowserLinkTrackingEnabled = _extConfig[_DYN_IS_BROWSER_LINK_TRAC10 /* @min:%2eisBrowserLinkTrackingEnabled */];\r\n                    _addDefaultTelemetryInitializers();\r\n                }));\r\n            }\r\n            /**\r\n             * Log a page visit time\r\n             * @param    pageName    Name of page\r\n             * @param    pageVisitDuration Duration of visit to the page in milliseconds\r\n             */\r\n            function trackPageVisitTime(pageName, pageUrl, pageVisitTime) {\r\n                var properties = { PageName: pageName, PageUrl: pageUrl };\r\n                _self.trackMetric({\r\n                    name: \"PageVisitTime\",\r\n                    average: pageVisitTime,\r\n                    max: pageVisitTime,\r\n                    min: pageVisitTime,\r\n                    sampleCount: 1\r\n                }, properties);\r\n            }\r\n            function _addDefaultTelemetryInitializers() {\r\n                if (!_browserLinkInitializerAdded && _isBrowserLinkTrackingEnabled) {\r\n                    var browserLinkPaths_1 = [\"/browserLinkSignalR/\", \"/__browserLink/\"];\r\n                    var dropBrowserLinkRequests = function (envelope) {\r\n                        if (_isBrowserLinkTrackingEnabled && envelope.baseType === RemoteDependencyData[_DYN_DATA_TYPE /* @min:%2edataType */]) {\r\n                            var remoteData = envelope.baseData;\r\n                            if (remoteData) {\r\n                                for (var i = 0; i < browserLinkPaths_1[_DYN_LENGTH /* @min:%2elength */]; i++) {\r\n                                    if (remoteData.target && strIndexOf(remoteData.target, browserLinkPaths_1[i]) >= 0) {\r\n                                        return false;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        return true;\r\n                    };\r\n                    _self[_DYN__ADD_HOOK /* @min:%2e_addHook */](_self[_DYN_ADD_TELEMETRY_INITIA7 /* @min:%2eaddTelemetryInitializer */](dropBrowserLinkRequests));\r\n                    _browserLinkInitializerAdded = true;\r\n                }\r\n            }\r\n            function _sendCORSException(exception, properties) {\r\n                var telemetryItem = createTelemetryItem(exception, Exception[_DYN_DATA_TYPE /* @min:%2edataType */], Exception[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], _self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), properties);\r\n                _self[_DYN_CORE /* @min:%2ecore */][_DYN_TRACK /* @min:%2etrack */](telemetryItem);\r\n            }\r\n            function _updateExceptionTracking() {\r\n                var _window = getWindow();\r\n                var locn = getLocation(true);\r\n                _self[_DYN__ADD_HOOK /* @min:%2e_addHook */](onConfigChange(_extConfig, function () {\r\n                    _disableExceptionTracking = _extConfig.disableExceptionTracking;\r\n                    if (!_disableExceptionTracking && !_autoExceptionInstrumented && !_extConfig.autoExceptionInstrumented) {\r\n                        // We want to enable exception auto collection and it has not been done so yet\r\n                        _addHook(InstrumentEvent(_window, \"onerror\", {\r\n                            ns: _evtNamespace,\r\n                            rsp: function (callDetails, message, url, lineNumber, columnNumber, error) {\r\n                                if (!_disableExceptionTracking && callDetails.rslt !== true) {\r\n                                    _self[_DYN__ONERROR /* @min:%2e_onerror */](Exception[_DYN__CREATE_AUTO_EXCEPTI6 /* @min:%2eCreateAutoException */](message, url, lineNumber, columnNumber, error, callDetails.evt));\r\n                                }\r\n                            }\r\n                        }, false));\r\n                        _autoExceptionInstrumented = true;\r\n                    }\r\n                }));\r\n                _addUnhandledPromiseRejectionTracking(_window, locn);\r\n            }\r\n            function _updateLocationChange() {\r\n                var win = getWindow();\r\n                var locn = getLocation(true);\r\n                _self[_DYN__ADD_HOOK /* @min:%2e_addHook */](onConfigChange(_extConfig, function () {\r\n                    _enableAutoRouteTracking = _extConfig[_DYN_ENABLE_AUTO_ROUTE_TR11 /* @min:%2eenableAutoRouteTracking */] === true;\r\n                    /**\r\n                     * Create a custom \"locationchange\" event which is triggered each time the history object is changed\r\n                     */\r\n                    if (win && _enableAutoRouteTracking && !_historyListenerAdded && hasHistory()) {\r\n                        var _history = getHistory();\r\n                        if (isFunction(_history.pushState) && isFunction(_history.replaceState) && typeof Event !== strUndefined) {\r\n                            _addHistoryListener(win, _history, locn);\r\n                        }\r\n                    }\r\n                }));\r\n            }\r\n            function _getDistributedTraceCtx() {\r\n                var distributedTraceCtx = null;\r\n                if (_self[_DYN_CORE /* @min:%2ecore */] && _self[_DYN_CORE /* @min:%2ecore */].getTraceCtx) {\r\n                    distributedTraceCtx = _self[_DYN_CORE /* @min:%2ecore */].getTraceCtx(false);\r\n                }\r\n                if (!distributedTraceCtx) {\r\n                    // Fallback when using an older Core and PropertiesPlugin\r\n                    var properties = _self[_DYN_CORE /* @min:%2ecore */].getPlugin(PropertiesPluginIdentifier);\r\n                    if (properties) {\r\n                        var context = properties.plugin.context;\r\n                        if (context) {\r\n                            distributedTraceCtx = createDistributedTraceContextFromTrace(context.telemetryTrace);\r\n                        }\r\n                    }\r\n                }\r\n                return distributedTraceCtx;\r\n            }\r\n            /**\r\n             * Create a custom \"locationchange\" event which is triggered each time the history object is changed\r\n             */\r\n            function _addHistoryListener(win, history, locn) {\r\n                if (_historyListenerAdded) {\r\n                    return;\r\n                }\r\n                // Name Prefix is only referenced during the initial initialization and cannot be changed afterwards\r\n                var namePrefix = _extConfig.namePrefix || \"\";\r\n                function _popstateHandler() {\r\n                    if (_enableAutoRouteTracking) {\r\n                        _dispatchEvent(win, createDomEvent(namePrefix + \"locationchange\"));\r\n                    }\r\n                }\r\n                function _locationChangeHandler() {\r\n                    // We always track the changes (if the handler is installed) to handle the feature being disabled between location changes\r\n                    if (_currUri) {\r\n                        _prevUri = _currUri;\r\n                        _currUri = locn && locn[_DYN_HREF /* @min:%2ehref */] || \"\";\r\n                    }\r\n                    else {\r\n                        _currUri = locn && locn[_DYN_HREF /* @min:%2ehref */] || \"\";\r\n                    }\r\n                    if (_enableAutoRouteTracking) {\r\n                        var distributedTraceCtx = _getDistributedTraceCtx();\r\n                        if (distributedTraceCtx) {\r\n                            distributedTraceCtx.setTraceId(generateW3CId());\r\n                            var traceLocationName = \"_unknown_\";\r\n                            if (locn && locn.pathname) {\r\n                                traceLocationName = locn.pathname + (locn.hash || \"\");\r\n                            }\r\n                            // This populates the ai.operation.name which has a maximum size of 1024 so we need to sanitize it\r\n                            distributedTraceCtx.setName(dataSanitizeString(_self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), traceLocationName));\r\n                        }\r\n                        scheduleTimeout((function (uri) {\r\n                            // todo: override start time so that it is not affected by autoRoutePVDelay\r\n                            _self[_DYN_TRACK_PAGE_VIEW /* @min:%2etrackPageView */]({ refUri: uri, properties: { duration: 0 } }); // SPA route change loading durations are undefined, so send 0\r\n                        }).bind(_self, _prevUri), _self.autoRoutePVDelay);\r\n                    }\r\n                }\r\n                _addHook(InstrumentEvent(history, \"pushState\", {\r\n                    ns: _evtNamespace,\r\n                    rsp: function () {\r\n                        if (_enableAutoRouteTracking) {\r\n                            _dispatchEvent(win, createDomEvent(namePrefix + \"pushState\"));\r\n                            _dispatchEvent(win, createDomEvent(namePrefix + \"locationchange\"));\r\n                        }\r\n                    }\r\n                }, true));\r\n                _addHook(InstrumentEvent(history, \"replaceState\", {\r\n                    ns: _evtNamespace,\r\n                    rsp: function () {\r\n                        if (_enableAutoRouteTracking) {\r\n                            _dispatchEvent(win, createDomEvent(namePrefix + \"replaceState\"));\r\n                            _dispatchEvent(win, createDomEvent(namePrefix + \"locationchange\"));\r\n                        }\r\n                    }\r\n                }, true));\r\n                eventOn(win, namePrefix + \"popstate\", _popstateHandler, _evtNamespace);\r\n                eventOn(win, namePrefix + \"locationchange\", _locationChangeHandler, _evtNamespace);\r\n                _historyListenerAdded = true;\r\n            }\r\n            function _addUnhandledPromiseRejectionTracking(_window, _location) {\r\n                _self[_DYN__ADD_HOOK /* @min:%2e_addHook */](onConfigChange(_extConfig, function () {\r\n                    _enableUnhandledPromiseRejectionTracking = _extConfig[_DYN_ENABLE_UNHANDLED_PRO12 /* @min:%2eenableUnhandledPromiseRejectionTracking */] === true;\r\n                    _autoExceptionInstrumented = _autoExceptionInstrumented || _extConfig[_DYN_AUTO_UNHANDLED_PROMI13 /* @min:%2eautoUnhandledPromiseInstrumented */];\r\n                    if (_enableUnhandledPromiseRejectionTracking && !_autoUnhandledPromiseInstrumented) {\r\n                        // We want to enable exception auto collection and it has not been done so yet\r\n                        _addHook(InstrumentEvent(_window, \"onunhandledrejection\", {\r\n                            ns: _evtNamespace,\r\n                            rsp: function (callDetails, error) {\r\n                                if (_enableUnhandledPromiseRejectionTracking && callDetails.rslt !== true) { // handled could be typeof function\r\n                                    _self[_DYN__ONERROR /* @min:%2e_onerror */](Exception[_DYN__CREATE_AUTO_EXCEPTI6 /* @min:%2eCreateAutoException */](_getReason(error), _location ? _location[_DYN_HREF /* @min:%2ehref */] : \"\", 0, 0, error, callDetails.evt));\r\n                                }\r\n                            }\r\n                        }, false));\r\n                        _extConfig[_DYN_AUTO_UNHANDLED_PROMI13 /* @min:%2eautoUnhandledPromiseInstrumented */] = _autoUnhandledPromiseInstrumented = true;\r\n                    }\r\n                }));\r\n            }\r\n            /**\r\n             * This method will throw exceptions in debug mode or attempt to log the error as a console warning.\r\n             * @param severity - {eLoggingSeverity} - The severity of the log message\r\n             * @param msgId - {_eInternalLogMessage} - The log message.\r\n             */\r\n            function _throwInternal(severity, msgId, msg, properties, isUserAct) {\r\n                _self[_DYN_DIAG_LOG /* @min:%2ediagLog */]().throwInternal(severity, msgId, msg, properties, isUserAct);\r\n            }\r\n            function _initDefaults() {\r\n                _eventTracking = null;\r\n                _pageTracking = null;\r\n                _pageViewManager = null;\r\n                _pageViewPerformanceManager = null;\r\n                _pageVisitTimeManager = null;\r\n                _preInitTelemetryInitializers = null;\r\n                _isBrowserLinkTrackingEnabled = false;\r\n                _browserLinkInitializerAdded = false;\r\n                _enableAutoRouteTracking = false;\r\n                _historyListenerAdded = false;\r\n                _disableExceptionTracking = false;\r\n                _autoExceptionInstrumented = false;\r\n                _enableUnhandledPromiseRejectionTracking = false;\r\n                _autoUnhandledPromiseInstrumented = false;\r\n                _autoTrackPageVisitTime = false;\r\n                // Counts number of trackAjax invocations.\r\n                // By default we only monitor X ajax call per view to avoid too much load.\r\n                // Default value is set in config.\r\n                // This counter keeps increasing even after the limit is reached.\r\n                _trackAjaxAttempts = 0;\r\n                // array with max length of 2 that store current url and previous url for SPA page route change trackPageview use.\r\n                var location = getLocation(true);\r\n                _prevUri = location && location[_DYN_HREF /* @min:%2ehref */] || \"\";\r\n                _currUri = null;\r\n                _evtNamespace = null;\r\n                _extConfig = null;\r\n                // Define _self.config\r\n                objDefine(_self, \"config\", {\r\n                    g: function () { return _extConfig; }\r\n                });\r\n            }\r\n            // For backward compatibility\r\n            objDefine(_self, \"_pageViewManager\", { g: function () { return _pageViewManager; } });\r\n            objDefine(_self, \"_pageViewPerformanceManager\", { g: function () { return _pageViewPerformanceManager; } });\r\n            objDefine(_self, \"_pageVisitTimeManager\", { g: function () { return _pageVisitTimeManager; } });\r\n            objDefine(_self, \"_evtNamespace\", { g: function () { return \".\" + _evtNamespace; } });\r\n        });\r\n        return _this;\r\n    }\r\n    /**\r\n     * Get the current cookie manager for this instance\r\n     */\r\n    AnalyticsPlugin.prototype.getCookieMgr = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    AnalyticsPlugin.prototype.processTelemetry = function (env, itemCtx) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AnalyticsPlugin.prototype.trackEvent = function (event, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Start timing an extended event. Call `stopTrackEvent` to log the event when it ends.\r\n     * @param   name    A string that identifies this event uniquely within the document.\r\n     */\r\n    AnalyticsPlugin.prototype.startTrackEvent = function (name) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Log an extended event that you started timing with `startTrackEvent`.\r\n     * @param   name    The string you used to identify this event in `startTrackEvent`.\r\n     * @param   properties  map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.\r\n     * @param   measurements    map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n     */\r\n    AnalyticsPlugin.prototype.stopTrackEvent = function (name, properties, measurements) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * @description Log a diagnostic message\r\n     * @param trace\r\n     * @param ICustomProperties.\r\n     * @memberof ApplicationInsights\r\n     */\r\n    AnalyticsPlugin.prototype.trackTrace = function (trace, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * @description Log a numeric value that is not associated with a specific event. Typically\r\n     * used to send regular reports of performance indicators. To send single measurement, just\r\n     * use the name and average fields of {@link IMetricTelemetry}. If you take measurements\r\n     * frequently, you can reduce the telemetry bandwidth by aggregating multiple measurements\r\n     * and sending the resulting average at intervals\r\n     * @param metric - input object argument. Only name and average are mandatory.\r\n     * @param } customProperties additional data used to filter metrics in the\r\n     * portal. Defaults to empty.\r\n     * @memberof ApplicationInsights\r\n     */\r\n    AnalyticsPlugin.prototype.trackMetric = function (metric, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Logs that a page or other item was viewed.\r\n     * @param IPageViewTelemetry - The string you used as the name in startTrackPage. Defaults to the document title.\r\n     * @param customProperties - Additional data used to filter events and metrics. Defaults to empty.\r\n     * If a user wants to provide duration for pageLoad, it'll have to be in pageView.properties.duration\r\n     */\r\n    AnalyticsPlugin.prototype.trackPageView = function (pageView, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Create a page view telemetry item and send it to the SDK pipeline through the core.track API\r\n     * @param pageView - Page view item to be sent\r\n     * @param properties - Custom properties (Part C) that a user can add to the telemetry item\r\n     * @param systemProperties - System level properties (Part A) that a user can add to the telemetry item\r\n     */\r\n    AnalyticsPlugin.prototype.sendPageViewInternal = function (pageView, properties, systemProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * @ignore INTERNAL ONLY\r\n     * @param pageViewPerformance\r\n     * @param properties\r\n     */\r\n    AnalyticsPlugin.prototype.sendPageViewPerformanceInternal = function (pageViewPerformance, properties, systemProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Send browser performance metrics.\r\n     * @param pageViewPerformance\r\n     * @param customProperties\r\n     */\r\n    AnalyticsPlugin.prototype.trackPageViewPerformance = function (pageViewPerformance, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Starts the timer for tracking a page load time. Use this instead of `trackPageView` if you want to control when the page view timer starts and stops,\r\n     * but don't want to calculate the duration yourself. This method doesn't send any telemetry. Call `stopTrackPage` to log the end of the page view\r\n     * and send the event.\r\n     * @param name - A string that idenfities this item, unique within this HTML document. Defaults to the document title.\r\n     */\r\n    AnalyticsPlugin.prototype.startTrackPage = function (name) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Stops the timer that was started by calling `startTrackPage` and sends the pageview load time telemetry with the specified properties and measurements.\r\n     * The duration of the page view will be the time between calling `startTrackPage` and `stopTrackPage`.\r\n     * @param   name  The string you used as the name in startTrackPage. Defaults to the document title.\r\n     * @param   url   String - a relative or absolute URL that identifies the page or other item. Defaults to the window location.\r\n     * @param   properties  map[string, string] - additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n     * @param   measurements    map[string, number] - metrics associated with this page, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n     */\r\n    AnalyticsPlugin.prototype.stopTrackPage = function (name, url, properties, measurement) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n    * @ignore INTERNAL ONLY\r\n    * @param exception\r\n    * @param properties\r\n    * @param systemProperties\r\n    */\r\n    AnalyticsPlugin.prototype.sendExceptionInternal = function (exception, customProperties, systemProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Log an exception you have caught.\r\n     *\r\n     * @param exception -   Object which contains exception to be sent\r\n     * @param } customProperties   Additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n     *\r\n     * Any property of type double will be considered a measurement, and will be treated by Application Insights as a metric.\r\n     * @memberof ApplicationInsights\r\n     */\r\n    AnalyticsPlugin.prototype.trackException = function (exception, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * @description Custom error handler for Application Insights Analytics\r\n     * @param exception\r\n     * @memberof ApplicationInsights\r\n     */\r\n    AnalyticsPlugin.prototype._onerror = function (exception) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AnalyticsPlugin.prototype.addTelemetryInitializer = function (telemetryInitializer) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    AnalyticsPlugin.prototype.initialize = function (config, core, extensions, pluginChain) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AnalyticsPlugin.Version = '3.3.1'; // Not currently used anywhere\r\n    return AnalyticsPlugin;\r\n}(BaseTelemetryPlugin));\r\nexport { AnalyticsPlugin };\r\n//# sourceMappingURL=AnalyticsPlugin.js.map", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n// @skip-file-minify\r\n// ##############################################################\r\n// AUTO GENERATED FILE: This file is Auto Generated during build.\r\n// ##############################################################\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n// Note: DON'T Export these const from the package as we are still targeting ES3 this will export a mutable variables that someone could change!!!\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\nexport var _DYN_FEATURE_OPT_IN = \"featureOptIn\"; // Count: 4\r\nexport var _DYN_ON_CFG_CHANGE_RECEIV0 = \"onCfgChangeReceive\"; // Count: 2\r\nexport var _DYN_NON_OVERRIDE_CONFIGS = \"nonOverrideConfigs\"; // Count: 2\r\nexport var _DYN_SCHEDULE_FETCH_TIMEO1 = \"scheduleFetchTimeout\"; // Count: 2\r\n//# sourceMappingURL=__DynamicConstants.js.map", "import { isNullOrUndefined, isObject, objExtend, objForEachKey, setValueByKey } from \"@nevware21/ts-utils\";\r\nimport { _DYN_FEATURE_OPT_IN } from \"./__DynamicConstants\";\r\n/**\r\n * Delete a config key in the given cfg, if the config key exists in nonOverrideConfigs and its value is set to true\r\n * @param cfg cfg to modify\r\n * @param nonOverrideConfigs nonOverrideConfigs\r\n * @param curLevel cur config level, starting at 0\r\n * @param maxLevel max config level\r\n * @returns new copy of modified configs\r\n */\r\nexport function replaceByNonOverrideCfg(cfg, nonOverrideConfigs, curLevel, maxLevel) {\r\n    try {\r\n        var exceedMaxLevel = curLevel > maxLevel;\r\n        if (exceedMaxLevel) {\r\n            cfg = null;\r\n        }\r\n        var curCfg_1 = curLevel == 0 ? objExtend({}, cfg) : cfg; // only copy cfg at the begining level\r\n        if (curCfg_1 && nonOverrideConfigs && !exceedMaxLevel) {\r\n            objForEachKey(curCfg_1, function (key) {\r\n                var nonOverrideVal = nonOverrideConfigs[key];\r\n                if (!!nonOverrideVal) {\r\n                    if (isObject(curCfg_1[key]) && isObject(nonOverrideVal)) {\r\n                        curCfg_1[key] = replaceByNonOverrideCfg(curCfg_1[key], nonOverrideVal, ++curLevel, maxLevel);\r\n                    }\r\n                    else {\r\n                        delete curCfg_1[key];\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        return curCfg_1;\r\n    }\r\n    catch (e) {\r\n        // eslint-disable-next-line no-empty\r\n    }\r\n    // if errors happen, do nothing\r\n    return cfg;\r\n}\r\n//                                                     CDN Mode, value = B (CDN value = B)\r\n//                                |--------------------------------------------------------------------------|-----------|\r\n//                                |                    | none        | disabled    | enabled     | forceOn   | forceOff  |\r\n//                                | ------------------ | ----------- | ----------- | ----------- | --------- | --------- |\r\n// | User Mode, value = A         | none               | none        | disabled    | enabled     | enabled   | disabled  |\r\n// (user Value = A)               | disabled           | disabled    | disabled    | disabled    | enabled   | disabled  |\r\n//                                | enabled            | enabled     | disabled    | enabled     | enabled   | disabled  |\r\n//                                | none(blockCdn)     | none        | none        | none        | none      | none      |\r\n//                                | disabled(blockCdn) | disabled    | disabled    | disabled    | disabled  | disabled  |\r\n//                                | enabled(blockCdn)  | enabled     | enabled     | enabled     | enabled   | enabled   |\r\n// This matrix identifies how feature based overrides are selected (if present)\r\n//                                cdn Mode (cdn Value = B)\r\n//                   |---------------------------------------------------------------------------|\r\n//                   |                    | none     | disabled | enabled  | forceOn  | forceOff |\r\n//                   | ------------------ | ---------| ---------| ---------| ---------|----------|\r\n// | User Mode       | none               | A        | A        | A || B   | B || A   | B || A   |\r\n// (user Value = A)  | disabled           | A        | A        | A        | B || A   | B || A   |\r\n//                   | enabled            | A        | A        | A || B   | B || A   | B || A   |\r\n//                   | none(blockCdn)     | A        | A        | A        | A        | A        |\r\n//                   | disabled(blockCdn) | A        | A        | A        | A        | A        |\r\n//                   | enabled(blockCdn)  | A        | A        | A        | A        | A        |\r\n// Note:\r\n// Where the \"value\" is an object (map) of encoded key/values which will be used to override the real configuration\r\n// A = either the user supplied enable/disable value (via the `config.featureOptIn[name]`) or if not defined by the user the SDK defaults of the same.\r\n// B = The enable/disable value obtained from the CDN for the named feature\r\n// These are evaluated based on the above matrix to either\r\n// - A (Always the user/sdk value)\r\n// - B (Always the value from the CDN)\r\n// - A || B (If A is null or undefined use the value from the CDN (B) otherwise A)\r\n// - B || A (If B is null or undefined use the user/SDK value otherwise use the value from the CDN)\r\n//\r\n// The result of the value may also be null / undefined, which means there are no overrides to apply when the feature is enabled\r\nvar F = \"featureOptIn.\";\r\nvar M = \".mode\";\r\nvar ON = \".onCfg\";\r\nvar OFF = \".offCfg\";\r\nexport function resolveCdnFeatureCfg(field, cdnCfg, userOptInDetails) {\r\n    var _a;\r\n    // cdn conifg value\r\n    if (!cdnCfg || !cdnCfg.enabled) {\r\n        return null;\r\n    }\r\n    var cdnFt = (cdnCfg[_DYN_FEATURE_OPT_IN /* @min:%2efeatureOptIn */] || {})[field] || { mode: 1 /* CdnFeatureMode.none */ };\r\n    var cdnM = cdnFt.mode;\r\n    var cdnOnV = cdnFt.onCfg;\r\n    var cdnOffV = cdnFt.offCfg;\r\n    var userFt = (userOptInDetails || {})[field] || { mode: 2 /* FeatureOptInMode.disable */ }; // default user mode is disable\r\n    var userM = userFt.mode;\r\n    var userOnV = userFt.onCfg;\r\n    var userOffV = userFt.offCfg;\r\n    var blockCdn = !!userFt.blockCdnCfg;\r\n    var mFld = F + field + M;\r\n    var onFld = F + field + ON;\r\n    var offFld = F + field + OFF;\r\n    var mode = userM;\r\n    var onV = userOnV;\r\n    var offV = userOffV;\r\n    if (!blockCdn) {\r\n        if (cdnM === 4 /* CdnFeatureMode.forceOn */ || cdnM === 5 /* CdnFeatureMode.forceOff */) {\r\n            mode = (cdnM == 4 /* CdnFeatureMode.forceOn */ ? 3 /* FeatureOptInMode.enable */ : 2 /* FeatureOptInMode.disable */);\r\n            onV = cdnOnV || userOnV;\r\n            offV = cdnOffV || userOffV;\r\n        }\r\n        else if (cdnM === 2 /* CdnFeatureMode.disable */ || userM === 2 /* FeatureOptInMode.disable */) {\r\n            mode = 2 /* FeatureOptInMode.disable */;\r\n            onV = userOnV || cdnOnV;\r\n            offV = userOffV || cdnOffV;\r\n        }\r\n        else if (cdnM === 3 /* CdnFeatureMode.enable */) {\r\n            mode = 3 /* FeatureOptInMode.enable */;\r\n            onV = userOnV || cdnOnV;\r\n            offV = userOffV || cdnOffV;\r\n        }\r\n        else if (cdnM === 1 /* CdnFeatureMode.none */ && userM === 1 /* FeatureOptInMode.none */) {\r\n            mode = 1 /* FeatureOptInMode.none */;\r\n        }\r\n    }\r\n    return _a = {},\r\n        _a[mFld] = mode,\r\n        _a[onFld] = onV,\r\n        _a[offFld] = offV,\r\n        _a;\r\n}\r\n// helper function to get cdn config with opt-in features\r\nexport function applyCdnfeatureCfg(cdnCfg, core) {\r\n    try {\r\n        if (!cdnCfg || !cdnCfg.enabled) {\r\n            return null;\r\n        }\r\n        if (!cdnCfg[_DYN_FEATURE_OPT_IN /* @min:%2efeatureOptIn */]) {\r\n            return cdnCfg.config;\r\n        }\r\n        var optInMap = cdnCfg[_DYN_FEATURE_OPT_IN /* @min:%2efeatureOptIn */];\r\n        var cdnConfig_1 = cdnCfg.config || {};\r\n        objForEachKey(optInMap, function (key) {\r\n            var featureVal = resolveCdnFeatureCfg(key, cdnCfg, core.config[_DYN_FEATURE_OPT_IN /* @min:%2efeatureOptIn */]);\r\n            if (!isNullOrUndefined(featureVal)) {\r\n                objForEachKey(featureVal, function (config, val) {\r\n                    setValueByKey(cdnConfig_1, config, val);\r\n                });\r\n                _overrideCdnCfgByFeature(key, featureVal, cdnConfig_1);\r\n            }\r\n        });\r\n        return cdnConfig_1;\r\n    }\r\n    catch (e) {\r\n        // eslint-disable-next-line no-empty\r\n    }\r\n    return null;\r\n}\r\nfunction _overrideCdnCfgByFeature(field, ftVal, config) {\r\n    var mode = ftVal[F + field + M];\r\n    var val = ftVal[F + field + ON];\r\n    var dVal = ftVal[F + field + OFF];\r\n    var target = null;\r\n    if (mode === 3 /* FeatureOptInMode.enable */) {\r\n        target = val;\r\n    }\r\n    if (mode === 2 /* FeatureOptInMode.disable */) {\r\n        target = dVal;\r\n    }\r\n    if (target) {\r\n        objForEachKey(target, function (key, cfg) {\r\n            setValueByKey(config, key, cfg);\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=CfgSyncHelperFuncs.js.map", "/**\r\n* CfgSyncPlugin.ts\r\n* @copyright Microsoft 2018\r\n*/\r\nvar _a;\r\nimport { __extends } from \"tslib\";\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { BaseTelemetryPlugin, createProcessTelemetryContext, createUniqueNamespace, eventOff, eventOn, getGlobal, getJSON, isFetchSupported, isXhrSupported, mergeEvtNamespace, onConfigChange, sendCustomEvent } from \"@microsoft/applicationinsights-core-js\";\r\nimport { doAwaitResponse } from \"@nevware21/ts-async\";\r\nimport { isFunction, isNullOrUndefined, isPlainObject, objDeepFreeze, scheduleTimeout } from \"@nevware21/ts-utils\";\r\nimport { applyCdnfeatureCfg, replaceByNonOverrideCfg } from \"./CfgSyncHelperFuncs\";\r\nimport { _DYN_NON_OVERRIDE_CONFIGS, _DYN_ON_CFG_CHANGE_RECEIV0, _DYN_SCHEDULE_FETCH_TIMEO1 } from \"./__DynamicConstants\";\r\nvar EVENT_NAME = \"ai_cfgsync\";\r\nvar STR_GET_METHOD = \"GET\";\r\nvar FETCH_TIMEOUT = 1800000; // 30 minutes\r\nvar udfVal = undefined;\r\nvar defaultNonOverrideCfg = { instrumentationKey: true, connectionString: true, endpointUrl: true };\r\nvar _defaultConfig = objDeepFreeze((_a = {\r\n        syncMode: 1 /* ICfgSyncMode.Broadcast */,\r\n        blkCdnCfg: udfVal,\r\n        customEvtName: udfVal,\r\n        cfgUrl: udfVal,\r\n        overrideSyncFn: udfVal,\r\n        overrideFetchFn: udfVal\r\n    },\r\n    _a[_DYN_ON_CFG_CHANGE_RECEIV0 /* @min:onCfgChangeReceive */] = udfVal,\r\n    _a[_DYN_SCHEDULE_FETCH_TIMEO1 /* @min:scheduleFetchTimeout */] = FETCH_TIMEOUT,\r\n    _a[_DYN_NON_OVERRIDE_CONFIGS /* @min:nonOverrideConfigs */] = defaultNonOverrideCfg,\r\n    _a));\r\nvar CfgSyncPlugin = /** @class */ (function (_super) {\r\n    __extends(CfgSyncPlugin, _super);\r\n    function CfgSyncPlugin() {\r\n        var _this = _super.call(this) || this;\r\n        _this.priority = 198;\r\n        _this.identifier = \"AppInsightsCfgSyncPlugin\";\r\n        var _extensionConfig;\r\n        var _mainConfig; // throttle config should be wrapped in IConfiguration\r\n        var _evtName;\r\n        var _evtNamespace;\r\n        var _cfgUrl;\r\n        var _timeoutHandle;\r\n        var _receiveChanges;\r\n        var _broadcastChanges;\r\n        var _blkCdnCfg;\r\n        var _fetchTimeout;\r\n        var _retryCnt;\r\n        var _onCfgChangeReceive;\r\n        var _nonOverrideConfigs;\r\n        var _fetchFn;\r\n        var _overrideFetchFn;\r\n        var _overrideSyncFn;\r\n        var _paused = false;\r\n        dynamicProto(CfgSyncPlugin, _this, function (_self, _base) {\r\n            _initDefaults();\r\n            _self.initialize = function (config, core, extensions, pluginChain) {\r\n                _base.initialize(config, core, extensions, pluginChain);\r\n                _evtNamespace = mergeEvtNamespace(createUniqueNamespace(_self.identifier), core.evtNamespace && core.evtNamespace());\r\n                _populateDefaults(config);\r\n            };\r\n            _self.getCfg = function () {\r\n                return _mainConfig;\r\n            };\r\n            _self.pause = function () {\r\n                _paused = true;\r\n                _clearScheduledTimer();\r\n            };\r\n            _self.resume = function () {\r\n                _paused = false;\r\n                _setupTimer();\r\n            };\r\n            // used for V2 to manaully trigger config udpate\r\n            _self.setCfg = function (config) {\r\n                return _setCfg(config);\r\n            };\r\n            _self.sync = function (customDetails) {\r\n                return _sendCfgsyncEvents(customDetails);\r\n            };\r\n            _self.updateEventListenerName = function (eventName) {\r\n                return _updateEventListenerName(eventName);\r\n            };\r\n            _self._doTeardown = function (unloadCtx, unloadState) {\r\n                _eventOff();\r\n                _clearScheduledTimer();\r\n                _initDefaults();\r\n            };\r\n            _self[\"_getDbgPlgTargets\"] = function () {\r\n                return [_broadcastChanges, _receiveChanges, _evtName, _blkCdnCfg, _nonOverrideConfigs];\r\n            };\r\n            function _initDefaults() {\r\n                _mainConfig = null;\r\n                _evtName = null;\r\n                _evtNamespace = null;\r\n                _cfgUrl = null;\r\n                _receiveChanges = null;\r\n                _broadcastChanges = null;\r\n                _nonOverrideConfigs = null;\r\n                _timeoutHandle = null;\r\n                _fetchTimeout = null;\r\n                _retryCnt = null;\r\n                _blkCdnCfg = null;\r\n                _overrideFetchFn = null;\r\n                _overrideSyncFn = null;\r\n                _onCfgChangeReceive = null;\r\n            }\r\n            function _populateDefaults(config) {\r\n                var identifier = _self.identifier;\r\n                var core = _self.core;\r\n                _self._addHook(onConfigChange(config, function () {\r\n                    var ctx = createProcessTelemetryContext(null, config, core);\r\n                    _extensionConfig = ctx.getExtCfg(identifier, _defaultConfig);\r\n                    var preBlkCdn = _blkCdnCfg;\r\n                    _blkCdnCfg = !!_extensionConfig.blkCdnCfg;\r\n                    // avoid initial call\r\n                    if (!isNullOrUndefined(preBlkCdn) && preBlkCdn !== _blkCdnCfg) {\r\n                        if (!_blkCdnCfg && _cfgUrl) {\r\n                            _fetchFn && _fetchFn(_cfgUrl, _onFetchComplete, _broadcastChanges);\r\n                        }\r\n                        else {\r\n                            _clearScheduledTimer();\r\n                        }\r\n                    }\r\n                    if (isNullOrUndefined(_receiveChanges)) {\r\n                        _receiveChanges = _extensionConfig.syncMode === 2 /* ICfgSyncMode.Receive */;\r\n                    }\r\n                    if (isNullOrUndefined(_broadcastChanges)) {\r\n                        _broadcastChanges = _extensionConfig.syncMode === 1 /* ICfgSyncMode.Broadcast */;\r\n                    }\r\n                    var newEvtName = _extensionConfig.customEvtName || EVENT_NAME;\r\n                    if (_evtName !== newEvtName) {\r\n                        if (_receiveChanges) {\r\n                            _updateEventListenerName(newEvtName);\r\n                        }\r\n                        else {\r\n                            _eventOff();\r\n                            _evtName = newEvtName;\r\n                        }\r\n                    }\r\n                    if (isNullOrUndefined(_cfgUrl)) {\r\n                        _cfgUrl = _extensionConfig.cfgUrl;\r\n                    }\r\n                    // if cfgUrl is set, we will ignore core config change\r\n                    if (!_cfgUrl) {\r\n                        _mainConfig = config;\r\n                        if (_broadcastChanges) {\r\n                            _sendCfgsyncEvents();\r\n                        }\r\n                    }\r\n                }));\r\n                _overrideSyncFn = _extensionConfig.overrideSyncFn;\r\n                _overrideFetchFn = _extensionConfig.overrideFetchFn;\r\n                _onCfgChangeReceive = _extensionConfig[_DYN_ON_CFG_CHANGE_RECEIV0 /* @min:%2eonCfgChangeReceive */];\r\n                _nonOverrideConfigs = _extensionConfig[_DYN_NON_OVERRIDE_CONFIGS /* @min:%2enonOverrideConfigs */]; // override values should not be changed\r\n                _fetchTimeout = _extensionConfig[_DYN_SCHEDULE_FETCH_TIMEO1 /* @min:%2escheduleFetchTimeout */];\r\n                _fetchFn = _getFetchFnInterface();\r\n                _retryCnt = 0;\r\n                // NOT support cfgURL change to avoid mutiple fetch calls\r\n                if (_cfgUrl && !_blkCdnCfg) {\r\n                    _fetchFn && _fetchFn(_cfgUrl, _onFetchComplete, _broadcastChanges);\r\n                }\r\n            }\r\n            function _setCfg(config, isAutoSync) {\r\n                if (config) {\r\n                    _mainConfig = config;\r\n                    if (!!isAutoSync && !_paused) {\r\n                        return _sendCfgsyncEvents();\r\n                    }\r\n                    if (_receiveChanges && !_paused) {\r\n                        _self.core.updateCfg(config);\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n            function _eventOff() {\r\n                try {\r\n                    var global_1 = getGlobal();\r\n                    if (global_1) {\r\n                        eventOff(global_1, null, null, _evtNamespace);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // eslint-disable-next-line no-empty\r\n                }\r\n            }\r\n            function _sendCfgsyncEvents(customDetails) {\r\n                try {\r\n                    if (!!_overrideSyncFn && isFunction(_overrideSyncFn)) {\r\n                        return _overrideSyncFn(_mainConfig, customDetails);\r\n                    }\r\n                    return sendCustomEvent(_evtName, _mainConfig, customDetails);\r\n                }\r\n                catch (e) {\r\n                    // eslint-disable-next-line no-empty\r\n                }\r\n                return false;\r\n            }\r\n            function _updateEventListenerName(name) {\r\n                try {\r\n                    _eventOff();\r\n                    if (name) {\r\n                        _evtName = name;\r\n                        _addEventListener();\r\n                    }\r\n                    return true;\r\n                }\r\n                catch (e) {\r\n                    // eslint-disable-next-line no-empty\r\n                }\r\n                return false;\r\n            }\r\n            function _getFetchFnInterface() {\r\n                var _fetchFn = _overrideFetchFn;\r\n                if (isNullOrUndefined(_fetchFn)) {\r\n                    if (isFetchSupported()) {\r\n                        _fetchFn = _fetchSender;\r\n                    }\r\n                    else if (isXhrSupported()) {\r\n                        _fetchFn = _xhrSender;\r\n                    }\r\n                }\r\n                return _fetchFn;\r\n            }\r\n            function _fetchSender(url, oncomplete, isAutoSync) {\r\n                var global = getGlobal();\r\n                var fetchFn = (global && global.fetch) || null;\r\n                if (url && fetchFn && isFunction(fetchFn)) {\r\n                    try {\r\n                        var init = {\r\n                            method: STR_GET_METHOD\r\n                        };\r\n                        var request = new Request(url, init);\r\n                        doAwaitResponse(fetch(request), function (result) {\r\n                            var response = result.value;\r\n                            if (!result.rejected) {\r\n                                if (response.ok) {\r\n                                    doAwaitResponse(response.text(), function (res) {\r\n                                        _doOnComplete(oncomplete, response.status, res.value, isAutoSync);\r\n                                    });\r\n                                }\r\n                                else {\r\n                                    _doOnComplete(oncomplete, response.status, null, isAutoSync);\r\n                                }\r\n                            }\r\n                            else {\r\n                                _doOnComplete(oncomplete, 400);\r\n                            }\r\n                        });\r\n                    }\r\n                    catch (e) {\r\n                        // eslint-disable-next-line no-empty\r\n                    }\r\n                }\r\n            }\r\n            function _xhrSender(url, oncomplete, isAutoSync) {\r\n                try {\r\n                    var xhr_1 = new XMLHttpRequest();\r\n                    xhr_1.open(STR_GET_METHOD, url);\r\n                    xhr_1.onreadystatechange = function () {\r\n                        if (xhr_1.readyState === XMLHttpRequest.DONE) {\r\n                            _doOnComplete(oncomplete, xhr_1.status, xhr_1.responseText, isAutoSync);\r\n                        }\r\n                    };\r\n                    xhr_1.onerror = function () {\r\n                        _doOnComplete(oncomplete, 400);\r\n                    };\r\n                    xhr_1.ontimeout = function () {\r\n                        _doOnComplete(oncomplete, 400);\r\n                    };\r\n                    xhr_1.send();\r\n                }\r\n                catch (e) {\r\n                    // eslint-disable-next-line no-empty\r\n                }\r\n            }\r\n            function _onFetchComplete(status, response, isAutoSync) {\r\n                try {\r\n                    if (status >= 200 && status < 400 && response) {\r\n                        _retryCnt = 0; // any successful response will reset retry count to 0\r\n                        var JSON_1 = getJSON();\r\n                        if (JSON_1) {\r\n                            var cdnCfg = JSON_1.parse(response); //comments are not allowed\r\n                            var cfg = applyCdnfeatureCfg(cdnCfg, _self.core);\r\n                            var newCfg = cfg && isPlainObject(cfg) && _replaceTartgetByKeys(cfg);\r\n                            newCfg && _setCfg(newCfg, isAutoSync);\r\n                            //cfg && _setCfg(cfg, isAutoSync);\r\n                        }\r\n                    }\r\n                    else {\r\n                        _retryCnt++;\r\n                    }\r\n                    if (_retryCnt < 3) {\r\n                        _setupTimer();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // eslint-disable-next-line no-empty\r\n                }\r\n            }\r\n            function _doOnComplete(oncomplete, status, response, isAutoSync) {\r\n                try {\r\n                    oncomplete(status, response, isAutoSync);\r\n                }\r\n                catch (e) {\r\n                    // eslint-disable-next-line no-empty\r\n                }\r\n            }\r\n            function _addEventListener() {\r\n                if (_receiveChanges) {\r\n                    var global_2 = getGlobal();\r\n                    if (global_2) {\r\n                        try {\r\n                            eventOn(global_2, _evtName, function (event) {\r\n                                // TODO: add more validation here\r\n                                // may include a \"name\" or some other features to check\r\n                                var cfgEvent = event && event.detail;\r\n                                if (_onCfgChangeReceive && cfgEvent) {\r\n                                    _onCfgChangeReceive(cfgEvent);\r\n                                }\r\n                                else {\r\n                                    var cfg = cfgEvent && cfgEvent.cfg;\r\n                                    var newCfg = cfg && isPlainObject(cfg) && _replaceTartgetByKeys(cfg);\r\n                                    newCfg && _setCfg(newCfg);\r\n                                }\r\n                            }, _evtNamespace, true);\r\n                        }\r\n                        catch (e) {\r\n                            // eslint-disable-next-line no-empty\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // 4 levels\r\n            function _replaceTartgetByKeys(cfg, level) {\r\n                var _cfg = null;\r\n                try {\r\n                    if (cfg) {\r\n                        _cfg = replaceByNonOverrideCfg(cfg, _nonOverrideConfigs, 0, 5);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // eslint-disable-next-line no-empty\r\n                }\r\n                return _cfg;\r\n            }\r\n            /**\r\n             * Sets up the timer which triggers fetching cdn every 30mins after inital call\r\n             */\r\n            function _setupTimer() {\r\n                if (!_timeoutHandle && _fetchTimeout) {\r\n                    _timeoutHandle = scheduleTimeout(function () {\r\n                        _timeoutHandle = null;\r\n                        _fetchFn(_cfgUrl, _onFetchComplete, _broadcastChanges);\r\n                    }, _fetchTimeout);\r\n                    _timeoutHandle.unref();\r\n                }\r\n            }\r\n            function _clearScheduledTimer() {\r\n                _timeoutHandle && _timeoutHandle.cancel();\r\n                _timeoutHandle = null;\r\n                _retryCnt = 0;\r\n            }\r\n            _self.processTelemetry = function (env, itemCtx) {\r\n                _self.processNext(env, itemCtx);\r\n            };\r\n        });\r\n        return _this;\r\n    }\r\n    CfgSyncPlugin.prototype.initialize = function (config, core, extensions, pluginChain) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Get current configs of current instance.\r\n     * @param config current configs\r\n     */\r\n    CfgSyncPlugin.prototype.getCfg = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Manually set configs of current instance.\r\n     * @param config new configs\r\n    */\r\n    CfgSyncPlugin.prototype.setCfg = function (config) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Manually broadcast configs of current instance to all other instances.\r\n     * @param customDetails additional details should also be sent out to other instances\r\n    */\r\n    CfgSyncPlugin.prototype.sync = function (customDetails) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Manually update event name.\r\n     * If current instance is the main instance, then following config changes will be sent out under this new event name.\r\n     * If current instance is listener instances, it will listen to event details under this new name.\r\n     * @param eventName new event name\r\n     */\r\n    CfgSyncPlugin.prototype.updateEventListenerName = function (eventName) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Pause the sending/receiving of events\r\n     */\r\n    CfgSyncPlugin.prototype.pause = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Resume the sending/receiving of events\r\n     */\r\n    CfgSyncPlugin.prototype.resume = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    // /**\r\n    //  * Add Part A fields to the event\r\n    //  * @param event - The event that needs to be processed\r\n    //  */\r\n    CfgSyncPlugin.prototype.processTelemetry = function (event, itemCtx) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    return CfgSyncPlugin;\r\n}(BaseTelemetryPlugin));\r\nexport { CfgSyncPlugin };\r\n//# sourceMappingURL=CfgSyncPlugin.js.map", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n// ###################################################################################################################################################\r\n// Note: DON'T Export these const from the package as we are still targeting IE/ES5 this will export a mutable variables that someone could change ###\r\n// ###################################################################################################################################################\r\n// Generally you should only put values that are used more than 2 times and then only if not already exposed as a constant (such as SdkCoreNames)\r\n// as when using \"short\" named values from here they will be will be minified smaller than the SdkCoreNames[eSdkCoreNames.xxxx] value.\r\nexport var STR_DURATION = \"duration\";\r\n//# sourceMappingURL=InternalConstants.js.map", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n// @skip-file-minify\r\n// ##############################################################\r\n// AUTO GENERATED FILE: This file is Auto Generated during build.\r\n// ##############################################################\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n// Note: DON'T Export these const from the package as we are still targeting ES3 this will export a mutable variables that someone could change!!!\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\nexport var _DYN_TAGS = \"tags\"; // Count: 17\r\nexport var _DYN_DEVICE_TYPE = \"deviceType\"; // Count: 3\r\nexport var _DYN_DATA = \"data\"; // Count: 15\r\nexport var _DYN_NAME = \"name\"; // Count: 8\r\nexport var _DYN_TRACE_ID = \"traceID\"; // Count: 5\r\nexport var _DYN_LENGTH = \"length\"; // Count: 38\r\nexport var _DYN_STRINGIFY = \"stringify\"; // Count: 5\r\nexport var _DYN_MEASUREMENTS = \"measurements\"; // Count: 7\r\nexport var _DYN_DATA_TYPE = \"dataType\"; // Count: 10\r\nexport var _DYN_ENVELOPE_TYPE = \"envelopeType\"; // Count: 7\r\nexport var _DYN_TO_STRING = \"toString\"; // Count: 7\r\nexport var _DYN__GET = \"_get\"; // Count: 5\r\nexport var _DYN_ENQUEUE = \"enqueue\"; // Count: 7\r\nexport var _DYN_COUNT = \"count\"; // Count: 7\r\nexport var _DYN_EVENTS_LIMIT_IN_MEM = \"eventsLimitInMem\"; // Count: 2\r\nexport var _DYN_PUSH = \"push\"; // Count: 9\r\nexport var _DYN_ITEM = \"item\"; // Count: 6\r\nexport var _DYN_EMIT_LINE_DELIMITED_0 = \"emitLineDelimitedJson\"; // Count: 3\r\nexport var _DYN_CLEAR = \"clear\"; // Count: 6\r\nexport var _DYN_CREATE_NEW = \"createNew\"; // Count: 3\r\nexport var _DYN_MARK_AS_SENT = \"markAsSent\"; // Count: 4\r\nexport var _DYN_CLEAR_SENT = \"clearSent\"; // Count: 5\r\nexport var _DYN_BUFFER_OVERRIDE = \"bufferOverride\"; // Count: 3\r\nexport var _DYN__BUFFER__KEY = \"BUFFER_KEY\"; // Count: 5\r\nexport var _DYN__SENT__BUFFER__KEY = \"SENT_BUFFER_KEY\"; // Count: 8\r\nexport var _DYN_CONCAT = \"concat\"; // Count: 6\r\nexport var _DYN__MAX__BUFFER__SIZE = \"MAX_BUFFER_SIZE\"; // Count: 5\r\nexport var _DYN_TRIGGER_SEND = \"triggerSend\"; // Count: 5\r\nexport var _DYN_DIAG_LOG = \"diagLog\"; // Count: 16\r\nexport var _DYN_INITIALIZE = \"initialize\"; // Count: 3\r\nexport var _DYN__SENDER = \"_sender\"; // Count: 5\r\nexport var _DYN_CUSTOM_HEADERS = \"customHeaders\"; // Count: 3\r\nexport var _DYN_MAX_BATCH_SIZE_IN_BY1 = \"maxBatchSizeInBytes\"; // Count: 2\r\nexport var _DYN_ONUNLOAD_DISABLE_BEA2 = \"onunloadDisableBeacon\"; // Count: 3\r\nexport var _DYN_IS_BEACON_API_DISABL3 = \"isBeaconApiDisabled\"; // Count: 3\r\nexport var _DYN_ALWAYS_USE_XHR_OVERR4 = \"alwaysUseXhrOverride\"; // Count: 2\r\nexport var _DYN_DISABLE_XHR = \"disableXhr\"; // Count: 3\r\nexport var _DYN_ENABLE_SESSION_STORA5 = \"enableSessionStorageBuffer\"; // Count: 2\r\nexport var _DYN__BUFFER = \"_buffer\"; // Count: 9\r\nexport var _DYN_ONUNLOAD_DISABLE_FET6 = \"onunloadDisableFetch\"; // Count: 2\r\nexport var _DYN_DISABLE_SEND_BEACON_7 = \"disableSendBeaconSplit\"; // Count: 2\r\nexport var _DYN_INSTRUMENTATION_KEY = \"instrumentationKey\"; // Count: 2\r\nexport var _DYN_ENABLE_SEND_PROMISE = \"enableSendPromise\"; // Count: 2\r\nexport var _DYN_GET_SENDER_INST = \"getSenderInst\"; // Count: 4\r\nexport var _DYN_UNLOAD_TRANSPORTS = \"unloadTransports\"; // Count: 2\r\nexport var _DYN_CONVERT_UNDEFINED = \"convertUndefined\"; // Count: 2\r\nexport var _DYN_MAX_BATCH_INTERVAL = \"maxBatchInterval\"; // Count: 2\r\nexport var _DYN_SERIALIZE = \"serialize\"; // Count: 4\r\nexport var _DYN__ON_ERROR = \"_onError\"; // Count: 7\r\nexport var _DYN__ON_PARTIAL_SUCCESS = \"_onPartialSuccess\"; // Count: 3\r\nexport var _DYN__ON_SUCCESS = \"_onSuccess\"; // Count: 6\r\nexport var _DYN_ITEMS_RECEIVED = \"itemsReceived\"; // Count: 3\r\nexport var _DYN_ITEMS_ACCEPTED = \"itemsAccepted\"; // Count: 3\r\nexport var _DYN_ORI_PAYLOAD = \"oriPayload\"; // Count: 3\r\nexport var _DYN_BASE_TYPE = \"baseType\"; // Count: 4\r\nexport var _DYN_SAMPLE_RATE = \"sampleRate\"; // Count: 4\r\nexport var _DYN_EVENTS_SEND_REQUEST = \"eventsSendRequest\"; // Count: 2\r\nexport var _DYN_GET_SAMPLING_SCORE = \"getSamplingScore\"; // Count: 2\r\nexport var _DYN_GET_HASH_CODE_SCORE = \"getHashCodeScore\"; // Count: 4\r\n//# sourceMappingURL=__DynamicConstants.js.map", "import { __assign } from \"tslib\";\r\nimport { CtxTagKeys, Data, Envelope, Event, Exception, HttpMethod, Metric, PageView, PageViewPerformance, RemoteDependencyData, SampleRate, Trace, dataSanitizeString } from \"@microsoft/applicationinsights-common\";\r\nimport { _throwInternal, _warnToConsole, getJSON, hasJSON, isNullOrUndefined, isNumber, isString, isTruthy, objForEachKey, optimizeObject, setValue, toISOString } from \"@microsoft/applicationinsights-core-js\";\r\nimport { STR_DURATION } from \"./InternalConstants\";\r\nimport { _DYN_DATA, _DYN_DATA_TYPE, _DYN_DEVICE_TYPE, _DYN_ENVELOPE_TYPE, _DYN_LENGTH, _DYN_MEASUREMENTS, _DYN_NAME, _DYN_STRINGIFY, _DYN_TAGS, _DYN_TO_STRING, _DYN_TRACE_ID } from \"./__DynamicConstants\";\r\n// these two constants are used to filter out properties not needed when trying to extract custom properties and measurements from the incoming payload\r\nvar strBaseType = \"baseType\";\r\nvar strBaseData = \"baseData\";\r\nvar strProperties = \"properties\";\r\nvar strTrue = \"true\";\r\nfunction _setValueIf(target, field, value) {\r\n    return setValue(target, field, value, isTruthy);\r\n}\r\n/*\r\n * Maps Part A data from CS 4.0\r\n */\r\nfunction _extractPartAExtensions(logger, item, env) {\r\n    // todo: switch to keys from common in this method\r\n    var envTags = env[_DYN_TAGS /* @min:%2etags */] = env[_DYN_TAGS /* @min:%2etags */] || {};\r\n    var itmExt = item.ext = item.ext || {};\r\n    var itmTags = item[_DYN_TAGS /* @min:%2etags */] = item[_DYN_TAGS /* @min:%2etags */] || [];\r\n    var extUser = itmExt.user;\r\n    if (extUser) {\r\n        _setValueIf(envTags, CtxTagKeys.userAuthUserId, extUser.authId);\r\n        _setValueIf(envTags, CtxTagKeys.userId, extUser.id || extUser.localId);\r\n    }\r\n    var extApp = itmExt.app;\r\n    if (extApp) {\r\n        _setValueIf(envTags, CtxTagKeys.sessionId, extApp.sesId);\r\n    }\r\n    var extDevice = itmExt.device;\r\n    if (extDevice) {\r\n        _setValueIf(envTags, CtxTagKeys.deviceId, extDevice.id || extDevice.localId);\r\n        _setValueIf(envTags, CtxTagKeys[_DYN_DEVICE_TYPE /* @min:%2edeviceType */], extDevice.deviceClass);\r\n        _setValueIf(envTags, CtxTagKeys.deviceIp, extDevice.ip);\r\n        _setValueIf(envTags, CtxTagKeys.deviceModel, extDevice.model);\r\n        _setValueIf(envTags, CtxTagKeys[_DYN_DEVICE_TYPE /* @min:%2edeviceType */], extDevice[_DYN_DEVICE_TYPE /* @min:%2edeviceType */]);\r\n    }\r\n    var web = item.ext.web;\r\n    if (web) {\r\n        _setValueIf(envTags, CtxTagKeys.deviceLanguage, web.browserLang);\r\n        _setValueIf(envTags, CtxTagKeys.deviceBrowserVersion, web.browserVer);\r\n        _setValueIf(envTags, CtxTagKeys.deviceBrowser, web.browser);\r\n        var envData = env[_DYN_DATA /* @min:%2edata */] = env[_DYN_DATA /* @min:%2edata */] || {};\r\n        var envBaseData = envData[strBaseData] = envData[strBaseData] || {};\r\n        var envProps = envBaseData[strProperties] = envBaseData[strProperties] || {};\r\n        _setValueIf(envProps, \"domain\", web.domain);\r\n        _setValueIf(envProps, \"isManual\", web.isManual ? strTrue : null);\r\n        _setValueIf(envProps, \"screenRes\", web.screenRes);\r\n        _setValueIf(envProps, \"userConsent\", web.userConsent ? strTrue : null);\r\n    }\r\n    var extOs = itmExt.os;\r\n    if (extOs) {\r\n        _setValueIf(envTags, CtxTagKeys.deviceOS, extOs[_DYN_NAME /* @min:%2ename */]);\r\n        _setValueIf(envTags, CtxTagKeys.deviceOSVersion, extOs.osVer);\r\n    }\r\n    // No support for mapping Trace.traceState to 2.0 as it is currently empty\r\n    var extTrace = itmExt.trace;\r\n    if (extTrace) {\r\n        _setValueIf(envTags, CtxTagKeys.operationParentId, extTrace.parentID);\r\n        _setValueIf(envTags, CtxTagKeys.operationName, dataSanitizeString(logger, extTrace[_DYN_NAME /* @min:%2ename */]));\r\n        _setValueIf(envTags, CtxTagKeys.operationId, extTrace[_DYN_TRACE_ID /* @min:%2etraceID */]);\r\n    }\r\n    // Sample 4.0 schema\r\n    //  {\r\n    //     \"time\" : \"2018-09-05T22:51:22.4936Z\",\r\n    //     \"name\" : \"MetricWithNamespace\",\r\n    //     \"iKey\" : \"ABC-5a4cbd20-e601-4ef5-a3c6-5d6577e4398e\",\r\n    //     \"ext\": {  \"cloud\": {\r\n    //          \"role\": \"WATSON3\",\r\n    //          \"roleInstance\": \"CO4AEAP00000260\"\r\n    //      },\r\n    //      \"device\": {}, \"correlation\": {} },\r\n    //      \"tags\": [\r\n    //        { \"amazon.region\" : \"east2\" },\r\n    //        { \"os.expid\" : \"wp:02df239\" }\r\n    //     ]\r\n    //   }\r\n    var tgs = {};\r\n    // deals with tags.push({object})\r\n    for (var i = itmTags[_DYN_LENGTH /* @min:%2elength */] - 1; i >= 0; i--) {\r\n        var tg = itmTags[i];\r\n        objForEachKey(tg, function (key, value) {\r\n            tgs[key] = value;\r\n        });\r\n        itmTags.splice(i, 1);\r\n    }\r\n    // deals with tags[key]=value (and handles hasOwnProperty)\r\n    objForEachKey(itmTags, function (tg, value) {\r\n        tgs[tg] = value;\r\n    });\r\n    var theTags = __assign(__assign({}, envTags), tgs);\r\n    if (!theTags[CtxTagKeys.internalSdkVersion]) {\r\n        // Append a version in case it is not already set\r\n        theTags[CtxTagKeys.internalSdkVersion] = dataSanitizeString(logger, \"javascript:\".concat(EnvelopeCreator.Version), 64);\r\n    }\r\n    env[_DYN_TAGS /* @min:%2etags */] = optimizeObject(theTags);\r\n}\r\nfunction _extractPropsAndMeasurements(data, properties, measurements) {\r\n    if (!isNullOrUndefined(data)) {\r\n        objForEachKey(data, function (key, value) {\r\n            if (isNumber(value)) {\r\n                measurements[key] = value;\r\n            }\r\n            else if (isString(value)) {\r\n                properties[key] = value;\r\n            }\r\n            else if (hasJSON()) {\r\n                properties[key] = getJSON()[_DYN_STRINGIFY /* @min:%2estringify */](value);\r\n            }\r\n        });\r\n    }\r\n}\r\nfunction _convertPropsUndefinedToCustomDefinedValue(properties, customUndefinedValue) {\r\n    if (!isNullOrUndefined(properties)) {\r\n        objForEachKey(properties, function (key, value) {\r\n            properties[key] = value || customUndefinedValue;\r\n        });\r\n    }\r\n}\r\n// TODO: Do we want this to take logger as arg or use this._logger as nonstatic?\r\nfunction _createEnvelope(logger, envelopeType, telemetryItem, data) {\r\n    var envelope = new Envelope(logger, data, envelopeType);\r\n    _setValueIf(envelope, \"sampleRate\", telemetryItem[SampleRate]);\r\n    if ((telemetryItem[strBaseData] || {}).startTime) {\r\n        // Starting from Version 3.0.3, the time property will be assigned by the startTime value,\r\n        // which records the loadEvent time for the pageView event.\r\n        envelope.time = toISOString(telemetryItem[strBaseData].startTime);\r\n    }\r\n    envelope.iKey = telemetryItem.iKey;\r\n    var iKeyNoDashes = telemetryItem.iKey.replace(/-/g, \"\");\r\n    envelope[_DYN_NAME /* @min:%2ename */] = envelope[_DYN_NAME /* @min:%2ename */].replace(\"{0}\", iKeyNoDashes);\r\n    // extract all extensions from ctx\r\n    _extractPartAExtensions(logger, telemetryItem, envelope);\r\n    // loop through the envelope tags (extension of Part A) and pick out the ones that should go in outgoing envelope tags\r\n    telemetryItem[_DYN_TAGS /* @min:%2etags */] = telemetryItem[_DYN_TAGS /* @min:%2etags */] || [];\r\n    return optimizeObject(envelope);\r\n}\r\nfunction EnvelopeCreatorInit(logger, telemetryItem) {\r\n    if (isNullOrUndefined(telemetryItem[strBaseData])) {\r\n        _throwInternal(logger, 1 /* eLoggingSeverity.CRITICAL */, 46 /* _eInternalMessageId.TelemetryEnvelopeInvalid */, \"telemetryItem.baseData cannot be null.\");\r\n    }\r\n}\r\nexport var EnvelopeCreator = {\r\n    Version: '3.3.1'\r\n};\r\nexport function DependencyEnvelopeCreator(logger, telemetryItem, customUndefinedValue) {\r\n    EnvelopeCreatorInit(logger, telemetryItem);\r\n    var customMeasurements = telemetryItem[strBaseData][_DYN_MEASUREMENTS /* @min:%2emeasurements */] || {};\r\n    var customProperties = telemetryItem[strBaseData][strProperties] || {};\r\n    _extractPropsAndMeasurements(telemetryItem[_DYN_DATA /* @min:%2edata */], customProperties, customMeasurements);\r\n    if (!isNullOrUndefined(customUndefinedValue)) {\r\n        _convertPropsUndefinedToCustomDefinedValue(customProperties, customUndefinedValue);\r\n    }\r\n    var bd = telemetryItem[strBaseData];\r\n    if (isNullOrUndefined(bd)) {\r\n        _warnToConsole(logger, \"Invalid input for dependency data\");\r\n        return null;\r\n    }\r\n    var method = bd[strProperties] && bd[strProperties][HttpMethod] ? bd[strProperties][HttpMethod] : \"GET\";\r\n    var remoteDepData = new RemoteDependencyData(logger, bd.id, bd.target, bd[_DYN_NAME /* @min:%2ename */], bd[STR_DURATION /* @min:%2eduration */], bd.success, bd.responseCode, method, bd.type, bd.correlationContext, customProperties, customMeasurements);\r\n    var data = new Data(RemoteDependencyData[_DYN_DATA_TYPE /* @min:%2edataType */], remoteDepData);\r\n    return _createEnvelope(logger, RemoteDependencyData[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], telemetryItem, data);\r\n}\r\nexport function EventEnvelopeCreator(logger, telemetryItem, customUndefinedValue) {\r\n    EnvelopeCreatorInit(logger, telemetryItem);\r\n    var customProperties = {};\r\n    var customMeasurements = {};\r\n    if (telemetryItem[strBaseType] !== Event[_DYN_DATA_TYPE /* @min:%2edataType */]) {\r\n        customProperties[\"baseTypeSource\"] = telemetryItem[strBaseType]; // save the passed in base type as a property\r\n    }\r\n    if (telemetryItem[strBaseType] === Event[_DYN_DATA_TYPE /* @min:%2edataType */]) { // take collection\r\n        customProperties = telemetryItem[strBaseData][strProperties] || {};\r\n        customMeasurements = telemetryItem[strBaseData][_DYN_MEASUREMENTS /* @min:%2emeasurements */] || {};\r\n    }\r\n    else { // if its not a known type, convert to custom event\r\n        if (telemetryItem[strBaseData]) {\r\n            _extractPropsAndMeasurements(telemetryItem[strBaseData], customProperties, customMeasurements);\r\n        }\r\n    }\r\n    // Extract root level properties from part C telemetryItem.data\r\n    _extractPropsAndMeasurements(telemetryItem[_DYN_DATA /* @min:%2edata */], customProperties, customMeasurements);\r\n    if (!isNullOrUndefined(customUndefinedValue)) {\r\n        _convertPropsUndefinedToCustomDefinedValue(customProperties, customUndefinedValue);\r\n    }\r\n    var eventName = telemetryItem[strBaseData][_DYN_NAME /* @min:%2ename */];\r\n    var eventData = new Event(logger, eventName, customProperties, customMeasurements);\r\n    var data = new Data(Event[_DYN_DATA_TYPE /* @min:%2edataType */], eventData);\r\n    return _createEnvelope(logger, Event[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], telemetryItem, data);\r\n}\r\nexport function ExceptionEnvelopeCreator(logger, telemetryItem, customUndefinedValue) {\r\n    EnvelopeCreatorInit(logger, telemetryItem);\r\n    // Extract root level properties from part C telemetryItem.data\r\n    var customMeasurements = telemetryItem[strBaseData][_DYN_MEASUREMENTS /* @min:%2emeasurements */] || {};\r\n    var customProperties = telemetryItem[strBaseData][strProperties] || {};\r\n    _extractPropsAndMeasurements(telemetryItem[_DYN_DATA /* @min:%2edata */], customProperties, customMeasurements);\r\n    if (!isNullOrUndefined(customUndefinedValue)) {\r\n        _convertPropsUndefinedToCustomDefinedValue(customProperties, customUndefinedValue);\r\n    }\r\n    var bd = telemetryItem[strBaseData];\r\n    var exData = Exception.CreateFromInterface(logger, bd, customProperties, customMeasurements);\r\n    var data = new Data(Exception[_DYN_DATA_TYPE /* @min:%2edataType */], exData);\r\n    return _createEnvelope(logger, Exception[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], telemetryItem, data);\r\n}\r\nexport function MetricEnvelopeCreator(logger, telemetryItem, customUndefinedValue) {\r\n    EnvelopeCreatorInit(logger, telemetryItem);\r\n    var baseData = telemetryItem[strBaseData];\r\n    var props = baseData[strProperties] || {};\r\n    var measurements = baseData[_DYN_MEASUREMENTS /* @min:%2emeasurements */] || {};\r\n    _extractPropsAndMeasurements(telemetryItem[_DYN_DATA /* @min:%2edata */], props, measurements);\r\n    if (!isNullOrUndefined(customUndefinedValue)) {\r\n        _convertPropsUndefinedToCustomDefinedValue(props, customUndefinedValue);\r\n    }\r\n    var baseMetricData = new Metric(logger, baseData[_DYN_NAME /* @min:%2ename */], baseData.average, baseData.sampleCount, baseData.min, baseData.max, baseData.stdDev, props, measurements);\r\n    var data = new Data(Metric[_DYN_DATA_TYPE /* @min:%2edataType */], baseMetricData);\r\n    return _createEnvelope(logger, Metric[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], telemetryItem, data);\r\n}\r\nexport function PageViewEnvelopeCreator(logger, telemetryItem, customUndefinedValue) {\r\n    EnvelopeCreatorInit(logger, telemetryItem);\r\n    // Since duration is not part of the domain properties in Common Schema, extract it from part C\r\n    var duration;\r\n    var baseData = telemetryItem[strBaseData];\r\n    if (!isNullOrUndefined(baseData) &&\r\n        !isNullOrUndefined(baseData[strProperties]) &&\r\n        !isNullOrUndefined(baseData[strProperties][STR_DURATION])) { // from part B properties\r\n        duration = baseData[strProperties][STR_DURATION];\r\n        delete baseData[strProperties][STR_DURATION];\r\n    }\r\n    else if (!isNullOrUndefined(telemetryItem[_DYN_DATA /* @min:%2edata */]) &&\r\n        !isNullOrUndefined(telemetryItem[_DYN_DATA /* @min:%2edata */][STR_DURATION])) { // from custom properties\r\n        duration = telemetryItem[_DYN_DATA /* @min:%2edata */][STR_DURATION];\r\n        delete telemetryItem[_DYN_DATA /* @min:%2edata */][STR_DURATION];\r\n    }\r\n    var bd = telemetryItem[strBaseData];\r\n    // special case: pageview.id is grabbed from current operation id. Analytics plugin is decoupled from properties plugin, so this is done here instead. This can be made a default telemetry intializer instead if needed to be decoupled from channel\r\n    var currentContextId;\r\n    if (((telemetryItem.ext || {}).trace || {})[_DYN_TRACE_ID /* @min:%2etraceID */]) {\r\n        currentContextId = telemetryItem.ext.trace[_DYN_TRACE_ID /* @min:%2etraceID */];\r\n    }\r\n    var id = bd.id || currentContextId;\r\n    var name = bd[_DYN_NAME /* @min:%2ename */];\r\n    var url = bd.uri;\r\n    var properties = bd[strProperties] || {};\r\n    var measurements = bd[_DYN_MEASUREMENTS /* @min:%2emeasurements */] || {};\r\n    // refUri is a field that Breeze still does not recognize as part of Part B. For now, put it in Part C until it supports it as a domain property\r\n    if (!isNullOrUndefined(bd.refUri)) {\r\n        properties[\"refUri\"] = bd.refUri;\r\n    }\r\n    // pageType is a field that Breeze still does not recognize as part of Part B. For now, put it in Part C until it supports it as a domain property\r\n    if (!isNullOrUndefined(bd.pageType)) {\r\n        properties[\"pageType\"] = bd.pageType;\r\n    }\r\n    // isLoggedIn is a field that Breeze still does not recognize as part of Part B. For now, put it in Part C until it supports it as a domain property\r\n    if (!isNullOrUndefined(bd.isLoggedIn)) {\r\n        properties[\"isLoggedIn\"] = bd.isLoggedIn[_DYN_TO_STRING /* @min:%2etoString */]();\r\n    }\r\n    // pageTags is a field that Breeze still does not recognize as part of Part B. For now, put it in Part C until it supports it as a domain property\r\n    if (!isNullOrUndefined(bd[strProperties])) {\r\n        var pageTags = bd[strProperties];\r\n        objForEachKey(pageTags, function (key, value) {\r\n            properties[key] = value;\r\n        });\r\n    }\r\n    _extractPropsAndMeasurements(telemetryItem[_DYN_DATA /* @min:%2edata */], properties, measurements);\r\n    if (!isNullOrUndefined(customUndefinedValue)) {\r\n        _convertPropsUndefinedToCustomDefinedValue(properties, customUndefinedValue);\r\n    }\r\n    var pageViewData = new PageView(logger, name, url, duration, properties, measurements, id);\r\n    var data = new Data(PageView[_DYN_DATA_TYPE /* @min:%2edataType */], pageViewData);\r\n    return _createEnvelope(logger, PageView[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], telemetryItem, data);\r\n}\r\nexport function PageViewPerformanceEnvelopeCreator(logger, telemetryItem, customUndefinedValue) {\r\n    EnvelopeCreatorInit(logger, telemetryItem);\r\n    var bd = telemetryItem[strBaseData];\r\n    var name = bd[_DYN_NAME /* @min:%2ename */];\r\n    var url = bd.uri || bd.url;\r\n    var properties = bd[strProperties] || {};\r\n    var measurements = bd[_DYN_MEASUREMENTS /* @min:%2emeasurements */] || {};\r\n    _extractPropsAndMeasurements(telemetryItem[_DYN_DATA /* @min:%2edata */], properties, measurements);\r\n    if (!isNullOrUndefined(customUndefinedValue)) {\r\n        _convertPropsUndefinedToCustomDefinedValue(properties, customUndefinedValue);\r\n    }\r\n    var baseData = new PageViewPerformance(logger, name, url, undefined, properties, measurements, bd);\r\n    var data = new Data(PageViewPerformance[_DYN_DATA_TYPE /* @min:%2edataType */], baseData);\r\n    return _createEnvelope(logger, PageViewPerformance[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], telemetryItem, data);\r\n}\r\nexport function TraceEnvelopeCreator(logger, telemetryItem, customUndefinedValue) {\r\n    EnvelopeCreatorInit(logger, telemetryItem);\r\n    var message = telemetryItem[strBaseData].message;\r\n    var severityLevel = telemetryItem[strBaseData].severityLevel;\r\n    var props = telemetryItem[strBaseData][strProperties] || {};\r\n    var measurements = telemetryItem[strBaseData][_DYN_MEASUREMENTS /* @min:%2emeasurements */] || {};\r\n    _extractPropsAndMeasurements(telemetryItem[_DYN_DATA /* @min:%2edata */], props, measurements);\r\n    if (!isNullOrUndefined(customUndefinedValue)) {\r\n        _convertPropsUndefinedToCustomDefinedValue(props, customUndefinedValue);\r\n    }\r\n    var baseData = new Trace(logger, message, severityLevel, props, measurements);\r\n    var data = new Data(Trace[_DYN_DATA_TYPE /* @min:%2edataType */], baseData);\r\n    return _createEnvelope(logger, Trace[_DYN_ENVELOPE_TYPE /* @min:%2eenvelopeType */], telemetryItem, data);\r\n}\r\n//# sourceMappingURL=EnvelopeCreator.js.map", "import { __extends } from \"tslib\";\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { utlGetSessionStorage, utlRemoveSessionStorage, utlSetSessionStorage } from \"@microsoft/applicationinsights-common\";\r\nimport { _throwInternal, arrForEach, arrIndexOf, dumpObj, getExceptionName, getJSON, isArray, isFunction, isNullOrUndefined, isString } from \"@microsoft/applicationinsights-core-js\";\r\nimport { _DYN_BUFFER_OVERRIDE, _DYN_CLEAR, _DYN_CLEAR_SENT, _DYN_CONCAT, _DYN_COUNT, _DYN_CREATE_NEW, _DYN_EMIT_LINE_DELIMITED_0, _DYN_ENQUEUE, _DYN_EVENTS_LIMIT_IN_MEM, _DYN_ITEM, _DYN_LENGTH, _DYN_MARK_AS_SENT, _DYN_PUSH, _DYN_STRINGIFY, _DYN__BUFFER__KEY, _DYN__GET, _DYN__MAX__BUFFER__SIZE, _DYN__SENT__BUFFER__KEY } from \"./__DynamicConstants\";\r\nvar BaseSendBuffer = /** @class */ (function () {\r\n    function BaseSendBuffer(logger, config) {\r\n        var _buffer = [];\r\n        var _bufferFullMessageSent = false;\r\n        var _maxRetryCnt = config.maxRetryCnt;\r\n        this[_DYN__GET /* @min:%2e_get */] = function () {\r\n            return _buffer;\r\n        };\r\n        this._set = function (buffer) {\r\n            _buffer = buffer;\r\n            return _buffer;\r\n        };\r\n        dynamicProto(BaseSendBuffer, this, function (_self) {\r\n            _self[_DYN_ENQUEUE /* @min:%2eenqueue */] = function (payload) {\r\n                if (_self[_DYN_COUNT /* @min:%2ecount */]() >= config[_DYN_EVENTS_LIMIT_IN_MEM /* @min:%2eeventsLimitInMem */]) {\r\n                    // sent internal log only once per page view\r\n                    if (!_bufferFullMessageSent) {\r\n                        _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 105 /* _eInternalMessageId.InMemoryStorageBufferFull */, \"Maximum in-memory buffer size reached: \" + _self[_DYN_COUNT /* @min:%2ecount */](), true);\r\n                        _bufferFullMessageSent = true;\r\n                    }\r\n                    return;\r\n                }\r\n                payload.cnt = payload.cnt || 0;\r\n                // max retry is defined, and max retry is reached, do not add the payload to buffer\r\n                if (!isNullOrUndefined(_maxRetryCnt)) {\r\n                    if (payload.cnt > _maxRetryCnt) {\r\n                        // TODO: add log here on dropping payloads\r\n                        return;\r\n                    }\r\n                }\r\n                _buffer[_DYN_PUSH /* @min:%2epush */](payload);\r\n                return;\r\n            };\r\n            _self[_DYN_COUNT /* @min:%2ecount */] = function () {\r\n                return _buffer[_DYN_LENGTH /* @min:%2elength */];\r\n            };\r\n            _self.size = function () {\r\n                var size = _buffer[_DYN_LENGTH /* @min:%2elength */];\r\n                for (var lp = 0; lp < _buffer[_DYN_LENGTH /* @min:%2elength */]; lp++) {\r\n                    size += (_buffer[lp].item)[_DYN_LENGTH /* @min:%2elength */];\r\n                }\r\n                if (!config[_DYN_EMIT_LINE_DELIMITED_0 /* @min:%2eemitLineDelimitedJson */]) {\r\n                    size += 2;\r\n                }\r\n                return size;\r\n            };\r\n            _self[_DYN_CLEAR /* @min:%2eclear */] = function () {\r\n                _buffer = [];\r\n                _bufferFullMessageSent = false;\r\n            };\r\n            _self.getItems = function () {\r\n                return _buffer.slice(0);\r\n            };\r\n            _self.batchPayloads = function (payloads) {\r\n                if (payloads && payloads[_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n                    var payloadStr_1 = [];\r\n                    arrForEach(payloads, function (payload) {\r\n                        payloadStr_1[_DYN_PUSH /* @min:%2epush */](payload[_DYN_ITEM /* @min:%2eitem */]);\r\n                    });\r\n                    var batch = config[_DYN_EMIT_LINE_DELIMITED_0 /* @min:%2eemitLineDelimitedJson */] ?\r\n                        payloadStr_1.join(\"\\n\") :\r\n                        \"[\" + payloadStr_1.join(\",\") + \"]\";\r\n                    return batch;\r\n                }\r\n                return null;\r\n            };\r\n            _self[_DYN_CREATE_NEW /* @min:%2ecreateNew */] = function (newLogger, newConfig, canUseSessionStorage) {\r\n                var items = _buffer.slice(0);\r\n                newLogger = newLogger || logger;\r\n                newConfig = newConfig || {};\r\n                var newBuffer = !!canUseSessionStorage ? new SessionStorageSendBuffer(newLogger, newConfig) : new ArraySendBuffer(newLogger, newConfig);\r\n                arrForEach(items, function (payload) {\r\n                    newBuffer[_DYN_ENQUEUE /* @min:%2eenqueue */](payload);\r\n                });\r\n                return newBuffer;\r\n            };\r\n        });\r\n    }\r\n    BaseSendBuffer.prototype.enqueue = function (payload) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    BaseSendBuffer.prototype.count = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return 0;\r\n    };\r\n    BaseSendBuffer.prototype.size = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return 0;\r\n    };\r\n    BaseSendBuffer.prototype.clear = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    BaseSendBuffer.prototype.getItems = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    BaseSendBuffer.prototype.batchPayloads = function (payload) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    BaseSendBuffer.prototype.createNew = function (newLogger, newConfig, canUseSessionStorage) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    return BaseSendBuffer;\r\n}());\r\n/*\r\n * An array based send buffer.\r\n */\r\nvar ArraySendBuffer = /** @class */ (function (_super) {\r\n    __extends(ArraySendBuffer, _super);\r\n    function ArraySendBuffer(logger, config) {\r\n        var _this = _super.call(this, logger, config) || this;\r\n        dynamicProto(ArraySendBuffer, _this, function (_self, _base) {\r\n            _self[_DYN_MARK_AS_SENT /* @min:%2emarkAsSent */] = function (payload) {\r\n                _base[_DYN_CLEAR /* @min:%2eclear */]();\r\n            };\r\n            _self[_DYN_CLEAR_SENT /* @min:%2eclearSent */] = function (payload) {\r\n                // not supported\r\n            };\r\n        });\r\n        return _this;\r\n    }\r\n    ArraySendBuffer.prototype.markAsSent = function (payload) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    ArraySendBuffer.prototype.clearSent = function (payload) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    return ArraySendBuffer;\r\n}(BaseSendBuffer));\r\nexport { ArraySendBuffer };\r\nvar PREVIOUS_KEYS = [\"AI_buffer\", \"AI_sentBuffer\"];\r\n/*\r\n * Session storage buffer holds a copy of all unsent items in the browser session storage.\r\n */\r\nvar SessionStorageSendBuffer = /** @class */ (function (_super) {\r\n    __extends(SessionStorageSendBuffer, _super);\r\n    function SessionStorageSendBuffer(logger, config) {\r\n        var _this = _super.call(this, logger, config) || this;\r\n        var _bufferFullMessageSent = false;\r\n        //Note: should not use config.namePrefix directly, because it will always refers to the latest namePrefix\r\n        var _namePrefix = config === null || config === void 0 ? void 0 : config.namePrefix;\r\n        // TODO: add remove buffer override as well\r\n        var _b = config[_DYN_BUFFER_OVERRIDE /* @min:%2ebufferOverride */] || { getItem: utlGetSessionStorage, setItem: utlSetSessionStorage }, getItem = _b.getItem, setItem = _b.setItem;\r\n        var _maxRetryCnt = config.maxRetryCnt;\r\n        dynamicProto(SessionStorageSendBuffer, _this, function (_self, _base) {\r\n            var bufferItems = _getBuffer(SessionStorageSendBuffer[_DYN__BUFFER__KEY /* @min:%2eBUFFER_KEY */]);\r\n            var itemsInSentBuffer = _getBuffer(SessionStorageSendBuffer[_DYN__SENT__BUFFER__KEY /* @min:%2eSENT_BUFFER_KEY */]);\r\n            var previousItems = _getPreviousEvents();\r\n            var notDeliveredItems = itemsInSentBuffer[_DYN_CONCAT /* @min:%2econcat */](previousItems);\r\n            var buffer = _self._set(bufferItems[_DYN_CONCAT /* @min:%2econcat */](notDeliveredItems));\r\n            // If the buffer has too many items, drop items from the end.\r\n            if (buffer[_DYN_LENGTH /* @min:%2elength */] > SessionStorageSendBuffer[_DYN__MAX__BUFFER__SIZE /* @min:%2eMAX_BUFFER_SIZE */]) {\r\n                buffer[_DYN_LENGTH /* @min:%2elength */] = SessionStorageSendBuffer[_DYN__MAX__BUFFER__SIZE /* @min:%2eMAX_BUFFER_SIZE */];\r\n            }\r\n            _setBuffer(SessionStorageSendBuffer[_DYN__SENT__BUFFER__KEY /* @min:%2eSENT_BUFFER_KEY */], []);\r\n            _setBuffer(SessionStorageSendBuffer[_DYN__BUFFER__KEY /* @min:%2eBUFFER_KEY */], buffer);\r\n            _self[_DYN_ENQUEUE /* @min:%2eenqueue */] = function (payload) {\r\n                if (_self[_DYN_COUNT /* @min:%2ecount */]() >= SessionStorageSendBuffer[_DYN__MAX__BUFFER__SIZE /* @min:%2eMAX_BUFFER_SIZE */]) {\r\n                    // sent internal log only once per page view\r\n                    if (!_bufferFullMessageSent) {\r\n                        _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 67 /* _eInternalMessageId.SessionStorageBufferFull */, \"Maximum buffer size reached: \" + _self[_DYN_COUNT /* @min:%2ecount */](), true);\r\n                        _bufferFullMessageSent = true;\r\n                    }\r\n                    return;\r\n                }\r\n                payload.cnt = payload.cnt || 0;\r\n                // max retry is defined, and max retry is reached, do not add the payload to buffer\r\n                if (!isNullOrUndefined(_maxRetryCnt)) {\r\n                    if (payload.cnt > _maxRetryCnt) {\r\n                        // TODO: add log here on dropping payloads\r\n                        return;\r\n                    }\r\n                }\r\n                _base[_DYN_ENQUEUE /* @min:%2eenqueue */](payload);\r\n                _setBuffer(SessionStorageSendBuffer.BUFFER_KEY, _self[_DYN__GET /* @min:%2e_get */]());\r\n            };\r\n            _self[_DYN_CLEAR /* @min:%2eclear */] = function () {\r\n                _base[_DYN_CLEAR /* @min:%2eclear */]();\r\n                _setBuffer(SessionStorageSendBuffer.BUFFER_KEY, _self[_DYN__GET /* @min:%2e_get */]());\r\n                _setBuffer(SessionStorageSendBuffer[_DYN__SENT__BUFFER__KEY /* @min:%2eSENT_BUFFER_KEY */], []);\r\n                _bufferFullMessageSent = false;\r\n            };\r\n            _self[_DYN_MARK_AS_SENT /* @min:%2emarkAsSent */] = function (payload) {\r\n                _setBuffer(SessionStorageSendBuffer[_DYN__BUFFER__KEY /* @min:%2eBUFFER_KEY */], _self._set(_removePayloadsFromBuffer(payload, _self[_DYN__GET /* @min:%2e_get */]())));\r\n                var sentElements = _getBuffer(SessionStorageSendBuffer[_DYN__SENT__BUFFER__KEY /* @min:%2eSENT_BUFFER_KEY */]);\r\n                if (sentElements instanceof Array && payload instanceof Array) {\r\n                    sentElements = sentElements[_DYN_CONCAT /* @min:%2econcat */](payload);\r\n                    if (sentElements[_DYN_LENGTH /* @min:%2elength */] > SessionStorageSendBuffer[_DYN__MAX__BUFFER__SIZE /* @min:%2eMAX_BUFFER_SIZE */]) {\r\n                        // We send telemetry normally. If the SENT_BUFFER is too big we don't add new elements\r\n                        // until we receive a response from the backend and the buffer has free space again (see clearSent method)\r\n                        _throwInternal(logger, 1 /* eLoggingSeverity.CRITICAL */, 67 /* _eInternalMessageId.SessionStorageBufferFull */, \"Sent buffer reached its maximum size: \" + sentElements[_DYN_LENGTH /* @min:%2elength */], true);\r\n                        sentElements[_DYN_LENGTH /* @min:%2elength */] = SessionStorageSendBuffer[_DYN__MAX__BUFFER__SIZE /* @min:%2eMAX_BUFFER_SIZE */];\r\n                    }\r\n                    _setBuffer(SessionStorageSendBuffer[_DYN__SENT__BUFFER__KEY /* @min:%2eSENT_BUFFER_KEY */], sentElements);\r\n                }\r\n            };\r\n            _self[_DYN_CLEAR_SENT /* @min:%2eclearSent */] = function (payload) {\r\n                var sentElements = _getBuffer(SessionStorageSendBuffer[_DYN__SENT__BUFFER__KEY /* @min:%2eSENT_BUFFER_KEY */]);\r\n                sentElements = _removePayloadsFromBuffer(payload, sentElements);\r\n                _setBuffer(SessionStorageSendBuffer[_DYN__SENT__BUFFER__KEY /* @min:%2eSENT_BUFFER_KEY */], sentElements);\r\n            };\r\n            _self[_DYN_CREATE_NEW /* @min:%2ecreateNew */] = function (newLogger, newConfig, canUseSessionStorage) {\r\n                canUseSessionStorage = !!canUseSessionStorage;\r\n                var unsentItems = _self[_DYN__GET /* @min:%2e_get */]().slice(0);\r\n                var sentItems = _getBuffer(SessionStorageSendBuffer[_DYN__SENT__BUFFER__KEY /* @min:%2eSENT_BUFFER_KEY */]).slice(0);\r\n                newLogger = newLogger || logger;\r\n                newConfig = newConfig || {};\r\n                // to make sure that we do not send duplicated payloads when it is switched back to previous one\r\n                _self[_DYN_CLEAR /* @min:%2eclear */]();\r\n                var newBuffer = canUseSessionStorage ? new SessionStorageSendBuffer(newLogger, newConfig) : new ArraySendBuffer(newLogger, newConfig);\r\n                arrForEach(unsentItems, function (payload) {\r\n                    newBuffer[_DYN_ENQUEUE /* @min:%2eenqueue */](payload);\r\n                });\r\n                if (canUseSessionStorage) {\r\n                    // arr buffer will clear all payloads if markAsSent() is called\r\n                    newBuffer[_DYN_MARK_AS_SENT /* @min:%2emarkAsSent */](sentItems);\r\n                }\r\n                return newBuffer;\r\n            };\r\n            function _removePayloadsFromBuffer(payloads, buffer) {\r\n                var remaining = [];\r\n                var payloadStr = [];\r\n                arrForEach(payloads, function (payload) {\r\n                    payloadStr[_DYN_PUSH /* @min:%2epush */](payload[_DYN_ITEM /* @min:%2eitem */]);\r\n                });\r\n                arrForEach(buffer, function (value) {\r\n                    if (!isFunction(value) && arrIndexOf(payloadStr, value[_DYN_ITEM /* @min:%2eitem */]) === -1) {\r\n                        remaining[_DYN_PUSH /* @min:%2epush */](value);\r\n                    }\r\n                });\r\n                return remaining;\r\n            }\r\n            function _getBuffer(key) {\r\n                var prefixedKey = key;\r\n                prefixedKey = _namePrefix ? _namePrefix + \"_\" + prefixedKey : prefixedKey;\r\n                return _getBufferBase(prefixedKey);\r\n            }\r\n            function _getBufferBase(key) {\r\n                try {\r\n                    var bufferJson = getItem(logger, key);\r\n                    if (bufferJson) {\r\n                        var buffer_1 = getJSON().parse(bufferJson);\r\n                        if (isString(buffer_1)) {\r\n                            // When using some version prototype.js the stringify / parse cycle does not decode array's correctly\r\n                            buffer_1 = getJSON().parse(buffer_1);\r\n                        }\r\n                        if (buffer_1 && isArray(buffer_1)) {\r\n                            return buffer_1;\r\n                        }\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(logger, 1 /* eLoggingSeverity.CRITICAL */, 42 /* _eInternalMessageId.FailedToRestoreStorageBuffer */, \" storage key: \" + key + \", \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n                return [];\r\n            }\r\n            function _setBuffer(key, buffer) {\r\n                var prefixedKey = key;\r\n                try {\r\n                    prefixedKey = _namePrefix ? _namePrefix + \"_\" + prefixedKey : prefixedKey;\r\n                    var bufferJson = JSON[_DYN_STRINGIFY /* @min:%2estringify */](buffer);\r\n                    setItem(logger, prefixedKey, bufferJson);\r\n                }\r\n                catch (e) {\r\n                    // if there was an error, clear the buffer\r\n                    // telemetry is stored in the _buffer array so we won't loose any items\r\n                    setItem(logger, prefixedKey, JSON[_DYN_STRINGIFY /* @min:%2estringify */]([]));\r\n                    _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 41 /* _eInternalMessageId.FailedToSetStorageBuffer */, \" storage key: \" + prefixedKey + \", \" + getExceptionName(e) + \". Buffer cleared\", { exception: dumpObj(e) });\r\n                }\r\n            }\r\n            // this removes buffer with prefix+key\r\n            function _getPreviousEvents() {\r\n                var items = [];\r\n                try {\r\n                    arrForEach(PREVIOUS_KEYS, function (key) {\r\n                        var events = _getItemsFromPreviousKey(key);\r\n                        items = items[_DYN_CONCAT /* @min:%2econcat */](events);\r\n                        // to make sure that we also transfer items from old prefixed + key buffer\r\n                        if (_namePrefix) {\r\n                            var prefixedKey = _namePrefix + \"_\" + key;\r\n                            var prefixEvents = _getItemsFromPreviousKey(prefixedKey);\r\n                            items = items[_DYN_CONCAT /* @min:%2econcat */](prefixEvents);\r\n                        }\r\n                    });\r\n                    return items;\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 41 /* _eInternalMessageId.FailedToSetStorageBuffer */, \"Transfer events from previous buffers: \" + getExceptionName(e) + \". previous Buffer items can not be removed\", { exception: dumpObj(e) });\r\n                }\r\n                return [];\r\n            }\r\n            // transform string[] to IInternalStorageItem[]\r\n            function _getItemsFromPreviousKey(key) {\r\n                try {\r\n                    var items = _getBufferBase(key);\r\n                    var transFormedItems_1 = [];\r\n                    arrForEach(items, function (item) {\r\n                        var internalItem = {\r\n                            item: item,\r\n                            cnt: 0 // previous events will be default to 0 count\r\n                        };\r\n                        transFormedItems_1[_DYN_PUSH /* @min:%2epush */](internalItem);\r\n                    });\r\n                    // remove the session storage if we can add events back\r\n                    utlRemoveSessionStorage(logger, key);\r\n                    return transFormedItems_1;\r\n                }\r\n                catch (e) {\r\n                    // eslint-disable-next-line no-empty\r\n                }\r\n                return [];\r\n            }\r\n        });\r\n        return _this;\r\n    }\r\n    SessionStorageSendBuffer.prototype.enqueue = function (payload) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    SessionStorageSendBuffer.prototype.clear = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    SessionStorageSendBuffer.prototype.markAsSent = function (payload) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    SessionStorageSendBuffer.prototype.clearSent = function (payload) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    SessionStorageSendBuffer.prototype.createNew = function (newLogger, newConfig, canUseSessionStorage) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    var _a;\r\n    _a = SessionStorageSendBuffer;\r\n    SessionStorageSendBuffer.VERSION = \"_1\";\r\n    SessionStorageSendBuffer.BUFFER_KEY = \"AI_buffer\" + _a.VERSION;\r\n    SessionStorageSendBuffer.SENT_BUFFER_KEY = \"AI_sentBuffer\" + _a.VERSION;\r\n    // Maximum number of payloads stored in the buffer. If the buffer is full, new elements will be dropped.\r\n    SessionStorageSendBuffer.MAX_BUFFER_SIZE = 2000;\r\n    return SessionStorageSendBuffer;\r\n}(BaseSendBuffer));\r\nexport { SessionStorageSendBuffer };\r\n//# sourceMappingURL=SendBuffer.js.map", "import dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { _throwInternal, getJSON, isArray, isFunction, isObject, objForEachKey } from \"@microsoft/applicationinsights-core-js\";\r\nimport { _DYN_LENGTH, _DYN_PUSH, _DYN_SERIALIZE, _DYN_STRINGIFY, _DYN_TO_STRING } from \"./__DynamicConstants\";\r\nvar Serializer = /** @class */ (function () {\r\n    function Serializer(logger) {\r\n        dynamicProto(Serializer, this, function (_self) {\r\n            /**\r\n             * Serializes the current object to a JSON string.\r\n             */\r\n            _self[_DYN_SERIALIZE /* @min:%2eserialize */] = function (input) {\r\n                var output = _serializeObject(input, \"root\");\r\n                try {\r\n                    return getJSON()[_DYN_STRINGIFY /* @min:%2estringify */](output);\r\n                }\r\n                catch (e) {\r\n                    // if serialization fails return an empty string\r\n                    _throwInternal(logger, 1 /* eLoggingSeverity.CRITICAL */, 48 /* _eInternalMessageId.CannotSerializeObject */, (e && isFunction(e[_DYN_TO_STRING /* @min:%2etoString */])) ? e[_DYN_TO_STRING /* @min:%2etoString */]() : \"Error serializing object\", null, true);\r\n                }\r\n            };\r\n            function _serializeObject(source, name) {\r\n                var circularReferenceCheck = \"__aiCircularRefCheck\";\r\n                var output = {};\r\n                if (!source) {\r\n                    _throwInternal(logger, 1 /* eLoggingSeverity.CRITICAL */, 48 /* _eInternalMessageId.CannotSerializeObject */, \"cannot serialize object because it is null or undefined\", { name: name }, true);\r\n                    return output;\r\n                }\r\n                if (source[circularReferenceCheck]) {\r\n                    _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 50 /* _eInternalMessageId.CircularReferenceDetected */, \"Circular reference detected while serializing object\", { name: name }, true);\r\n                    return output;\r\n                }\r\n                if (!source.aiDataContract) {\r\n                    // special case for measurements/properties/tags\r\n                    if (name === \"measurements\") {\r\n                        output = _serializeStringMap(source, \"number\", name);\r\n                    }\r\n                    else if (name === \"properties\") {\r\n                        output = _serializeStringMap(source, \"string\", name);\r\n                    }\r\n                    else if (name === \"tags\") {\r\n                        output = _serializeStringMap(source, \"string\", name);\r\n                    }\r\n                    else if (isArray(source)) {\r\n                        output = _serializeArray(source, name);\r\n                    }\r\n                    else {\r\n                        _throwInternal(logger, 2 /* eLoggingSeverity.WARNING */, 49 /* _eInternalMessageId.CannotSerializeObjectNonSerializable */, \"Attempting to serialize an object which does not implement ISerializable\", { name: name }, true);\r\n                        try {\r\n                            // verify that the object can be stringified\r\n                            getJSON()[_DYN_STRINGIFY /* @min:%2estringify */](source);\r\n                            output = source;\r\n                        }\r\n                        catch (e) {\r\n                            // if serialization fails return an empty string\r\n                            _throwInternal(logger, 1 /* eLoggingSeverity.CRITICAL */, 48 /* _eInternalMessageId.CannotSerializeObject */, (e && isFunction(e[_DYN_TO_STRING /* @min:%2etoString */])) ? e[_DYN_TO_STRING /* @min:%2etoString */]() : \"Error serializing object\", null, true);\r\n                        }\r\n                    }\r\n                    return output;\r\n                }\r\n                source[circularReferenceCheck] = true;\r\n                objForEachKey(source.aiDataContract, function (field, contract) {\r\n                    var isRequired = (isFunction(contract)) ? (contract() & 1 /* FieldType.Required */) : (contract & 1 /* FieldType.Required */);\r\n                    var isHidden = (isFunction(contract)) ? (contract() & 4 /* FieldType.Hidden */) : (contract & 4 /* FieldType.Hidden */);\r\n                    var isArray = contract & 2 /* FieldType.Array */;\r\n                    var isPresent = source[field] !== undefined;\r\n                    var isObj = isObject(source[field]) && source[field] !== null;\r\n                    if (isRequired && !isPresent && !isArray) {\r\n                        _throwInternal(logger, 1 /* eLoggingSeverity.CRITICAL */, 24 /* _eInternalMessageId.MissingRequiredFieldSpecification */, \"Missing required field specification. The field is required but not present on source\", { field: field, name: name });\r\n                        // If not in debug mode, continue and hope the error is permissible\r\n                    }\r\n                    else if (!isHidden) { // Don't serialize hidden fields\r\n                        var value = void 0;\r\n                        if (isObj) {\r\n                            if (isArray) {\r\n                                // special case; recurse on each object in the source array\r\n                                value = _serializeArray(source[field], field);\r\n                            }\r\n                            else {\r\n                                // recurse on the source object in this field\r\n                                value = _serializeObject(source[field], field);\r\n                            }\r\n                        }\r\n                        else {\r\n                            // assign the source field to the output even if undefined or required\r\n                            value = source[field];\r\n                        }\r\n                        // only emit this field if the value is defined\r\n                        if (value !== undefined) {\r\n                            output[field] = value;\r\n                        }\r\n                    }\r\n                });\r\n                delete source[circularReferenceCheck];\r\n                return output;\r\n            }\r\n            function _serializeArray(sources, name) {\r\n                var output;\r\n                if (!!sources) {\r\n                    if (!isArray(sources)) {\r\n                        _throwInternal(logger, 1 /* eLoggingSeverity.CRITICAL */, 54 /* _eInternalMessageId.ItemNotInArray */, \"This field was specified as an array in the contract but the item is not an array.\\r\\n\", { name: name }, true);\r\n                    }\r\n                    else {\r\n                        output = [];\r\n                        for (var i = 0; i < sources[_DYN_LENGTH /* @min:%2elength */]; i++) {\r\n                            var source = sources[i];\r\n                            var item = _serializeObject(source, name + \"[\" + i + \"]\");\r\n                            output[_DYN_PUSH /* @min:%2epush */](item);\r\n                        }\r\n                    }\r\n                }\r\n                return output;\r\n            }\r\n            function _serializeStringMap(map, expectedType, name) {\r\n                var output;\r\n                if (map) {\r\n                    output = {};\r\n                    objForEachKey(map, function (field, value) {\r\n                        if (expectedType === \"string\") {\r\n                            if (value === undefined) {\r\n                                output[field] = \"undefined\";\r\n                            }\r\n                            else if (value === null) {\r\n                                output[field] = \"null\";\r\n                            }\r\n                            else if (!value[_DYN_TO_STRING /* @min:%2etoString */]) {\r\n                                output[field] = \"invalid field: toString() is not defined.\";\r\n                            }\r\n                            else {\r\n                                output[field] = value[_DYN_TO_STRING /* @min:%2etoString */]();\r\n                            }\r\n                        }\r\n                        else if (expectedType === \"number\") {\r\n                            if (value === undefined) {\r\n                                output[field] = \"undefined\";\r\n                            }\r\n                            else if (value === null) {\r\n                                output[field] = \"null\";\r\n                            }\r\n                            else {\r\n                                var num = parseFloat(value);\r\n                                output[field] = num;\r\n                            }\r\n                        }\r\n                        else {\r\n                            output[field] = \"invalid field: \" + name + \" is of unknown type.\";\r\n                            _throwInternal(logger, 1 /* eLoggingSeverity.CRITICAL */, output[field], null, true);\r\n                        }\r\n                    });\r\n                }\r\n                return output;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Serializes the current object to a JSON string.\r\n     */\r\n    Serializer.prototype.serialize = function (input) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    return Serializer;\r\n}());\r\nexport { Serializer };\r\n//# sourceMappingURL=Serializer.js.map", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { _DYN_CONCAT, _DYN_LENGTH } from \"../../__DynamicConstants\";\r\n// (Magic number) DJB algorithm can't work on shorter strings (results in poor distribution\r\nvar MIN_INPUT_LENGTH = 8;\r\nvar HashCodeScoreGenerator = /** @class */ (function () {\r\n    function HashCodeScoreGenerator() {\r\n    }\r\n    HashCodeScoreGenerator.prototype.getHashCodeScore = function (key) {\r\n        var score = this.getHashCode(key) / HashCodeScoreGenerator.INT_MAX_VALUE;\r\n        return score * 100;\r\n    };\r\n    HashCodeScoreGenerator.prototype.getHashCode = function (input) {\r\n        if (input === \"\") {\r\n            return 0;\r\n        }\r\n        while (input[_DYN_LENGTH /* @min:%2elength */] < MIN_INPUT_LENGTH) {\r\n            input = input[_DYN_CONCAT /* @min:%2econcat */](input);\r\n        }\r\n        // 5381 is a magic number: http://stackoverflow.com/questions/10696223/reason-for-5381-number-in-djb-hash-function\r\n        var hash = 5381;\r\n        for (var i = 0; i < input[_DYN_LENGTH /* @min:%2elength */]; ++i) {\r\n            hash = ((hash << 5) + hash) + input.charCodeAt(i);\r\n            // 'hash' is of number type which means 53 bit integer (http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-language-types-number-type)\r\n            // 'hash & hash' will keep it 32 bit integer - just to make it clearer what the result is.\r\n            hash = hash & hash;\r\n        }\r\n        return Math.abs(hash);\r\n    };\r\n    // We're using 32 bit math, hence max value is (2^31 - 1)\r\n    HashCodeScoreGenerator.INT_MAX_VALUE = 2147483647;\r\n    return HashCodeScoreGenerator;\r\n}());\r\nexport { HashCodeScoreGenerator };\r\n//# sourceMappingURL=HashCodeScoreGenerator.js.map", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { ContextTagKeys } from \"@microsoft/applicationinsights-common\";\r\nimport { _DYN_GET_HASH_CODE_SCORE, _DYN_GET_SAMPLING_SCORE, _DYN_TAGS, _DYN_TRACE_ID } from \"../../__DynamicConstants\";\r\nimport { HashCodeScoreGenerator } from \"./HashCodeScoreGenerator\";\r\nvar SamplingScoreGenerator = /** @class */ (function () {\r\n    function SamplingScoreGenerator() {\r\n        var _self = this;\r\n        var hashCodeGenerator = new HashCodeScoreGenerator();\r\n        var keys = new ContextTagKeys();\r\n        _self[_DYN_GET_SAMPLING_SCORE /* @min:%2egetSamplingScore */] = function (item) {\r\n            var score = 0;\r\n            if (item[_DYN_TAGS /* @min:%2etags */] && item[_DYN_TAGS /* @min:%2etags */][keys.userId]) { // search in tags first, then ext\r\n                score = hashCodeGenerator.getHashCodeScore(item[_DYN_TAGS /* @min:%2etags */][keys.userId]);\r\n            }\r\n            else if (item.ext && item.ext.user && item.ext.user.id) {\r\n                score = hashCodeGenerator[_DYN_GET_HASH_CODE_SCORE /* @min:%2egetHashCodeScore */](item.ext.user.id);\r\n            }\r\n            else if (item[_DYN_TAGS /* @min:%2etags */] && item[_DYN_TAGS /* @min:%2etags */][keys.operationId]) { // search in tags first, then ext\r\n                score = hashCodeGenerator.getHashCodeScore(item[_DYN_TAGS /* @min:%2etags */][keys.operationId]);\r\n            }\r\n            else if (item.ext && item.ext.telemetryTrace && item.ext.telemetryTrace[_DYN_TRACE_ID /* @min:%2etraceID */]) {\r\n                score = hashCodeGenerator.getHashCodeScore(item.ext.telemetryTrace[_DYN_TRACE_ID /* @min:%2etraceID */]);\r\n            }\r\n            else {\r\n                // tslint:disable-next-line:insecure-random\r\n                score = (Math.random() * 100);\r\n            }\r\n            return score;\r\n        };\r\n    }\r\n    return SamplingScoreGenerator;\r\n}());\r\nexport { SamplingScoreGenerator };\r\n//# sourceMappingURL=SamplingScoreGenerator.js.map", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { Metric } from \"@microsoft/applicationinsights-common\";\r\nimport { safeGetLogger } from \"@microsoft/applicationinsights-core-js\";\r\nimport { _DYN_DATA_TYPE, _DYN_GET_SAMPLING_SCORE, _DYN_SAMPLE_RATE } from \"../__DynamicConstants\";\r\nimport { SamplingScoreGenerator } from \"./SamplingScoreGenerators/SamplingScoreGenerator\";\r\nvar Sample = /** @class */ (function () {\r\n    function Sample(sampleRate, logger) {\r\n        // We're using 32 bit math, hence max value is (2^31 - 1)\r\n        this.INT_MAX_VALUE = 2147483647;\r\n        var _logger = logger || safeGetLogger(null);\r\n        if (sampleRate > 100 || sampleRate < 0) {\r\n            _logger.throwInternal(2 /* eLoggingSeverity.WARNING */, 58 /* _eInternalMessageId.SampleRateOutOfRange */, \"Sampling rate is out of range (0..100). Sampling will be disabled, you may be sending too much data which may affect your AI service level.\", { samplingRate: sampleRate }, true);\r\n            sampleRate = 100;\r\n        }\r\n        this[_DYN_SAMPLE_RATE /* @min:%2esampleRate */] = sampleRate;\r\n        this.samplingScoreGenerator = new SamplingScoreGenerator();\r\n    }\r\n    /**\r\n    * Determines if an envelope is sampled in (i.e. will be sent) or not (i.e. will be dropped).\r\n    */\r\n    Sample.prototype.isSampledIn = function (envelope) {\r\n        var samplingPercentage = this[_DYN_SAMPLE_RATE /* @min:%2esampleRate */]; // 0 - 100\r\n        var isSampledIn = false;\r\n        if (samplingPercentage === null || samplingPercentage === undefined || samplingPercentage >= 100) {\r\n            return true;\r\n        }\r\n        else if (envelope.baseType === Metric[_DYN_DATA_TYPE /* @min:%2edataType */]) {\r\n            // exclude MetricData telemetry from sampling\r\n            return true;\r\n        }\r\n        isSampledIn = this.samplingScoreGenerator[_DYN_GET_SAMPLING_SCORE /* @min:%2egetSamplingScore */](envelope) < samplingPercentage;\r\n        return isSampledIn;\r\n    };\r\n    return Sample;\r\n}());\r\nexport { Sample };\r\n//# sourceMappingURL=Sample.js.map", "var _a, _b;\r\nimport { __assign, __extends } from \"tslib\";\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { BreezeChannelIdentifier, DEFAULT_BREEZE_ENDPOINT, DEFAULT_BREEZE_PATH, Event, Exception, Metric, PageView, PageViewPerformance, ProcessLegacy, RemoteDependencyData, RequestHeaders, SampleRate, Trace, createOfflineListener, isInternalApplicationInsightsEndpoint, utlCanUseSessionStorage, utlSetStoragePrefix } from \"@microsoft/applicationinsights-common\";\r\nimport { ActiveStatus, BaseTelemetryPlugin, SenderPostManager, _throwInternal, _warnToConsole, arrForEach, cfgDfBoolean, cfgDfValidate, createProcessTelemetryContext, createUniqueNamespace, dateNow, dumpObj, formatErrorMessageXdr, formatErrorMessageXhr, getExceptionName, getIEVersion, isArray, isBeaconsSupported, isFetchSupported, isNullOrUndefined, mergeEvtNamespace, objExtend, onConfigChange, parseResponse, prependTransports, runTargetUnload } from \"@microsoft/applicationinsights-core-js\";\r\nimport { isNumber, isString, isTruthy, objDeepFreeze, objDefine, scheduleTimeout } from \"@nevware21/ts-utils\";\r\nimport { DependencyEnvelopeCreator, EventEnvelopeCreator, ExceptionEnvelopeCreator, MetricEnvelopeCreator, PageViewEnvelopeCreator, PageViewPerformanceEnvelopeCreator, TraceEnvelopeCreator } from \"./EnvelopeCreator\";\r\nimport { ArraySendBuffer, SessionStorageSendBuffer } from \"./SendBuffer\";\r\nimport { Serializer } from \"./Serializer\";\r\nimport { Sample } from \"./TelemetryProcessors/Sample\";\r\nimport { _DYN_ALWAYS_USE_XHR_OVERR4, _DYN_BASE_TYPE, _DYN_BUFFER_OVERRIDE, _DYN_CLEAR, _DYN_CLEAR_SENT, _DYN_CONVERT_UNDEFINED, _DYN_COUNT, _DYN_CREATE_NEW, _DYN_CUSTOM_HEADERS, _DYN_DATA, _DYN_DIAG_LOG, _DYN_DISABLE_SEND_BEACON_7, _DYN_DISABLE_XHR, _DYN_EMIT_LINE_DELIMITED_0, _DYN_ENABLE_SEND_PROMISE, _DYN_ENABLE_SESSION_STORA5, _DYN_ENQUEUE, _DYN_EVENTS_LIMIT_IN_MEM, _DYN_EVENTS_SEND_REQUEST, _DYN_GET_SENDER_INST, _DYN_INITIALIZE, _DYN_INSTRUMENTATION_KEY, _DYN_IS_BEACON_API_DISABL3, _DYN_ITEM, _DYN_ITEMS_ACCEPTED, _DYN_ITEMS_RECEIVED, _DYN_LENGTH, _DYN_MARK_AS_SENT, _DYN_MAX_BATCH_INTERVAL, _DYN_MAX_BATCH_SIZE_IN_BY1, _DYN_ONUNLOAD_DISABLE_BEA2, _DYN_ONUNLOAD_DISABLE_FET6, _DYN_ORI_PAYLOAD, _DYN_PUSH, _DYN_SAMPLE_RATE, _DYN_SERIALIZE, _DYN_TAGS, _DYN_TRIGGER_SEND, _DYN_UNLOAD_TRANSPORTS, _DYN__BUFFER, _DYN__ON_ERROR, _DYN__ON_PARTIAL_SUCCESS, _DYN__ON_SUCCESS, _DYN__SENDER } from \"./__DynamicConstants\";\r\nvar UNDEFINED_VALUE = undefined;\r\nvar EMPTY_STR = \"\";\r\nvar FetchSyncRequestSizeLimitBytes = 65000; // approx 64kb (the current Edge, Firefox and Chrome max limit)\r\nfunction _getResponseText(xhr) {\r\n    try {\r\n        return xhr.responseText;\r\n    }\r\n    catch (e) {\r\n        // Best effort, as XHR may throw while XDR wont so just ignore\r\n    }\r\n    return null;\r\n}\r\nfunction isOverrideFn(httpXHROverride) {\r\n    return httpXHROverride && httpXHROverride.sendPOST;\r\n}\r\nvar defaultAppInsightsChannelConfig = objDeepFreeze((_a = {\r\n        // Use the default value (handles empty string in the configuration)\r\n        endpointUrl: cfgDfValidate(isTruthy, DEFAULT_BREEZE_ENDPOINT + DEFAULT_BREEZE_PATH)\r\n    },\r\n    _a[_DYN_EMIT_LINE_DELIMITED_0 /* @min:emitLineDelimitedJson */] = cfgDfBoolean(),\r\n    _a[_DYN_MAX_BATCH_INTERVAL /* @min:maxBatchInterval */] = 15000,\r\n    _a[_DYN_MAX_BATCH_SIZE_IN_BY1 /* @min:maxBatchSizeInBytes */] = 102400,\r\n    _a.disableTelemetry = cfgDfBoolean(),\r\n    _a[_DYN_ENABLE_SESSION_STORA5 /* @min:enableSessionStorageBuffer */] = cfgDfBoolean(true),\r\n    _a.isRetryDisabled = cfgDfBoolean(),\r\n    _a[_DYN_IS_BEACON_API_DISABL3 /* @min:isBeaconApiDisabled */] = cfgDfBoolean(true),\r\n    _a[_DYN_DISABLE_SEND_BEACON_7 /* @min:disableSendBeaconSplit */] = cfgDfBoolean(true),\r\n    _a[_DYN_DISABLE_XHR /* @min:disableXhr */] = cfgDfBoolean(),\r\n    _a[_DYN_ONUNLOAD_DISABLE_FET6 /* @min:onunloadDisableFetch */] = cfgDfBoolean(),\r\n    _a[_DYN_ONUNLOAD_DISABLE_BEA2 /* @min:onunloadDisableBeacon */] = cfgDfBoolean(),\r\n    _a[_DYN_INSTRUMENTATION_KEY /* @min:instrumentationKey */] = UNDEFINED_VALUE,\r\n    _a.namePrefix = UNDEFINED_VALUE,\r\n    _a.samplingPercentage = cfgDfValidate(_chkSampling, 100),\r\n    _a[_DYN_CUSTOM_HEADERS /* @min:customHeaders */] = UNDEFINED_VALUE,\r\n    _a[_DYN_CONVERT_UNDEFINED /* @min:convertUndefined */] = UNDEFINED_VALUE,\r\n    _a[_DYN_EVENTS_LIMIT_IN_MEM /* @min:eventsLimitInMem */] = 10000,\r\n    _a[_DYN_BUFFER_OVERRIDE /* @min:bufferOverride */] = false,\r\n    _a.httpXHROverride = { isVal: isOverrideFn, v: UNDEFINED_VALUE },\r\n    _a[_DYN_ALWAYS_USE_XHR_OVERR4 /* @min:alwaysUseXhrOverride */] = cfgDfBoolean(),\r\n    _a.transports = UNDEFINED_VALUE,\r\n    _a.retryCodes = UNDEFINED_VALUE,\r\n    _a.maxRetryCnt = { isVal: isNumber, v: 10 },\r\n    _a));\r\nfunction _chkSampling(value) {\r\n    return !isNaN(value) && value > 0 && value <= 100;\r\n}\r\nvar EnvelopeTypeCreator = (_b = {},\r\n    _b[Event.dataType] = EventEnvelopeCreator,\r\n    _b[Trace.dataType] = TraceEnvelopeCreator,\r\n    _b[PageView.dataType] = PageViewEnvelopeCreator,\r\n    _b[PageViewPerformance.dataType] = PageViewPerformanceEnvelopeCreator,\r\n    _b[Exception.dataType] = ExceptionEnvelopeCreator,\r\n    _b[Metric.dataType] = MetricEnvelopeCreator,\r\n    _b[RemoteDependencyData.dataType] = DependencyEnvelopeCreator,\r\n    _b);\r\nvar Sender = /** @class */ (function (_super) {\r\n    __extends(Sender, _super);\r\n    function Sender() {\r\n        var _this = _super.call(this) || this;\r\n        _this.priority = 1001;\r\n        _this.identifier = BreezeChannelIdentifier;\r\n        // Don't set the defaults here, set them in the _initDefaults() as this is also called during unload\r\n        var _consecutiveErrors; // How many times in a row a retryable error condition has occurred.\r\n        var _retryAt; // The time to retry at in milliseconds from 1970/01/01 (this makes the timer calculation easy).\r\n        var _lastSend; // The time of the last send operation.\r\n        var _paused; // Flag indicating that the sending should be paused\r\n        var _timeoutHandle; // Handle to the timer for delayed sending of batches of data.\r\n        var _serializer;\r\n        var _stamp_specific_redirects;\r\n        var _headers;\r\n        var _syncFetchPayload = 0; // Keep track of the outstanding sync fetch payload total (as sync fetch has limits)\r\n        var _syncUnloadSender; // The identified sender to use for the synchronous unload stage\r\n        var _offlineListener;\r\n        var _evtNamespace;\r\n        var _endpointUrl;\r\n        var _orgEndpointUrl;\r\n        var _maxBatchSizeInBytes;\r\n        var _beaconSupported;\r\n        var _beaconOnUnloadSupported;\r\n        var _beaconNormalSupported;\r\n        var _customHeaders;\r\n        var _disableTelemetry;\r\n        var _instrumentationKey;\r\n        var _convertUndefined;\r\n        var _isRetryDisabled;\r\n        var _maxBatchInterval;\r\n        var _sessionStorageUsed;\r\n        var _bufferOverrideUsed;\r\n        var _namePrefix;\r\n        var _enableSendPromise;\r\n        var _alwaysUseCustomSend;\r\n        var _disableXhr;\r\n        var _fetchKeepAlive;\r\n        var _xhrSend;\r\n        var _fallbackSend;\r\n        var _disableBeaconSplit;\r\n        var _sendPostMgr;\r\n        var _retryCodes;\r\n        dynamicProto(Sender, _this, function (_self, _base) {\r\n            _initDefaults();\r\n            _self.pause = function () {\r\n                _clearScheduledTimer();\r\n                _paused = true;\r\n            };\r\n            _self.resume = function () {\r\n                if (_paused) {\r\n                    _paused = false;\r\n                    _retryAt = null;\r\n                    // flush if we have exceeded the max-size already\r\n                    _checkMaxSize();\r\n                    _setupTimer();\r\n                }\r\n            };\r\n            _self.flush = function (isAsync, callBack, sendReason) {\r\n                if (isAsync === void 0) { isAsync = true; }\r\n                if (!_paused) {\r\n                    // Clear the normal schedule timer as we are going to try and flush ASAP\r\n                    _clearScheduledTimer();\r\n                    try {\r\n                        return _self[_DYN_TRIGGER_SEND /* @min:%2etriggerSend */](isAsync, null, sendReason || 1 /* SendRequestReason.ManualFlush */);\r\n                    }\r\n                    catch (e) {\r\n                        _throwInternal(_self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), 1 /* eLoggingSeverity.CRITICAL */, 22 /* _eInternalMessageId.FlushFailed */, \"flush failed, telemetry will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                    }\r\n                }\r\n            };\r\n            _self.onunloadFlush = function () {\r\n                if (!_paused) {\r\n                    if (_beaconSupported || _alwaysUseCustomSend) {\r\n                        try {\r\n                            return _self[_DYN_TRIGGER_SEND /* @min:%2etriggerSend */](true, _doUnloadSend, 2 /* SendRequestReason.Unload */);\r\n                        }\r\n                        catch (e) {\r\n                            _throwInternal(_self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), 1 /* eLoggingSeverity.CRITICAL */, 20 /* _eInternalMessageId.FailedToSendQueuedTelemetry */, \"failed to flush with beacon sender on page unload, telemetry will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                        }\r\n                    }\r\n                    else {\r\n                        _self.flush(false);\r\n                    }\r\n                }\r\n            };\r\n            _self.addHeader = function (name, value) {\r\n                _headers[name] = value;\r\n            };\r\n            _self[_DYN_INITIALIZE /* @min:%2einitialize */] = function (config, core, extensions, pluginChain) {\r\n                if (_self.isInitialized()) {\r\n                    _throwInternal(_self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), 1 /* eLoggingSeverity.CRITICAL */, 28 /* _eInternalMessageId.SenderNotInitialized */, \"Sender is already initialized\");\r\n                }\r\n                _base[_DYN_INITIALIZE /* @min:%2einitialize */](config, core, extensions, pluginChain);\r\n                var identifier = _self.identifier;\r\n                _serializer = new Serializer(core.logger);\r\n                _consecutiveErrors = 0;\r\n                _retryAt = null;\r\n                _lastSend = 0;\r\n                _self[_DYN__SENDER /* @min:%2e_sender */] = null;\r\n                _stamp_specific_redirects = 0;\r\n                var diagLog = _self[_DYN_DIAG_LOG /* @min:%2ediagLog */]();\r\n                _evtNamespace = mergeEvtNamespace(createUniqueNamespace(\"Sender\"), core.evtNamespace && core.evtNamespace());\r\n                _offlineListener = createOfflineListener(_evtNamespace);\r\n                // This function will be re-called whenever any referenced configuration is changed\r\n                _self._addHook(onConfigChange(config, function (details) {\r\n                    var config = details.cfg;\r\n                    if (config.storagePrefix) {\r\n                        utlSetStoragePrefix(config.storagePrefix);\r\n                    }\r\n                    var ctx = createProcessTelemetryContext(null, config, core);\r\n                    var senderConfig = ctx.getExtCfg(identifier, defaultAppInsightsChannelConfig);\r\n                    objDefine(_self, \"_senderConfig\", {\r\n                        g: function () {\r\n                            return senderConfig;\r\n                        }\r\n                    });\r\n                    // or is not string\r\n                    if (core.activeStatus() === ActiveStatus.PENDING) {\r\n                        // waiting for core promises to be resolved\r\n                        // NOTE: if active status is set to pending, stop sending, clear timer here\r\n                        _self.pause();\r\n                    }\r\n                    else if (core.activeStatus() === ActiveStatus.ACTIVE) {\r\n                        // core status changed from pending to other status\r\n                        _self.resume();\r\n                    }\r\n                    // Only update the endpoint if the original config !== the current config\r\n                    // This is so any redirect endpointUrl is not overwritten\r\n                    if (_orgEndpointUrl !== senderConfig.endpointUrl) {\r\n                        if (_orgEndpointUrl) {\r\n                            // TODO: add doc to remind users to flush before changing endpoint, otherwise all unsent payload will be sent to new endpoint\r\n                        }\r\n                        _endpointUrl = _orgEndpointUrl = senderConfig.endpointUrl;\r\n                    }\r\n                    if (_customHeaders && _customHeaders !== senderConfig[_DYN_CUSTOM_HEADERS /* @min:%2ecustomHeaders */]) {\r\n                        // Removing any previously defined custom headers as they have changed\r\n                        arrForEach(_customHeaders, function (customHeader) {\r\n                            delete _headers[customHeader.header];\r\n                        });\r\n                    }\r\n                    _maxBatchSizeInBytes = senderConfig[_DYN_MAX_BATCH_SIZE_IN_BY1 /* @min:%2emaxBatchSizeInBytes */];\r\n                    _beaconSupported = (senderConfig[_DYN_ONUNLOAD_DISABLE_BEA2 /* @min:%2eonunloadDisableBeacon */] === false || senderConfig[_DYN_IS_BEACON_API_DISABL3 /* @min:%2eisBeaconApiDisabled */] === false) && isBeaconsSupported();\r\n                    _beaconOnUnloadSupported = senderConfig[_DYN_ONUNLOAD_DISABLE_BEA2 /* @min:%2eonunloadDisableBeacon */] === false && isBeaconsSupported();\r\n                    _beaconNormalSupported = senderConfig[_DYN_IS_BEACON_API_DISABL3 /* @min:%2eisBeaconApiDisabled */] === false && isBeaconsSupported();\r\n                    _alwaysUseCustomSend = senderConfig[_DYN_ALWAYS_USE_XHR_OVERR4 /* @min:%2ealwaysUseXhrOverride */];\r\n                    _disableXhr = !!senderConfig[_DYN_DISABLE_XHR /* @min:%2edisableXhr */];\r\n                    _retryCodes = senderConfig.retryCodes;\r\n                    var bufferOverride = senderConfig[_DYN_BUFFER_OVERRIDE /* @min:%2ebufferOverride */];\r\n                    var canUseSessionStorage = !!senderConfig[_DYN_ENABLE_SESSION_STORA5 /* @min:%2eenableSessionStorageBuffer */] &&\r\n                        (!!bufferOverride || utlCanUseSessionStorage());\r\n                    var namePrefix = senderConfig.namePrefix;\r\n                    //Note: emitLineDelimitedJson and eventsLimitInMem is directly accessed via config in senderBuffer\r\n                    //Therefore, if canUseSessionStorage is not changed, we do not need to re initialize a new one\r\n                    var shouldUpdate = (canUseSessionStorage !== _sessionStorageUsed)\r\n                        || (canUseSessionStorage && (_namePrefix !== namePrefix)) // prefixName is only used in session storage\r\n                        || (canUseSessionStorage && (_bufferOverrideUsed !== bufferOverride));\r\n                    if (_self[_DYN__BUFFER /* @min:%2e_buffer */]) {\r\n                        // case1 (Pre and Now enableSessionStorageBuffer settings are same)\r\n                        // if namePrefix changes, transfer current buffer to new buffer\r\n                        // else no action needed\r\n                        //case2 (Pre and Now enableSessionStorageBuffer settings are changed)\r\n                        // transfer current buffer to new buffer\r\n                        if (shouldUpdate) {\r\n                            try {\r\n                                _self._buffer = _self._buffer[_DYN_CREATE_NEW /* @min:%2ecreateNew */](diagLog, senderConfig, canUseSessionStorage);\r\n                            }\r\n                            catch (e) {\r\n                                _throwInternal(_self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), 1 /* eLoggingSeverity.CRITICAL */, 12 /* _eInternalMessageId.FailedAddingTelemetryToBuffer */, \"failed to transfer telemetry to different buffer storage, telemetry will be lost: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                            }\r\n                        }\r\n                        _checkMaxSize();\r\n                    }\r\n                    else {\r\n                        _self[_DYN__BUFFER /* @min:%2e_buffer */] = canUseSessionStorage\r\n                            ? new SessionStorageSendBuffer(diagLog, senderConfig) : new ArraySendBuffer(diagLog, senderConfig);\r\n                    }\r\n                    _namePrefix = namePrefix;\r\n                    _sessionStorageUsed = canUseSessionStorage;\r\n                    _bufferOverrideUsed = bufferOverride;\r\n                    _fetchKeepAlive = !senderConfig[_DYN_ONUNLOAD_DISABLE_FET6 /* @min:%2eonunloadDisableFetch */] && isFetchSupported(true);\r\n                    _disableBeaconSplit = !!senderConfig[_DYN_DISABLE_SEND_BEACON_7 /* @min:%2edisableSendBeaconSplit */];\r\n                    _self._sample = new Sample(senderConfig.samplingPercentage, diagLog);\r\n                    _instrumentationKey = senderConfig[_DYN_INSTRUMENTATION_KEY /* @min:%2einstrumentationKey */];\r\n                    if (!_validateInstrumentationKey(_instrumentationKey, config)) {\r\n                        _throwInternal(diagLog, 1 /* eLoggingSeverity.CRITICAL */, 100 /* _eInternalMessageId.InvalidInstrumentationKey */, \"Invalid Instrumentation key \" + _instrumentationKey);\r\n                    }\r\n                    _customHeaders = senderConfig[_DYN_CUSTOM_HEADERS /* @min:%2ecustomHeaders */];\r\n                    if (isString(_endpointUrl) && !isInternalApplicationInsightsEndpoint(_endpointUrl) && _customHeaders && _customHeaders[_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n                        arrForEach(_customHeaders, function (customHeader) {\r\n                            _this.addHeader(customHeader.header, customHeader.value);\r\n                        });\r\n                    }\r\n                    else {\r\n                        _customHeaders = null;\r\n                    }\r\n                    _enableSendPromise = senderConfig[_DYN_ENABLE_SEND_PROMISE /* @min:%2eenableSendPromise */];\r\n                    var sendPostConfig = _getSendPostMgrConfig();\r\n                    // only init it once\r\n                    if (!_sendPostMgr) {\r\n                        _sendPostMgr = new SenderPostManager();\r\n                        _sendPostMgr[_DYN_INITIALIZE /* @min:%2einitialize */](sendPostConfig, diagLog);\r\n                    }\r\n                    else {\r\n                        _sendPostMgr.SetConfig(sendPostConfig);\r\n                    }\r\n                    var customInterface = senderConfig.httpXHROverride;\r\n                    var httpInterface = null;\r\n                    var syncInterface = null;\r\n                    // User requested transport(s) values > Beacon > Fetch > XHR\r\n                    // Beacon would be filtered out if user has set disableBeaconApi to true at _getSenderInterface\r\n                    var theTransports = prependTransports([3 /* TransportType.Beacon */, 1 /* TransportType.Xhr */, 2 /* TransportType.Fetch */], senderConfig.transports);\r\n                    httpInterface = _sendPostMgr && _sendPostMgr[_DYN_GET_SENDER_INST /* @min:%2egetSenderInst */](theTransports, false);\r\n                    var xhrInterface = _sendPostMgr && _sendPostMgr.getFallbackInst();\r\n                    _xhrSend = function (payload, isAsync) {\r\n                        return _doSend(xhrInterface, payload, isAsync);\r\n                    };\r\n                    _fallbackSend = function (payload, isAsync) {\r\n                        return _doSend(xhrInterface, payload, isAsync, false);\r\n                    };\r\n                    httpInterface = _alwaysUseCustomSend ? customInterface : (httpInterface || customInterface || xhrInterface);\r\n                    _self[_DYN__SENDER /* @min:%2e_sender */] = function (payload, isAsync) {\r\n                        return _doSend(httpInterface, payload, isAsync);\r\n                    };\r\n                    if (_fetchKeepAlive) {\r\n                        // Try and use the fetch with keepalive\r\n                        _syncUnloadSender = _fetchKeepAliveSender;\r\n                    }\r\n                    var syncTransports = prependTransports([3 /* TransportType.Beacon */, 1 /* TransportType.Xhr */], senderConfig[_DYN_UNLOAD_TRANSPORTS /* @min:%2eunloadTransports */]);\r\n                    if (!_fetchKeepAlive) {\r\n                        // remove fetch from theTransports\r\n                        syncTransports = syncTransports.filter(function (transport) { return transport !== 2 /* TransportType.Fetch */; });\r\n                    }\r\n                    syncInterface = _sendPostMgr && _sendPostMgr[_DYN_GET_SENDER_INST /* @min:%2egetSenderInst */](syncTransports, true);\r\n                    syncInterface = _alwaysUseCustomSend ? customInterface : (syncInterface || customInterface);\r\n                    if ((_alwaysUseCustomSend || senderConfig[_DYN_UNLOAD_TRANSPORTS /* @min:%2eunloadTransports */] || !_syncUnloadSender) && syncInterface) {\r\n                        _syncUnloadSender = function (payload, isAsync) {\r\n                            return _doSend(syncInterface, payload, isAsync);\r\n                        };\r\n                    }\r\n                    if (!_syncUnloadSender) {\r\n                        _syncUnloadSender = _xhrSend;\r\n                    }\r\n                    _disableTelemetry = senderConfig.disableTelemetry;\r\n                    _convertUndefined = senderConfig[_DYN_CONVERT_UNDEFINED /* @min:%2econvertUndefined */] || UNDEFINED_VALUE;\r\n                    _isRetryDisabled = senderConfig.isRetryDisabled;\r\n                    _maxBatchInterval = senderConfig[_DYN_MAX_BATCH_INTERVAL /* @min:%2emaxBatchInterval */];\r\n                }));\r\n            };\r\n            _self.processTelemetry = function (telemetryItem, itemCtx) {\r\n                var _a;\r\n                itemCtx = _self._getTelCtx(itemCtx);\r\n                var diagLogger = itemCtx[_DYN_DIAG_LOG /* @min:%2ediagLog */]();\r\n                try {\r\n                    var isValidate = _validate(telemetryItem, diagLogger);\r\n                    if (!isValidate) {\r\n                        return;\r\n                    }\r\n                    var aiEnvelope = _getEnvelope(telemetryItem, diagLogger);\r\n                    if (!aiEnvelope) {\r\n                        return;\r\n                    }\r\n                    // check if the incoming payload is too large, truncate if necessary\r\n                    var payload = _serializer[_DYN_SERIALIZE /* @min:%2eserialize */](aiEnvelope);\r\n                    // flush if we would exceed the max-size limit by adding this item\r\n                    var buffer = _self[_DYN__BUFFER /* @min:%2e_buffer */];\r\n                    _checkMaxSize(payload);\r\n                    var payloadItem = (_a = {},\r\n                        _a[_DYN_ITEM /* @min:item */] = payload,\r\n                        _a.cnt = 0 // inital cnt will always be 0\r\n                    ,\r\n                        _a);\r\n                    // enqueue the payload\r\n                    buffer[_DYN_ENQUEUE /* @min:%2eenqueue */](payloadItem);\r\n                    // ensure an invocation timeout is set\r\n                    _setupTimer();\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(diagLogger, 2 /* eLoggingSeverity.WARNING */, 12 /* _eInternalMessageId.FailedAddingTelemetryToBuffer */, \"Failed adding telemetry to the sender's buffer, some telemetry will be lost: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n                // hand off the telemetry item to the next plugin\r\n                _self.processNext(telemetryItem, itemCtx);\r\n            };\r\n            _self.isCompletelyIdle = function () {\r\n                return !_paused && _syncFetchPayload === 0 && _self._buffer[_DYN_COUNT /* @min:%2ecount */]() === 0;\r\n            };\r\n            /**\r\n             * xhr state changes\r\n             */\r\n            _self._xhrReadyStateChange = function (xhr, payload, countOfItemsInPayload) {\r\n                // since version 3.2.0, this function is no-op\r\n                if (_isStringArr(payload)) {\r\n                    return;\r\n                }\r\n                return _xhrReadyStateChange(xhr, payload, countOfItemsInPayload);\r\n            };\r\n            /**\r\n             * Immediately send buffered data\r\n             * @param async - {boolean} - Indicates if the events should be sent asynchronously\r\n             * @param forcedSender - {SenderFunction} - Indicates the forcedSender, undefined if not passed\r\n             */\r\n            _self[_DYN_TRIGGER_SEND /* @min:%2etriggerSend */] = function (async, forcedSender, sendReason) {\r\n                if (async === void 0) { async = true; }\r\n                var result;\r\n                if (!_paused) {\r\n                    try {\r\n                        var buffer = _self[_DYN__BUFFER /* @min:%2e_buffer */];\r\n                        // Send data only if disableTelemetry is false\r\n                        if (!_disableTelemetry) {\r\n                            if (buffer[_DYN_COUNT /* @min:%2ecount */]() > 0) {\r\n                                var payload = buffer.getItems();\r\n                                _notifySendRequest(sendReason || 0 /* SendRequestReason.Undefined */, async);\r\n                                // invoke send\r\n                                if (forcedSender) {\r\n                                    result = forcedSender.call(_self, payload, async);\r\n                                }\r\n                                else {\r\n                                    result = _self[_DYN__SENDER /* @min:%2e_sender */](payload, async);\r\n                                }\r\n                            }\r\n                            // update lastSend time to enable throttling\r\n                            _lastSend = +new Date;\r\n                        }\r\n                        else {\r\n                            buffer[_DYN_CLEAR /* @min:%2eclear */]();\r\n                        }\r\n                        _clearScheduledTimer();\r\n                    }\r\n                    catch (e) {\r\n                        /* Ignore this error for IE under v10 */\r\n                        var ieVer = getIEVersion();\r\n                        if (!ieVer || ieVer > 9) {\r\n                            _throwInternal(_self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), 1 /* eLoggingSeverity.CRITICAL */, 40 /* _eInternalMessageId.TransmissionFailed */, \"Telemetry transmission failed, some telemetry will be lost: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                        }\r\n                    }\r\n                }\r\n                return result;\r\n            };\r\n            _self.getOfflineSupport = function () {\r\n                var _a;\r\n                return _a = {\r\n                        getUrl: function () {\r\n                            return _endpointUrl;\r\n                        },\r\n                        createPayload: _createPayload\r\n                    },\r\n                    _a[_DYN_SERIALIZE /* @min:serialize */] = _serialize,\r\n                    _a.batch = _batch,\r\n                    _a.shouldProcess = function (evt) {\r\n                        return !!_validate(evt);\r\n                    },\r\n                    _a;\r\n            };\r\n            _self._doTeardown = function (unloadCtx, unloadState) {\r\n                _self.onunloadFlush();\r\n                runTargetUnload(_offlineListener, false);\r\n                _initDefaults();\r\n            };\r\n            /**\r\n             * error handler\r\n             */\r\n            _self[_DYN__ON_ERROR /* @min:%2e_onError */] = function (payload, message, event) {\r\n                // since version 3.1.3, string[] is no-op\r\n                if (_isStringArr(payload)) {\r\n                    return;\r\n                }\r\n                return _onError(payload, message, event);\r\n            };\r\n            /**\r\n             * partial success handler\r\n             */\r\n            _self[_DYN__ON_PARTIAL_SUCCESS /* @min:%2e_onPartialSuccess */] = function (payload, results) {\r\n                // since version 3.1.3, string[] is no-op\r\n                if (_isStringArr(payload)) {\r\n                    return;\r\n                }\r\n                return _onPartialSuccess(payload, results);\r\n            };\r\n            /**\r\n             * success handler\r\n             */\r\n            _self[_DYN__ON_SUCCESS /* @min:%2e_onSuccess */] = function (payload, countOfItemsInPayload) {\r\n                // since version 3.1.3, string[] is no-op\r\n                if (_isStringArr(payload)) {\r\n                    return;\r\n                }\r\n                return _onSuccess(payload, countOfItemsInPayload);\r\n                //_self._buffer && _self._buffer.clearSent(payload);\r\n            };\r\n            /**\r\n             * xdr state changes\r\n             */\r\n            _self._xdrOnLoad = function (xdr, payload) {\r\n                // since version 3.1.3, string[] is no-op\r\n                if (_isStringArr(payload)) {\r\n                    return;\r\n                }\r\n                return _xdrOnLoad(xdr, payload);\r\n            };\r\n            function _xdrOnLoad(xdr, payload) {\r\n                var responseText = _getResponseText(xdr);\r\n                if (xdr && (responseText + \"\" === \"200\" || responseText === \"\")) {\r\n                    _consecutiveErrors = 0;\r\n                    _self[_DYN__ON_SUCCESS /* @min:%2e_onSuccess */](payload, 0);\r\n                }\r\n                else {\r\n                    var results = parseResponse(responseText);\r\n                    if (results && results[_DYN_ITEMS_RECEIVED /* @min:%2eitemsReceived */] && results[_DYN_ITEMS_RECEIVED /* @min:%2eitemsReceived */] > results[_DYN_ITEMS_ACCEPTED /* @min:%2eitemsAccepted */]\r\n                        && !_isRetryDisabled) {\r\n                        _self[_DYN__ON_PARTIAL_SUCCESS /* @min:%2e_onPartialSuccess */](payload, results);\r\n                    }\r\n                    else {\r\n                        _self[_DYN__ON_ERROR /* @min:%2e_onError */](payload, formatErrorMessageXdr(xdr));\r\n                    }\r\n                }\r\n            }\r\n            function _getSendPostMgrConfig() {\r\n                var _a;\r\n                try {\r\n                    var onCompleteFuncs = {\r\n                        xdrOnComplete: function (xdr, oncomplete, payload) {\r\n                            var data = _getPayloadArr(payload);\r\n                            if (!data) {\r\n                                return;\r\n                            }\r\n                            return _xdrOnLoad(xdr, data);\r\n                        },\r\n                        fetchOnComplete: function (response, onComplete, resValue, payload) {\r\n                            var data = _getPayloadArr(payload);\r\n                            if (!data) {\r\n                                return;\r\n                            }\r\n                            return _checkResponsStatus(response.status, data, response.url, data[_DYN_LENGTH /* @min:%2elength */], response.statusText, resValue || \"\");\r\n                        },\r\n                        xhrOnComplete: function (request, oncomplete, payload) {\r\n                            var data = _getPayloadArr(payload);\r\n                            if (!data) {\r\n                                return;\r\n                            }\r\n                            return _xhrReadyStateChange(request, data, data[_DYN_LENGTH /* @min:%2elength */]);\r\n                        },\r\n                        beaconOnRetry: function (data, onComplete, canSend) {\r\n                            return _onBeaconRetry(data, onComplete, canSend);\r\n                        }\r\n                    };\r\n                    var config = (_a = {},\r\n                        _a[_DYN_ENABLE_SEND_PROMISE /* @min:enableSendPromise */] = _enableSendPromise,\r\n                        _a.isOneDs = false,\r\n                        _a.disableCredentials = false,\r\n                        _a[_DYN_DISABLE_XHR /* @min:disableXhr */] = _disableXhr,\r\n                        _a.disableBeacon = !_beaconNormalSupported,\r\n                        _a.disableBeaconSync = !_beaconOnUnloadSupported,\r\n                        _a.senderOnCompleteCallBack = onCompleteFuncs,\r\n                        _a);\r\n                    return config;\r\n                }\r\n                catch (e) {\r\n                    // eslint-disable-next-line no-empty\r\n                }\r\n                return null;\r\n            }\r\n            /**\r\n             * xhr state changes\r\n             */\r\n            function _xhrReadyStateChange(xhr, payload, countOfItemsInPayload) {\r\n                if (xhr.readyState === 4) {\r\n                    _checkResponsStatus(xhr.status, payload, xhr.responseURL, countOfItemsInPayload, formatErrorMessageXhr(xhr), _getResponseText(xhr) || xhr.response);\r\n                }\r\n            }\r\n            /**\r\n             * error handler\r\n             */\r\n            function _onError(payload, message, event) {\r\n                _throwInternal(_self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), 2 /* eLoggingSeverity.WARNING */, 26 /* _eInternalMessageId.OnError */, \"Failed to send telemetry.\", { message: message });\r\n                _self._buffer && _self._buffer[_DYN_CLEAR_SENT /* @min:%2eclearSent */](payload);\r\n            }\r\n            /**\r\n             * partial success handler\r\n             */\r\n            function _onPartialSuccess(payload, results) {\r\n                var failed = [];\r\n                var retry = [];\r\n                // Iterate through the reversed array of errors so that splicing doesn't have invalid indexes after the first item.\r\n                var errors = results.errors.reverse();\r\n                for (var _i = 0, errors_1 = errors; _i < errors_1.length; _i++) {\r\n                    var error = errors_1[_i];\r\n                    var extracted = payload.splice(error.index, 1)[0];\r\n                    if (_isRetriable(error.statusCode)) {\r\n                        retry[_DYN_PUSH /* @min:%2epush */](extracted);\r\n                    }\r\n                    else {\r\n                        // All other errors, including: 402 (Monthly quota exceeded) and 439 (Too many requests and refresh cache).\r\n                        failed[_DYN_PUSH /* @min:%2epush */](extracted);\r\n                    }\r\n                }\r\n                if (payload[_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n                    _self[_DYN__ON_SUCCESS /* @min:%2e_onSuccess */](payload, results[_DYN_ITEMS_ACCEPTED /* @min:%2eitemsAccepted */]);\r\n                }\r\n                if (failed[_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n                    _self[_DYN__ON_ERROR /* @min:%2e_onError */](failed, formatErrorMessageXhr(null, [\"partial success\", results[_DYN_ITEMS_ACCEPTED /* @min:%2eitemsAccepted */], \"of\", results.itemsReceived].join(\" \")));\r\n                }\r\n                if (retry[_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n                    _resendPayload(retry);\r\n                    _throwInternal(_self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), 2 /* eLoggingSeverity.WARNING */, 40 /* _eInternalMessageId.TransmissionFailed */, \"Partial success. \" +\r\n                        \"Delivered: \" + payload[_DYN_LENGTH /* @min:%2elength */] + \", Failed: \" + failed[_DYN_LENGTH /* @min:%2elength */] +\r\n                        \". Will retry to send \" + retry[_DYN_LENGTH /* @min:%2elength */] + \" our of \" + results[_DYN_ITEMS_RECEIVED /* @min:%2eitemsReceived */] + \" items\");\r\n                }\r\n            }\r\n            /**\r\n             * success handler\r\n             */\r\n            function _onSuccess(payload, countOfItemsInPayload) {\r\n                _self._buffer && _self._buffer[_DYN_CLEAR_SENT /* @min:%2eclearSent */](payload);\r\n            }\r\n            function _getPayloadArr(payload) {\r\n                try {\r\n                    if (payload) {\r\n                        var internalPayload = payload;\r\n                        var arr = internalPayload[_DYN_ORI_PAYLOAD /* @min:%2eoriPayload */];\r\n                        if (arr && arr[_DYN_LENGTH /* @min:%2elength */]) {\r\n                            return arr;\r\n                        }\r\n                        return null;\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // eslint-disable-next-line no-empty\r\n                }\r\n                return null;\r\n            }\r\n            function _validate(telemetryItem, diagLogger) {\r\n                if (_disableTelemetry) {\r\n                    // Do not send/save data\r\n                    return false;\r\n                }\r\n                // validate input\r\n                if (!telemetryItem) {\r\n                    diagLogger && _throwInternal(diagLogger, 1 /* eLoggingSeverity.CRITICAL */, 7 /* _eInternalMessageId.CannotSendEmptyTelemetry */, \"Cannot send empty telemetry\");\r\n                    return false;\r\n                }\r\n                // validate event\r\n                if (telemetryItem.baseData && !telemetryItem[_DYN_BASE_TYPE /* @min:%2ebaseType */]) {\r\n                    diagLogger && _throwInternal(diagLogger, 1 /* eLoggingSeverity.CRITICAL */, 70 /* _eInternalMessageId.InvalidEvent */, \"Cannot send telemetry without baseData and baseType\");\r\n                    return false;\r\n                }\r\n                if (!telemetryItem[_DYN_BASE_TYPE /* @min:%2ebaseType */]) {\r\n                    // Default\r\n                    telemetryItem[_DYN_BASE_TYPE /* @min:%2ebaseType */] = \"EventData\";\r\n                }\r\n                // ensure a sender was constructed\r\n                if (!_self[_DYN__SENDER /* @min:%2e_sender */]) {\r\n                    diagLogger && _throwInternal(diagLogger, 1 /* eLoggingSeverity.CRITICAL */, 28 /* _eInternalMessageId.SenderNotInitialized */, \"Sender was not initialized\");\r\n                    return false;\r\n                }\r\n                // check if this item should be sampled in, else add sampleRate tag\r\n                if (!_isSampledIn(telemetryItem)) {\r\n                    // Item is sampled out, do not send it\r\n                    diagLogger && _throwInternal(diagLogger, 2 /* eLoggingSeverity.WARNING */, 33 /* _eInternalMessageId.TelemetrySampledAndNotSent */, \"Telemetry item was sampled out and not sent\", { SampleRate: _self._sample[_DYN_SAMPLE_RATE /* @min:%2esampleRate */] });\r\n                    return false;\r\n                }\r\n                else {\r\n                    telemetryItem[SampleRate] = _self._sample[_DYN_SAMPLE_RATE /* @min:%2esampleRate */];\r\n                }\r\n                return true;\r\n            }\r\n            function _getEnvelope(telemetryItem, diagLogger) {\r\n                // construct an envelope that Application Insights endpoint can understand\r\n                // if ikey of telemetry is provided and not empty, envelope will use this iKey instead of senderConfig iKey\r\n                var defaultEnvelopeIkey = telemetryItem.iKey || _instrumentationKey;\r\n                var aiEnvelope = Sender.constructEnvelope(telemetryItem, defaultEnvelopeIkey, diagLogger, _convertUndefined);\r\n                if (!aiEnvelope) {\r\n                    _throwInternal(diagLogger, 1 /* eLoggingSeverity.CRITICAL */, 47 /* _eInternalMessageId.CreateEnvelopeError */, \"Unable to create an AppInsights envelope\");\r\n                    return;\r\n                }\r\n                var doNotSendItem = false;\r\n                // this is for running in legacy mode, where customer may already have a custom initializer present\r\n                if (telemetryItem[_DYN_TAGS /* @min:%2etags */] && telemetryItem[_DYN_TAGS /* @min:%2etags */][ProcessLegacy]) {\r\n                    arrForEach(telemetryItem[_DYN_TAGS /* @min:%2etags */][ProcessLegacy], function (callBack) {\r\n                        try {\r\n                            if (callBack && callBack(aiEnvelope) === false) {\r\n                                doNotSendItem = true;\r\n                                _warnToConsole(diagLogger, \"Telemetry processor check returns false\");\r\n                            }\r\n                        }\r\n                        catch (e) {\r\n                            // log error but dont stop executing rest of the telemetry initializers\r\n                            // doNotSendItem = true;\r\n                            _throwInternal(diagLogger, 1 /* eLoggingSeverity.CRITICAL */, 64 /* _eInternalMessageId.TelemetryInitializerFailed */, \"One of telemetry initializers failed, telemetry item will not be sent: \" + getExceptionName(e), { exception: dumpObj(e) }, true);\r\n                        }\r\n                    });\r\n                    delete telemetryItem[_DYN_TAGS /* @min:%2etags */][ProcessLegacy];\r\n                }\r\n                if (doNotSendItem) {\r\n                    return; // do not send, no need to execute next plugin\r\n                }\r\n                return aiEnvelope;\r\n            }\r\n            function _serialize(item) {\r\n                var rlt = EMPTY_STR;\r\n                var diagLogger = _self[_DYN_DIAG_LOG /* @min:%2ediagLog */]();\r\n                try {\r\n                    var valid = _validate(item, diagLogger);\r\n                    var envelope = null;\r\n                    if (valid) {\r\n                        envelope = _getEnvelope(item, diagLogger);\r\n                    }\r\n                    if (envelope) {\r\n                        rlt = _serializer[_DYN_SERIALIZE /* @min:%2eserialize */](envelope);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // eslint-disable-next-line no-empty\r\n                }\r\n                return rlt;\r\n            }\r\n            function _batch(arr) {\r\n                var rlt = EMPTY_STR;\r\n                if (arr && arr[_DYN_LENGTH /* @min:%2elength */]) {\r\n                    rlt = \"[\" + arr.join(\",\") + \"]\";\r\n                }\r\n                return rlt;\r\n            }\r\n            function _createPayload(data) {\r\n                var _a;\r\n                var headers = _getHeaders();\r\n                return _a = {\r\n                        urlString: _endpointUrl\r\n                    },\r\n                    _a[_DYN_DATA /* @min:data */] = data,\r\n                    _a.headers = headers,\r\n                    _a;\r\n            }\r\n            function _isSampledIn(envelope) {\r\n                return _self._sample.isSampledIn(envelope);\r\n            }\r\n            function _getOnComplete(payload, status, headers, response) {\r\n                // ***********************************************************************************************\r\n                //TODO: handle other status codes\r\n                if (status === 200 && payload) {\r\n                    _self._onSuccess(payload, payload[_DYN_LENGTH /* @min:%2elength */]);\r\n                }\r\n                else {\r\n                    response && _self[_DYN__ON_ERROR /* @min:%2e_onError */](payload, response);\r\n                }\r\n            }\r\n            function _doSend(sendInterface, payload, isAsync, markAsSent) {\r\n                if (markAsSent === void 0) { markAsSent = true; }\r\n                var onComplete = function (status, headers, response) {\r\n                    return _getOnComplete(payload, status, headers, response);\r\n                };\r\n                var payloadData = _getPayload(payload);\r\n                var sendPostFunc = sendInterface && sendInterface.sendPOST;\r\n                if (sendPostFunc && payloadData) {\r\n                    // ***********************************************************************************************\r\n                    // mark payload as sent at the beginning of calling each send function\r\n                    if (markAsSent) {\r\n                        _self._buffer[_DYN_MARK_AS_SENT /* @min:%2emarkAsSent */](payload);\r\n                    }\r\n                    return sendPostFunc(payloadData, onComplete, !isAsync);\r\n                }\r\n                return null;\r\n            }\r\n            function _getPayload(payload) {\r\n                var _a;\r\n                if (isArray(payload) && payload[_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n                    var batch = _self[_DYN__BUFFER /* @min:%2e_buffer */].batchPayloads(payload);\r\n                    var headers = _getHeaders();\r\n                    var payloadData = (_a = {},\r\n                        _a[_DYN_DATA /* @min:data */] = batch,\r\n                        _a.urlString = _endpointUrl,\r\n                        _a.headers = headers,\r\n                        _a.disableXhrSync = _disableXhr,\r\n                        _a.disableFetchKeepAlive = !_fetchKeepAlive,\r\n                        _a[_DYN_ORI_PAYLOAD /* @min:oriPayload */] = payload,\r\n                        _a);\r\n                    return payloadData;\r\n                }\r\n                return null;\r\n            }\r\n            function _getHeaders() {\r\n                try {\r\n                    var headers = _headers || {};\r\n                    if (isInternalApplicationInsightsEndpoint(_endpointUrl)) {\r\n                        headers[RequestHeaders[6 /* eRequestHeaders.sdkContextHeader */]] = RequestHeaders[7 /* eRequestHeaders.sdkContextHeaderAppIdRequest */];\r\n                    }\r\n                    return headers;\r\n                }\r\n                catch (e) {\r\n                    // eslint-disable-next-line no-empty\r\n                }\r\n                return null;\r\n            }\r\n            function _checkMaxSize(incomingPayload) {\r\n                var incomingSize = incomingPayload ? incomingPayload[_DYN_LENGTH /* @min:%2elength */] : 0;\r\n                if ((_self[_DYN__BUFFER /* @min:%2e_buffer */].size() + incomingSize) > _maxBatchSizeInBytes) {\r\n                    if (!_offlineListener || _offlineListener.isOnline()) { // only trigger send when currently online\r\n                        _self[_DYN_TRIGGER_SEND /* @min:%2etriggerSend */](true, null, 10 /* SendRequestReason.MaxBatchSize */);\r\n                    }\r\n                    return true;\r\n                }\r\n                return false;\r\n            }\r\n            function _checkResponsStatus(status, payload, responseUrl, countOfItemsInPayload, errorMessage, res) {\r\n                var response = null;\r\n                if (!_self._appId) {\r\n                    response = parseResponse(res);\r\n                    if (response && response.appId) {\r\n                        _self._appId = response.appId;\r\n                    }\r\n                }\r\n                if ((status < 200 || status >= 300) && status !== 0) {\r\n                    // Update End Point url if permanent redirect or moved permanently\r\n                    // Updates the end point url before retry\r\n                    if (status === 301 || status === 307 || status === 308) {\r\n                        if (!_checkAndUpdateEndPointUrl(responseUrl)) {\r\n                            _self[_DYN__ON_ERROR /* @min:%2e_onError */](payload, errorMessage);\r\n                            return;\r\n                        }\r\n                    }\r\n                    if (_offlineListener && !_offlineListener.isOnline()) { // offline\r\n                        // Note: Don't check for status == 0, since adblock gives this code\r\n                        if (!_isRetryDisabled) {\r\n                            var offlineBackOffMultiplier = 10; // arbritrary number\r\n                            _resendPayload(payload, offlineBackOffMultiplier);\r\n                            _throwInternal(_self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), 2 /* eLoggingSeverity.WARNING */, 40 /* _eInternalMessageId.TransmissionFailed */, \". Offline - Response Code: \".concat(status, \". Offline status: \").concat(!_offlineListener.isOnline(), \". Will retry to send \").concat(payload.length, \" items.\"));\r\n                        }\r\n                        return;\r\n                    }\r\n                    if (!_isRetryDisabled && _isRetriable(status)) {\r\n                        _resendPayload(payload);\r\n                        _throwInternal(_self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), 2 /* eLoggingSeverity.WARNING */, 40 /* _eInternalMessageId.TransmissionFailed */, \". \" +\r\n                            \"Response code \" + status + \". Will retry to send \" + payload[_DYN_LENGTH /* @min:%2elength */] + \" items.\");\r\n                    }\r\n                    else {\r\n                        _self[_DYN__ON_ERROR /* @min:%2e_onError */](payload, errorMessage);\r\n                    }\r\n                }\r\n                else {\r\n                    // check if the xhr's responseURL or fetch's response.url is same as endpoint url\r\n                    // TODO after 10 redirects force send telemetry with 'redirect=false' as query parameter.\r\n                    _checkAndUpdateEndPointUrl(responseUrl);\r\n                    if (status === 206) {\r\n                        if (!response) {\r\n                            response = parseResponse(res);\r\n                        }\r\n                        if (response && !_isRetryDisabled) {\r\n                            _self[_DYN__ON_PARTIAL_SUCCESS /* @min:%2e_onPartialSuccess */](payload, response);\r\n                        }\r\n                        else {\r\n                            _self[_DYN__ON_ERROR /* @min:%2e_onError */](payload, errorMessage);\r\n                        }\r\n                    }\r\n                    else {\r\n                        _consecutiveErrors = 0;\r\n                        _self[_DYN__ON_SUCCESS /* @min:%2e_onSuccess */](payload, countOfItemsInPayload);\r\n                    }\r\n                }\r\n            }\r\n            function _checkAndUpdateEndPointUrl(responseUrl) {\r\n                // Maximum stamp specific redirects allowed(uncomment this when breeze is ready with not allowing redirects feature)\r\n                if (_stamp_specific_redirects >= 10) {\r\n                    //  _self._senderConfig.endpointUrl = () => Sender._getDefaultAppInsightsChannelConfig().endpointUrl()+\"/?redirect=false\";\r\n                    //  _stamp_specific_redirects = 0;\r\n                    return false;\r\n                }\r\n                if (!isNullOrUndefined(responseUrl) && responseUrl !== \"\") {\r\n                    if (responseUrl !== _endpointUrl) {\r\n                        _endpointUrl = responseUrl;\r\n                        ++_stamp_specific_redirects;\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n            function _doUnloadSend(payload, isAsync) {\r\n                if (_syncUnloadSender) {\r\n                    // We are unloading so always call the sender with sync set to false\r\n                    _syncUnloadSender(payload, false);\r\n                }\r\n                else {\r\n                    // Fallback to the previous beacon Sender (which causes a CORB warning on chrome now)\r\n                    var beaconInst = _sendPostMgr && _sendPostMgr[_DYN_GET_SENDER_INST /* @min:%2egetSenderInst */]([3 /* TransportType.Beacon */], true);\r\n                    return _doSend(beaconInst, payload, isAsync);\r\n                }\r\n            }\r\n            function _onBeaconRetry(payload, onComplete, canSend) {\r\n                var internalPayload = payload;\r\n                var data = internalPayload && internalPayload[_DYN_ORI_PAYLOAD /* @min:%2eoriPayload */];\r\n                if (!_disableBeaconSplit) {\r\n                    // Failed to send entire payload so try and split data and try to send as much events as possible\r\n                    var droppedPayload = [];\r\n                    for (var lp = 0; lp < data[_DYN_LENGTH /* @min:%2elength */]; lp++) {\r\n                        var thePayload = data[lp];\r\n                        var arr = [thePayload];\r\n                        var item = _getPayload(arr);\r\n                        if (!canSend(item, onComplete)) {\r\n                            // Can't send anymore, so split the batch and drop the rest\r\n                            droppedPayload[_DYN_PUSH /* @min:%2epush */](thePayload);\r\n                        }\r\n                        else {\r\n                            _self._onSuccess(arr, arr[_DYN_LENGTH /* @min:%2elength */]);\r\n                        }\r\n                    }\r\n                    if (droppedPayload[_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n                        _fallbackSend && _fallbackSend(droppedPayload, true);\r\n                        _throwInternal(_self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), 2 /* eLoggingSeverity.WARNING */, 40 /* _eInternalMessageId.TransmissionFailed */, \". \" + \"Failed to send telemetry with Beacon API, retried with normal sender.\");\r\n                    }\r\n                }\r\n                else {\r\n                    _fallbackSend && _fallbackSend(data, true);\r\n                    _throwInternal(_self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), 2 /* eLoggingSeverity.WARNING */, 40 /* _eInternalMessageId.TransmissionFailed */, \". \" + \"Failed to send telemetry with Beacon API, retried with normal sender.\");\r\n                }\r\n            }\r\n            function _isStringArr(arr) {\r\n                try {\r\n                    if (arr && arr[_DYN_LENGTH /* @min:%2elength */]) {\r\n                        return (isString(arr[0]));\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    //TODO: log, sender use IInternalStorageItem instead of string since 3.1.3\r\n                }\r\n                return null;\r\n            }\r\n            function _fetchKeepAliveSender(payload, isAsync) {\r\n                var transport = null;\r\n                if (isArray(payload)) {\r\n                    var payloadSize = payload[_DYN_LENGTH /* @min:%2elength */];\r\n                    for (var lp = 0; lp < payload[_DYN_LENGTH /* @min:%2elength */]; lp++) {\r\n                        payloadSize += payload[lp].item[_DYN_LENGTH /* @min:%2elength */];\r\n                    }\r\n                    var syncFetchPayload = _sendPostMgr.getSyncFetchPayload();\r\n                    if ((syncFetchPayload + payloadSize) <= FetchSyncRequestSizeLimitBytes) {\r\n                        transport = 2 /* TransportType.Fetch */;\r\n                    }\r\n                    else if (isBeaconsSupported()) {\r\n                        // Fallback to beacon sender as we at least get told which events can't be scheduled\r\n                        transport = 3 /* TransportType.Beacon */;\r\n                    }\r\n                    else {\r\n                        // Payload is going to be too big so just try and send via XHR\r\n                        transport = 1 /* TransportType.Xhr */;\r\n                        _throwInternal(_self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), 2 /* eLoggingSeverity.WARNING */, 40 /* _eInternalMessageId.TransmissionFailed */, \". \" + \"Failed to send telemetry with Beacon API, retried with xhrSender.\");\r\n                    }\r\n                    var inst = _sendPostMgr && _sendPostMgr[_DYN_GET_SENDER_INST /* @min:%2egetSenderInst */]([transport], true);\r\n                    return _doSend(inst, payload, isAsync);\r\n                }\r\n                return null;\r\n            }\r\n            /**\r\n             * Resend payload. Adds payload back to the send buffer and setup a send timer (with exponential backoff).\r\n             * @param payload\r\n             */\r\n            function _resendPayload(payload, linearFactor) {\r\n                if (linearFactor === void 0) { linearFactor = 1; }\r\n                if (!payload || payload[_DYN_LENGTH /* @min:%2elength */] === 0) {\r\n                    return;\r\n                }\r\n                var buffer = _self[_DYN__BUFFER /* @min:%2e_buffer */];\r\n                buffer[_DYN_CLEAR_SENT /* @min:%2eclearSent */](payload);\r\n                _consecutiveErrors++;\r\n                for (var _i = 0, payload_1 = payload; _i < payload_1.length; _i++) {\r\n                    var item = payload_1[_i];\r\n                    item.cnt = item.cnt || 0; // to make sure we have cnt for each payload\r\n                    item.cnt++; // when resend, increase cnt\r\n                    buffer[_DYN_ENQUEUE /* @min:%2eenqueue */](item);\r\n                }\r\n                // setup timer\r\n                _setRetryTime(linearFactor);\r\n                _setupTimer();\r\n            }\r\n            /**\r\n             * Calculates the time to wait before retrying in case of an error based on\r\n             * http://en.wikipedia.org/wiki/Exponential_backoff\r\n             */\r\n            function _setRetryTime(linearFactor) {\r\n                var SlotDelayInSeconds = 10;\r\n                var delayInSeconds;\r\n                if (_consecutiveErrors <= 1) {\r\n                    delayInSeconds = SlotDelayInSeconds;\r\n                }\r\n                else {\r\n                    var backOffSlot = (Math.pow(2, _consecutiveErrors) - 1) / 2;\r\n                    // tslint:disable-next-line:insecure-random\r\n                    var backOffDelay = Math.floor(Math.random() * backOffSlot * SlotDelayInSeconds) + 1;\r\n                    backOffDelay = linearFactor * backOffDelay;\r\n                    delayInSeconds = Math.max(Math.min(backOffDelay, 3600), SlotDelayInSeconds);\r\n                }\r\n                // TODO: Log the backoff time like the C# version does.\r\n                var retryAfterTimeSpan = dateNow() + (delayInSeconds * 1000);\r\n                // TODO: Log the retry at time like the C# version does.\r\n                _retryAt = retryAfterTimeSpan;\r\n            }\r\n            /**\r\n             * Sets up the timer which triggers actually sending the data.\r\n             */\r\n            function _setupTimer() {\r\n                if (!_timeoutHandle && !_paused) {\r\n                    var retryInterval = _retryAt ? Math.max(0, _retryAt - dateNow()) : 0;\r\n                    var timerValue = Math.max(_maxBatchInterval, retryInterval);\r\n                    _timeoutHandle = scheduleTimeout(function () {\r\n                        _timeoutHandle = null;\r\n                        _self[_DYN_TRIGGER_SEND /* @min:%2etriggerSend */](true, null, 1 /* SendRequestReason.NormalSchedule */);\r\n                    }, timerValue);\r\n                }\r\n            }\r\n            function _clearScheduledTimer() {\r\n                _timeoutHandle && _timeoutHandle.cancel();\r\n                _timeoutHandle = null;\r\n                _retryAt = null;\r\n            }\r\n            /**\r\n             * Checks if the SDK should resend the payload after receiving this status code from the backend.\r\n             * @param statusCode\r\n             */\r\n            function _isRetriable(statusCode) {\r\n                // retryCodes = [] means should not retry\r\n                if (!isNullOrUndefined(_retryCodes)) {\r\n                    return _retryCodes[_DYN_LENGTH /* @min:%2elength */] && _retryCodes.indexOf(statusCode) > -1;\r\n                }\r\n                return statusCode === 401 // Unauthorized\r\n                    // Removing as private links can return a 403 which causes excessive retries and session storage usage\r\n                    // || statusCode === 403 // Forbidden\r\n                    || statusCode === 408 // Timeout\r\n                    || statusCode === 429 // Too many requests.\r\n                    || statusCode === 500 // Internal server error.\r\n                    || statusCode === 502 // Bad Gateway.\r\n                    || statusCode === 503 // Service unavailable.\r\n                    || statusCode === 504; // Gateway timeout.\r\n            }\r\n            // Using function lookups for backward compatibility as the getNotifyMgr() did not exist until after v2.5.6\r\n            function _getNotifyMgr() {\r\n                var func = \"getNotifyMgr\";\r\n                if (_self.core[func]) {\r\n                    return _self.core[func]();\r\n                }\r\n                // using _self.core['_notificationManager'] for backward compatibility\r\n                return _self.core[\"_notificationManager\"];\r\n            }\r\n            function _notifySendRequest(sendRequest, isAsync) {\r\n                var manager = _getNotifyMgr();\r\n                if (manager && manager[_DYN_EVENTS_SEND_REQUEST /* @min:%2eeventsSendRequest */]) {\r\n                    try {\r\n                        manager[_DYN_EVENTS_SEND_REQUEST /* @min:%2eeventsSendRequest */](sendRequest, isAsync);\r\n                    }\r\n                    catch (e) {\r\n                        _throwInternal(_self[_DYN_DIAG_LOG /* @min:%2ediagLog */](), 1 /* eLoggingSeverity.CRITICAL */, 74 /* _eInternalMessageId.NotificationException */, \"send request notification failed: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                    }\r\n                }\r\n            }\r\n            /**\r\n             * Validate UUID Format\r\n             * Specs taken from https://tools.ietf.org/html/rfc4122 and breeze repo\r\n             */\r\n            function _validateInstrumentationKey(instrumentationKey, config) {\r\n                var disableValidation = config.disableInstrumentationKeyValidation;\r\n                var disableIKeyValidationFlag = isNullOrUndefined(disableValidation) ? false : disableValidation;\r\n                if (disableIKeyValidationFlag) {\r\n                    return true;\r\n                }\r\n                var UUID_Regex = \"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$\";\r\n                var regexp = new RegExp(UUID_Regex);\r\n                return regexp.test(instrumentationKey);\r\n            }\r\n            function _initDefaults() {\r\n                _self[_DYN__SENDER /* @min:%2e_sender */] = null;\r\n                _self[_DYN__BUFFER /* @min:%2e_buffer */] = null;\r\n                _self._appId = null;\r\n                _self._sample = null;\r\n                _headers = {};\r\n                _offlineListener = null;\r\n                _consecutiveErrors = 0;\r\n                _retryAt = null;\r\n                _lastSend = null;\r\n                _paused = false;\r\n                _timeoutHandle = null;\r\n                _serializer = null;\r\n                _stamp_specific_redirects = 0;\r\n                _syncFetchPayload = 0;\r\n                _syncUnloadSender = null;\r\n                _evtNamespace = null;\r\n                _endpointUrl = null;\r\n                _orgEndpointUrl = null;\r\n                _maxBatchSizeInBytes = 0;\r\n                _beaconSupported = false;\r\n                _customHeaders = null;\r\n                _disableTelemetry = false;\r\n                _instrumentationKey = null;\r\n                _convertUndefined = UNDEFINED_VALUE;\r\n                _isRetryDisabled = false;\r\n                _sessionStorageUsed = null;\r\n                _namePrefix = UNDEFINED_VALUE;\r\n                _disableXhr = false;\r\n                _fetchKeepAlive = false;\r\n                _disableBeaconSplit = false;\r\n                _xhrSend = null;\r\n                _fallbackSend = null;\r\n                _sendPostMgr = null;\r\n                objDefine(_self, \"_senderConfig\", {\r\n                    g: function () {\r\n                        return objExtend({}, defaultAppInsightsChannelConfig);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        return _this;\r\n    }\r\n    Sender.constructEnvelope = function (orig, iKey, logger, convertUndefined) {\r\n        var envelope;\r\n        if (iKey !== orig.iKey && !isNullOrUndefined(iKey)) {\r\n            envelope = __assign(__assign({}, orig), { iKey: iKey });\r\n        }\r\n        else {\r\n            envelope = orig;\r\n        }\r\n        var creator = EnvelopeTypeCreator[envelope.baseType] || EventEnvelopeCreator;\r\n        return creator(logger, envelope, convertUndefined);\r\n    };\r\n    /**\r\n     * Pause the sending (transmission) of events, this will cause all events to be batched only until the maximum limits are\r\n     * hit at which point new events are dropped. Will also cause events to NOT be sent during page unload, so if Session storage\r\n     * is disabled events will be lost.\r\n     * SessionStorage Limit is 2000 events, In-Memory (Array) Storage is 10,000 events (can be configured via the eventsLimitInMem).\r\n     */\r\n    Sender.prototype.pause = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Resume the sending (transmission) of events, this will restart the timer and any batched events will be sent using the normal\r\n     * send interval.\r\n     */\r\n    Sender.prototype.resume = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Flush to send data immediately; channel should default to sending data asynchronously. If executing asynchronously (the default) and\r\n     * you DO NOT pass a callback function then a [IPromise](https://nevware21.github.io/ts-async/typedoc/interfaces/IPromise.html)\r\n     * will be returned which will resolve once the flush is complete. The actual implementation of the `IPromise`\r\n     * will be a native Promise (if supported) or the default as supplied by [ts-async library](https://github.com/nevware21/ts-async)\r\n     * @param async - send data asynchronously when true\r\n     * @param callBack - if specified, notify caller when send is complete, the channel should return true to indicate to the caller that it will be called.\r\n     * If the caller doesn't return true the caller should assume that it may never be called.\r\n     * @param sendReason - specify the reason that you are calling \"flush\" defaults to ManualFlush (1) if not specified\r\n     * @returns - If a callback is provided `true` to indicate that callback will be called after the flush is complete otherwise the caller\r\n     * should assume that any provided callback will never be called, Nothing or if occurring asynchronously a\r\n     * [IPromise](https://nevware21.github.io/ts-async/typedoc/interfaces/IPromise.html) which will be resolved once the unload is complete,\r\n     * the [IPromise](https://nevware21.github.io/ts-async/typedoc/interfaces/IPromise.html) will only be returned when no callback is provided\r\n     * and async is true.\r\n     */\r\n    Sender.prototype.flush = function (async, callBack) {\r\n        if (async === void 0) { async = true; }\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Flush the batched events synchronously (if possible -- based on configuration).\r\n     * Will not flush if the Send has been paused.\r\n     */\r\n    Sender.prototype.onunloadFlush = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    Sender.prototype.initialize = function (config, core, extensions, pluginChain) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    Sender.prototype.processTelemetry = function (telemetryItem, itemCtx) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * xhr state changes\r\n     * @deprecated\r\n     * since version 3.2.0, if the payload is string[], this function is no-op (string[] is only used for backwards Compatibility)\r\n     */\r\n    Sender.prototype._xhrReadyStateChange = function (xhr, payload, countOfItemsInPayload) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        // TODO: no-op\r\n        // add note to users, this will be removed\r\n    };\r\n    /**\r\n     * Trigger the immediate send of buffered data; If executing asynchronously (the default) this may (not required) return\r\n     * an [IPromise](https://nevware21.github.io/ts-async/typedoc/interfaces/IPromise.html) that will resolve once the\r\n     * send is complete. The actual implementation of the `IPromise` will be a native Promise (if supported) or the default\r\n     * as supplied by [ts-async library](https://github.com/nevware21/ts-async)\r\n     * @param async - Indicates if the events should be sent asynchronously\r\n     * @param forcedSender - {SenderFunction} - Indicates the forcedSender, undefined if not passed\r\n     * @returns - Nothing or optionally, if occurring asynchronously a [IPromise](https://nevware21.github.io/ts-async/typedoc/interfaces/IPromise.html)\r\n     * which will be resolved (or reject) once the send is complete, the [IPromise](https://nevware21.github.io/ts-async/typedoc/interfaces/IPromise.html)\r\n     * should only be returned when async is true.\r\n     */\r\n    Sender.prototype.triggerSend = function (async, forcedSender, sendReason) {\r\n        if (async === void 0) { async = true; }\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * error handler\r\n     * @Internal\r\n     * since version 3.2.0, if the payload is string[], this function is no-op (string[] is only used for backwards Compatibility)\r\n     */\r\n    Sender.prototype._onError = function (payload, message, event) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * partial success handler\r\n     * @Internal\r\n     * since version 3.2.0, if the payload is string[], this function is no-op (string[] is only used for backwards Compatibility)\r\n     */\r\n    Sender.prototype._onPartialSuccess = function (payload, results) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * success handler\r\n     * @Internal\r\n     * since version 3.2.0, if the payload is string[], this function is no-op (string[] is only used for backwards Compatibility)\r\n     */\r\n    Sender.prototype._onSuccess = function (payload, countOfItemsInPayload) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * xdr state changes\r\n     * @deprecated\r\n     * since version 3.2.0, if the payload is string[], this function is no-op (string[] is only used for backwards Compatibility)\r\n     */\r\n    Sender.prototype._xdrOnLoad = function (xdr, payload) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Add header to request\r\n     * @param name - Header name.\r\n     * @param value - Header value.\r\n     */\r\n    Sender.prototype.addHeader = function (name, value) {\r\n        // @DynamicProtoStub - DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Check if there are no active requests being sent.\r\n     * @returns True if idle, false otherwise.\r\n     */\r\n    Sender.prototype.isCompletelyIdle = function () {\r\n        // @DynamicProtoStub - DO NOT add any code as this will be removed during packaging\r\n        return false;\r\n    };\r\n    /**\r\n     * Get Offline Serializer support\r\n     * @returns internal Offline Serializer object\r\n     */\r\n    Sender.prototype.getOfflineSupport = function () {\r\n        // @DynamicProtoStub - DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    return Sender;\r\n}(BaseTelemetryPlugin));\r\nexport { Sender };\r\n//# sourceMappingURL=Sender.js.map", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n// ###################################################################################################################################################\r\n// Note: DON'T Export these const from the package as we are still targeting IE/ES5 this will export a mutable variables that someone could change ###\r\n// ###################################################################################################################################################\r\n// Generally you should only put values that are used more than 2 times and then only if not already exposed as a constant (such as SdkCoreNames)\r\n// as when using \"short\" named values from here they will be will be minified smaller than the SdkCoreNames[eSdkCoreNames.xxxx] value.\r\nexport var STR_DURATION = \"duration\";\r\nexport var STR_PROPERTIES = \"properties\";\r\n//# sourceMappingURL=InternalConstants.js.map", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n// @skip-file-minify\r\n// ##############################################################\r\n// AUTO GENERATED FILE: This file is Auto Generated during build.\r\n// ##############################################################\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n// Note: DON'T Export these const from the package as we are still targeting ES3 this will export a mutable variables that someone could change!!!\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\nexport var _DYN_REQUEST_URL = \"requestUrl\"; // Count: 11\r\nexport var _DYN_INST = \"inst\"; // Count: 5\r\nexport var _DYN_LENGTH = \"length\"; // Count: 8\r\nexport var _DYN_TRACE_ID = \"traceID\"; // Count: 9\r\nexport var _DYN_SPAN_ID = \"spanID\"; // Count: 8\r\nexport var _DYN_TRACE_FLAGS = \"traceFlags\"; // Count: 13\r\nexport var _DYN_CONTEXT = \"context\"; // Count: 7\r\nexport var _DYN_ABORTED = \"aborted\"; // Count: 7\r\nexport var _DYN_TRACE_ID0 = \"traceId\"; // Count: 5\r\nexport var _DYN_SPAN_ID1 = \"spanId\"; // Count: 5\r\nexport var _DYN__ADD_HOOK = \"_addHook\"; // Count: 4\r\nexport var _DYN_CORE = \"core\"; // Count: 8\r\nexport var _DYN_INCLUDE_CORRELATION_2 = \"includeCorrelationHeaders\"; // Count: 4\r\nexport var _DYN_GET_ABSOLUTE_URL = \"getAbsoluteUrl\"; // Count: 3\r\nexport var _DYN_HEADERS = \"headers\"; // Count: 6\r\nexport var _DYN_REQUEST_HEADERS = \"requestHeaders\"; // Count: 13\r\nexport var _DYN_SET_REQUEST_HEADER = \"setRequestHeader\"; // Count: 3\r\nexport var _DYN_TRACK_DEPENDENCY_DAT3 = \"trackDependencyDataInternal\"; // Count: 2\r\nexport var _DYN_START_TIME = \"startTime\"; // Count: 6\r\nexport var _DYN_TO_LOWER_CASE = \"toLowerCase\"; // Count: 6\r\nexport var _DYN_ENABLE_REQUEST_HEADE4 = \"enableRequestHeaderTracking\"; // Count: 3\r\nexport var _DYN_ENABLE_AJAX_ERROR_ST5 = \"enableAjaxErrorStatusText\"; // Count: 2\r\nexport var _DYN_ENABLE_AJAX_PERF_TRA6 = \"enableAjaxPerfTracking\"; // Count: 2\r\nexport var _DYN_MAX_AJAX_CALLS_PER_V7 = \"maxAjaxCallsPerView\"; // Count: 2\r\nexport var _DYN_EXCLUDE_REQUEST_FROM8 = \"excludeRequestFromAutoTrackingPatterns\"; // Count: 2\r\nexport var _DYN_ADD_REQUEST_CONTEXT = \"addRequestContext\"; // Count: 2\r\nexport var _DYN_DISABLE_AJAX_TRACKIN9 = \"disableAjaxTracking\"; // Count: 3\r\nexport var _DYN_AJAX_PERF_LOOKUP_DEL10 = \"ajaxPerfLookupDelay\"; // Count: 2\r\nexport var _DYN_DISABLE_FETCH_TRACKI11 = \"disableFetchTracking\"; // Count: 2\r\nexport var _DYN_ENABLE_RESPONSE_HEAD12 = \"enableResponseHeaderTracking\"; // Count: 2\r\nexport var _DYN_STATUS = \"status\"; // Count: 11\r\nexport var _DYN_STATUS_TEXT = \"statusText\"; // Count: 9\r\nexport var _DYN_HEADER_MAP = \"headerMap\"; // Count: 8\r\nexport var _DYN_OPEN_DONE = \"openDone\"; // Count: 3\r\nexport var _DYN_SEND_DONE = \"sendDone\"; // Count: 3\r\nexport var _DYN_REQUEST_SENT_TIME = \"requestSentTime\"; // Count: 9\r\nexport var _DYN_ABORT_DONE = \"abortDone\"; // Count: 3\r\nexport var _DYN_GET_TRACE_ID = \"getTraceId\"; // Count: 3\r\nexport var _DYN_GET_TRACE_FLAGS = \"getTraceFlags\"; // Count: 3\r\nexport var _DYN_METHOD = \"method\"; // Count: 8\r\nexport var _DYN_ERROR_STATUS_TEXT = \"errorStatusText\"; // Count: 3\r\nexport var _DYN_STATE_CHANGE_ATTACHE13 = \"stateChangeAttached\"; // Count: 2\r\nexport var _DYN_RESPONSE_TEXT = \"responseText\"; // Count: 6\r\nexport var _DYN_RESPONSE_FINISHED_TI14 = \"responseFinishedTime\"; // Count: 7\r\nexport var _DYN__CREATE_TRACK_ITEM = \"CreateTrackItem\"; // Count: 3\r\nexport var _DYN_RESPONSE = \"response\"; // Count: 4\r\nexport var _DYN_GET_ALL_RESPONSE_HEA15 = \"getAllResponseHeaders\"; // Count: 2\r\nexport var _DYN_GET_PART_APROPS = \"getPartAProps\"; // Count: 3\r\nexport var _DYN_PERF_MARK = \"perfMark\"; // Count: 4\r\nexport var _DYN_NAME = \"name\"; // Count: 6\r\nexport var _DYN_PERF_TIMING = \"perfTiming\"; // Count: 3\r\nexport var _DYN_EXCEPTION = \"exception\"; // Count: 5\r\nexport var _DYN_AJAX_DIAGNOSTICS_MES16 = \"ajaxDiagnosticsMessage\"; // Count: 3\r\nexport var _DYN_CORRELATION_CONTEXT = \"correlationContext\"; // Count: 3\r\nexport var _DYN_AJAX_TOTAL_DURATION = \"ajaxTotalDuration\"; // Count: 3\r\nexport var _DYN_EVENT_TRACE_CTX = \"eventTraceCtx\"; // Count: 3\r\n//# sourceMappingURL=__DynamicConstants.js.map", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { Extensions, dataSanitizeUrl, dateTimeUtilsDuration, msToTimeSpan, urlGetAbsoluteUrl, urlGetCompleteUrl } from \"@microsoft/applicationinsights-common\";\r\nimport { arrForEach, isNullOrUndefined, isNumber, isString, normalizeJsName, objForEachKey, objKeys } from \"@microsoft/applicationinsights-core-js\";\r\nimport { STR_DURATION, STR_PROPERTIES } from \"./InternalConstants\";\r\nimport { _DYN_ABORTED, _DYN_ABORT_DONE, _DYN_AJAX_TOTAL_DURATION, _DYN_CORRELATION_CONTEXT, _DYN_ERROR_STATUS_TEXT, _DYN_EVENT_TRACE_CTX, _DYN_GET_ABSOLUTE_URL, _DYN_GET_PART_APROPS, _DYN_GET_TRACE_FLAGS, _DYN_GET_TRACE_ID, _DYN_HEADER_MAP, _DYN_LENGTH, _DYN_METHOD, _DYN_NAME, _DYN_OPEN_DONE, _DYN_PERF_MARK, _DYN_PERF_TIMING, _DYN_REQUEST_HEADERS, _DYN_REQUEST_SENT_TIME, _DYN_REQUEST_URL, _DYN_RESPONSE, _DYN_RESPONSE_FINISHED_TI14, _DYN_SEND_DONE, _DYN_SPAN_ID, _DYN_SPAN_ID1, _DYN_START_TIME, _DYN_STATE_CHANGE_ATTACHE13, _DYN_STATUS, _DYN_STATUS_TEXT, _DYN_TRACE_FLAGS, _DYN_TRACE_ID, _DYN_TRACE_ID0, _DYN__CREATE_TRACK_ITEM } from \"./__DynamicConstants\";\r\n/** @ignore */\r\nfunction _calcPerfDuration(resourceEntry, start, end) {\r\n    var result = 0;\r\n    var from = resourceEntry[start];\r\n    var to = resourceEntry[end];\r\n    if (from && to) {\r\n        result = dateTimeUtilsDuration(from, to);\r\n    }\r\n    return result;\r\n}\r\n/** @ignore */\r\nfunction _setPerfDuration(props, name, resourceEntry, start, end) {\r\n    var result = 0;\r\n    var value = _calcPerfDuration(resourceEntry, start, end);\r\n    if (value) {\r\n        result = _setPerfValue(props, name, msToTimeSpan(value));\r\n    }\r\n    return result;\r\n}\r\n/** @ignore */\r\nfunction _setPerfValue(props, name, value) {\r\n    var strPerf = \"ajaxPerf\";\r\n    var result = 0;\r\n    if (props && name && value) {\r\n        var perfData = props[strPerf] = (props[strPerf] || {});\r\n        perfData[name] = value;\r\n        result = 1;\r\n    }\r\n    return result;\r\n}\r\n/** @ignore */\r\nfunction _populatePerfData(ajaxData, dependency) {\r\n    /*\r\n    * https://developer.mozilla.org/en-US/docs/Web/API/Resource_Timing_API/Using_the_Resource_Timing_API\r\n    *  | -startTime\r\n    *  | -redirectStart\r\n    *  |            | -redirectEnd\r\n    *  |            | | -fetchStart\r\n    *  |            | |   | -domainLookupStart\r\n    *  |            | |   |                |- domainLookupEnd\r\n    *  |            | |   |                | | -connectStart\r\n    *  |            | |   |                | |  | -secureConnectionStart\r\n    *  |            | |   |                | |  |        | -connectEnd\r\n    *  |            | |   |                | |  |        | | -requestStart\r\n    *  |            | |   |                | |  |        | |           | | -responseStart\r\n    *  |            | |   |                | |  |        | |           | |            | | -responseEnd\r\n    *  +------------+-+---+----------------+-+--+--------+-+-----------+-+------------+-+\r\n    *  |--redirect--| |---|--domainLookup--| |--connect--| |--request--| |--response--| |\r\n    *  |-------------------networkConnect----------------|\r\n    *  |                                                   |---------sentRequest--------|\r\n    *  |------------------------------------perfTotal-----------------------------------|\r\n    */\r\n    var resourceEntry = ajaxData[_DYN_PERF_TIMING /* @min:%2eperfTiming */];\r\n    var props = dependency[STR_PROPERTIES /* @min:%2eproperties */] || {};\r\n    var propsSet = 0;\r\n    var strName = \"name\";\r\n    var strStart = \"Start\";\r\n    var strEnd = \"End\";\r\n    var strDomainLookup = \"domainLookup\";\r\n    var strConnect = \"connect\";\r\n    var strRedirect = \"redirect\";\r\n    var strRequest = \"request\";\r\n    var strResponse = \"response\";\r\n    var strStartTime = \"startTime\";\r\n    var strDomainLookupStart = strDomainLookup + strStart;\r\n    var strDomainLookupEnd = strDomainLookup + strEnd;\r\n    var strConnectStart = strConnect + strStart;\r\n    var strConnectEnd = strConnect + strEnd;\r\n    var strRequestStart = strRequest + strStart;\r\n    var strRequestEnd = strRequest + strEnd;\r\n    var strResponseStart = strResponse + strStart;\r\n    var strResponseEnd = strResponse + strEnd;\r\n    var strRedirectStart = strRedirect + strStart;\r\n    var strRedirectEnd = strRedirect = strEnd;\r\n    var strTransferSize = \"transferSize\";\r\n    var strEncodedBodySize = \"encodedBodySize\";\r\n    var strDecodedBodySize = \"decodedBodySize\";\r\n    var strServerTiming = \"serverTiming\";\r\n    if (resourceEntry) {\r\n        // redirect\r\n        propsSet |= _setPerfDuration(props, strRedirect, resourceEntry, strRedirectStart, strRedirectEnd);\r\n        // domainLookup\r\n        propsSet |= _setPerfDuration(props, strDomainLookup, resourceEntry, strDomainLookupStart, strDomainLookupEnd);\r\n        // connect\r\n        propsSet |= _setPerfDuration(props, strConnect, resourceEntry, strConnectStart, strConnectEnd);\r\n        // request\r\n        propsSet |= _setPerfDuration(props, strRequest, resourceEntry, strRequestStart, strRequestEnd);\r\n        // response\r\n        propsSet |= _setPerfDuration(props, strResponse, resourceEntry, strResponseStart, strResponseEnd);\r\n        // Network connection time\r\n        propsSet |= _setPerfDuration(props, \"networkConnect\", resourceEntry, strStartTime, strConnectEnd);\r\n        // Sent Request\r\n        propsSet |= _setPerfDuration(props, \"sentRequest\", resourceEntry, strRequestStart, strResponseEnd);\r\n        // PerfTotal / Duration\r\n        var duration = resourceEntry[STR_DURATION /* @min:%2eduration */];\r\n        if (!duration) {\r\n            duration = _calcPerfDuration(resourceEntry, strStartTime, strResponseEnd) || 0;\r\n        }\r\n        propsSet |= _setPerfValue(props, STR_DURATION, duration);\r\n        propsSet |= _setPerfValue(props, \"perfTotal\", duration);\r\n        var serverTiming = resourceEntry[strServerTiming];\r\n        if (serverTiming) {\r\n            var server_1 = {};\r\n            arrForEach(serverTiming, function (value, idx) {\r\n                var name = normalizeJsName(value[strName] || \"\" + idx);\r\n                var newValue = server_1[name] || {};\r\n                objForEachKey(value, function (key, val) {\r\n                    if (key !== strName && isString(val) || isNumber(val)) {\r\n                        if (newValue[key]) {\r\n                            val = newValue[key] + \";\" + val;\r\n                        }\r\n                        if (val || !isString(val)) {\r\n                            // Only set the value if it has a value and it's not an empty string\r\n                            newValue[key] = val;\r\n                        }\r\n                    }\r\n                });\r\n                server_1[name] = newValue;\r\n            });\r\n            propsSet |= _setPerfValue(props, strServerTiming, server_1);\r\n        }\r\n        propsSet |= _setPerfValue(props, strTransferSize, resourceEntry[strTransferSize]);\r\n        propsSet |= _setPerfValue(props, strEncodedBodySize, resourceEntry[strEncodedBodySize]);\r\n        propsSet |= _setPerfValue(props, strDecodedBodySize, resourceEntry[strDecodedBodySize]);\r\n    }\r\n    else {\r\n        if (ajaxData[_DYN_PERF_MARK /* @min:%2eperfMark */]) {\r\n            propsSet |= _setPerfValue(props, \"missing\", ajaxData.perfAttempts);\r\n        }\r\n    }\r\n    if (propsSet) {\r\n        dependency[STR_PROPERTIES /* @min:%2eproperties */] = props;\r\n    }\r\n}\r\nvar XHRMonitoringState = /** @class */ (function () {\r\n    function XHRMonitoringState() {\r\n        var self = this;\r\n        self[_DYN_OPEN_DONE /* @min:%2eopenDone */] = false;\r\n        self.setRequestHeaderDone = false;\r\n        self[_DYN_SEND_DONE /* @min:%2esendDone */] = false;\r\n        self[_DYN_ABORT_DONE /* @min:%2eabortDone */] = false;\r\n        // <summary>True, if onreadyStateChangeCallback function attached to xhr, otherwise false</summary>\r\n        self[_DYN_STATE_CHANGE_ATTACHE13 /* @min:%2estateChangeAttached */] = false;\r\n    }\r\n    return XHRMonitoringState;\r\n}());\r\nexport { XHRMonitoringState };\r\nvar ajaxRecord = /** @class */ (function () {\r\n    function ajaxRecord(traceId, spanId, logger, traceCtx) {\r\n        var _a;\r\n        var self = this;\r\n        var _logger = logger;\r\n        var strResponseText = \"responseText\";\r\n        // Assigning the initial/default values within the constructor to avoid typescript from creating a bunch of\r\n        // this.XXXX = null\r\n        self[_DYN_PERF_MARK /* @min:%2eperfMark */] = null;\r\n        self.completed = false;\r\n        self.requestHeadersSize = null;\r\n        self[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */] = null;\r\n        self.responseReceivingDuration = null;\r\n        self.callbackDuration = null;\r\n        self[_DYN_AJAX_TOTAL_DURATION /* @min:%2eajaxTotalDuration */] = null;\r\n        self[_DYN_ABORTED /* @min:%2eaborted */] = 0;\r\n        self.pageUrl = null;\r\n        self[_DYN_REQUEST_URL /* @min:%2erequestUrl */] = null;\r\n        self.requestSize = 0;\r\n        self[_DYN_METHOD /* @min:%2emethod */] = null;\r\n        self[_DYN_STATUS /* @min:%2estatus */] = null;\r\n        self[_DYN_REQUEST_SENT_TIME /* @min:%2erequestSentTime */] = null;\r\n        self.responseStartedTime = null;\r\n        self[_DYN_RESPONSE_FINISHED_TI14 /* @min:%2eresponseFinishedTime */] = null;\r\n        self.callbackFinishedTime = null;\r\n        self.endTime = null;\r\n        self.xhrMonitoringState = new XHRMonitoringState();\r\n        self.clientFailure = 0;\r\n        self[_DYN_TRACE_ID /* @min:%2etraceID */] = traceId;\r\n        self[_DYN_SPAN_ID /* @min:%2espanID */] = spanId;\r\n        self[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */] = traceCtx === null || traceCtx === void 0 ? void 0 : traceCtx.getTraceFlags();\r\n        if (traceCtx) {\r\n            self[_DYN_EVENT_TRACE_CTX /* @min:%2eeventTraceCtx */] = (_a = {},\r\n                _a[_DYN_TRACE_ID0 /* @min:traceId */] = traceCtx[_DYN_GET_TRACE_ID /* @min:%2egetTraceId */](),\r\n                _a[_DYN_SPAN_ID1 /* @min:spanId */] = traceCtx.getSpanId(),\r\n                _a[_DYN_TRACE_FLAGS /* @min:traceFlags */] = traceCtx[_DYN_GET_TRACE_FLAGS /* @min:%2egetTraceFlags */](),\r\n                _a);\r\n        }\r\n        else {\r\n            self[_DYN_EVENT_TRACE_CTX /* @min:%2eeventTraceCtx */] = null;\r\n        }\r\n        dynamicProto(ajaxRecord, self, function (self) {\r\n            self.getAbsoluteUrl = function () {\r\n                return self[_DYN_REQUEST_URL /* @min:%2erequestUrl */] ? urlGetAbsoluteUrl(self[_DYN_REQUEST_URL /* @min:%2erequestUrl */]) : null;\r\n            };\r\n            self.getPathName = function () {\r\n                return self[_DYN_REQUEST_URL /* @min:%2erequestUrl */] ? dataSanitizeUrl(_logger, urlGetCompleteUrl(self[_DYN_METHOD /* @min:%2emethod */], self[_DYN_REQUEST_URL /* @min:%2erequestUrl */])) : null;\r\n            };\r\n            self[_DYN__CREATE_TRACK_ITEM /* @min:%2eCreateTrackItem */] = function (ajaxType, enableRequestHeaderTracking, getResponse) {\r\n                var _a;\r\n                // round to 3 decimal points\r\n                self.ajaxTotalDuration = Math.round(dateTimeUtilsDuration(self.requestSentTime, self.responseFinishedTime) * 1000) / 1000;\r\n                if (self[_DYN_AJAX_TOTAL_DURATION /* @min:%2eajaxTotalDuration */] < 0) {\r\n                    return null;\r\n                }\r\n                var dependency = (_a = {\r\n                        id: \"|\" + self[_DYN_TRACE_ID /* @min:%2etraceID */] + \".\" + self[_DYN_SPAN_ID /* @min:%2espanID */],\r\n                        target: self[_DYN_GET_ABSOLUTE_URL /* @min:%2egetAbsoluteUrl */]()\r\n                    },\r\n                    _a[_DYN_NAME /* @min:name */] = self.getPathName(),\r\n                    _a.type = ajaxType,\r\n                    _a[_DYN_START_TIME /* @min:startTime */] = null,\r\n                    _a.duration = self[_DYN_AJAX_TOTAL_DURATION /* @min:%2eajaxTotalDuration */],\r\n                    _a.success = (+(self[_DYN_STATUS /* @min:%2estatus */])) >= 200 && (+(self[_DYN_STATUS /* @min:%2estatus */])) < 400,\r\n                    _a.responseCode = (+(self[_DYN_STATUS /* @min:%2estatus */])),\r\n                    _a[STR_PROPERTIES] = { HttpMethod: self[_DYN_METHOD /* @min:%2emethod */] },\r\n                    _a);\r\n                var props = dependency[STR_PROPERTIES];\r\n                if (self[_DYN_ABORTED /* @min:%2eaborted */]) {\r\n                    props[_DYN_ABORTED /* @min:%2eaborted */] = true;\r\n                }\r\n                if (self[_DYN_REQUEST_SENT_TIME /* @min:%2erequestSentTime */]) {\r\n                    // Set the correct dependency start time\r\n                    dependency[_DYN_START_TIME /* @min:%2estartTime */] = new Date();\r\n                    dependency[_DYN_START_TIME /* @min:%2estartTime */].setTime(self[_DYN_REQUEST_SENT_TIME /* @min:%2erequestSentTime */]);\r\n                }\r\n                // Add Ajax perf details if available\r\n                _populatePerfData(self, dependency);\r\n                if (enableRequestHeaderTracking) {\r\n                    if (objKeys(self.requestHeaders)[_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n                        props[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */] = self[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */];\r\n                    }\r\n                }\r\n                if (getResponse) {\r\n                    var response = getResponse();\r\n                    if (response) {\r\n                        // enrich dependency target with correlation context from the server\r\n                        var correlationContext = response[_DYN_CORRELATION_CONTEXT /* @min:%2ecorrelationContext */];\r\n                        if (correlationContext) {\r\n                            dependency.correlationContext = /* dependency.target + \" | \" + */ correlationContext;\r\n                        }\r\n                        if (response[_DYN_HEADER_MAP /* @min:%2eheaderMap */]) {\r\n                            if (objKeys(response.headerMap)[_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n                                props.responseHeaders = response[_DYN_HEADER_MAP /* @min:%2eheaderMap */];\r\n                            }\r\n                        }\r\n                        if (self[_DYN_ERROR_STATUS_TEXT /* @min:%2eerrorStatusText */]) {\r\n                            if (self[_DYN_STATUS /* @min:%2estatus */] >= 400) {\r\n                                var responseType = response.type;\r\n                                if (responseType === \"\" || responseType === \"text\") {\r\n                                    props.responseText = response.responseText ? response[_DYN_STATUS_TEXT /* @min:%2estatusText */] + \" - \" + response[strResponseText] : response[_DYN_STATUS_TEXT /* @min:%2estatusText */];\r\n                                }\r\n                                if (responseType === \"json\") {\r\n                                    props.responseText = response.response ? response[_DYN_STATUS_TEXT /* @min:%2estatusText */] + \" - \" + JSON.stringify(response[_DYN_RESPONSE /* @min:%2eresponse */]) : response[_DYN_STATUS_TEXT /* @min:%2estatusText */];\r\n                                }\r\n                            }\r\n                            else if (self[_DYN_STATUS /* @min:%2estatus */] === 0) {\r\n                                props.responseText = response[_DYN_STATUS_TEXT /* @min:%2estatusText */] || \"\";\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return dependency;\r\n            };\r\n            self[_DYN_GET_PART_APROPS /* @min:%2egetPartAProps */] = function () {\r\n                var _a;\r\n                var partA = null;\r\n                var traceCtx = self[_DYN_EVENT_TRACE_CTX /* @min:%2eeventTraceCtx */];\r\n                if (traceCtx && (traceCtx[_DYN_TRACE_ID0 /* @min:%2etraceId */] || traceCtx[_DYN_SPAN_ID1 /* @min:%2espanId */])) {\r\n                    partA = {};\r\n                    var traceExt = partA[Extensions.TraceExt] = (_a = {},\r\n                        _a[_DYN_TRACE_ID /* @min:traceID */] = traceCtx[_DYN_TRACE_ID0 /* @min:%2etraceId */],\r\n                        _a.parentID = traceCtx[_DYN_SPAN_ID1 /* @min:%2espanId */],\r\n                        _a);\r\n                    if (!isNullOrUndefined(traceCtx[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */])) {\r\n                        traceExt[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */] = traceCtx[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */];\r\n                    }\r\n                }\r\n                return partA;\r\n            };\r\n        });\r\n    }\r\n    ajaxRecord.prototype.getAbsoluteUrl = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    ajaxRecord.prototype.getPathName = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    ajaxRecord.prototype.CreateTrackItem = function (ajaxType, enableRequestHeaderTracking, getResponse) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    ajaxRecord.prototype.getPartAProps = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    return ajaxRecord;\r\n}());\r\nexport { ajaxRecord };\r\n//# sourceMappingURL=ajaxRecord.js.map", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nvar _a;\r\nimport { __assign, __extends } from \"tslib\";\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { DisabledPropertyName, PropertiesPluginIdentifier, RemoteDependencyData, RequestHeaders, correlationIdCanIncludeCorrelationHeader, correlationIdGetCorrelationContext, createDistributedTraceContextFromTrace, createTelemetryItem, createTraceParent, dateTimeUtilsNow, formatTraceParent, isInternalApplicationInsightsEndpoint } from \"@microsoft/applicationinsights-common\";\r\nimport { BaseTelemetryPlugin, InstrumentFunc, InstrumentProto, _throwInternal, arrForEach, createProcessTelemetryContext, createUniqueNamespace, dumpObj, eventOn, generateW3CId, getExceptionName, getGlobal, getIEVersion, getLocation, getPerformance, isFunction, isNullOrUndefined, isString, isXhrSupported, mergeEvtNamespace, onConfigChange, strPrototype, strTrim } from \"@microsoft/applicationinsights-core-js\";\r\nimport { isWebWorker, objFreeze, scheduleTimeout, strIndexOf, strSplit, strSubstr } from \"@nevware21/ts-utils\";\r\nimport { STR_PROPERTIES } from \"./InternalConstants\";\r\nimport { _DYN_ABORTED, _DYN_ABORT_DONE, _DYN_ADD_REQUEST_CONTEXT, _DYN_AJAX_DIAGNOSTICS_MES16, _DYN_AJAX_PERF_LOOKUP_DEL10, _DYN_CONTEXT, _DYN_CORE, _DYN_CORRELATION_CONTEXT, _DYN_DISABLE_AJAX_TRACKIN9, _DYN_DISABLE_FETCH_TRACKI11, _DYN_ENABLE_AJAX_ERROR_ST5, _DYN_ENABLE_AJAX_PERF_TRA6, _DYN_ENABLE_REQUEST_HEADE4, _DYN_ENABLE_RESPONSE_HEAD12, _DYN_ERROR_STATUS_TEXT, _DYN_EXCEPTION, _DYN_EXCLUDE_REQUEST_FROM8, _DYN_GET_ABSOLUTE_URL, _DYN_GET_ALL_RESPONSE_HEA15, _DYN_GET_PART_APROPS, _DYN_GET_TRACE_FLAGS, _DYN_GET_TRACE_ID, _DYN_HEADERS, _DYN_HEADER_MAP, _DYN_INCLUDE_CORRELATION_2, _DYN_INST, _DYN_LENGTH, _DYN_MAX_AJAX_CALLS_PER_V7, _DYN_METHOD, _DYN_NAME, _DYN_OPEN_DONE, _DYN_PERF_MARK, _DYN_PERF_TIMING, _DYN_REQUEST_HEADERS, _DYN_REQUEST_SENT_TIME, _DYN_REQUEST_URL, _DYN_RESPONSE, _DYN_RESPONSE_FINISHED_TI14, _DYN_RESPONSE_TEXT, _DYN_SEND_DONE, _DYN_SET_REQUEST_HEADER, _DYN_SPAN_ID, _DYN_SPAN_ID1, _DYN_START_TIME, _DYN_STATE_CHANGE_ATTACHE13, _DYN_STATUS, _DYN_STATUS_TEXT, _DYN_TO_LOWER_CASE, _DYN_TRACE_FLAGS, _DYN_TRACE_ID, _DYN_TRACE_ID0, _DYN_TRACK_DEPENDENCY_DAT3, _DYN__ADD_HOOK, _DYN__CREATE_TRACK_ITEM } from \"./__DynamicConstants\";\r\nimport { ajaxRecord } from \"./ajaxRecord\";\r\nvar AJAX_MONITOR_PREFIX = \"ai.ajxmn.\";\r\nvar strDiagLog = \"diagLog\";\r\nvar AJAX_DATA_CONTAINER = \"_ajaxData\";\r\nvar STR_FETCH = \"fetch\";\r\nvar ERROR_HEADER = \"Failed to monitor XMLHttpRequest\";\r\nvar ERROR_PREFIX = \", monitoring data for this ajax call \";\r\nvar ERROR_POSTFIX = ERROR_PREFIX + \"may be incorrect.\";\r\nvar ERROR_NOT_SENT = ERROR_PREFIX + \"won't be sent.\";\r\nvar CORRELATION_HEADER_ERROR = \"Failed to get Request-Context correlation header as it may be not included in the response or not accessible.\";\r\nvar CUSTOM_REQUEST_CONTEXT_ERROR = \"Failed to add custom defined request context as configured call back may missing a null check.\";\r\nvar FAILED_TO_CALCULATE_DURATION_ERROR = \"Failed to calculate the duration of the \";\r\n// Using a global value so that to handle same iKey with multiple app insights instances (mostly for testing)\r\nvar _markCount = 0;\r\n/** @Ignore */\r\nfunction _supportsFetch() {\r\n    var _global = getGlobal();\r\n    if (!_global ||\r\n        isNullOrUndefined(_global.Request) ||\r\n        isNullOrUndefined(_global.Request[strPrototype]) ||\r\n        isNullOrUndefined(_global[STR_FETCH])) {\r\n        return null;\r\n    }\r\n    return _global[STR_FETCH];\r\n}\r\n/**\r\n * Determines whether ajax monitoring can be enabled on this document\r\n * @returns True if Ajax monitoring is supported on this page, otherwise false\r\n * @ignore\r\n */\r\nfunction _supportsAjaxMonitoring(ajaxMonitorInstance, ajaxDataId) {\r\n    var _a, _b;\r\n    var result = false;\r\n    if (isXhrSupported()) {\r\n        var proto = XMLHttpRequest[strPrototype];\r\n        result = !isNullOrUndefined(proto) &&\r\n            !isNullOrUndefined(proto.open) && // eslint-disable-line security/detect-non-literal-fs-filename -- false positive\r\n            !isNullOrUndefined(proto.send) &&\r\n            !isNullOrUndefined(proto.abort);\r\n    }\r\n    var ieVer = getIEVersion();\r\n    if (ieVer && ieVer < 9) {\r\n        result = false;\r\n    }\r\n    if (result) {\r\n        // Disable if the XmlHttpRequest can't be extended or hooked\r\n        try {\r\n            var xhr = new XMLHttpRequest();\r\n            var xhrData = {\r\n                xh: [],\r\n                i: (_a = {},\r\n                    _a[ajaxDataId] = {},\r\n                    _a)\r\n            };\r\n            xhr[AJAX_DATA_CONTAINER] = xhrData;\r\n            // Check that we can update the prototype\r\n            var theOpen = XMLHttpRequest[strPrototype].open;\r\n            XMLHttpRequest[strPrototype].open = theOpen;\r\n        }\r\n        catch (e) {\r\n            // We can't decorate the xhr object so disable monitoring\r\n            result = false;\r\n            _throwInternalCritical(ajaxMonitorInstance, 15 /* _eInternalMessageId.FailedMonitorAjaxOpen */, \"Failed to enable XMLHttpRequest monitoring, extension is not supported\", (_b = {},\r\n                _b[_DYN_EXCEPTION /* @min:exception */] = dumpObj(e),\r\n                _b));\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Internal helper to fetch the SDK instance tracking data for this XHR request\r\n * @param xhr\r\n * @param ajaxDataId\r\n * @returns\r\n */\r\nvar _getAjaxData = function (xhr, ajaxDataId) {\r\n    if (xhr && ajaxDataId && xhr[AJAX_DATA_CONTAINER]) {\r\n        return (xhr[AJAX_DATA_CONTAINER].i || {})[ajaxDataId];\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * @ignore\r\n * Internal helper to track the singleton shared tracking headers, so we can attempt to not create headers\r\n * that might cause an issue if multiple values are populated.\r\n * @param xhr - The instrumented XHR instance\r\n */\r\nvar _addSharedXhrHeaders = function (xhr, name, value) {\r\n    if (xhr) {\r\n        var headers = (xhr[AJAX_DATA_CONTAINER] || {}).xh;\r\n        if (headers) {\r\n            headers.push({\r\n                n: name,\r\n                v: value\r\n            });\r\n        }\r\n    }\r\n};\r\nvar _isHeaderSet = function (xhr, name) {\r\n    var isPresent = false;\r\n    if (xhr) {\r\n        var headers = (xhr[AJAX_DATA_CONTAINER] || {}).xh;\r\n        if (headers) {\r\n            arrForEach(headers, function (header) {\r\n                if (header.n === name) {\r\n                    isPresent = true;\r\n                    return -1;\r\n                }\r\n            });\r\n        }\r\n    }\r\n    return isPresent;\r\n};\r\n/** @Ignore */\r\nfunction _getFailedAjaxDiagnosticsMessage(xhr, ajaxDataId) {\r\n    var result = \"\";\r\n    try {\r\n        var ajaxData = _getAjaxData(xhr, ajaxDataId);\r\n        if (ajaxData && ajaxData[_DYN_REQUEST_URL /* @min:%2erequestUrl */]) {\r\n            result += \"(url: '\" + ajaxData[_DYN_REQUEST_URL /* @min:%2erequestUrl */] + \"')\";\r\n        }\r\n    }\r\n    catch (e) {\r\n        // eslint-disable-next-line no-empty\r\n    }\r\n    return result;\r\n}\r\n/** @ignore */\r\nfunction _throwInternalCritical(ajaxMonitorInstance, msgId, message, properties, isUserAct) {\r\n    _throwInternal(ajaxMonitorInstance[strDiagLog](), 1 /* eLoggingSeverity.CRITICAL */, msgId, message, properties, isUserAct);\r\n}\r\n/** @ignore */\r\nfunction _throwInternalWarning(ajaxMonitorInstance, msgId, message, properties, isUserAct) {\r\n    _throwInternal(ajaxMonitorInstance[strDiagLog](), 2 /* eLoggingSeverity.WARNING */, msgId, message, properties, isUserAct);\r\n}\r\n/** @Ignore */\r\nfunction _createErrorCallbackFunc(ajaxMonitorInstance, internalMessage, message) {\r\n    // tslint:disable-next-line\r\n    return function (callDetails) {\r\n        var _a;\r\n        _throwInternalCritical(ajaxMonitorInstance, internalMessage, message, (_a = {\r\n                ajaxDiagnosticsMessage: _getFailedAjaxDiagnosticsMessage(callDetails[_DYN_INST /* @min:%2einst */], ajaxMonitorInstance._ajaxDataId)\r\n            },\r\n            _a[_DYN_EXCEPTION /* @min:exception */] = dumpObj(callDetails.err),\r\n            _a));\r\n    };\r\n}\r\nfunction _indexOf(value, match) {\r\n    if (value && match) {\r\n        return strIndexOf(value, match);\r\n    }\r\n    return -1;\r\n}\r\nfunction _addHandler(container, id, theFunc) {\r\n    var theHandler = {\r\n        id: id,\r\n        fn: theFunc\r\n    };\r\n    container.push(theHandler);\r\n    return {\r\n        remove: function () {\r\n            arrForEach(container, function (initializer, idx) {\r\n                if (initializer.id === theHandler.id) {\r\n                    container.splice(idx, 1);\r\n                    return -1;\r\n                }\r\n            });\r\n        }\r\n    };\r\n}\r\nfunction _processDependencyContainer(core, container, details, message) {\r\n    var result = true;\r\n    arrForEach(container, function (theFunc, idx) {\r\n        try {\r\n            if (theFunc.fn.call(null, details) === false) {\r\n                result = false;\r\n            }\r\n        }\r\n        catch (e) {\r\n            _throwInternal(core && core.logger, 1 /* eLoggingSeverity.CRITICAL */, 64 /* _eInternalMessageId.TelemetryInitializerFailed */, \"Dependency \" + message + \" [#\" + idx + \"] failed: \" + getExceptionName(e), { exception: dumpObj(e) }, true);\r\n        }\r\n    });\r\n    return result;\r\n}\r\nfunction _processDependencyListeners(listeners, core, ajaxData, xhr, input, init) {\r\n    var _a;\r\n    var initializersCount = listeners[_DYN_LENGTH /* @min:%2elength */];\r\n    if (initializersCount > 0) {\r\n        var details = (_a = {},\r\n            _a[_DYN_CORE /* @min:core */] = core,\r\n            _a.xhr = xhr,\r\n            _a.input = input,\r\n            _a.init = init,\r\n            _a.traceId = ajaxData[_DYN_TRACE_ID /* @min:%2etraceID */],\r\n            _a.spanId = ajaxData[_DYN_SPAN_ID /* @min:%2espanID */],\r\n            _a.traceFlags = ajaxData[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */],\r\n            _a.context = ajaxData[_DYN_CONTEXT /* @min:%2econtext */] || {},\r\n            _a.aborted = !!ajaxData[_DYN_ABORTED /* @min:%2eaborted */],\r\n            _a);\r\n        _processDependencyContainer(core, listeners, details, \"listener\");\r\n        ajaxData[_DYN_TRACE_ID /* @min:%2etraceID */] = details[_DYN_TRACE_ID0 /* @min:%2etraceId */];\r\n        ajaxData[_DYN_SPAN_ID /* @min:%2espanID */] = details[_DYN_SPAN_ID1 /* @min:%2espanId */];\r\n        ajaxData[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */] = details[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */];\r\n        ajaxData[_DYN_CONTEXT /* @min:%2econtext */] = details[_DYN_CONTEXT /* @min:%2econtext */];\r\n    }\r\n}\r\nvar BLOB_CORE = \"*.blob.core.\";\r\nexport var DfltAjaxCorrelationHeaderExDomains = objFreeze([\r\n    BLOB_CORE + \"windows.net\",\r\n    BLOB_CORE + \"chinacloudapi.cn\",\r\n    BLOB_CORE + \"cloudapi.de\",\r\n    BLOB_CORE + \"usgovcloudapi.net\"\r\n]);\r\nvar _internalExcludeEndpoints = [\r\n    /https:\\/\\/[^\\/]*(\\.pipe\\.aria|aria\\.pipe|events\\.data|collector\\.azure)\\.[^\\/]+\\/(OneCollector\\/1|Collector\\/3)\\.0/i\r\n];\r\nvar _defaultConfig = objFreeze((_a = {},\r\n    _a[_DYN_MAX_AJAX_CALLS_PER_V7 /* @min:maxAjaxCallsPerView */] = 500,\r\n    _a[_DYN_DISABLE_AJAX_TRACKIN9 /* @min:disableAjaxTracking */] = false,\r\n    _a[_DYN_DISABLE_FETCH_TRACKI11 /* @min:disableFetchTracking */] = false,\r\n    _a[_DYN_EXCLUDE_REQUEST_FROM8 /* @min:excludeRequestFromAutoTrackingPatterns */] = undefined,\r\n    _a.disableCorrelationHeaders = false,\r\n    _a.distributedTracingMode = 1 /* eDistributedTracingModes.AI_AND_W3C */,\r\n    _a.correlationHeaderExcludedDomains = DfltAjaxCorrelationHeaderExDomains,\r\n    _a.correlationHeaderDomains = undefined,\r\n    _a.correlationHeaderExcludePatterns = undefined,\r\n    _a.appId = undefined,\r\n    _a.enableCorsCorrelation = false,\r\n    _a[_DYN_ENABLE_REQUEST_HEADE4 /* @min:enableRequestHeaderTracking */] = false,\r\n    _a[_DYN_ENABLE_RESPONSE_HEAD12 /* @min:enableResponseHeaderTracking */] = false,\r\n    _a[_DYN_ENABLE_AJAX_ERROR_ST5 /* @min:enableAjaxErrorStatusText */] = false,\r\n    _a[_DYN_ENABLE_AJAX_PERF_TRA6 /* @min:enableAjaxPerfTracking */] = false,\r\n    _a.maxAjaxPerfLookupAttempts = 3,\r\n    _a[_DYN_AJAX_PERF_LOOKUP_DEL10 /* @min:ajaxPerfLookupDelay */] = 25,\r\n    _a.ignoreHeaders = [\r\n        \"Authorization\",\r\n        \"X-API-Key\",\r\n        \"WWW-Authenticate\"\r\n    ],\r\n    _a[_DYN_ADD_REQUEST_CONTEXT /* @min:addRequestContext */] = undefined,\r\n    _a.addIntEndpoints = true,\r\n    _a));\r\nvar AjaxMonitor = /** @class */ (function (_super) {\r\n    __extends(AjaxMonitor, _super);\r\n    function AjaxMonitor() {\r\n        var _this = _super.call(this) || this;\r\n        _this.identifier = AjaxMonitor.identifier;\r\n        _this.priority = 120;\r\n        var _fetchInitialized; // fetch monitoring initialized\r\n        var _xhrInitialized; // XHR monitoring initialized\r\n        var _currentWindowHost;\r\n        var _extensionConfig;\r\n        var _enableRequestHeaderTracking;\r\n        var _enableAjaxErrorStatusText;\r\n        var _trackAjaxAttempts;\r\n        var _context;\r\n        var _isUsingW3CHeaders;\r\n        var _isUsingAIHeaders;\r\n        var _markPrefix;\r\n        var _enableAjaxPerfTracking;\r\n        var _maxAjaxCallsPerView;\r\n        var _enableResponseHeaderTracking;\r\n        var _disabledUrls;\r\n        var _disableAjaxTracking;\r\n        var _disableFetchTracking;\r\n        var _excludeRequestFromAutoTrackingPatterns;\r\n        var _addRequestContext;\r\n        var _evtNamespace;\r\n        var _ajaxDataId;\r\n        var _dependencyHandlerId;\r\n        var _dependencyListeners;\r\n        var _dependencyInitializers;\r\n        var _ignoreHeaders;\r\n        var _maxAjaxPerfLookupAttempts;\r\n        var _ajaxPerfLookupDelay;\r\n        var _distributedTracingMode;\r\n        var _appId;\r\n        var _polyfillInitialized;\r\n        dynamicProto(AjaxMonitor, _this, function (_self, _base) {\r\n            var _addHook = _base[_DYN__ADD_HOOK /* @min:%2e_addHook */];\r\n            _initDefaults();\r\n            _self.initialize = function (config, core, extensions, pluginChain) {\r\n                if (!_self.isInitialized()) {\r\n                    _base.initialize(config, core, extensions, pluginChain);\r\n                    _evtNamespace = mergeEvtNamespace(createUniqueNamespace(\"ajax\"), core && core.evtNamespace && core.evtNamespace());\r\n                    _populateDefaults(config);\r\n                    _instrumentXhr();\r\n                    _instrumentFetch();\r\n                    _populateContext();\r\n                }\r\n            };\r\n            _self._doTeardown = function () {\r\n                _initDefaults();\r\n            };\r\n            _self.trackDependencyData = function (dependency, properties) {\r\n                _reportDependencyInternal(_dependencyInitializers, _self[_DYN_CORE /* @min:%2ecore */], null, dependency, properties);\r\n            };\r\n            _self[_DYN_INCLUDE_CORRELATION_2 /* @min:%2eincludeCorrelationHeaders */] = function (ajaxData, input, init, xhr) {\r\n                // Test Hook to allow the overriding of the location host\r\n                var currentWindowHost = _self[\"_currentWindowHost\"] || _currentWindowHost;\r\n                _processDependencyListeners(_dependencyListeners, _self[_DYN_CORE /* @min:%2ecore */], ajaxData, xhr, input, init);\r\n                if (input || input === \"\") { // Fetch\r\n                    if (correlationIdCanIncludeCorrelationHeader(_extensionConfig, ajaxData[_DYN_GET_ABSOLUTE_URL /* @min:%2egetAbsoluteUrl */](), currentWindowHost)) {\r\n                        if (!init) {\r\n                            init = {};\r\n                        }\r\n                        // init headers override original request headers\r\n                        // so, if they exist use only them, otherwise use request's because they should have been applied in the first place\r\n                        // not using original request headers will result in them being lost\r\n                        var headers = new Headers(init[_DYN_HEADERS /* @min:%2eheaders */] || (input instanceof Request ? (input[_DYN_HEADERS /* @min:%2eheaders */] || {}) : {}));\r\n                        if (_isUsingAIHeaders) {\r\n                            var id = \"|\" + ajaxData[_DYN_TRACE_ID /* @min:%2etraceID */] + \".\" + ajaxData[_DYN_SPAN_ID /* @min:%2espanID */];\r\n                            headers.set(RequestHeaders[3 /* eRequestHeaders.requestIdHeader */], id);\r\n                            if (_enableRequestHeaderTracking) {\r\n                                ajaxData[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */][RequestHeaders[3 /* eRequestHeaders.requestIdHeader */]] = id;\r\n                            }\r\n                        }\r\n                        var appId = _appId || (_context && _context.appId());\r\n                        if (appId) {\r\n                            headers.set(RequestHeaders[0 /* eRequestHeaders.requestContextHeader */], RequestHeaders[2 /* eRequestHeaders.requestContextAppIdFormat */] + appId);\r\n                            if (_enableRequestHeaderTracking) {\r\n                                ajaxData[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */][RequestHeaders[0 /* eRequestHeaders.requestContextHeader */]] = RequestHeaders[2 /* eRequestHeaders.requestContextAppIdFormat */] + appId;\r\n                            }\r\n                        }\r\n                        if (_isUsingW3CHeaders) {\r\n                            var traceFlags = ajaxData[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */];\r\n                            if (isNullOrUndefined(traceFlags)) {\r\n                                traceFlags = 0x01;\r\n                            }\r\n                            var traceParent = formatTraceParent(createTraceParent(ajaxData[_DYN_TRACE_ID /* @min:%2etraceID */], ajaxData[_DYN_SPAN_ID /* @min:%2espanID */], traceFlags));\r\n                            headers.set(RequestHeaders[4 /* eRequestHeaders.traceParentHeader */], traceParent);\r\n                            if (_enableRequestHeaderTracking) {\r\n                                ajaxData[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */][RequestHeaders[4 /* eRequestHeaders.traceParentHeader */]] = traceParent;\r\n                            }\r\n                        }\r\n                        init[_DYN_HEADERS /* @min:%2eheaders */] = headers;\r\n                    }\r\n                    return init;\r\n                }\r\n                else if (xhr) { // XHR\r\n                    if (correlationIdCanIncludeCorrelationHeader(_extensionConfig, ajaxData[_DYN_GET_ABSOLUTE_URL /* @min:%2egetAbsoluteUrl */](), currentWindowHost)) {\r\n                        if (_isUsingAIHeaders) {\r\n                            if (!_isHeaderSet(xhr, RequestHeaders[3 /* eRequestHeaders.requestIdHeader */])) {\r\n                                var id = \"|\" + ajaxData[_DYN_TRACE_ID /* @min:%2etraceID */] + \".\" + ajaxData[_DYN_SPAN_ID /* @min:%2espanID */];\r\n                                xhr[_DYN_SET_REQUEST_HEADER /* @min:%2esetRequestHeader */](RequestHeaders[3 /* eRequestHeaders.requestIdHeader */], id);\r\n                                if (_enableRequestHeaderTracking) {\r\n                                    ajaxData[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */][RequestHeaders[3 /* eRequestHeaders.requestIdHeader */]] = id;\r\n                                }\r\n                            }\r\n                            else {\r\n                                _throwInternalWarning(_self, 71 /* _eInternalMessageId.FailedMonitorAjaxSetRequestHeader */, \"Unable to set [\" + RequestHeaders[3 /* eRequestHeaders.requestIdHeader */] + \"] as it has already been set by another instance\");\r\n                            }\r\n                        }\r\n                        var appId = _appId || (_context && _context.appId());\r\n                        if (appId) {\r\n                            if (!_isHeaderSet(xhr, RequestHeaders[0 /* eRequestHeaders.requestContextHeader */])) {\r\n                                xhr[_DYN_SET_REQUEST_HEADER /* @min:%2esetRequestHeader */](RequestHeaders[0 /* eRequestHeaders.requestContextHeader */], RequestHeaders[2 /* eRequestHeaders.requestContextAppIdFormat */] + appId);\r\n                                if (_enableRequestHeaderTracking) {\r\n                                    ajaxData[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */][RequestHeaders[0 /* eRequestHeaders.requestContextHeader */]] = RequestHeaders[2 /* eRequestHeaders.requestContextAppIdFormat */] + appId;\r\n                                }\r\n                            }\r\n                            else {\r\n                                _throwInternalWarning(_self, 71 /* _eInternalMessageId.FailedMonitorAjaxSetRequestHeader */, \"Unable to set [\" + RequestHeaders[0 /* eRequestHeaders.requestContextHeader */] + \"] as it has already been set by another instance\");\r\n                            }\r\n                        }\r\n                        if (_isUsingW3CHeaders) {\r\n                            var traceFlags = ajaxData[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */];\r\n                            if (isNullOrUndefined(traceFlags)) {\r\n                                traceFlags = 0x01;\r\n                            }\r\n                            if (!_isHeaderSet(xhr, RequestHeaders[4 /* eRequestHeaders.traceParentHeader */])) {\r\n                                var traceParent = formatTraceParent(createTraceParent(ajaxData[_DYN_TRACE_ID /* @min:%2etraceID */], ajaxData[_DYN_SPAN_ID /* @min:%2espanID */], traceFlags));\r\n                                xhr[_DYN_SET_REQUEST_HEADER /* @min:%2esetRequestHeader */](RequestHeaders[4 /* eRequestHeaders.traceParentHeader */], traceParent);\r\n                                if (_enableRequestHeaderTracking) {\r\n                                    ajaxData[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */][RequestHeaders[4 /* eRequestHeaders.traceParentHeader */]] = traceParent;\r\n                                }\r\n                            }\r\n                            else {\r\n                                _throwInternalWarning(_self, 71 /* _eInternalMessageId.FailedMonitorAjaxSetRequestHeader */, \"Unable to set [\" + RequestHeaders[4 /* eRequestHeaders.traceParentHeader */] + \"] as it has already been set by another instance\");\r\n                            }\r\n                        }\r\n                    }\r\n                    return xhr;\r\n                }\r\n                return undefined;\r\n            };\r\n            _self[_DYN_TRACK_DEPENDENCY_DAT3 /* @min:%2etrackDependencyDataInternal */] = function (dependency, properties, systemProperties) {\r\n                if (_maxAjaxCallsPerView === -1 || _trackAjaxAttempts < _maxAjaxCallsPerView) {\r\n                    // Hack since expected format in w3c mode is |abc.def.\r\n                    // Non-w3c format is |abc.def\r\n                    // @todo Remove if better solution is available, e.g. handle in portal\r\n                    if ((_distributedTracingMode === 2 /* eDistributedTracingModes.W3C */\r\n                        || _distributedTracingMode === 1 /* eDistributedTracingModes.AI_AND_W3C */)\r\n                        && typeof dependency.id === \"string\" && dependency.id[dependency.id[_DYN_LENGTH /* @min:%2elength */] - 1] !== \".\") {\r\n                        dependency.id += \".\";\r\n                    }\r\n                    if (isNullOrUndefined(dependency[_DYN_START_TIME /* @min:%2estartTime */])) {\r\n                        dependency[_DYN_START_TIME /* @min:%2estartTime */] = new Date();\r\n                    }\r\n                    var item = createTelemetryItem(dependency, RemoteDependencyData.dataType, RemoteDependencyData.envelopeType, _self[strDiagLog](), properties, systemProperties);\r\n                    _self[_DYN_CORE /* @min:%2ecore */].track(item);\r\n                }\r\n                else if (_trackAjaxAttempts === _maxAjaxCallsPerView) {\r\n                    _throwInternalCritical(_self, 55 /* _eInternalMessageId.MaxAjaxPerPVExceeded */, \"Maximum ajax per page view limit reached, ajax monitoring is paused until the next trackPageView(). In order to increase the limit set the maxAjaxCallsPerView configuration parameter.\", true);\r\n                }\r\n                ++_trackAjaxAttempts;\r\n            };\r\n            _self.addDependencyListener = function (dependencyListener) {\r\n                return _addHandler(_dependencyListeners, _dependencyHandlerId++, dependencyListener);\r\n            };\r\n            _self.addDependencyInitializer = function (dependencyInitializer) {\r\n                return _addHandler(_dependencyInitializers, _dependencyHandlerId++, dependencyInitializer);\r\n            };\r\n            function _initDefaults() {\r\n                var location = getLocation();\r\n                _fetchInitialized = false; // fetch monitoring initialized\r\n                _xhrInitialized = false; // XHR monitoring initialized\r\n                _polyfillInitialized = false; // polyfill monitoring initialized\r\n                _currentWindowHost = location && location.host && location.host[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]();\r\n                _extensionConfig = null;\r\n                _enableRequestHeaderTracking = false;\r\n                _enableAjaxErrorStatusText = false;\r\n                _trackAjaxAttempts = 0;\r\n                _context = null;\r\n                _isUsingW3CHeaders = false;\r\n                _isUsingAIHeaders = false;\r\n                _markPrefix = null;\r\n                _enableAjaxPerfTracking = false;\r\n                _maxAjaxCallsPerView = 0;\r\n                _enableResponseHeaderTracking = false;\r\n                _disabledUrls = {};\r\n                _disableAjaxTracking = false;\r\n                _disableFetchTracking = false;\r\n                _excludeRequestFromAutoTrackingPatterns = null;\r\n                _addRequestContext = null;\r\n                _evtNamespace = null;\r\n                _dependencyHandlerId = 0;\r\n                _dependencyListeners = [];\r\n                _dependencyInitializers = [];\r\n                _ajaxDataId = createUniqueNamespace(\"ajaxData\");\r\n                _self._ajaxDataId = _ajaxDataId;\r\n                _ignoreHeaders = null;\r\n                _maxAjaxPerfLookupAttempts = 1;\r\n                _ajaxPerfLookupDelay = 1;\r\n                _distributedTracingMode = 1 /* eDistributedTracingModes.AI_AND_W3C */;\r\n                _appId = null;\r\n            }\r\n            function _populateDefaults(config) {\r\n                _self[_DYN__ADD_HOOK /* @min:%2e_addHook */](onConfigChange(config, function (details) {\r\n                    var config = details.cfg;\r\n                    var ctx = createProcessTelemetryContext(null, config, _self[_DYN_CORE /* @min:%2ecore */]);\r\n                    _extensionConfig = ctx.getExtCfg(AjaxMonitor.identifier, _defaultConfig);\r\n                    _distributedTracingMode = _extensionConfig.distributedTracingMode;\r\n                    _enableRequestHeaderTracking = _extensionConfig[_DYN_ENABLE_REQUEST_HEADE4 /* @min:%2eenableRequestHeaderTracking */];\r\n                    _enableAjaxErrorStatusText = _extensionConfig[_DYN_ENABLE_AJAX_ERROR_ST5 /* @min:%2eenableAjaxErrorStatusText */];\r\n                    _enableAjaxPerfTracking = _extensionConfig[_DYN_ENABLE_AJAX_PERF_TRA6 /* @min:%2eenableAjaxPerfTracking */];\r\n                    _maxAjaxCallsPerView = _extensionConfig[_DYN_MAX_AJAX_CALLS_PER_V7 /* @min:%2emaxAjaxCallsPerView */];\r\n                    _excludeRequestFromAutoTrackingPatterns = [].concat(_extensionConfig[_DYN_EXCLUDE_REQUEST_FROM8 /* @min:%2eexcludeRequestFromAutoTrackingPatterns */] || [], _extensionConfig.addIntEndpoints !== false ? _internalExcludeEndpoints : []);\r\n                    _addRequestContext = _extensionConfig[_DYN_ADD_REQUEST_CONTEXT /* @min:%2eaddRequestContext */];\r\n                    _isUsingAIHeaders = _distributedTracingMode === 0 /* eDistributedTracingModes.AI */ || _distributedTracingMode === 1 /* eDistributedTracingModes.AI_AND_W3C */;\r\n                    _isUsingW3CHeaders = _distributedTracingMode === 1 /* eDistributedTracingModes.AI_AND_W3C */ || _distributedTracingMode === 2 /* eDistributedTracingModes.W3C */;\r\n                    if (_enableAjaxPerfTracking) {\r\n                        _markPrefix = _ajaxDataId;\r\n                    }\r\n                    _disableAjaxTracking = !!_extensionConfig[_DYN_DISABLE_AJAX_TRACKIN9 /* @min:%2edisableAjaxTracking */];\r\n                    _maxAjaxPerfLookupAttempts = _extensionConfig.maxAjaxPerfLookupAttempts;\r\n                    _ajaxPerfLookupDelay = _extensionConfig[_DYN_AJAX_PERF_LOOKUP_DEL10 /* @min:%2eajaxPerfLookupDelay */];\r\n                    _ignoreHeaders = _extensionConfig.ignoreHeaders;\r\n                    _appId = _extensionConfig.appId;\r\n                }));\r\n            }\r\n            function _populateContext() {\r\n                var propExt = _self[_DYN_CORE /* @min:%2ecore */].getPlugin(PropertiesPluginIdentifier);\r\n                if (propExt) {\r\n                    _context = propExt.plugin[_DYN_CONTEXT /* @min:%2econtext */]; // we could move IPropertiesPlugin to common as well\r\n                }\r\n            }\r\n            // discard the header if it's defined as ignoreHeaders in ICorrelationConfig\r\n            function _canIncludeHeaders(header) {\r\n                var rlt = true;\r\n                if (header || _ignoreHeaders) {\r\n                    arrForEach(_ignoreHeaders, (function (key) {\r\n                        if (key[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]() === header[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]()) {\r\n                            rlt = false;\r\n                            return -1;\r\n                        }\r\n                    }));\r\n                }\r\n                return rlt;\r\n            }\r\n            // Fetch Stuff\r\n            function _instrumentFetch() {\r\n                var fetch = _supportsFetch();\r\n                if (!fetch) {\r\n                    return;\r\n                }\r\n                var global = getGlobal();\r\n                var isPolyfill = fetch.polyfill;\r\n                _self[_DYN__ADD_HOOK /* @min:%2e_addHook */](onConfigChange(_extensionConfig, function () {\r\n                    _disableFetchTracking = !!_extensionConfig[_DYN_DISABLE_FETCH_TRACKI11 /* @min:%2edisableFetchTracking */];\r\n                    _enableResponseHeaderTracking = _extensionConfig[_DYN_ENABLE_RESPONSE_HEAD12 /* @min:%2eenableResponseHeaderTracking */];\r\n                    if (!_disableFetchTracking && !_fetchInitialized) {\r\n                        _addHook(InstrumentFunc(global, STR_FETCH, {\r\n                            ns: _evtNamespace,\r\n                            // Add request hook\r\n                            req: function (callDetails, input, init) {\r\n                                var fetchData;\r\n                                if (!_disableFetchTracking && _fetchInitialized &&\r\n                                    !_isDisabledRequest(null, input, init) &&\r\n                                    // If we have a polyfil and XHR instrumented then let XHR report otherwise we get duplicates\r\n                                    !(isPolyfill && _xhrInitialized)) {\r\n                                    var ctx = callDetails.ctx();\r\n                                    fetchData = _createFetchRecord(input, init);\r\n                                    var newInit = _self[_DYN_INCLUDE_CORRELATION_2 /* @min:%2eincludeCorrelationHeaders */](fetchData, input, init);\r\n                                    if (newInit !== init) {\r\n                                        callDetails.set(1, newInit);\r\n                                    }\r\n                                    ctx.data = fetchData;\r\n                                }\r\n                            },\r\n                            rsp: function (callDetails, input) {\r\n                                if (!_disableFetchTracking) {\r\n                                    var fetchData_1 = callDetails.ctx().data;\r\n                                    if (fetchData_1) {\r\n                                        // Replace the result with the new promise from this code\r\n                                        callDetails.rslt = callDetails.rslt.then(function (response) {\r\n                                            _reportFetchMetrics(callDetails, (response || {})[_DYN_STATUS /* @min:%2estatus */], input, response, fetchData_1, function () {\r\n                                                var _a;\r\n                                                var ajaxResponse = (_a = {\r\n                                                        statusText: (response || {})[_DYN_STATUS_TEXT /* @min:%2estatusText */]\r\n                                                    },\r\n                                                    _a[_DYN_HEADER_MAP /* @min:headerMap */] = null,\r\n                                                    _a[_DYN_CORRELATION_CONTEXT /* @min:correlationContext */] = _getFetchCorrelationContext(response),\r\n                                                    _a);\r\n                                                if (_enableResponseHeaderTracking && response) {\r\n                                                    var responseHeaderMap_1 = {};\r\n                                                    response.headers.forEach(function (value, name) {\r\n                                                        if (_canIncludeHeaders(name)) {\r\n                                                            responseHeaderMap_1[name] = value;\r\n                                                        }\r\n                                                    });\r\n                                                    ajaxResponse[_DYN_HEADER_MAP /* @min:%2eheaderMap */] = responseHeaderMap_1;\r\n                                                }\r\n                                                return ajaxResponse;\r\n                                            });\r\n                                            return response;\r\n                                        })\r\n                                            .catch(function (reason) {\r\n                                            _reportFetchMetrics(callDetails, 0, input, null, fetchData_1, null, { error: reason.message || dumpObj(reason) });\r\n                                            throw reason;\r\n                                        });\r\n                                    }\r\n                                }\r\n                            },\r\n                            // Create an error callback to report any hook errors\r\n                            hkErr: _createErrorCallbackFunc(_self, 15 /* _eInternalMessageId.FailedMonitorAjaxOpen */, \"Failed to monitor Window.fetch\" + ERROR_POSTFIX)\r\n                        }, true, isWebWorker()));\r\n                        _fetchInitialized = true;\r\n                    }\r\n                    else if (isPolyfill && !_polyfillInitialized) {\r\n                        // If fetch is a polyfill we need to capture the request to ensure that we correctly track\r\n                        // disabled request URLS (i.e. internal urls) to ensure we don't end up in a constant loop\r\n                        // of reporting ourselves, for example React Native uses a polyfill for fetch\r\n                        // Note: Polyfill implementations that don't support the \"polyfill\" tag are not supported\r\n                        // the workaround is to add a polyfill property to your fetch implementation before initializing\r\n                        // App Insights\r\n                        _addHook(InstrumentFunc(global, STR_FETCH, {\r\n                            ns: _evtNamespace,\r\n                            req: function (callDetails, input, init) {\r\n                                // Just call so that we record any disabled URL\r\n                                _isDisabledRequest(null, input, init);\r\n                            }\r\n                        }));\r\n                        _polyfillInitialized = true;\r\n                    }\r\n                }));\r\n                if (isPolyfill) {\r\n                    // retag the instrumented fetch with the same polyfill settings this is mostly for testing\r\n                    // But also supports multiple App Insights usages\r\n                    global[STR_FETCH].polyfill = isPolyfill;\r\n                }\r\n            }\r\n            function _hookProto(target, funcName, callbacks) {\r\n                _addHook(InstrumentProto(target, funcName, callbacks));\r\n            }\r\n            function _instrumentXhr() {\r\n                if (!_supportsAjaxMonitoring(_self, _ajaxDataId)) {\r\n                    return;\r\n                }\r\n                _self[_DYN__ADD_HOOK /* @min:%2e_addHook */](onConfigChange(_extensionConfig, function () {\r\n                    _disableAjaxTracking = !!_extensionConfig[_DYN_DISABLE_AJAX_TRACKIN9 /* @min:%2edisableAjaxTracking */];\r\n                    _enableRequestHeaderTracking = _extensionConfig[_DYN_ENABLE_REQUEST_HEADE4 /* @min:%2eenableRequestHeaderTracking */];\r\n                    if (!_disableAjaxTracking && !_xhrInitialized) {\r\n                        // Instrument open\r\n                        _hookProto(XMLHttpRequest, \"open\", {\r\n                            ns: _evtNamespace,\r\n                            req: function (callDetails, method, url, async) {\r\n                                if (!_disableAjaxTracking) {\r\n                                    var xhr = callDetails[_DYN_INST /* @min:%2einst */];\r\n                                    var ajaxData = _getAjaxData(xhr, _ajaxDataId);\r\n                                    if (!_isDisabledRequest(xhr, url) && _isMonitoredXhrInstance(xhr, ajaxData, true)) {\r\n                                        if (!ajaxData || !ajaxData.xhrMonitoringState[_DYN_OPEN_DONE /* @min:%2eopenDone */]) {\r\n                                            // Only create a single ajaxData (even when multiple AI instances are running)\r\n                                            ajaxData = _openHandler(xhr, method, url, async);\r\n                                        }\r\n                                        // always attach to the on ready state change (required for handling multiple instances)\r\n                                        _attachToOnReadyStateChange(xhr, ajaxData);\r\n                                    }\r\n                                }\r\n                            },\r\n                            hkErr: _createErrorCallbackFunc(_self, 15 /* _eInternalMessageId.FailedMonitorAjaxOpen */, ERROR_HEADER + \".open\" + ERROR_POSTFIX)\r\n                        });\r\n                        // Instrument send\r\n                        _hookProto(XMLHttpRequest, \"send\", {\r\n                            ns: _evtNamespace,\r\n                            req: function (callDetails, context) {\r\n                                if (!_disableAjaxTracking) {\r\n                                    var xhr = callDetails[_DYN_INST /* @min:%2einst */];\r\n                                    var ajaxData = _getAjaxData(xhr, _ajaxDataId);\r\n                                    if (_isMonitoredXhrInstance(xhr, ajaxData) && !ajaxData.xhrMonitoringState[_DYN_SEND_DONE /* @min:%2esendDone */]) {\r\n                                        _createMarkId(\"xhr\", ajaxData);\r\n                                        ajaxData[_DYN_REQUEST_SENT_TIME /* @min:%2erequestSentTime */] = dateTimeUtilsNow();\r\n                                        _self[_DYN_INCLUDE_CORRELATION_2 /* @min:%2eincludeCorrelationHeaders */](ajaxData, undefined, undefined, xhr);\r\n                                        ajaxData.xhrMonitoringState[_DYN_SEND_DONE /* @min:%2esendDone */] = true;\r\n                                    }\r\n                                }\r\n                            },\r\n                            hkErr: _createErrorCallbackFunc(_self, 17 /* _eInternalMessageId.FailedMonitorAjaxSend */, ERROR_HEADER + ERROR_POSTFIX)\r\n                        });\r\n                        // Instrument abort\r\n                        _hookProto(XMLHttpRequest, \"abort\", {\r\n                            ns: _evtNamespace,\r\n                            req: function (callDetails) {\r\n                                if (!_disableAjaxTracking) {\r\n                                    var xhr = callDetails[_DYN_INST /* @min:%2einst */];\r\n                                    var ajaxData = _getAjaxData(xhr, _ajaxDataId);\r\n                                    if (_isMonitoredXhrInstance(xhr, ajaxData) && !ajaxData.xhrMonitoringState[_DYN_ABORT_DONE /* @min:%2eabortDone */]) {\r\n                                        ajaxData[_DYN_ABORTED /* @min:%2eaborted */] = 1;\r\n                                        ajaxData.xhrMonitoringState[_DYN_ABORT_DONE /* @min:%2eabortDone */] = true;\r\n                                    }\r\n                                }\r\n                            },\r\n                            hkErr: _createErrorCallbackFunc(_self, 13 /* _eInternalMessageId.FailedMonitorAjaxAbort */, ERROR_HEADER + \".abort\" + ERROR_POSTFIX)\r\n                        });\r\n                        // Instrument setRequestHeader\r\n                        _hookProto(XMLHttpRequest, \"setRequestHeader\", {\r\n                            ns: _evtNamespace,\r\n                            req: function (callDetails, header, value) {\r\n                                if (!_disableAjaxTracking) {\r\n                                    var xhr = callDetails[_DYN_INST /* @min:%2einst */];\r\n                                    var ajaxData = _getAjaxData(xhr, _ajaxDataId);\r\n                                    if (ajaxData && _isMonitoredXhrInstance(xhr, ajaxData)) {\r\n                                        _addSharedXhrHeaders(xhr, header, value);\r\n                                        if (_enableRequestHeaderTracking && _canIncludeHeaders(header)) {\r\n                                            if (ajaxData) {\r\n                                                ajaxData[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */][header] = value;\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            },\r\n                            hkErr: _createErrorCallbackFunc(_self, 71 /* _eInternalMessageId.FailedMonitorAjaxSetRequestHeader */, ERROR_HEADER + \".setRequestHeader\" + ERROR_POSTFIX)\r\n                        });\r\n                        _xhrInitialized = true;\r\n                    }\r\n                }));\r\n            }\r\n            function _isDisabledRequest(xhr, request, init) {\r\n                var isDisabled = false;\r\n                var theUrl = ((!isString(request) ? (request || {}).url || \"\" : request) || \"\")[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */]();\r\n                // check excludeRequestFromAutoTrackingPatterns before stripping off any query string\r\n                arrForEach(_excludeRequestFromAutoTrackingPatterns, function (regex) {\r\n                    var theRegex = regex;\r\n                    if (isString(regex)) {\r\n                        theRegex = new RegExp(regex);\r\n                    }\r\n                    if (!isDisabled) {\r\n                        isDisabled = theRegex.test(theUrl);\r\n                    }\r\n                });\r\n                // if request url matches with exclude regex pattern, return true and no need to check for headers\r\n                if (isDisabled) {\r\n                    return isDisabled;\r\n                }\r\n                var idx = _indexOf(theUrl, \"?\");\r\n                var idx2 = _indexOf(theUrl, \"#\");\r\n                if (idx === -1 || (idx2 !== -1 && idx2 < idx)) {\r\n                    idx = idx2;\r\n                }\r\n                if (idx !== -1) {\r\n                    // Strip off any Query string\r\n                    theUrl = theUrl.substring(0, idx);\r\n                }\r\n                // check that this instance is not not used by ajax call performed inside client side monitoring to send data to collector\r\n                if (!isNullOrUndefined(xhr)) {\r\n                    // Look on the XMLHttpRequest of the URL string value\r\n                    isDisabled = xhr[DisabledPropertyName] === true || theUrl[DisabledPropertyName] === true;\r\n                }\r\n                else if (!isNullOrUndefined(request)) { // fetch\r\n                    // Look for DisabledPropertyName in either Request or RequestInit\r\n                    isDisabled = (typeof request === \"object\" ? request[DisabledPropertyName] === true : false) ||\r\n                        (init ? init[DisabledPropertyName] === true : false);\r\n                }\r\n                // Also add extra check just in case the XHR or fetch objects where not decorated with the DisableProperty due to sealing or freezing\r\n                if (!isDisabled && theUrl && isInternalApplicationInsightsEndpoint(theUrl)) {\r\n                    isDisabled = true;\r\n                }\r\n                if (isDisabled) {\r\n                    // Add the disabled url if not present\r\n                    if (!_disabledUrls[theUrl]) {\r\n                        _disabledUrls[theUrl] = 1;\r\n                    }\r\n                }\r\n                else {\r\n                    // Check to see if the url is listed as disabled\r\n                    if (_disabledUrls[theUrl]) {\r\n                        isDisabled = true;\r\n                    }\r\n                }\r\n                return isDisabled;\r\n            }\r\n            /// <summary>Verifies that particular instance of XMLHttpRequest needs to be monitored</summary>\r\n            /// <param name=\"excludeAjaxDataValidation\">Optional parameter. True if ajaxData must be excluded from verification</param>\r\n            /// <returns type=\"bool\">True if instance needs to be monitored, otherwise false</returns>\r\n            function _isMonitoredXhrInstance(xhr, ajaxData, excludeAjaxDataValidation) {\r\n                var ajaxValidation = true;\r\n                var initialized = _xhrInitialized;\r\n                if (!isNullOrUndefined(xhr)) {\r\n                    ajaxValidation = excludeAjaxDataValidation === true || !isNullOrUndefined(ajaxData);\r\n                }\r\n                // checking to see that all interested functions on xhr were instrumented\r\n                return initialized\r\n                    // checking on ajaxData to see that it was not removed in user code\r\n                    && ajaxValidation;\r\n            }\r\n            function _getDistributedTraceCtx() {\r\n                var distributedTraceCtx = null;\r\n                if (_self[_DYN_CORE /* @min:%2ecore */] && _self[_DYN_CORE /* @min:%2ecore */].getTraceCtx) {\r\n                    distributedTraceCtx = _self[_DYN_CORE /* @min:%2ecore */].getTraceCtx(false);\r\n                }\r\n                // Fall back\r\n                if (!distributedTraceCtx && _context && _context.telemetryTrace) {\r\n                    distributedTraceCtx = createDistributedTraceContextFromTrace(_context.telemetryTrace);\r\n                }\r\n                return distributedTraceCtx;\r\n            }\r\n            function _openHandler(xhr, method, url, async) {\r\n                var _a;\r\n                var distributedTraceCtx = _getDistributedTraceCtx();\r\n                var traceID = (distributedTraceCtx && distributedTraceCtx[_DYN_GET_TRACE_ID /* @min:%2egetTraceId */]()) || generateW3CId();\r\n                var spanID = strSubstr(generateW3CId(), 0, 16);\r\n                var xhrRequestData = xhr[AJAX_DATA_CONTAINER] = (xhr[AJAX_DATA_CONTAINER] || { xh: [], i: {} });\r\n                var ajaxDataCntr = xhrRequestData.i = (xhrRequestData.i || {});\r\n                var ajaxData = ajaxDataCntr[_ajaxDataId] = (ajaxDataCntr[_ajaxDataId] || new ajaxRecord(traceID, spanID, _self[strDiagLog](), (_a = _self.core) === null || _a === void 0 ? void 0 : _a.getTraceCtx()));\r\n                ajaxData[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */] = distributedTraceCtx && distributedTraceCtx[_DYN_GET_TRACE_FLAGS /* @min:%2egetTraceFlags */]();\r\n                ajaxData[_DYN_METHOD /* @min:%2emethod */] = method;\r\n                ajaxData[_DYN_REQUEST_URL /* @min:%2erequestUrl */] = url;\r\n                ajaxData.xhrMonitoringState[_DYN_OPEN_DONE /* @min:%2eopenDone */] = true;\r\n                ajaxData[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */] = {};\r\n                ajaxData.async = async;\r\n                ajaxData[_DYN_ERROR_STATUS_TEXT /* @min:%2eerrorStatusText */] = _enableAjaxErrorStatusText;\r\n                return ajaxData;\r\n            }\r\n            function _attachToOnReadyStateChange(xhr, ajaxData) {\r\n                ajaxData.xhrMonitoringState[_DYN_STATE_CHANGE_ATTACHE13 /* @min:%2estateChangeAttached */] = eventOn(xhr, \"readystatechange\", function () {\r\n                    var _a;\r\n                    try {\r\n                        if (xhr && xhr.readyState === 4 && _isMonitoredXhrInstance(xhr, ajaxData)) {\r\n                            _onAjaxComplete(xhr);\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        var exceptionText = dumpObj(e);\r\n                        // ignore messages with c00c023f, as this a known IE9 XHR abort issue\r\n                        if (!exceptionText || _indexOf(exceptionText[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */](), \"c00c023f\") === -1) {\r\n                            _throwInternalCritical(_self, 16 /* _eInternalMessageId.FailedMonitorAjaxRSC */, ERROR_HEADER + \" 'readystatechange' event handler\" + ERROR_POSTFIX, (_a = {},\r\n                                _a[_DYN_AJAX_DIAGNOSTICS_MES16 /* @min:ajaxDiagnosticsMessage */] = _getFailedAjaxDiagnosticsMessage(xhr, _ajaxDataId),\r\n                                _a[_DYN_EXCEPTION /* @min:exception */] = exceptionText,\r\n                                _a));\r\n                        }\r\n                    }\r\n                }, _evtNamespace);\r\n            }\r\n            function _getResponseText(xhr) {\r\n                try {\r\n                    var responseType = xhr.responseType;\r\n                    if (responseType === \"\" || responseType === \"text\") {\r\n                        // As per the specification responseText is only valid if the type is an empty string or \"text\"\r\n                        return xhr[_DYN_RESPONSE_TEXT /* @min:%2eresponseText */];\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // This shouldn't happen because of the above check -- but just in case, so just ignore\r\n                }\r\n                return null;\r\n            }\r\n            function _onAjaxComplete(xhr) {\r\n                var ajaxData = _getAjaxData(xhr, _ajaxDataId);\r\n                ajaxData[_DYN_RESPONSE_FINISHED_TI14 /* @min:%2eresponseFinishedTime */] = dateTimeUtilsNow();\r\n                ajaxData[_DYN_STATUS /* @min:%2estatus */] = xhr[_DYN_STATUS /* @min:%2estatus */];\r\n                function _reportXhrError(e, failedProps) {\r\n                    var errorProps = failedProps || {};\r\n                    errorProps[\"ajaxDiagnosticsMessage\"] = _getFailedAjaxDiagnosticsMessage(xhr, _ajaxDataId);\r\n                    if (e) {\r\n                        errorProps[\"exception\"] = dumpObj(e);\r\n                    }\r\n                    _throwInternalWarning(_self, 14 /* _eInternalMessageId.FailedMonitorAjaxDur */, FAILED_TO_CALCULATE_DURATION_ERROR + \"ajax call\" + ERROR_NOT_SENT, errorProps);\r\n                }\r\n                _findPerfResourceEntry(\"xmlhttprequest\", ajaxData, function () {\r\n                    try {\r\n                        var dependency = ajaxData[_DYN__CREATE_TRACK_ITEM /* @min:%2eCreateTrackItem */](\"Ajax\", _enableRequestHeaderTracking, function () {\r\n                            var _a;\r\n                            var ajaxResponse = (_a = {\r\n                                    statusText: xhr[_DYN_STATUS_TEXT /* @min:%2estatusText */]\r\n                                },\r\n                                _a[_DYN_HEADER_MAP /* @min:headerMap */] = null,\r\n                                _a[_DYN_CORRELATION_CONTEXT /* @min:correlationContext */] = _getAjaxCorrelationContext(xhr),\r\n                                _a.type = xhr.responseType,\r\n                                _a[_DYN_RESPONSE_TEXT /* @min:responseText */] = _getResponseText(xhr),\r\n                                _a.response = xhr[_DYN_RESPONSE /* @min:%2eresponse */],\r\n                                _a);\r\n                            if (_enableResponseHeaderTracking) {\r\n                                var headers = xhr[_DYN_GET_ALL_RESPONSE_HEA15 /* @min:%2egetAllResponseHeaders */]();\r\n                                if (headers) {\r\n                                    // xhr.getAllResponseHeaders() method returns all the response headers, separated by CRLF, as a string or null\r\n                                    // the regex converts the header string into an array of individual headers\r\n                                    var arr = strTrim(headers).split(/[\\r\\n]+/);\r\n                                    var responseHeaderMap_2 = {};\r\n                                    arrForEach(arr, function (line) {\r\n                                        var parts = line.split(\": \");\r\n                                        var header = parts.shift();\r\n                                        var value = parts.join(\": \");\r\n                                        if (_canIncludeHeaders(header)) {\r\n                                            responseHeaderMap_2[header] = value;\r\n                                        }\r\n                                    });\r\n                                    ajaxResponse[_DYN_HEADER_MAP /* @min:%2eheaderMap */] = responseHeaderMap_2;\r\n                                }\r\n                            }\r\n                            return ajaxResponse;\r\n                        });\r\n                        var properties = void 0;\r\n                        try {\r\n                            if (!!_addRequestContext) {\r\n                                properties = _addRequestContext({ status: xhr[_DYN_STATUS /* @min:%2estatus */], xhr: xhr });\r\n                            }\r\n                        }\r\n                        catch (e) {\r\n                            _throwInternalWarning(_self, 104 /* _eInternalMessageId.FailedAddingCustomDefinedRequestContext */, CUSTOM_REQUEST_CONTEXT_ERROR);\r\n                        }\r\n                        if (dependency) {\r\n                            if (properties !== undefined) {\r\n                                dependency[STR_PROPERTIES /* @min:%2eproperties */] = __assign(__assign({}, dependency.properties), properties);\r\n                            }\r\n                            var sysProperties = ajaxData[_DYN_GET_PART_APROPS /* @min:%2egetPartAProps */]();\r\n                            _reportDependencyInternal(_dependencyInitializers, _self[_DYN_CORE /* @min:%2ecore */], ajaxData, dependency, null, sysProperties);\r\n                        }\r\n                        else {\r\n                            _reportXhrError(null, {\r\n                                requestSentTime: ajaxData[_DYN_REQUEST_SENT_TIME /* @min:%2erequestSentTime */],\r\n                                responseFinishedTime: ajaxData[_DYN_RESPONSE_FINISHED_TI14 /* @min:%2eresponseFinishedTime */]\r\n                            });\r\n                        }\r\n                    }\r\n                    finally {\r\n                        // cleanup telemetry data\r\n                        try {\r\n                            var xhrRequestData = (xhr[AJAX_DATA_CONTAINER] || { i: {} });\r\n                            var ajaxDataCntr = (xhrRequestData.i || {});\r\n                            if (ajaxDataCntr[_ajaxDataId]) {\r\n                                ajaxDataCntr[_ajaxDataId] = null;\r\n                            }\r\n                        }\r\n                        catch (e) {\r\n                            // May throw in environments that prevent extension or freeze xhr\r\n                        }\r\n                    }\r\n                }, function (e) {\r\n                    _reportXhrError(e, null);\r\n                });\r\n            }\r\n            function _getAjaxCorrelationContext(xhr) {\r\n                var _a;\r\n                try {\r\n                    var responseHeadersString = xhr[_DYN_GET_ALL_RESPONSE_HEA15 /* @min:%2egetAllResponseHeaders */]();\r\n                    if (responseHeadersString !== null) {\r\n                        var index = _indexOf(responseHeadersString[_DYN_TO_LOWER_CASE /* @min:%2etoLowerCase */](), RequestHeaders[8 /* eRequestHeaders.requestContextHeaderLowerCase */]);\r\n                        if (index !== -1) {\r\n                            var responseHeader = xhr.getResponseHeader(RequestHeaders[0 /* eRequestHeaders.requestContextHeader */]);\r\n                            return correlationIdGetCorrelationContext(responseHeader);\r\n                        }\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    _throwInternalWarning(_self, 18 /* _eInternalMessageId.FailedMonitorAjaxGetCorrelationHeader */, CORRELATION_HEADER_ERROR, (_a = {},\r\n                        _a[_DYN_AJAX_DIAGNOSTICS_MES16 /* @min:ajaxDiagnosticsMessage */] = _getFailedAjaxDiagnosticsMessage(xhr, _ajaxDataId),\r\n                        _a[_DYN_EXCEPTION /* @min:exception */] = dumpObj(e),\r\n                        _a));\r\n                }\r\n            }\r\n            function _createMarkId(type, ajaxData) {\r\n                if (ajaxData[_DYN_REQUEST_URL /* @min:%2erequestUrl */] && _markPrefix && _enableAjaxPerfTracking) {\r\n                    var performance_1 = getPerformance();\r\n                    if (performance_1 && isFunction(performance_1.mark)) {\r\n                        _markCount++;\r\n                        var markId = _markPrefix + type + \"#\" + _markCount;\r\n                        performance_1.mark(markId);\r\n                        var entries = performance_1.getEntriesByName(markId);\r\n                        if (entries && entries[_DYN_LENGTH /* @min:%2elength */] === 1) {\r\n                            ajaxData[_DYN_PERF_MARK /* @min:%2eperfMark */] = entries[0];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            function _findPerfResourceEntry(initiatorType, ajaxData, trackCallback, reportError) {\r\n                var perfMark = ajaxData[_DYN_PERF_MARK /* @min:%2eperfMark */];\r\n                var performance = getPerformance();\r\n                var maxAttempts = _maxAjaxPerfLookupAttempts;\r\n                var retryDelay = _ajaxPerfLookupDelay;\r\n                var requestUrl = ajaxData[_DYN_REQUEST_URL /* @min:%2erequestUrl */];\r\n                var attempt = 0;\r\n                (function locateResourceTiming() {\r\n                    try {\r\n                        if (performance && perfMark) {\r\n                            attempt++;\r\n                            var perfTiming = null;\r\n                            var entries = performance.getEntries();\r\n                            for (var lp = entries[_DYN_LENGTH /* @min:%2elength */] - 1; lp >= 0; lp--) {\r\n                                var entry = entries[lp];\r\n                                if (entry) {\r\n                                    if (entry.entryType === \"resource\") {\r\n                                        if (entry.initiatorType === initiatorType &&\r\n                                            (_indexOf(entry[_DYN_NAME /* @min:%2ename */], requestUrl) !== -1 || _indexOf(requestUrl, entry[_DYN_NAME /* @min:%2ename */]) !== -1)) {\r\n                                            perfTiming = entry;\r\n                                        }\r\n                                    }\r\n                                    else if (entry.entryType === \"mark\" && entry[_DYN_NAME /* @min:%2ename */] === perfMark[_DYN_NAME /* @min:%2ename */]) {\r\n                                        // We hit the start event\r\n                                        ajaxData[_DYN_PERF_TIMING /* @min:%2eperfTiming */] = perfTiming;\r\n                                        break;\r\n                                    }\r\n                                    if (entry[_DYN_START_TIME /* @min:%2estartTime */] < perfMark[_DYN_START_TIME /* @min:%2estartTime */] - 1000) {\r\n                                        // Fallback to try and reduce the time spent looking for the perf entry\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        if (!perfMark || // - we don't have a perfMark or\r\n                            ajaxData[_DYN_PERF_TIMING /* @min:%2eperfTiming */] || // - we have not found the perf entry or\r\n                            attempt >= maxAttempts || // - we have tried too many attempts or\r\n                            ajaxData.async === false) { // - this is a sync request\r\n                            if (perfMark && isFunction(performance.clearMarks)) {\r\n                                // Remove the mark so we don't fill up the performance resources too much\r\n                                performance.clearMarks(perfMark[_DYN_NAME /* @min:%2ename */]);\r\n                            }\r\n                            ajaxData.perfAttempts = attempt;\r\n                            // just continue and report the track event\r\n                            trackCallback();\r\n                        }\r\n                        else {\r\n                            // We need to wait for the browser to populate the window.performance entry\r\n                            // This needs to be at least 1ms as waiting <= 1 (on firefox) is not enough time for fetch or xhr,\r\n                            // this is a scheduling issue for the browser implementation\r\n                            scheduleTimeout(locateResourceTiming, retryDelay);\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        reportError(e);\r\n                    }\r\n                })();\r\n            }\r\n            function _createFetchRecord(input, init) {\r\n                var _a;\r\n                var distributedTraceCtx = _getDistributedTraceCtx();\r\n                var traceID = (distributedTraceCtx && distributedTraceCtx[_DYN_GET_TRACE_ID /* @min:%2egetTraceId */]()) || generateW3CId();\r\n                var spanID = strSubstr(generateW3CId(), 0, 16);\r\n                var ajaxData = new ajaxRecord(traceID, spanID, _self[strDiagLog](), (_a = _self.core) === null || _a === void 0 ? void 0 : _a.getTraceCtx());\r\n                ajaxData[_DYN_TRACE_FLAGS /* @min:%2etraceFlags */] = distributedTraceCtx && distributedTraceCtx[_DYN_GET_TRACE_FLAGS /* @min:%2egetTraceFlags */]();\r\n                ajaxData[_DYN_REQUEST_SENT_TIME /* @min:%2erequestSentTime */] = dateTimeUtilsNow();\r\n                ajaxData[_DYN_ERROR_STATUS_TEXT /* @min:%2eerrorStatusText */] = _enableAjaxErrorStatusText;\r\n                var requestUrl;\r\n                if (input instanceof Request) {\r\n                    requestUrl = (input || {}).url || \"\";\r\n                }\r\n                else {\r\n                    requestUrl = input;\r\n                }\r\n                if (requestUrl === \"\") {\r\n                    var location_1 = getLocation();\r\n                    if (location_1 && location_1.href) {\r\n                        requestUrl = strSplit(location_1.href, \"#\")[0];\r\n                    }\r\n                }\r\n                ajaxData[_DYN_REQUEST_URL /* @min:%2erequestUrl */] = requestUrl;\r\n                var method = \"GET\";\r\n                if (init && init[_DYN_METHOD /* @min:%2emethod */]) {\r\n                    method = init[_DYN_METHOD /* @min:%2emethod */];\r\n                }\r\n                else if (input && input instanceof Request) {\r\n                    method = input[_DYN_METHOD /* @min:%2emethod */];\r\n                }\r\n                ajaxData[_DYN_METHOD /* @min:%2emethod */] = method;\r\n                var requestHeaders = {};\r\n                if (_enableRequestHeaderTracking) {\r\n                    var headers = new Headers((init ? init[_DYN_HEADERS /* @min:%2eheaders */] : 0) || (input instanceof Request ? (input[_DYN_HEADERS /* @min:%2eheaders */] || {}) : {}));\r\n                    headers.forEach(function (value, key) {\r\n                        if (_canIncludeHeaders(key)) {\r\n                            requestHeaders[key] = value;\r\n                        }\r\n                    });\r\n                }\r\n                ajaxData[_DYN_REQUEST_HEADERS /* @min:%2erequestHeaders */] = requestHeaders;\r\n                _createMarkId(STR_FETCH, ajaxData);\r\n                return ajaxData;\r\n            }\r\n            function _getFailedFetchDiagnosticsMessage(input) {\r\n                var result = \"\";\r\n                try {\r\n                    if (!isNullOrUndefined(input)) {\r\n                        if (typeof (input) === \"string\") {\r\n                            result += \"(url: '\".concat(input, \"')\");\r\n                        }\r\n                        else {\r\n                            result += \"(url: '\".concat(input.url, \"')\");\r\n                        }\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    _throwInternalCritical(_self, 15 /* _eInternalMessageId.FailedMonitorAjaxOpen */, \"Failed to grab failed fetch diagnostics message\", { exception: dumpObj(e) });\r\n                }\r\n                return result;\r\n            }\r\n            function _reportFetchMetrics(callDetails, status, input, response, ajaxData, getResponse, properties) {\r\n                if (!ajaxData) {\r\n                    return;\r\n                }\r\n                function _reportFetchError(msgId, e, failedProps) {\r\n                    var errorProps = failedProps || {};\r\n                    errorProps[\"fetchDiagnosticsMessage\"] = _getFailedFetchDiagnosticsMessage(input);\r\n                    if (e) {\r\n                        errorProps[\"exception\"] = dumpObj(e);\r\n                    }\r\n                    _throwInternalWarning(_self, msgId, FAILED_TO_CALCULATE_DURATION_ERROR + \"fetch call\" + ERROR_NOT_SENT, errorProps);\r\n                }\r\n                ajaxData[_DYN_RESPONSE_FINISHED_TI14 /* @min:%2eresponseFinishedTime */] = dateTimeUtilsNow();\r\n                ajaxData[_DYN_STATUS /* @min:%2estatus */] = status;\r\n                _findPerfResourceEntry(STR_FETCH, ajaxData, function () {\r\n                    var dependency = ajaxData[_DYN__CREATE_TRACK_ITEM /* @min:%2eCreateTrackItem */](\"Fetch\", _enableRequestHeaderTracking, getResponse);\r\n                    var properties;\r\n                    try {\r\n                        if (!!_addRequestContext) {\r\n                            properties = _addRequestContext({ status: status, request: input, response: response });\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        _throwInternalWarning(_self, 104 /* _eInternalMessageId.FailedAddingCustomDefinedRequestContext */, CUSTOM_REQUEST_CONTEXT_ERROR);\r\n                    }\r\n                    if (dependency) {\r\n                        if (properties !== undefined) {\r\n                            dependency[STR_PROPERTIES /* @min:%2eproperties */] = __assign(__assign({}, dependency.properties), properties);\r\n                        }\r\n                        var sysProperties = ajaxData[_DYN_GET_PART_APROPS /* @min:%2egetPartAProps */]();\r\n                        _reportDependencyInternal(_dependencyInitializers, _self[_DYN_CORE /* @min:%2ecore */], ajaxData, dependency, null, sysProperties);\r\n                    }\r\n                    else {\r\n                        _reportFetchError(14 /* _eInternalMessageId.FailedMonitorAjaxDur */, null, {\r\n                            requestSentTime: ajaxData[_DYN_REQUEST_SENT_TIME /* @min:%2erequestSentTime */],\r\n                            responseFinishedTime: ajaxData[_DYN_RESPONSE_FINISHED_TI14 /* @min:%2eresponseFinishedTime */]\r\n                        });\r\n                    }\r\n                }, function (e) {\r\n                    _reportFetchError(18 /* _eInternalMessageId.FailedMonitorAjaxGetCorrelationHeader */, e, null);\r\n                });\r\n            }\r\n            function _getFetchCorrelationContext(response) {\r\n                var _a;\r\n                if (response && response[_DYN_HEADERS /* @min:%2eheaders */]) {\r\n                    try {\r\n                        var responseHeader = response[_DYN_HEADERS /* @min:%2eheaders */].get(RequestHeaders[0 /* eRequestHeaders.requestContextHeader */]);\r\n                        return correlationIdGetCorrelationContext(responseHeader);\r\n                    }\r\n                    catch (e) {\r\n                        _throwInternalWarning(_self, 18 /* _eInternalMessageId.FailedMonitorAjaxGetCorrelationHeader */, CORRELATION_HEADER_ERROR, (_a = {\r\n                                fetchDiagnosticsMessage: _getFailedFetchDiagnosticsMessage(response)\r\n                            },\r\n                            _a[_DYN_EXCEPTION /* @min:exception */] = dumpObj(e),\r\n                            _a));\r\n                    }\r\n                }\r\n            }\r\n            function _reportDependencyInternal(initializers, core, ajaxData, dependency, properties, systemProperties) {\r\n                var _a;\r\n                var result = true;\r\n                var initializersCount = initializers[_DYN_LENGTH /* @min:%2elength */];\r\n                if (initializersCount > 0) {\r\n                    var details = (_a = {\r\n                            item: dependency\r\n                        },\r\n                        _a[STR_PROPERTIES /* @min:properties */] = properties,\r\n                        _a.sysProperties = systemProperties,\r\n                        _a.context = ajaxData ? ajaxData[_DYN_CONTEXT /* @min:%2econtext */] : null,\r\n                        _a.aborted = ajaxData ? !!ajaxData[_DYN_ABORTED /* @min:%2eaborted */] : false,\r\n                        _a);\r\n                    result = _processDependencyContainer(core, initializers, details, \"initializer\");\r\n                }\r\n                if (result) {\r\n                    _self[_DYN_TRACK_DEPENDENCY_DAT3 /* @min:%2etrackDependencyDataInternal */](dependency, properties, systemProperties);\r\n                }\r\n            }\r\n        });\r\n        return _this;\r\n    }\r\n    AjaxMonitor.prototype.initialize = function (config, core, extensions, pluginChain) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AjaxMonitor.prototype.processTelemetry = function (item, itemCtx) {\r\n        this.processNext(item, itemCtx);\r\n    };\r\n    /**\r\n     * Logs dependency call\r\n     * @param dependencyData - dependency data object\r\n     */\r\n    AjaxMonitor.prototype.trackDependencyData = function (dependency, properties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AjaxMonitor.prototype.includeCorrelationHeaders = function (ajaxData, input, init, xhr) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Add an ajax listener which is called just prior to the request being sent and before the correlation headers are added, to allow you\r\n     * to access the headers and modify the values used to generate the distributed tracing correlation headers.\r\n     * @param dependencyListener - The Telemetry Initializer function\r\n     * @returns - A IDependencyListenerHandler to enable the initializer to be removed\r\n     */\r\n    AjaxMonitor.prototype.addDependencyListener = function (dependencyListener) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Add an dependency telemetry initializer callback function to allow populating additional properties or drop the request.\r\n     * It is called after the dependency call has completed and any available performance details are available. A dependency\r\n     * initializer is similar to the TelemetryInitializer function but it allows you to block the reporting of the dependency\r\n     * request so that it doesn't count against the `maxAjaxCallsPerView`.\r\n     * @param dependencyInitializer - The Dependency Telemetry Initializer function\r\n     * @returns - A IDependencyInitializerHandler to enable the initializer to be removed\r\n     */\r\n    AjaxMonitor.prototype.addDependencyInitializer = function (dependencyInitializer) {\r\n        return null;\r\n    };\r\n    /**\r\n     * Protected function to allow sub classes the chance to add additional properties to the dependency event\r\n     * before it's sent. This function calls track, so sub-classes must call this function after they have\r\n     * populated their properties.\r\n     * @param dependencyData - dependency data object\r\n     */\r\n    AjaxMonitor.prototype.trackDependencyDataInternal = function (dependency, properties, systemProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AjaxMonitor.identifier = \"AjaxDependencyPlugin\";\r\n    return AjaxMonitor;\r\n}(BaseTelemetryPlugin));\r\nexport { AjaxMonitor };\r\n//# sourceMappingURL=ajax.js.map", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nvar Application = /** @class */ (function () {\r\n    function Application() {\r\n    }\r\n    return Application;\r\n}());\r\nexport { Application };\r\n//# sourceMappingURL=Application.js.map", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nvar Device = /** @class */ (function () {\r\n    /**\r\n     * Constructs a new instance of the Device class\r\n     */\r\n    function Device() {\r\n        // don't attempt to fingerprint browsers\r\n        this.id = \"browser\";\r\n        // Device type is a dimension in our data platform\r\n        // Setting it to 'Browser' allows to separate client and server dependencies/exceptions\r\n        this.deviceClass = \"Browser\";\r\n    }\r\n    return Device;\r\n}());\r\nexport { Device };\r\n//# sourceMappingURL=Device.js.map", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { onConfigChange } from \"@microsoft/applicationinsights-core-js\";\r\nvar Version = '3.3.1';\r\nvar Internal = /** @class */ (function () {\r\n    /**\r\n     * Constructs a new instance of the internal telemetry data class.\r\n     */\r\n    function Internal(config, unloadHookContainer) {\r\n        var _this = this;\r\n        var unloadHook = onConfigChange((config), function () {\r\n            var prefix = config.sdkExtension;\r\n            _this.sdkVersion = (prefix ? prefix + \"_\" : \"\") + \"javascript:\" + Version;\r\n        });\r\n        unloadHookContainer && unloadHookContainer.add(unloadHook);\r\n    }\r\n    return Internal;\r\n}());\r\nexport { Internal };\r\n//# sourceMappingURL=Internal.js.map", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nvar Location = /** @class */ (function () {\r\n    function Location() {\r\n    }\r\n    return Location;\r\n}());\r\nexport { Location };\r\n//# sourceMappingURL=Location.js.map", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n// @skip-file-minify\r\n// ##############################################################\r\n// AUTO GENERATED FILE: This file is Auto Generated during build.\r\n// ##############################################################\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n// Note: DON'T Export these const from the package as we are still targeting ES3 this will export a mutable variables that someone could change!!!\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\nexport var _DYN_SESSION_MANAGER = \"sessionManager\"; // Count: 3\r\nexport var _DYN_UPDATE = \"update\"; // Count: 4\r\nexport var _DYN_IS_USER_COOKIE_SET = \"isUserCookieSet\"; // Count: 4\r\nexport var _DYN_IS_NEW_USER = \"isNewUser\"; // Count: 4\r\nexport var _DYN_GET_TRACE_CTX = \"getTraceCtx\"; // Count: 3\r\nexport var _DYN_TELEMETRY_TRACE = \"telemetryTrace\"; // Count: 3\r\nexport var _DYN_APPLY_SESSION_CONTEX0 = \"applySessionContext\"; // Count: 2\r\nexport var _DYN_APPLY_APPLICATION_CO1 = \"applyApplicationContext\"; // Count: 2\r\nexport var _DYN_APPLY_DEVICE_CONTEXT = \"applyDeviceContext\"; // Count: 2\r\nexport var _DYN_APPLY_OPERATION_CONT2 = \"applyOperationContext\"; // Count: 2\r\nexport var _DYN_APPLY_USER_CONTEXT = \"applyUserContext\"; // Count: 2\r\nexport var _DYN_APPLY_OPERATING_SYST3 = \"applyOperatingSystemContxt\"; // Count: 2\r\nexport var _DYN_APPLY_LOCATION_CONTE4 = \"applyLocationContext\"; // Count: 2\r\nexport var _DYN_APPLY_INTERNAL_CONTE5 = \"applyInternalContext\"; // Count: 2\r\nexport var _DYN_ACCOUNT_ID = \"accountId\"; // Count: 7\r\nexport var _DYN_GET_SESSION_ID = \"getSessionId\"; // Count: 4\r\nexport var _DYN_NAME_PREFIX = \"namePrefix\"; // Count: 3\r\nexport var _DYN_SESSION_COOKIE_POSTF6 = \"sessionCookiePostfix\"; // Count: 2\r\nexport var _DYN_USER_COOKIE_POSTFIX = \"userCookiePostfix\"; // Count: 2\r\nexport var _DYN_ID_LENGTH = \"idLength\"; // Count: 4\r\nexport var _DYN_GET_NEW_ID = \"getNewId\"; // Count: 3\r\nexport var _DYN_LENGTH = \"length\"; // Count: 4\r\nexport var _DYN_AUTOMATIC_SESSION = \"automaticSession\"; // Count: 5\r\nexport var _DYN_AUTHENTICATED_ID = \"authenticatedId\"; // Count: 6\r\nexport var _DYN_ACQUISITION_DATE = \"acquisitionDate\"; // Count: 5\r\nexport var _DYN_RENEWAL_DATE = \"renewalDate\"; // Count: 4\r\nexport var _DYN_JOIN = \"join\"; // Count: 5\r\nexport var _DYN_COOKIE_SEPARATOR = \"cookieSeparator\"; // Count: 5\r\nexport var _DYN_AUTH_USER_COOKIE_NAM7 = \"authUserCookieName\"; // Count: 3\r\n//# sourceMappingURL=__DynamicConstants.js.map", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { utlCanUseLocalStorage, utlGetLocalStorage, utlSetLocalStorage } from \"@microsoft/applicationinsights-common\";\r\nimport { _throwInternal, dateNow, dumpObj, getExceptionName, isFunction, newId, onConfigChange, safeGetCookieMgr, safeGetLogger } from \"@microsoft/applicationinsights-core-js\";\r\nimport { _DYN_ACQUISITION_DATE, _DYN_AUTOMATIC_SESSION, _DYN_GET_NEW_ID, _DYN_ID_LENGTH, _DYN_JOIN, _DYN_LENGTH, _DYN_NAME_PREFIX, _DYN_RENEWAL_DATE, _DYN_UPDATE } from \"../__DynamicConstants\";\r\nvar SESSION_COOKIE_NAME = \"ai_session\";\r\nvar ACQUISITION_SPAN = 86400000; // 24 hours in ms\r\nvar RENEWAL_SPAN = 1800000; // 30 minutes in ms\r\nvar COOKIE_UPDATE_INTERVAL = 60000; // 1 minute in ms\r\nvar Session = /** @class */ (function () {\r\n    function Session() {\r\n    }\r\n    return Session;\r\n}());\r\nexport { Session };\r\nvar _SessionManager = /** @class */ (function () {\r\n    function _SessionManager(config, core, unloadHookContainer) {\r\n        var self = this;\r\n        var _storageNamePrefix;\r\n        var _cookieUpdatedTimestamp;\r\n        var _logger = safeGetLogger(core);\r\n        var _cookieManager = safeGetCookieMgr(core);\r\n        var _sessionExpirationMs;\r\n        var _sessionRenewalMs;\r\n        dynamicProto(_SessionManager, self, function (_self) {\r\n            if (!config) {\r\n                config = {};\r\n            }\r\n            var unloadHook = onConfigChange(config, function (details) {\r\n                _sessionExpirationMs = config.sessionExpirationMs || ACQUISITION_SPAN;\r\n                _sessionRenewalMs = config.sessionRenewalMs || RENEWAL_SPAN;\r\n                // sessionCookiePostfix takes the preference if it is configured, otherwise takes namePrefix if configured.\r\n                var sessionCookiePostfix = config.sessionCookiePostfix || config[_DYN_NAME_PREFIX /* @min:%2enamePrefix */] || \"\";\r\n                _storageNamePrefix = SESSION_COOKIE_NAME + sessionCookiePostfix;\r\n            });\r\n            unloadHookContainer && unloadHookContainer.add(unloadHook);\r\n            _self[_DYN_AUTOMATIC_SESSION /* @min:%2eautomaticSession */] = new Session();\r\n            _self[_DYN_UPDATE /* @min:%2eupdate */] = function () {\r\n                // Always using Date getTime() as there is a bug in older IE instances that causes the performance timings to have the hi-bit set eg 0x800000000 causing\r\n                // the number to be incorrect.\r\n                var nowMs = dateNow();\r\n                var isExpired = false;\r\n                var session = _self[_DYN_AUTOMATIC_SESSION /* @min:%2eautomaticSession */];\r\n                if (!session.id) {\r\n                    isExpired = !_initializeAutomaticSession(session, nowMs);\r\n                }\r\n                if (!isExpired && _sessionExpirationMs > 0) {\r\n                    var timeSinceAcqMs = nowMs - session[_DYN_ACQUISITION_DATE /* @min:%2eacquisitionDate */];\r\n                    var timeSinceRenewalMs = nowMs - session[_DYN_RENEWAL_DATE /* @min:%2erenewalDate */];\r\n                    isExpired = timeSinceAcqMs < 0 || timeSinceRenewalMs < 0; // expired if the acquisition or last renewal are in the future\r\n                    isExpired = isExpired || timeSinceAcqMs > _sessionExpirationMs; // expired if the time since acquisition is more than session Expiration\r\n                    isExpired = isExpired || timeSinceRenewalMs > _sessionRenewalMs; // expired if the time since last renewal is more than renewal period\r\n                }\r\n                // renew if acquisitionSpan or renewalSpan has elapsed\r\n                if (isExpired) {\r\n                    // update automaticSession so session state has correct id\r\n                    _renew(nowMs);\r\n                }\r\n                else {\r\n                    // do not update the cookie more often than cookieUpdateInterval\r\n                    if (!_cookieUpdatedTimestamp || nowMs - _cookieUpdatedTimestamp > COOKIE_UPDATE_INTERVAL) {\r\n                        _setCookie(session, nowMs);\r\n                    }\r\n                }\r\n            };\r\n            /**\r\n             *  Record the current state of the automatic session and store it in our cookie string format\r\n             *  into the browser's local storage. This is used to restore the session data when the cookie\r\n             *  expires.\r\n             */\r\n            _self.backup = function () {\r\n                var session = _self[_DYN_AUTOMATIC_SESSION /* @min:%2eautomaticSession */];\r\n                _setStorage(session.id, session[_DYN_ACQUISITION_DATE /* @min:%2eacquisitionDate */], session[_DYN_RENEWAL_DATE /* @min:%2erenewalDate */]);\r\n            };\r\n            /**\r\n             * Use config.namePrefix + ai_session cookie data or local storage data (when the cookie is unavailable) to\r\n             * initialize the automatic session.\r\n             * @returns true if values set otherwise false\r\n             */\r\n            function _initializeAutomaticSession(session, now) {\r\n                var isValid = false;\r\n                var cookieValue = _cookieManager.get(_storageNamePrefix);\r\n                if (cookieValue && isFunction(cookieValue.split)) {\r\n                    isValid = _initializeAutomaticSessionWithData(session, cookieValue);\r\n                }\r\n                else {\r\n                    // There's no cookie, but we might have session data in local storage\r\n                    // This can happen if the session expired or the user actively deleted the cookie\r\n                    // We only want to recover data if the cookie is missing from expiry. We should respect the user's wishes if the cookie was deleted actively.\r\n                    // The User class handles this for us and deletes our local storage object if the persistent user cookie was removed.\r\n                    var storageValue = utlGetLocalStorage(_logger, _storageNamePrefix);\r\n                    if (storageValue) {\r\n                        isValid = _initializeAutomaticSessionWithData(session, storageValue);\r\n                    }\r\n                }\r\n                return isValid || !!session.id;\r\n            }\r\n            /**\r\n             * Extract id, acquisitionDate, and renewalDate from an ai_session payload string and\r\n             * use this data to initialize automaticSession.\r\n             *\r\n             * @param sessionData - The string stored in an ai_session cookie or local storage backup\r\n             * @returns true if values set otherwise false\r\n             */\r\n            function _initializeAutomaticSessionWithData(session, sessionData) {\r\n                var isValid = false;\r\n                var sessionReset = \", session will be reset\";\r\n                var tokens = sessionData.split(\"|\");\r\n                if (tokens[_DYN_LENGTH /* @min:%2elength */] >= 2) {\r\n                    try {\r\n                        var acqMs = +tokens[1] || 0;\r\n                        var renewalMs = +tokens[2] || 0;\r\n                        if (isNaN(acqMs) || acqMs <= 0) {\r\n                            _throwInternal(_logger, 2 /* eLoggingSeverity.WARNING */, 27 /* _eInternalMessageId.SessionRenewalDateIsZero */, \"AI session acquisition date is 0\" + sessionReset);\r\n                        }\r\n                        else if (isNaN(renewalMs) || renewalMs <= 0) {\r\n                            _throwInternal(_logger, 2 /* eLoggingSeverity.WARNING */, 27 /* _eInternalMessageId.SessionRenewalDateIsZero */, \"AI session renewal date is 0\" + sessionReset);\r\n                        }\r\n                        else if (tokens[0]) {\r\n                            // Everything looks valid so set the values\r\n                            session.id = tokens[0];\r\n                            session[_DYN_ACQUISITION_DATE /* @min:%2eacquisitionDate */] = acqMs;\r\n                            session[_DYN_RENEWAL_DATE /* @min:%2erenewalDate */] = renewalMs;\r\n                            isValid = true;\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        _throwInternal(_logger, 1 /* eLoggingSeverity.CRITICAL */, 9 /* _eInternalMessageId.ErrorParsingAISessionCookie */, \"Error parsing ai_session value [\" + (sessionData || \"\") + \"]\" + sessionReset + \" - \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                    }\r\n                }\r\n                return isValid;\r\n            }\r\n            function _renew(nowMs) {\r\n                var getNewId = config[_DYN_GET_NEW_ID /* @min:%2egetNewId */] || newId;\r\n                _self.automaticSession.id = getNewId(config[_DYN_ID_LENGTH /* @min:%2eidLength */] || 22);\r\n                _self[_DYN_AUTOMATIC_SESSION /* @min:%2eautomaticSession */][_DYN_ACQUISITION_DATE /* @min:%2eacquisitionDate */] = nowMs;\r\n                _setCookie(_self[_DYN_AUTOMATIC_SESSION /* @min:%2eautomaticSession */], nowMs);\r\n                // If this browser does not support local storage, fire an internal log to keep track of it at this point\r\n                if (!utlCanUseLocalStorage()) {\r\n                    _throwInternal(_logger, 2 /* eLoggingSeverity.WARNING */, 0 /* _eInternalMessageId.BrowserDoesNotSupportLocalStorage */, \"Browser does not support local storage. Session durations will be inaccurate.\");\r\n                }\r\n            }\r\n            function _setCookie(session, nowMs) {\r\n                var acq = session[_DYN_ACQUISITION_DATE /* @min:%2eacquisitionDate */];\r\n                session[_DYN_RENEWAL_DATE /* @min:%2erenewalDate */] = nowMs;\r\n                var renewalPeriodMs = _sessionRenewalMs;\r\n                // Set cookie to expire after the session expiry time passes or the session renewal deadline, whichever is sooner\r\n                // Expiring the cookie will cause the session to expire even if the user isn't on the page\r\n                var acqTimeLeftMs = (acq + _sessionExpirationMs) - nowMs;\r\n                var cookie = [session.id, acq, nowMs];\r\n                var maxAgeSec = 0;\r\n                if (acqTimeLeftMs < renewalPeriodMs) {\r\n                    maxAgeSec = acqTimeLeftMs / 1000;\r\n                }\r\n                else {\r\n                    maxAgeSec = renewalPeriodMs / 1000;\r\n                }\r\n                var cookieDomain = config.cookieDomain || null;\r\n                // if sessionExpirationMs is set to 0, it means the expiry is set to 0 for this session cookie\r\n                // A cookie with 0 expiry in the session cookie will never expire for that browser session.  If the browser is closed the cookie expires.\r\n                // Depending on the browser, another instance does not inherit this cookie, however, another tab will\r\n                _cookieManager.set(_storageNamePrefix, cookie[_DYN_JOIN /* @min:%2ejoin */](\"|\"), _sessionExpirationMs > 0 ? maxAgeSec : null, cookieDomain);\r\n                _cookieUpdatedTimestamp = nowMs;\r\n            }\r\n            function _setStorage(guid, acq, renewal) {\r\n                // Keep data in local storage to retain the last session id, allowing us to cleanly end the session when it expires\r\n                // Browsers that don't support local storage won't be able to end sessions cleanly from the client\r\n                // The server will notice this and end the sessions itself, with loss of accurate session duration\r\n                utlSetLocalStorage(_logger, _storageNamePrefix, [guid, acq, renewal][_DYN_JOIN /* @min:%2ejoin */](\"|\"));\r\n            }\r\n        });\r\n    }\r\n    _SessionManager.prototype.update = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     *  Record the current state of the automatic session and store it in our cookie string format\r\n     *  into the browser's local storage. This is used to restore the session data when the cookie\r\n     *  expires.\r\n     */\r\n    _SessionManager.prototype.backup = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    return _SessionManager;\r\n}());\r\nexport { _SessionManager };\r\n//# sourceMappingURL=Session.js.map", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { dataSanitizeString } from \"@microsoft/applicationinsights-common\";\r\nimport { generateW3CId, getLocation } from \"@microsoft/applicationinsights-core-js\";\r\nvar TelemetryTrace = /** @class */ (function () {\r\n    function TelemetryTrace(id, parentId, name, logger) {\r\n        var _self = this;\r\n        _self.traceID = id || generateW3CId();\r\n        _self.parentID = parentId;\r\n        var location = getLocation();\r\n        if (!name && location && location.pathname) {\r\n            name = location.pathname;\r\n        }\r\n        _self.name = dataSanitizeString(logger, name);\r\n    }\r\n    return TelemetryTrace;\r\n}());\r\nexport { TelemetryTrace };\r\n//# sourceMappingURL=TelemetryTrace.js.map", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { utlRemoveStorage } from \"@microsoft/applicationinsights-common\";\r\nimport { _throwInternal, newId, onConfigChange, safeGetCookieMgr, safeGetLogger, toISOString } from \"@microsoft/applicationinsights-core-js\";\r\nimport { objDefine } from \"@nevware21/ts-utils\";\r\nimport { _DYN_ACCOUNT_ID, _DYN_AUTHENTICATED_ID, _DYN_AUTH_USER_COOKIE_NAM7, _DYN_COOKIE_SEPARATOR, _DYN_GET_NEW_ID, _DYN_ID_LENGTH, _DYN_IS_NEW_USER, _DYN_IS_USER_COOKIE_SET, _DYN_JOIN, _DYN_LENGTH, _DYN_NAME_PREFIX, _DYN_UPDATE, _DYN_USER_COOKIE_POSTFIX } from \"../__DynamicConstants\";\r\nfunction _validateUserInput(id) {\r\n    // Validate:\r\n    // 1. Id is a non-empty string.\r\n    // 2. It does not contain special characters for cookies.\r\n    if (typeof id !== \"string\" ||\r\n        !id ||\r\n        id.match(/,|;|=| |\\|/)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nvar User = /** @class */ (function () {\r\n    function User(config, core, unloadHookContainer) {\r\n        /**\r\n         * A flag indicating whether this represents a new user\r\n         */\r\n        this.isNewUser = false;\r\n        /**\r\n         * A flag indicating whether the user cookie has been set\r\n         */\r\n        this.isUserCookieSet = false;\r\n        var _logger = safeGetLogger(core);\r\n        var _cookieManager = safeGetCookieMgr(core);\r\n        var _storageNamePrefix;\r\n        dynamicProto(User, this, function (_self) {\r\n            // Define _self.config\r\n            objDefine(_self, \"config\", {\r\n                g: function () { return config; }\r\n            });\r\n            var unloadHook = onConfigChange(config, function () {\r\n                var userCookiePostfix = config[_DYN_USER_COOKIE_POSTFIX /* @min:%2euserCookiePostfix */] || \"\";\r\n                _storageNamePrefix = User.userCookieName + userCookiePostfix;\r\n                // get userId or create new one if none exists\r\n                var cookie = _cookieManager.get(_storageNamePrefix);\r\n                if (cookie) {\r\n                    _self[_DYN_IS_NEW_USER /* @min:%2eisNewUser */] = false;\r\n                    var params = cookie.split(User[_DYN_COOKIE_SEPARATOR /* @min:%2ecookieSeparator */]);\r\n                    if (params[_DYN_LENGTH /* @min:%2elength */] > 0) {\r\n                        _self.id = params[0];\r\n                        // we already have a cookie\r\n                        _self[_DYN_IS_USER_COOKIE_SET /* @min:%2eisUserCookieSet */] = !!_self.id;\r\n                    }\r\n                }\r\n                if (!_self.id) {\r\n                    _self.id = _generateNewId();\r\n                    var newCookie = _generateNewCookie(_self.id);\r\n                    _setUserCookie(newCookie[_DYN_JOIN /* @min:%2ejoin */](User[_DYN_COOKIE_SEPARATOR /* @min:%2ecookieSeparator */]));\r\n                    // If we have an config.namePrefix() + ai_session in local storage this means the user actively removed our cookies.\r\n                    // We should respect their wishes and clear ourselves from local storage\r\n                    var name_1 = (config[_DYN_NAME_PREFIX /* @min:%2enamePrefix */] || \"\") + \"ai_session\";\r\n                    utlRemoveStorage(_logger, name_1);\r\n                }\r\n                // We still take the account id from the ctor param for backward compatibility.\r\n                // But if the the customer set the accountId through the newer setAuthenticatedUserContext API, we will override it.\r\n                _self[_DYN_ACCOUNT_ID /* @min:%2eaccountId */] = config[_DYN_ACCOUNT_ID /* @min:%2eaccountId */] || undefined;\r\n                // Get the auth user id and account id from the cookie if exists\r\n                // Cookie is in the pattern: <authenticatedId>|<accountId>\r\n                var authCookie = _cookieManager.get(User[_DYN_AUTH_USER_COOKIE_NAM7 /* @min:%2eauthUserCookieName */]);\r\n                if (authCookie) {\r\n                    authCookie = decodeURI(authCookie);\r\n                    var authCookieString = authCookie.split(User[_DYN_COOKIE_SEPARATOR /* @min:%2ecookieSeparator */]);\r\n                    if (authCookieString[0]) {\r\n                        _self[_DYN_AUTHENTICATED_ID /* @min:%2eauthenticatedId */] = authCookieString[0];\r\n                    }\r\n                    if (authCookieString[_DYN_LENGTH /* @min:%2elength */] > 1 && authCookieString[1]) {\r\n                        _self[_DYN_ACCOUNT_ID /* @min:%2eaccountId */] = authCookieString[1];\r\n                    }\r\n                }\r\n            });\r\n            unloadHookContainer && unloadHookContainer.add(unloadHook);\r\n            function _generateNewId() {\r\n                var theConfig = (config || {});\r\n                var getNewId = theConfig[_DYN_GET_NEW_ID /* @min:%2egetNewId */] || newId;\r\n                var id = getNewId(theConfig[_DYN_ID_LENGTH /* @min:%2eidLength */] ? config[_DYN_ID_LENGTH /* @min:%2eidLength */] : 22);\r\n                return id;\r\n            }\r\n            function _generateNewCookie(userId) {\r\n                var acqStr = toISOString(new Date());\r\n                _self.accountAcquisitionDate = acqStr;\r\n                _self[_DYN_IS_NEW_USER /* @min:%2eisNewUser */] = true;\r\n                var newCookie = [userId, acqStr];\r\n                return newCookie;\r\n            }\r\n            function _setUserCookie(cookie) {\r\n                // without expiration, cookies expire at the end of the session\r\n                // set it to 365 days from now\r\n                // 365 * 24 * 60 * 60 = 31536000\r\n                var oneYear = 31536000;\r\n                _self[_DYN_IS_USER_COOKIE_SET /* @min:%2eisUserCookieSet */] = _cookieManager.set(_storageNamePrefix, cookie, oneYear);\r\n            }\r\n            _self.setAuthenticatedUserContext = function (authenticatedUserId, accountId, storeInCookie) {\r\n                if (storeInCookie === void 0) { storeInCookie = false; }\r\n                // Validate inputs to ensure no cookie control characters.\r\n                var isInvalidInput = !_validateUserInput(authenticatedUserId) || (accountId && !_validateUserInput(accountId));\r\n                if (isInvalidInput) {\r\n                    _throwInternal(_logger, 2 /* eLoggingSeverity.WARNING */, 60 /* _eInternalMessageId.SetAuthContextFailedAccountName */, \"Setting auth user context failed. \" +\r\n                        \"User auth/account id should be of type string, and not contain commas, semi-colons, equal signs, spaces, or vertical-bars.\", true);\r\n                    return;\r\n                }\r\n                // Create cookie string.\r\n                _self[_DYN_AUTHENTICATED_ID /* @min:%2eauthenticatedId */] = authenticatedUserId;\r\n                var authCookie = _self[_DYN_AUTHENTICATED_ID /* @min:%2eauthenticatedId */];\r\n                if (accountId) {\r\n                    _self[_DYN_ACCOUNT_ID /* @min:%2eaccountId */] = accountId;\r\n                    authCookie = [_self[_DYN_AUTHENTICATED_ID /* @min:%2eauthenticatedId */], _self.accountId][_DYN_JOIN /* @min:%2ejoin */](User[_DYN_COOKIE_SEPARATOR /* @min:%2ecookieSeparator */]);\r\n                }\r\n                if (storeInCookie) {\r\n                    // Set the cookie. No expiration date because this is a session cookie (expires when browser closed).\r\n                    // Encoding the cookie to handle unexpected unicode characters.\r\n                    _cookieManager.set(User[_DYN_AUTH_USER_COOKIE_NAM7 /* @min:%2eauthUserCookieName */], encodeURI(authCookie));\r\n                }\r\n            };\r\n            /**\r\n             * Clears the authenticated user id and the account id from the user context.\r\n             * @returns {}\r\n             */\r\n            _self.clearAuthenticatedUserContext = function () {\r\n                _self[_DYN_AUTHENTICATED_ID /* @min:%2eauthenticatedId */] = null;\r\n                _self[_DYN_ACCOUNT_ID /* @min:%2eaccountId */] = null;\r\n                _cookieManager.del(User[_DYN_AUTH_USER_COOKIE_NAM7 /* @min:%2eauthUserCookieName */]);\r\n            };\r\n            _self[_DYN_UPDATE /* @min:%2eupdate */] = function (userId) {\r\n                // Optimizations to avoid setting and processing the cookie when not needed\r\n                if (_self.id !== userId || !_self[_DYN_IS_USER_COOKIE_SET /* @min:%2eisUserCookieSet */]) {\r\n                    var user_id = userId ? userId : _generateNewId();\r\n                    var user_cookie = _generateNewCookie(user_id);\r\n                    _setUserCookie(user_cookie[_DYN_JOIN /* @min:%2ejoin */](User[_DYN_COOKIE_SEPARATOR /* @min:%2ecookieSeparator */]));\r\n                }\r\n            };\r\n        });\r\n    }\r\n    /**\r\n    * Sets the authenticated user id and the account id in this session.\r\n    *\r\n    * @param authenticatedUserId - {string} - The authenticated user id. A unique and persistent string that represents each authenticated user in the service.\r\n    * @param accountId - {string} - An optional string to represent the account associated with the authenticated user.\r\n    */\r\n    User.prototype.setAuthenticatedUserContext = function (authenticatedUserId, accountId, storeInCookie) {\r\n        if (storeInCookie === void 0) { storeInCookie = false; }\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Clears the authenticated user id and the account id from the user context.\r\n     * @returns {}\r\n     */\r\n    User.prototype.clearAuthenticatedUserContext = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Update or create the user cookie if cookies where previously disabled or the new userId does not match the existing value.\r\n     * If you pass nothing a new random user id will be created.\r\n     * @param userId - Specific either the current (via appInsights.context.user.id) or new id that you want to set\r\n     */\r\n    User.prototype.update = function (userId) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    User.cookieSeparator = \"|\";\r\n    User.userCookieName = \"ai_user\";\r\n    User.authUserCookieName = \"ai_authUser\";\r\n    return User;\r\n}());\r\nexport { User };\r\n//# sourceMappingURL=User.js.map", "/**\r\n* TelemetryContext.ts\r\n* @copyright Microsoft 2018\r\n*/\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { CtxTagKeys, Extensions, PageView, dataSanitizeString } from \"@microsoft/applicationinsights-common\";\r\nimport { _InternalLogMessage, getSetValue, hasWindow, isNullOrUndefined, isString, objKeys, setValue } from \"@microsoft/applicationinsights-core-js\";\r\nimport { Application } from \"./Context/Application\";\r\nimport { Device } from \"./Context/Device\";\r\nimport { Internal } from \"./Context/Internal\";\r\nimport { Location } from \"./Context/Location\";\r\nimport { Session, _SessionManager } from \"./Context/Session\";\r\nimport { TelemetryTrace } from \"./Context/TelemetryTrace\";\r\nimport { User } from \"./Context/User\";\r\nimport { _DYN_ACCOUNT_ID, _DYN_APPLY_APPLICATION_CO1, _DYN_APPLY_DEVICE_CONTEXT, _DYN_APPLY_INTERNAL_CONTE5, _DYN_APPLY_LOCATION_CONTE4, _DYN_APPLY_OPERATING_SYST3, _DYN_APPLY_OPERATION_CONT2, _DYN_APPLY_SESSION_CONTEX0, _DYN_APPLY_USER_CONTEXT, _DYN_AUTHENTICATED_ID, _DYN_AUTOMATIC_SESSION, _DYN_GET_SESSION_ID, _DYN_LENGTH, _DYN_SESSION_MANAGER, _DYN_TELEMETRY_TRACE } from \"./__DynamicConstants\";\r\nvar strExt = \"ext\";\r\nvar strTags = \"tags\";\r\nfunction _removeEmpty(target, name) {\r\n    if (target && target[name] && objKeys(target[name])[_DYN_LENGTH /* @min:%2elength */] === 0) {\r\n        delete target[name];\r\n    }\r\n}\r\nfunction _nullResult() {\r\n    return null;\r\n}\r\nvar TelemetryContext = /** @class */ (function () {\r\n    function TelemetryContext(core, defaultConfig, previousTraceCtx, unloadHookContainer) {\r\n        var _this = this;\r\n        var logger = core.logger;\r\n        dynamicProto(TelemetryContext, this, function (_self) {\r\n            _self.appId = _nullResult;\r\n            _self[_DYN_GET_SESSION_ID /* @min:%2egetSessionId */] = _nullResult;\r\n            _self.application = new Application();\r\n            _self.internal = new Internal(defaultConfig, unloadHookContainer);\r\n            if (hasWindow()) {\r\n                _self[_DYN_SESSION_MANAGER /* @min:%2esessionManager */] = new _SessionManager(defaultConfig, core, unloadHookContainer);\r\n                _self.device = new Device();\r\n                _self.location = new Location();\r\n                _self.user = new User(defaultConfig, core, unloadHookContainer);\r\n                var traceId = void 0;\r\n                var parentId = void 0;\r\n                var name_1;\r\n                if (previousTraceCtx) {\r\n                    traceId = previousTraceCtx.getTraceId();\r\n                    parentId = previousTraceCtx.getSpanId();\r\n                    name_1 = previousTraceCtx.getName();\r\n                }\r\n                _self[_DYN_TELEMETRY_TRACE /* @min:%2etelemetryTrace */] = new TelemetryTrace(traceId, parentId, name_1, logger);\r\n                _self.session = new Session();\r\n            }\r\n            _self[_DYN_GET_SESSION_ID /* @min:%2egetSessionId */] = function () {\r\n                var session = _self.session;\r\n                var sesId = null;\r\n                // If customer set session info, apply their context; otherwise apply context automatically generated\r\n                if (session && isString(session.id)) {\r\n                    sesId = session.id;\r\n                }\r\n                else {\r\n                    // Gets the automatic session if it exists or an empty object\r\n                    var autoSession = (_self[_DYN_SESSION_MANAGER /* @min:%2esessionManager */] || {})[_DYN_AUTOMATIC_SESSION /* @min:%2eautomaticSession */];\r\n                    sesId = autoSession && isString(autoSession.id) ? autoSession.id : null;\r\n                }\r\n                return sesId;\r\n            };\r\n            _self[_DYN_APPLY_SESSION_CONTEX0 /* @min:%2eapplySessionContext */] = function (evt, itemCtx) {\r\n                setValue(getSetValue(evt.ext, Extensions.AppExt), \"sesId\", _self[_DYN_GET_SESSION_ID /* @min:%2egetSessionId */](), isString);\r\n            };\r\n            _self[_DYN_APPLY_OPERATING_SYST3 /* @min:%2eapplyOperatingSystemContxt */] = function (evt, itemCtx) {\r\n                setValue(evt.ext, Extensions.OSExt, _self.os);\r\n            };\r\n            _self[_DYN_APPLY_APPLICATION_CO1 /* @min:%2eapplyApplicationContext */] = function (evt, itemCtx) {\r\n                var application = _self.application;\r\n                if (application) {\r\n                    // evt.ext.app\r\n                    var tags = getSetValue(evt, strTags);\r\n                    setValue(tags, CtxTagKeys.applicationVersion, application.ver, isString);\r\n                    setValue(tags, CtxTagKeys.applicationBuild, application.build, isString);\r\n                }\r\n            };\r\n            _self[_DYN_APPLY_DEVICE_CONTEXT /* @min:%2eapplyDeviceContext */] = function (evt, itemCtx) {\r\n                var device = _self.device;\r\n                if (device) {\r\n                    // evt.ext.device\r\n                    var extDevice = getSetValue(getSetValue(evt, strExt), Extensions.DeviceExt);\r\n                    setValue(extDevice, \"localId\", device.id, isString);\r\n                    setValue(extDevice, \"ip\", device.ip, isString);\r\n                    setValue(extDevice, \"model\", device.model, isString);\r\n                    setValue(extDevice, \"deviceClass\", device.deviceClass, isString);\r\n                }\r\n            };\r\n            _self[_DYN_APPLY_INTERNAL_CONTE5 /* @min:%2eapplyInternalContext */] = function (evt, itemCtx) {\r\n                var internal = _self.internal;\r\n                if (internal) {\r\n                    var tags = getSetValue(evt, strTags);\r\n                    setValue(tags, CtxTagKeys.internalAgentVersion, internal.agentVersion, isString); // not mapped in CS 4.0\r\n                    setValue(tags, CtxTagKeys.internalSdkVersion, dataSanitizeString(logger, internal.sdkVersion, 64), isString);\r\n                    if (evt.baseType === _InternalLogMessage.dataType || evt.baseType === PageView.dataType) {\r\n                        setValue(tags, CtxTagKeys.internalSnippet, internal.snippetVer, isString);\r\n                        setValue(tags, CtxTagKeys.internalSdkSrc, internal.sdkSrc, isString);\r\n                    }\r\n                }\r\n            };\r\n            _self[_DYN_APPLY_LOCATION_CONTE4 /* @min:%2eapplyLocationContext */] = function (evt, itemCtx) {\r\n                var location = _this.location;\r\n                if (location) {\r\n                    setValue(getSetValue(evt, strTags, []), CtxTagKeys.locationIp, location.ip, isString);\r\n                }\r\n            };\r\n            _self[_DYN_APPLY_OPERATION_CONT2 /* @min:%2eapplyOperationContext */] = function (evt, itemCtx) {\r\n                var telemetryTrace = _self[_DYN_TELEMETRY_TRACE /* @min:%2etelemetryTrace */];\r\n                if (telemetryTrace) {\r\n                    var extTrace = getSetValue(getSetValue(evt, strExt), Extensions.TraceExt, { traceID: undefined, parentID: undefined });\r\n                    setValue(extTrace, \"traceID\", telemetryTrace.traceID, isString, isNullOrUndefined);\r\n                    setValue(extTrace, \"name\", telemetryTrace.name, isString, isNullOrUndefined);\r\n                    setValue(extTrace, \"parentID\", telemetryTrace.parentID, isString, isNullOrUndefined);\r\n                }\r\n            };\r\n            _self.applyWebContext = function (evt, itemCtx) {\r\n                var web = _this.web;\r\n                if (web) {\r\n                    setValue(getSetValue(evt, strExt), Extensions.WebExt, web);\r\n                }\r\n            };\r\n            _self[_DYN_APPLY_USER_CONTEXT /* @min:%2eapplyUserContext */] = function (evt, itemCtx) {\r\n                var user = _self.user;\r\n                if (user) {\r\n                    var tags = getSetValue(evt, strTags, []);\r\n                    // stays in tags\r\n                    setValue(tags, CtxTagKeys.userAccountId, user[_DYN_ACCOUNT_ID /* @min:%2eaccountId */], isString);\r\n                    // CS 4.0\r\n                    var extUser = getSetValue(getSetValue(evt, strExt), Extensions.UserExt);\r\n                    setValue(extUser, \"id\", user.id, isString);\r\n                    setValue(extUser, \"authId\", user[_DYN_AUTHENTICATED_ID /* @min:%2eauthenticatedId */], isString);\r\n                }\r\n            };\r\n            _self.cleanUp = function (evt, itemCtx) {\r\n                var ext = evt.ext;\r\n                if (ext) {\r\n                    _removeEmpty(ext, Extensions.DeviceExt);\r\n                    _removeEmpty(ext, Extensions.UserExt);\r\n                    _removeEmpty(ext, Extensions.WebExt);\r\n                    _removeEmpty(ext, Extensions.OSExt);\r\n                    _removeEmpty(ext, Extensions.AppExt);\r\n                    _removeEmpty(ext, Extensions.TraceExt);\r\n                }\r\n            };\r\n        });\r\n    }\r\n    TelemetryContext.prototype.applySessionContext = function (evt, itemCtx) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    TelemetryContext.prototype.applyOperatingSystemContxt = function (event, itemCtx) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    TelemetryContext.prototype.applyApplicationContext = function (event, itemCtx) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    TelemetryContext.prototype.applyDeviceContext = function (event, itemCtx) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    TelemetryContext.prototype.applyInternalContext = function (event, itemCtx) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    TelemetryContext.prototype.applyLocationContext = function (event, itemCtx) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    TelemetryContext.prototype.applyOperationContext = function (event, itemCtx) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    TelemetryContext.prototype.applyWebContext = function (event, itemCtx) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    TelemetryContext.prototype.applyUserContext = function (event, itemCtx) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    TelemetryContext.prototype.cleanUp = function (event, itemCtx) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    return TelemetryContext;\r\n}());\r\nexport { TelemetryContext };\r\n//# sourceMappingURL=TelemetryContext.js.map", "/**\r\n* PropertiesPlugin.ts\r\n* @copyright Microsoft 2018\r\n*/\r\nvar _a;\r\nimport { __extends } from \"tslib\";\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { BreezeChannelIdentifier, PageView, PropertiesPluginIdentifier, createDistributedTraceContextFromTrace, utlSetStoragePrefix } from \"@microsoft/applicationinsights-common\";\r\nimport { BaseTelemetryPlugin, _InternalLogMessage, _logInternalMessage, createProcessTelemetryContext, getNavigator, getSetValue, isNullOrUndefined, onConfigChange } from \"@microsoft/applicationinsights-core-js\";\r\nimport { objDeepFreeze, objDefine } from \"@nevware21/ts-utils\";\r\nimport { TelemetryContext } from \"./TelemetryContext\";\r\nimport { _DYN_ACCOUNT_ID, _DYN_APPLY_APPLICATION_CO1, _DYN_APPLY_DEVICE_CONTEXT, _DYN_APPLY_INTERNAL_CONTE5, _DYN_APPLY_LOCATION_CONTE4, _DYN_APPLY_OPERATING_SYST3, _DYN_APPLY_OPERATION_CONT2, _DYN_APPLY_SESSION_CONTEX0, _DYN_APPLY_USER_CONTEXT, _DYN_GET_NEW_ID, _DYN_GET_SESSION_ID, _DYN_GET_TRACE_CTX, _DYN_ID_LENGTH, _DYN_IS_NEW_USER, _DYN_IS_USER_COOKIE_SET, _DYN_NAME_PREFIX, _DYN_SESSION_COOKIE_POSTF6, _DYN_SESSION_MANAGER, _DYN_TELEMETRY_TRACE, _DYN_UPDATE, _DYN_USER_COOKIE_POSTFIX } from \"./__DynamicConstants\";\r\nvar undefString;\r\nvar nullValue = null;\r\nvar _defaultConfig = objDeepFreeze((_a = {},\r\n    _a[_DYN_ACCOUNT_ID /* @min:accountId */] = nullValue,\r\n    _a.sessionRenewalMs = 30 * 60 * 1000,\r\n    _a.samplingPercentage = 100,\r\n    _a.sessionExpirationMs = 24 * 60 * 60 * 1000,\r\n    _a.cookieDomain = nullValue,\r\n    _a.sdkExtension = nullValue,\r\n    _a.isBrowserLinkTrackingEnabled = false,\r\n    _a.appId = nullValue,\r\n    _a[_DYN_GET_SESSION_ID /* @min:getSessionId */] = nullValue,\r\n    _a[_DYN_NAME_PREFIX /* @min:namePrefix */] = undefString,\r\n    _a[_DYN_SESSION_COOKIE_POSTF6 /* @min:sessionCookiePostfix */] = undefString,\r\n    _a[_DYN_USER_COOKIE_POSTFIX /* @min:userCookiePostfix */] = undefString,\r\n    _a[_DYN_ID_LENGTH /* @min:idLength */] = 22,\r\n    _a[_DYN_GET_NEW_ID /* @min:getNewId */] = nullValue,\r\n    _a));\r\nvar PropertiesPlugin = /** @class */ (function (_super) {\r\n    __extends(PropertiesPlugin, _super);\r\n    function PropertiesPlugin() {\r\n        var _this = _super.call(this) || this;\r\n        _this.priority = 110;\r\n        _this.identifier = PropertiesPluginIdentifier;\r\n        var _extensionConfig;\r\n        var _distributedTraceCtx;\r\n        var _previousTraceCtx;\r\n        var _context;\r\n        var _disableUserInitMessage;\r\n        dynamicProto(PropertiesPlugin, _this, function (_self, _base) {\r\n            _initDefaults();\r\n            objDefine(_self, \"context\", {\r\n                g: function () {\r\n                    return _context;\r\n                }\r\n            });\r\n            _self.initialize = function (config, core, extensions, pluginChain) {\r\n                _base.initialize(config, core, extensions, pluginChain);\r\n                _populateDefaults(config);\r\n            };\r\n            /**\r\n             * Add Part A fields to the event\r\n             * @param event - The event that needs to be processed\r\n             */\r\n            _self.processTelemetry = function (event, itemCtx) {\r\n                if (!isNullOrUndefined(event)) {\r\n                    itemCtx = _self._getTelCtx(itemCtx);\r\n                    // If the envelope is PageView, reset the internal message count so that we can send internal telemetry for the new page.\r\n                    if (event.name === PageView.envelopeType) {\r\n                        itemCtx.diagLog().resetInternalMessageCount();\r\n                    }\r\n                    var theContext = (_context || {});\r\n                    if (theContext.session) {\r\n                        // If customer did not provide custom session id update the session manager\r\n                        if (typeof _context.session.id !== \"string\" && theContext[_DYN_SESSION_MANAGER /* @min:%2esessionManager */]) {\r\n                            theContext[_DYN_SESSION_MANAGER /* @min:%2esessionManager */][_DYN_UPDATE /* @min:%2eupdate */]();\r\n                        }\r\n                    }\r\n                    var userCtx = theContext.user;\r\n                    if (userCtx && !userCtx[_DYN_IS_USER_COOKIE_SET /* @min:%2eisUserCookieSet */]) {\r\n                        userCtx[_DYN_UPDATE /* @min:%2eupdate */](theContext.user.id);\r\n                    }\r\n                    _processTelemetryInternal(event, itemCtx);\r\n                    if (userCtx && userCtx[_DYN_IS_NEW_USER /* @min:%2eisNewUser */]) {\r\n                        userCtx[_DYN_IS_NEW_USER /* @min:%2eisNewUser */] = false;\r\n                        if (!_disableUserInitMessage) {\r\n                            var message = new _InternalLogMessage(72 /* _eInternalMessageId.SendBrowserInfoOnUserInit */, ((getNavigator() || {}).userAgent || \"\"));\r\n                            _logInternalMessage(itemCtx.diagLog(), 1 /* eLoggingSeverity.CRITICAL */, message);\r\n                        }\r\n                    }\r\n                    _self.processNext(event, itemCtx);\r\n                }\r\n            };\r\n            _self._doTeardown = function (unloadCtx, unloadState) {\r\n                var core = (unloadCtx || {}).core();\r\n                if (core && core[_DYN_GET_TRACE_CTX /* @min:%2egetTraceCtx */]) {\r\n                    var traceCtx = core[_DYN_GET_TRACE_CTX /* @min:%2egetTraceCtx */](false);\r\n                    if (traceCtx === _distributedTraceCtx) {\r\n                        core.setTraceCtx(_previousTraceCtx);\r\n                    }\r\n                }\r\n                _initDefaults();\r\n            };\r\n            function _initDefaults() {\r\n                _extensionConfig = null;\r\n                _distributedTraceCtx = null;\r\n                _previousTraceCtx = null;\r\n                _context = null;\r\n                _disableUserInitMessage = true;\r\n            }\r\n            function _populateDefaults(config) {\r\n                var identifier = _self.identifier;\r\n                var core = _self.core;\r\n                // This function will be re-called whenever any referenced configuration is changed\r\n                _self._addHook(onConfigChange(config, function () {\r\n                    var ctx = createProcessTelemetryContext(null, config, core);\r\n                    if (config.storagePrefix) {\r\n                        utlSetStoragePrefix(config.storagePrefix);\r\n                    }\r\n                    _disableUserInitMessage = config.disableUserInitMessage === false ? false : true;\r\n                    _extensionConfig = ctx.getExtCfg(identifier, _defaultConfig);\r\n                    // Test hook to allow accessing the internal values -- explicitly not defined as an available property on the class\r\n                    _self[\"_extConfig\"] = _extensionConfig;\r\n                }));\r\n                // This is outside of the onConfigChange as we don't want to update (replace) these values whenever a referenced config item changes\r\n                _previousTraceCtx = core[_DYN_GET_TRACE_CTX /* @min:%2egetTraceCtx */](false);\r\n                _context = new TelemetryContext(core, _extensionConfig, _previousTraceCtx, _self._unloadHooks);\r\n                _distributedTraceCtx = createDistributedTraceContextFromTrace(_self.context[_DYN_TELEMETRY_TRACE /* @min:%2etelemetryTrace */], _previousTraceCtx);\r\n                core.setTraceCtx(_distributedTraceCtx);\r\n                _self.context.appId = function () {\r\n                    var breezeChannel = core.getPlugin(BreezeChannelIdentifier);\r\n                    return breezeChannel ? breezeChannel.plugin[\"_appId\"] : null;\r\n                };\r\n            }\r\n            function _processTelemetryInternal(evt, itemCtx) {\r\n                // Set Part A fields\r\n                getSetValue(evt, \"tags\", []);\r\n                getSetValue(evt, \"ext\", {});\r\n                var ctx = _self.context;\r\n                ctx[_DYN_APPLY_SESSION_CONTEX0 /* @min:%2eapplySessionContext */](evt, itemCtx);\r\n                ctx[_DYN_APPLY_APPLICATION_CO1 /* @min:%2eapplyApplicationContext */](evt, itemCtx);\r\n                ctx[_DYN_APPLY_DEVICE_CONTEXT /* @min:%2eapplyDeviceContext */](evt, itemCtx);\r\n                ctx[_DYN_APPLY_OPERATION_CONT2 /* @min:%2eapplyOperationContext */](evt, itemCtx);\r\n                ctx[_DYN_APPLY_USER_CONTEXT /* @min:%2eapplyUserContext */](evt, itemCtx);\r\n                ctx[_DYN_APPLY_OPERATING_SYST3 /* @min:%2eapplyOperatingSystemContxt */](evt, itemCtx);\r\n                ctx.applyWebContext(evt, itemCtx);\r\n                ctx[_DYN_APPLY_LOCATION_CONTE4 /* @min:%2eapplyLocationContext */](evt, itemCtx); // legacy tags\r\n                ctx[_DYN_APPLY_INTERNAL_CONTE5 /* @min:%2eapplyInternalContext */](evt, itemCtx); // legacy tags\r\n                ctx.cleanUp(evt, itemCtx);\r\n            }\r\n        });\r\n        return _this;\r\n    }\r\n    PropertiesPlugin.prototype.initialize = function (config, core, extensions, pluginChain) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Add Part A fields to the event\r\n     * @param event - The event that needs to be processed\r\n     */\r\n    PropertiesPlugin.prototype.processTelemetry = function (event, itemCtx) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    return PropertiesPlugin;\r\n}(BaseTelemetryPlugin));\r\nexport default PropertiesPlugin;\r\n//# sourceMappingURL=PropertiesPlugin.js.map", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n// ###################################################################################################################################################\r\n// Note: DON'T Export these const from the package as we are still targeting IE/ES5 this will export a mutable variables that someone could change ###\r\n// ###################################################################################################################################################\r\n// Generally you should only put values that are used more than 2 times and then only if not already exposed as a constant (such as SdkCoreNames)\r\n// as when using \"short\" named values from here they will be will be minified smaller than the SdkCoreNames[eSdkCoreNames.xxxx] value.\r\nvar _AUTHENTICATED_USER_CONTEXT = \"AuthenticatedUserContext\";\r\nvar _TRACK = \"track\";\r\nexport var STR_EMPTY = \"\";\r\nexport var STR_SNIPPET = \"snippet\";\r\nexport var STR_GET_COOKIE_MGR = \"getCookieMgr\";\r\nexport var STR_START_TRACK_PAGE = \"startTrackPage\";\r\nexport var STR_STOP_TRACK_PAGE = \"stopTrackPage\";\r\nexport var STR_FLUSH = \"flush\";\r\nexport var STR_START_TRACK_EVENT = \"startTrackEvent\";\r\nexport var STR_STOP_TRACK_EVENT = \"stopTrackEvent\";\r\nexport var STR_ADD_TELEMETRY_INITIALIZER = \"addTelemetryInitializer\";\r\nexport var STR_ADD_TELEMETRY_INITIALIZERS = STR_ADD_TELEMETRY_INITIALIZER + \"s\";\r\nexport var STR_POLL_INTERNAL_LOGS = \"pollInternalLogs\";\r\nexport var STR_GET_PLUGIN = \"getPlugin\";\r\nexport var STR_EVT_NAMESPACE = \"evtNamespace\";\r\nexport var STR_TRACK_EVENT = _TRACK + \"Event\";\r\nexport var STR_TRACK_TRACE = _TRACK + \"Trace\";\r\nexport var STR_TRACK_METRIC = _TRACK + \"Metric\";\r\nexport var STR_TRACK_PAGE_VIEW = _TRACK + \"PageView\";\r\nexport var STR_TRACK_EXCEPTION = _TRACK + \"Exception\";\r\nexport var STR_TRACK_DEPENDENCY_DATA = _TRACK + \"DependencyData\";\r\nexport var STR_SET_AUTHENTICATED_USER_CONTEXT = \"set\" + _AUTHENTICATED_USER_CONTEXT;\r\nexport var STR_CLEAR_AUTHENTICATED_USER_CONTEXT = \"clear\" + _AUTHENTICATED_USER_CONTEXT;\r\nexport var CONFIG_ENDPOINT_URL = \"https://js.monitor.azure.com/scripts/b/ai.config.1.cfg.json\";\r\n//# sourceMappingURL=InternalConstants.js.map", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n// @skip-file-minify\r\n// ##############################################################\r\n// AUTO GENERATED FILE: This file is Auto Generated during build.\r\n// ##############################################################\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n// Note: DON'T Export these const from the package as we are still targeting ES3 this will export a mutable variables that someone could change!!!\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\nexport var _DYN_VERSION = \"version\"; // Count: 6\r\nexport var _DYN_QUEUE = \"queue\"; // Count: 6\r\nexport var _DYN_CONNECTION_STRING = \"connectionString\"; // Count: 4\r\nexport var _DYN_INSTRUMENTATION_KEY = \"instrumentationKey\"; // Count: 5\r\nexport var _DYN_INSTRUMENTATIONKEY0 = \"instrumentationkey\"; // Count: 2\r\nexport var _DYN_USER_OVERRIDE_ENDPOI1 = \"userOverrideEndpointUrl\"; // Count: 6\r\nexport var _DYN_ENDPOINT_URL = \"endpointUrl\"; // Count: 6\r\nexport var _DYN_INGESTIONENDPOINT = \"ingestionendpoint\"; // Count: 2\r\nexport var _DYN_ONUNLOAD_FLUSH = \"onunloadFlush\"; // Count: 6\r\nexport var _DYN_CONTEXT = \"context\"; // Count: 5\r\nexport var _DYN_ADD_HOUSEKEEPING_BEF2 = \"addHousekeepingBeforeUnload\"; // Count: 2\r\nexport var _DYN_SEND_MESSAGE = \"sendMessage\"; // Count: 3\r\nexport var _DYN_UPDATE_SNIPPET_DEFIN3 = \"updateSnippetDefinitions\"; // Count: 2\r\n//# sourceMappingURL=__DynamicConstants.js.map", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\"use strict\";\r\nvar _a, _b, _c, _d;\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { AnalyticsPlugin } from \"@microsoft/applicationinsights-analytics-js\";\r\nimport { CfgSyncPlugin } from \"@microsoft/applicationinsights-cfgsync-js\";\r\nimport { Sender } from \"@microsoft/applicationinsights-channel-js\";\r\nimport { AnalyticsPluginIdentifier, DEFAULT_BREEZE_PATH, PropertiesPluginIdentifier, ThrottleMgr, parseConnectionString } from \"@microsoft/applicationinsights-common\";\r\nimport { AppInsightsCore, _throwInternal, addPageHideEventListener, addPageUnloadEventListener, cfgDfMerge, cfgDfValidate, createDynamicConfig, createProcessTelemetryContext, createUniqueNamespace, doPerf, hasDocument, hasWindow, isArray, isFeatureEnabled, isFunction, isNullOrUndefined, isReactNative, isString, mergeEvtNamespace, onConfigChange, proxyAssign, proxyFunctions, removePageHideEventListener, removePageUnloadEventListener } from \"@microsoft/applicationinsights-core-js\";\r\nimport { AjaxPlugin as DependenciesPlugin } from \"@microsoft/applicationinsights-dependencies-js\";\r\nimport { PropertiesPlugin } from \"@microsoft/applicationinsights-properties-js\";\r\nimport { createAsyncPromise, createPromise, doAwaitResponse } from \"@nevware21/ts-async\";\r\nimport { arrForEach, arrIndexOf, isPromiseLike, objDefine, objForEachKey, strIndexOf, throwUnsupported } from \"@nevware21/ts-utils\";\r\nimport { CONFIG_ENDPOINT_URL, STR_ADD_TELEMETRY_INITIALIZER, STR_CLEAR_AUTHENTICATED_USER_CONTEXT, STR_EVT_NAMESPACE, STR_FLUSH, STR_GET_COOKIE_MGR, STR_GET_PLUGIN, STR_POLL_INTERNAL_LOGS, STR_SET_AUTHENTICATED_USER_CONTEXT, STR_SNIPPET, STR_START_TRACK_EVENT, STR_START_TRACK_PAGE, STR_STOP_TRACK_EVENT, STR_STOP_TRACK_PAGE, STR_TRACK_DEPENDENCY_DATA, STR_TRACK_EVENT, STR_TRACK_EXCEPTION, STR_TRACK_METRIC, STR_TRACK_PAGE_VIEW, STR_TRACK_TRACE } from \"./InternalConstants\";\r\nimport { _DYN_ADD_HOUSEKEEPING_BEF2, _DYN_CONNECTION_STRING, _DYN_CONTEXT, _DYN_ENDPOINT_URL, _DYN_INGESTIONENDPOINT, _DYN_INSTRUMENTATIONKEY0, _DYN_INSTRUMENTATION_KEY, _DYN_ONUNLOAD_FLUSH, _DYN_QUEUE, _DYN_SEND_MESSAGE, _DYN_UPDATE_SNIPPET_DEFIN3, _DYN_USER_OVERRIDE_ENDPOI1, _DYN_VERSION } from \"./__DynamicConstants\";\r\nvar _internalSdkSrc;\r\n// This is an exclude list of properties that should not be updated during initialization\r\n// They include a combination of private and internal property names\r\nvar _ignoreUpdateSnippetProperties = [\r\n    STR_SNIPPET, \"dependencies\", \"properties\", \"_snippetVersion\", \"appInsightsNew\", \"getSKUDefaults\"\r\n];\r\nvar IKEY_USAGE = \"iKeyUsage\";\r\nvar CDN_USAGE = \"CdnUsage\";\r\nvar SDK_LOADER_VER = \"SdkLoaderVer\";\r\nvar UNDEFINED_VALUE = undefined;\r\nvar default_limit = {\r\n    samplingRate: 100,\r\n    maxSendNumber: 1\r\n};\r\nvar default_interval = {\r\n    monthInterval: 3,\r\n    daysOfMonth: [28]\r\n};\r\nvar default_throttle_config = {\r\n    disabled: true,\r\n    limit: cfgDfMerge(default_limit),\r\n    interval: cfgDfMerge(default_interval)\r\n};\r\n// We need to include all properties that we only reference that we want to be dynamically updatable here\r\n// So they are converted even when not specified in the passed configuration\r\nvar defaultConfigValues = (_a = {},\r\n    _a[_DYN_CONNECTION_STRING /* @min:connectionString */] = UNDEFINED_VALUE,\r\n    _a[_DYN_ENDPOINT_URL /* @min:endpointUrl */] = UNDEFINED_VALUE,\r\n    _a[_DYN_INSTRUMENTATION_KEY /* @min:instrumentationKey */] = UNDEFINED_VALUE,\r\n    _a[_DYN_USER_OVERRIDE_ENDPOI1 /* @min:userOverrideEndpointUrl */] = UNDEFINED_VALUE,\r\n    _a.diagnosticLogInterval = cfgDfValidate(_chkDiagLevel, 10000),\r\n    _a.featureOptIn = (_b = {},\r\n        _b[IKEY_USAGE] = { mode: 3 /* FeatureOptInMode.enable */ },\r\n        _b[CDN_USAGE] = { mode: 2 /* FeatureOptInMode.disable */ },\r\n        _b[SDK_LOADER_VER] = { mode: 2 /* FeatureOptInMode.disable */ },\r\n        _b),\r\n    _a.throttleMgrCfg = cfgDfMerge((_c = {},\r\n        _c[109 /* _eInternalMessageId.DefaultThrottleMsgKey */] = cfgDfMerge(default_throttle_config),\r\n        _c[106 /* _eInternalMessageId.InstrumentationKeyDeprecation */] = cfgDfMerge(default_throttle_config),\r\n        _c[111 /* _eInternalMessageId.SdkLdrUpdate */] = cfgDfMerge(default_throttle_config),\r\n        _c[110 /* _eInternalMessageId.CdnDeprecation */] = cfgDfMerge(default_throttle_config),\r\n        _c)),\r\n    _a.extensionConfig = cfgDfMerge((_d = {},\r\n        _d[\"AppInsightsCfgSyncPlugin\"] = cfgDfMerge({\r\n            cfgUrl: CONFIG_ENDPOINT_URL,\r\n            syncMode: 2 /* ICfgSyncMode.Receive */\r\n        }),\r\n        _d)),\r\n    _a);\r\nfunction _chkDiagLevel(value) {\r\n    // Make sure we have a value > 0\r\n    return value && value > 0;\r\n}\r\n/**\r\n * Application Insights API\r\n * @group Entrypoint\r\n * @group Classes\r\n * @class Initialization\r\n * @implements {IApplicationInsights}\r\n */\r\nvar AppInsightsSku = /** @class */ (function () {\r\n    function AppInsightsSku(snippet) {\r\n        var _this = this;\r\n        // NOTE!: DON'T set default values here, instead set them in the _initDefaults() function as it is also called during teardown()\r\n        var dependencies;\r\n        var properties;\r\n        var _sender;\r\n        var _snippetVersion;\r\n        var _evtNamespace;\r\n        var _houseKeepingNamespace;\r\n        var _core;\r\n        var _config;\r\n        var _analyticsPlugin;\r\n        var _cfgSyncPlugin;\r\n        var _throttleMgr;\r\n        var _iKeySentMessage;\r\n        var _cdnSentMessage;\r\n        var _sdkVerSentMessage;\r\n        dynamicProto(AppInsightsSku, this, function (_self) {\r\n            _initDefaults();\r\n            objDefine(_self, \"config\", {\r\n                g: function () {\r\n                    return _config;\r\n                }\r\n            });\r\n            arrForEach([\"pluginVersionStringArr\", \"pluginVersionString\"], function (key) {\r\n                objDefine(_self, key, {\r\n                    g: function () {\r\n                        if (_core) {\r\n                            return _core[key];\r\n                        }\r\n                        return null;\r\n                    }\r\n                });\r\n            });\r\n            // initialize the queue and config in case they are undefined\r\n            _snippetVersion = \"\" + (snippet.sv || snippet[_DYN_VERSION /* @min:%2eversion */] || \"\");\r\n            snippet[_DYN_QUEUE /* @min:%2equeue */] = snippet[_DYN_QUEUE /* @min:%2equeue */] || [];\r\n            snippet[_DYN_VERSION /* @min:%2eversion */] = snippet[_DYN_VERSION /* @min:%2eversion */] || 2.0; // Default to new version\r\n            var cfgHandler = createDynamicConfig(snippet.config || {}, defaultConfigValues);\r\n            _config = cfgHandler.cfg;\r\n            _analyticsPlugin = new AnalyticsPlugin();\r\n            objDefine(_self, \"appInsights\", {\r\n                g: function () {\r\n                    return _analyticsPlugin;\r\n                }\r\n            });\r\n            properties = new PropertiesPlugin();\r\n            dependencies = new DependenciesPlugin();\r\n            _sender = new Sender();\r\n            _core = new AppInsightsCore();\r\n            objDefine(_self, \"core\", {\r\n                g: function () {\r\n                    return _core;\r\n                }\r\n            });\r\n            // Will get recalled if any referenced values are changed\r\n            _addUnloadHook(onConfigChange(cfgHandler, function () {\r\n                var configCs = _config[_DYN_CONNECTION_STRING /* @min:%2econnectionString */];\r\n                function _parseCs() {\r\n                    return createAsyncPromise(function (resolve, reject) {\r\n                        doAwaitResponse(configCs, function (res) {\r\n                            var curCs = res && res.value;\r\n                            var parsedCs = null;\r\n                            if (!res.rejected && curCs) {\r\n                                // replace cs with resolved values in case of circular promises\r\n                                _config[_DYN_CONNECTION_STRING /* @min:%2econnectionString */] = curCs;\r\n                                parsedCs = parseConnectionString(curCs);\r\n                            }\r\n                            // if can't resolve cs promise, null will be returned\r\n                            resolve(parsedCs);\r\n                        });\r\n                    });\r\n                }\r\n                if (isPromiseLike(configCs)) {\r\n                    var ikeyPromise = createAsyncPromise(function (resolve, reject) {\r\n                        _parseCs().then(function (cs) {\r\n                            var ikey = _config[_DYN_INSTRUMENTATION_KEY /* @min:%2einstrumentationKey */];\r\n                            ikey = cs && cs[_DYN_INSTRUMENTATIONKEY0 /* @min:%2einstrumentationkey */] || ikey;\r\n                            resolve(ikey);\r\n                        }).catch(function (e) {\r\n                            // parseCs will always resolve(unless timeout)\r\n                            // return null in case any error happens\r\n                            resolve(null);\r\n                        });\r\n                    });\r\n                    var url = _config[_DYN_USER_OVERRIDE_ENDPOI1 /* @min:%2euserOverrideEndpointUrl */];\r\n                    if (isNullOrUndefined(url)) {\r\n                        url = createAsyncPromise(function (resolve, reject) {\r\n                            _parseCs().then(function (cs) {\r\n                                var url = _config[_DYN_ENDPOINT_URL /* @min:%2eendpointUrl */];\r\n                                var ingest = cs && cs[_DYN_INGESTIONENDPOINT /* @min:%2eingestionendpoint */];\r\n                                url = ingest ? ingest + DEFAULT_BREEZE_PATH : url;\r\n                                resolve(url);\r\n                            }).catch(function (e) {\r\n                                // parseCs will always resolve(unless timeout)\r\n                                // return null in case any error happens\r\n                                resolve(null);\r\n                            });\r\n                        });\r\n                    }\r\n                    _config[_DYN_INSTRUMENTATION_KEY /* @min:%2einstrumentationKey */] = ikeyPromise;\r\n                    _config[_DYN_ENDPOINT_URL /* @min:%2eendpointUrl */] = url;\r\n                }\r\n                if (isString(configCs)) {\r\n                    // confirm if promiselike function present\r\n                    // handle cs promise here\r\n                    // add cases to oneNote\r\n                    var cs = parseConnectionString(configCs);\r\n                    var ingest = cs[_DYN_INGESTIONENDPOINT /* @min:%2eingestionendpoint */];\r\n                    _config.endpointUrl = _config[_DYN_USER_OVERRIDE_ENDPOI1 /* @min:%2euserOverrideEndpointUrl */] ? _config[_DYN_USER_OVERRIDE_ENDPOI1 /* @min:%2euserOverrideEndpointUrl */] : ingest + DEFAULT_BREEZE_PATH; // add /v2/track\r\n                    _config[_DYN_INSTRUMENTATION_KEY /* @min:%2einstrumentationKey */] = cs[_DYN_INSTRUMENTATIONKEY0 /* @min:%2einstrumentationkey */] || _config[_DYN_INSTRUMENTATION_KEY /* @min:%2einstrumentationKey */];\r\n                }\r\n                // userOverrideEndpointUrl have the highest priority\r\n                _config.endpointUrl = _config[_DYN_USER_OVERRIDE_ENDPOI1 /* @min:%2euserOverrideEndpointUrl */] ? _config[_DYN_USER_OVERRIDE_ENDPOI1 /* @min:%2euserOverrideEndpointUrl */] : _config[_DYN_ENDPOINT_URL /* @min:%2eendpointUrl */];\r\n            }));\r\n            _self[STR_SNIPPET /* @min:%2esnippet */] = snippet;\r\n            _self[STR_FLUSH /* @min:%2eflush */] = function (async, callBack) {\r\n                if (async === void 0) { async = true; }\r\n                var result;\r\n                doPerf(_core, function () { return \"AISKU.flush\"; }, function () {\r\n                    if (async && !callBack) {\r\n                        result = createPromise(function (resolve) {\r\n                            callBack = resolve;\r\n                        });\r\n                    }\r\n                    var waiting = 1;\r\n                    var flushDone = function () {\r\n                        waiting--;\r\n                        if (waiting === 0) {\r\n                            callBack();\r\n                        }\r\n                    };\r\n                    arrForEach(_core.getChannels(), function (channel) {\r\n                        if (channel) {\r\n                            waiting++;\r\n                            channel[STR_FLUSH /* @min:%2eflush */](async, flushDone);\r\n                        }\r\n                    });\r\n                    // decrement the initial \"waiting\"\r\n                    flushDone();\r\n                }, null, async);\r\n                return result;\r\n            };\r\n            _self[_DYN_ONUNLOAD_FLUSH /* @min:%2eonunloadFlush */] = function (async) {\r\n                if (async === void 0) { async = true; }\r\n                arrForEach(_core.getChannels(), function (channel) {\r\n                    if (channel[_DYN_ONUNLOAD_FLUSH /* @min:%2eonunloadFlush */]) {\r\n                        channel[_DYN_ONUNLOAD_FLUSH /* @min:%2eonunloadFlush */]();\r\n                    }\r\n                    else {\r\n                        channel[STR_FLUSH /* @min:%2eflush */](async);\r\n                    }\r\n                });\r\n            };\r\n            _self.loadAppInsights = function (legacyMode, logger, notificationManager) {\r\n                if (legacyMode === void 0) { legacyMode = false; }\r\n                if (legacyMode) {\r\n                    throwUnsupported(\"Legacy Mode is no longer supported\");\r\n                }\r\n                function _updateSnippetProperties(snippet) {\r\n                    if (snippet) {\r\n                        var snippetVer = \"\";\r\n                        if (!isNullOrUndefined(_snippetVersion)) {\r\n                            snippetVer += _snippetVersion;\r\n                        }\r\n                        if (_self[_DYN_CONTEXT /* @min:%2econtext */] && _self[_DYN_CONTEXT /* @min:%2econtext */].internal) {\r\n                            _self[_DYN_CONTEXT /* @min:%2econtext */].internal.snippetVer = snippetVer || \"-\";\r\n                        }\r\n                        // apply updated properties to the global instance (snippet)\r\n                        objForEachKey(_self, function (field, value) {\r\n                            if (isString(field) &&\r\n                                !isFunction(value) &&\r\n                                field && field[0] !== \"_\" && // Don't copy \"internal\" values\r\n                                arrIndexOf(_ignoreUpdateSnippetProperties, field) === -1) {\r\n                                if (snippet[field] !== value) {\r\n                                    snippet[field] = value;\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n                doPerf(_self.core, function () { return \"AISKU.loadAppInsights\"; }, function () {\r\n                    // initialize core\r\n                    _core.initialize(_config, [_sender, properties, dependencies, _analyticsPlugin, _cfgSyncPlugin], logger, notificationManager);\r\n                    objDefine(_self, \"context\", {\r\n                        g: function () { return properties[_DYN_CONTEXT /* @min:%2econtext */]; }\r\n                    });\r\n                    if (!_throttleMgr) {\r\n                        _throttleMgr = new ThrottleMgr(_core);\r\n                    }\r\n                    var sdkSrc = _findSdkSourceFile();\r\n                    if (sdkSrc && _self[_DYN_CONTEXT /* @min:%2econtext */]) {\r\n                        _self[_DYN_CONTEXT /* @min:%2econtext */].internal.sdkSrc = sdkSrc;\r\n                    }\r\n                    _updateSnippetProperties(_self[STR_SNIPPET /* @min:%2esnippet */]);\r\n                    // Empty queue of all api calls logged prior to sdk download\r\n                    _self.emptyQueue();\r\n                    _self[STR_POLL_INTERNAL_LOGS /* @min:%2epollInternalLogs */]();\r\n                    _self[_DYN_ADD_HOUSEKEEPING_BEF2 /* @min:%2eaddHousekeepingBeforeUnload */](_self);\r\n                    _addUnloadHook(onConfigChange(cfgHandler, function () {\r\n                        var defaultEnable = false;\r\n                        if (_config.throttleMgrCfg[109 /* _eInternalMessageId.DefaultThrottleMsgKey */]) {\r\n                            defaultEnable = !_config.throttleMgrCfg[109 /* _eInternalMessageId.DefaultThrottleMsgKey */].disabled;\r\n                        }\r\n                        if (!_throttleMgr.isReady() && _config.extensionConfig && _config.extensionConfig[_cfgSyncPlugin.identifier] && defaultEnable) {\r\n                            // set ready state to true will automatically trigger flush()\r\n                            _throttleMgr.onReadyState(true);\r\n                        }\r\n                        var result;\r\n                        if (!_iKeySentMessage && !_config[_DYN_CONNECTION_STRING /* @min:%2econnectionString */] && isFeatureEnabled(IKEY_USAGE, _config)) {\r\n                            result = _throttleMgr[_DYN_SEND_MESSAGE /* @min:%2esendMessage */](106 /* _eInternalMessageId.InstrumentationKeyDeprecation */, \"See Instrumentation key support at aka.ms/IkeyMigrate\");\r\n                            _iKeySentMessage = true;\r\n                        }\r\n                        if (!_cdnSentMessage && _self[_DYN_CONTEXT /* @min:%2econtext */].internal.sdkSrc && _self[_DYN_CONTEXT /* @min:%2econtext */].internal.sdkSrc.indexOf(\"az416426\") != -1 && isFeatureEnabled(CDN_USAGE, _config)) {\r\n                            result = _throttleMgr[_DYN_SEND_MESSAGE /* @min:%2esendMessage */](110 /* _eInternalMessageId.CdnDeprecation */, \"See Cdn support notice at aka.ms/JsActiveCdn\");\r\n                            _cdnSentMessage = true;\r\n                        }\r\n                        if (!_sdkVerSentMessage && parseInt(_snippetVersion) < 6 && isFeatureEnabled(SDK_LOADER_VER, _config)) {\r\n                            result = _throttleMgr[_DYN_SEND_MESSAGE /* @min:%2esendMessage */](111 /* _eInternalMessageId.SdkLdrUpdate */, \"An updated Sdk Loader is available, see aka.ms/SnippetVer\");\r\n                            _sdkVerSentMessage = true;\r\n                        }\r\n                    }));\r\n                });\r\n                return _self;\r\n            };\r\n            _self[_DYN_UPDATE_SNIPPET_DEFIN3 /* @min:%2eupdateSnippetDefinitions */] = function (snippet) {\r\n                // apply full appInsights to the global instance\r\n                // Note: This must be called before loadAppInsights is called\r\n                proxyAssign(snippet, _self, function (name) {\r\n                    // Not excluding names prefixed with \"_\" as we need to proxy some functions like _onError\r\n                    return name && arrIndexOf(_ignoreUpdateSnippetProperties, name) === -1;\r\n                });\r\n            };\r\n            _self.emptyQueue = function () {\r\n                // call functions that were queued before the main script was loaded\r\n                try {\r\n                    if (isArray(_self.snippet[_DYN_QUEUE /* @min:%2equeue */])) {\r\n                        // note: do not check length in the for-loop conditional in case something goes wrong and the stub methods are not overridden.\r\n                        var length_1 = _self.snippet[_DYN_QUEUE /* @min:%2equeue */].length;\r\n                        for (var i = 0; i < length_1; i++) {\r\n                            var call = _self.snippet[_DYN_QUEUE /* @min:%2equeue */][i];\r\n                            call();\r\n                        }\r\n                        _self.snippet[_DYN_QUEUE /* @min:%2equeue */] = undefined;\r\n                        delete _self.snippet[_DYN_QUEUE /* @min:%2equeue */];\r\n                    }\r\n                }\r\n                catch (exception) {\r\n                    var properties_1 = {};\r\n                    if (exception && isFunction(exception.toString)) {\r\n                        properties_1.exception = exception.toString();\r\n                    }\r\n                    // need from core\r\n                    // Microsoft.ApplicationInsights._InternalLogging.throwInternal(\r\n                    //     eLoggingSeverity.WARNING,\r\n                    //     _eInternalMessageId.FailedToSendQueuedTelemetry,\r\n                    //     \"Failed to send queued telemetry\",\r\n                    //     properties);\r\n                }\r\n            };\r\n            _self[_DYN_ADD_HOUSEKEEPING_BEF2 /* @min:%2eaddHousekeepingBeforeUnload */] = function (appInsightsInstance) {\r\n                // Add callback to push events when the user navigates away\r\n                if (hasWindow() || hasDocument()) {\r\n                    var performHousekeeping_1 = function () {\r\n                        // Adds the ability to flush all data before the page unloads.\r\n                        // Note: This approach tries to push a sync request with all the pending events onbeforeunload.\r\n                        // Firefox does not respect this.Other browsers DO push out the call with < 100% hit rate.\r\n                        // Telemetry here will help us analyze how effective this approach is.\r\n                        // Another approach would be to make this call sync with a acceptable timeout to reduce the\r\n                        // impact on user experience.\r\n                        // appInsightsInstance.context._sender.triggerSend();\r\n                        appInsightsInstance[_DYN_ONUNLOAD_FLUSH /* @min:%2eonunloadFlush */](false);\r\n                        // Back up the current session to local storage\r\n                        // This lets us close expired sessions after the cookies themselves expire\r\n                        if (isFunction(_self.core[STR_GET_PLUGIN /* @min:%2egetPlugin */])) {\r\n                            var loadedPlugin = _this.core[STR_GET_PLUGIN /* @min:%2egetPlugin */](PropertiesPluginIdentifier);\r\n                            if (loadedPlugin) {\r\n                                var propertiesPlugin = loadedPlugin.plugin;\r\n                                if (propertiesPlugin && propertiesPlugin[_DYN_CONTEXT /* @min:%2econtext */] && propertiesPlugin[_DYN_CONTEXT /* @min:%2econtext */]._sessionManager) {\r\n                                    propertiesPlugin[_DYN_CONTEXT /* @min:%2econtext */]._sessionManager.backup();\r\n                                }\r\n                            }\r\n                        }\r\n                    };\r\n                    var added_1 = false;\r\n                    if (!_houseKeepingNamespace) {\r\n                        _houseKeepingNamespace = mergeEvtNamespace(_evtNamespace, _core[STR_EVT_NAMESPACE /* @min:%2eevtNamespace */] && _core[STR_EVT_NAMESPACE /* @min:%2eevtNamespace */]());\r\n                    }\r\n                    // Will be recalled if any referenced config properties change\r\n                    _addUnloadHook(onConfigChange(_config, function (details) {\r\n                        var coreConfig = details.cfg;\r\n                        var analyticsPlugin = appInsightsInstance.appInsights;\r\n                        var ctx = createProcessTelemetryContext(null, coreConfig, analyticsPlugin.core);\r\n                        var extConfig = ctx.getExtCfg(analyticsPlugin.identifier || AnalyticsPluginIdentifier);\r\n                        // As we could get recalled, remove any previously registered event handlers first\r\n                        _removePageEventHandlers();\r\n                        var excludePageUnloadEvents = coreConfig.disablePageUnloadEvents;\r\n                        if (!extConfig.disableFlushOnBeforeUnload) {\r\n                            // Hook the unload event for the document, window and body to ensure that the client events are flushed to the server\r\n                            // As just hooking the window does not always fire (on chrome) for page navigation's.\r\n                            if (addPageUnloadEventListener(performHousekeeping_1, excludePageUnloadEvents, _houseKeepingNamespace)) {\r\n                                added_1 = true;\r\n                            }\r\n                            // We also need to hook the pagehide and visibilitychange events as not all versions of Safari support load/unload events.\r\n                            if (addPageHideEventListener(performHousekeeping_1, excludePageUnloadEvents, _houseKeepingNamespace)) {\r\n                                added_1 = true;\r\n                            }\r\n                            // A reactNative app may not have a window and therefore the beforeunload/pagehide events -- so don't\r\n                            // log the failure in this case\r\n                            if (!added_1 && !isReactNative()) {\r\n                                _throwInternal(_core.logger, 1 /* eLoggingSeverity.CRITICAL */, 19 /* _eInternalMessageId.FailedToAddHandlerForOnBeforeUnload */, \"Could not add handler for beforeunload and pagehide\");\r\n                            }\r\n                        }\r\n                        if (!added_1 && !extConfig.disableFlushOnUnload) {\r\n                            // If we didn't add the normal set then attempt to add the pagehide and visibilitychange only\r\n                            addPageHideEventListener(performHousekeeping_1, excludePageUnloadEvents, _houseKeepingNamespace);\r\n                        }\r\n                    }));\r\n                }\r\n            };\r\n            _self.getSender = function () {\r\n                return _sender;\r\n            };\r\n            _self.unload = function (isAsync, unloadComplete, cbTimeout) {\r\n                var unloadDone = false;\r\n                var result;\r\n                if (isAsync && !unloadComplete) {\r\n                    result = createPromise(function (resolve) {\r\n                        // Set the callback to the promise resolve callback\r\n                        unloadComplete = resolve;\r\n                    });\r\n                }\r\n                function _unloadCallback(unloadState) {\r\n                    if (!unloadDone) {\r\n                        unloadDone = true;\r\n                        _initDefaults();\r\n                        unloadComplete && unloadComplete(unloadState);\r\n                    }\r\n                }\r\n                _self[_DYN_ONUNLOAD_FLUSH /* @min:%2eonunloadFlush */](isAsync);\r\n                _removePageEventHandlers();\r\n                _core.unload && _core.unload(isAsync, _unloadCallback, cbTimeout);\r\n                return result;\r\n            };\r\n            proxyFunctions(_self, _analyticsPlugin, [\r\n                STR_GET_COOKIE_MGR,\r\n                STR_TRACK_EVENT,\r\n                STR_TRACK_PAGE_VIEW,\r\n                \"trackPageViewPerformance\",\r\n                STR_TRACK_EXCEPTION,\r\n                \"_onerror\",\r\n                STR_TRACK_TRACE,\r\n                STR_TRACK_METRIC,\r\n                STR_START_TRACK_PAGE,\r\n                STR_STOP_TRACK_PAGE,\r\n                STR_START_TRACK_EVENT,\r\n                STR_STOP_TRACK_EVENT\r\n            ]);\r\n            proxyFunctions(_self, _getCurrentDependencies, [\r\n                STR_TRACK_DEPENDENCY_DATA,\r\n                \"addDependencyListener\",\r\n                \"addDependencyInitializer\"\r\n            ]);\r\n            proxyFunctions(_self, _core, [\r\n                STR_ADD_TELEMETRY_INITIALIZER,\r\n                STR_POLL_INTERNAL_LOGS,\r\n                \"stopPollingInternalLogs\",\r\n                STR_GET_PLUGIN,\r\n                \"addPlugin\",\r\n                STR_EVT_NAMESPACE,\r\n                \"addUnloadCb\",\r\n                \"getTraceCtx\",\r\n                \"updateCfg\",\r\n                \"onCfgChange\"\r\n            ]);\r\n            proxyFunctions(_self, function () {\r\n                var context = properties[_DYN_CONTEXT /* @min:%2econtext */];\r\n                return context ? context.user : null;\r\n            }, [\r\n                STR_SET_AUTHENTICATED_USER_CONTEXT,\r\n                STR_CLEAR_AUTHENTICATED_USER_CONTEXT\r\n            ]);\r\n            // Using a function to support the dynamic adding / removal of plugins, so this will always return the current value\r\n            function _getCurrentDependencies() {\r\n                return dependencies;\r\n            }\r\n            function _initDefaults() {\r\n                _evtNamespace = createUniqueNamespace(\"AISKU\");\r\n                _houseKeepingNamespace = null;\r\n                dependencies = null;\r\n                properties = null;\r\n                _sender = null;\r\n                _snippetVersion = null;\r\n                _throttleMgr = null;\r\n                _iKeySentMessage = false;\r\n                _cdnSentMessage = false;\r\n                _sdkVerSentMessage = false;\r\n                _cfgSyncPlugin = new CfgSyncPlugin();\r\n            }\r\n            function _removePageEventHandlers() {\r\n                // Remove any registered event handlers\r\n                if (_houseKeepingNamespace) {\r\n                    removePageUnloadEventListener(null, _houseKeepingNamespace);\r\n                    removePageHideEventListener(null, _houseKeepingNamespace);\r\n                }\r\n            }\r\n            function _addUnloadHook(hooks) {\r\n                _core.addUnloadHook(hooks);\r\n            }\r\n        });\r\n    }\r\n    // Analytics Plugin\r\n    /**\r\n     * Get the current cookie manager for this instance\r\n     */\r\n    AppInsightsSku.prototype.getCookieMgr = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Log a user action or other occurrence.\r\n     * @param event\r\n     * @param [customProperties]\r\n     * @memberof Initialization\r\n     */\r\n    AppInsightsSku.prototype.trackEvent = function (event, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Logs that a page, or similar container was displayed to the user.\r\n     * @param pageView\r\n     * @memberof Initialization\r\n     */\r\n    AppInsightsSku.prototype.trackPageView = function (pageView) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Log a bag of performance information via the customProperties field.\r\n     * @param pageViewPerformance\r\n     * @memberof Initialization\r\n     */\r\n    AppInsightsSku.prototype.trackPageViewPerformance = function (pageViewPerformance) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Log an exception that you have caught.\r\n     * @param exception\r\n     * @param } customProperties   Additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n     * @memberof Initialization\r\n     */\r\n    AppInsightsSku.prototype.trackException = function (exception, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Manually send uncaught exception telemetry. This method is automatically triggered\r\n     * on a window.onerror event.\r\n     * @param exception\r\n     * @memberof Initialization\r\n     */\r\n    AppInsightsSku.prototype._onerror = function (exception) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Log a diagnostic scenario such entering or leaving a function.\r\n     * @param trace\r\n     * @param [customProperties]\r\n     * @memberof Initialization\r\n     */\r\n    AppInsightsSku.prototype.trackTrace = function (trace, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Log a numeric value that is not associated with a specific event. Typically used\r\n     * to send regular reports of performance indicators.\r\n     *\r\n     * To send a single measurement, just use the `name` and `average` fields\r\n     * of {@link IMetricTelemetry}.\r\n     *\r\n     * If you take measurements frequently, you can reduce the telemetry bandwidth by\r\n     * aggregating multiple measurements and sending the resulting average and modifying\r\n     * the `sampleCount` field of {@link IMetricTelemetry}.\r\n     * @param metric - input object argument. Only `name` and `average` are mandatory.\r\n     * @param [customProperties]\r\n     * @memberof Initialization\r\n     */\r\n    AppInsightsSku.prototype.trackMetric = function (metric, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Starts the timer for tracking a page load time. Use this instead of `trackPageView` if you want to control when the page view timer starts and stops,\r\n     * but don't want to calculate the duration yourself. This method doesn't send any telemetry. Call `stopTrackPage` to log the end of the page view\r\n     * and send the event.\r\n     * @param name - A string that idenfities this item, unique within this HTML document. Defaults to the document title.\r\n     */\r\n    AppInsightsSku.prototype.startTrackPage = function (name) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Stops the timer that was started by calling `startTrackPage` and sends the pageview load time telemetry with the specified properties and measurements.\r\n     * The duration of the page view will be the time between calling `startTrackPage` and `stopTrackPage`.\r\n     * @param   name  The string you used as the name in startTrackPage. Defaults to the document title.\r\n     * @param   url   String - a relative or absolute URL that identifies the page or other item. Defaults to the window location.\r\n     * @param   properties  map[string, string] - additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n     * @param   measurements    map[string, number] - metrics associated with this page, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n     */\r\n    AppInsightsSku.prototype.stopTrackPage = function (name, url, properties, measurements) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AppInsightsSku.prototype.startTrackEvent = function (name) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Log an extended event that you started timing with `startTrackEvent`.\r\n     * @param   name    The string you used to identify this event in `startTrackEvent`.\r\n     * @param   properties  map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.\r\n     * @param   measurements    map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n     */\r\n    AppInsightsSku.prototype.stopTrackEvent = function (name, properties, measurements) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AppInsightsSku.prototype.addTelemetryInitializer = function (telemetryInitializer) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    // Properties Plugin\r\n    /**\r\n     * Set the authenticated user id and the account id. Used for identifying a specific signed-in user. Parameters must not contain whitespace or ,;=|\r\n     *\r\n     * The method will only set the `authenticatedUserId` and `accountId` in the current page view. To set them for the whole session, you should set `storeInCookie = true`\r\n     * @param authenticatedUserId\r\n     * @param [accountId]\r\n     * @param [storeInCookie=false]\r\n     */\r\n    AppInsightsSku.prototype.setAuthenticatedUserContext = function (authenticatedUserId, accountId, storeInCookie) {\r\n        if (storeInCookie === void 0) { storeInCookie = false; }\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Clears the authenticated user id and account id. The associated cookie is cleared, if present.\r\n     */\r\n    AppInsightsSku.prototype.clearAuthenticatedUserContext = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    // Dependencies Plugin\r\n    /**\r\n     * Log a dependency call (e.g. ajax)\r\n     * @param dependency\r\n     * @memberof Initialization\r\n     */\r\n    AppInsightsSku.prototype.trackDependencyData = function (dependency) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    // Misc\r\n    /**\r\n     * Attempt to flush data immediately; If executing asynchronously (the default) and\r\n     * you DO NOT pass a callback function then a [IPromise](https://nevware21.github.io/ts-async/typedoc/interfaces/IPromise.html)\r\n     * will be returned which will resolve once the flush is complete. The actual implementation of the `IPromise`\r\n     * will be a native Promise (if supported) or the default as supplied by [ts-async library](https://github.com/nevware21/ts-async)\r\n     * @param async - send data asynchronously when true\r\n     * @param callBack - if specified, notify caller when send is complete, the channel should return true to indicate to the caller that it will be called.\r\n     * If the caller doesn't return true the caller should assume that it may never be called.\r\n     * @returns - If a callback is provided `true` to indicate that callback will be called after the flush is complete otherwise the caller\r\n     * should assume that any provided callback will never be called, Nothing or if occurring asynchronously a\r\n     * [IPromise](https://nevware21.github.io/ts-async/typedoc/interfaces/IPromise.html) which will be resolved once the unload is complete,\r\n     * the [IPromise](https://nevware21.github.io/ts-async/typedoc/interfaces/IPromise.html) will only be returned when no callback is provided\r\n     * and async is true.\r\n     */\r\n    AppInsightsSku.prototype.flush = function (async, callBack) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Manually trigger an immediate send of all telemetry still in the buffer using beacon Sender.\r\n     * Fall back to xhr sender if beacon is not supported.\r\n     * @param [async=true]\r\n     * @memberof Initialization\r\n     */\r\n    AppInsightsSku.prototype.onunloadFlush = function (async) {\r\n        if (async === void 0) { async = true; }\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Initialize this instance of ApplicationInsights\r\n     * @returns {IApplicationInsights}\r\n     * @memberof Initialization\r\n     * @param legacyMode - MUST always be false, it is no longer supported from v3.x onwards\r\n     */\r\n    AppInsightsSku.prototype.loadAppInsights = function (legacyMode, logger, notificationManager) {\r\n        if (legacyMode === void 0) { legacyMode = false; }\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Overwrite the lazy loaded fields of global window snippet to contain the\r\n     * actual initialized API methods\r\n     * @param snippet\r\n     * @memberof Initialization\r\n     */\r\n    AppInsightsSku.prototype.updateSnippetDefinitions = function (snippet) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Call any functions that were queued before the main script was loaded\r\n     * @memberof Initialization\r\n     */\r\n    AppInsightsSku.prototype.emptyQueue = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AppInsightsSku.prototype.pollInternalLogs = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AppInsightsSku.prototype.stopPollingInternalLogs = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AppInsightsSku.prototype.addHousekeepingBeforeUnload = function (appInsightsInstance) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AppInsightsSku.prototype.getSender = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Unload and Tear down the SDK and any initialized plugins, after calling this the SDK will be considered\r\n     * to be un-initialized and non-operational, re-initializing the SDK should only be attempted if the previous\r\n     * unload call return `true` stating that all plugins reported that they also unloaded, the recommended\r\n     * approach is to create a new instance and initialize that instance.\r\n     * This is due to possible unexpected side effects caused by plugins not supporting unload / teardown, unable\r\n     * to successfully remove any global references or they may just be completing the unload process asynchronously.\r\n     * If you pass isAsync as true and do not provide\r\n     * If you pass isAsync as `true` (also the default) and DO NOT pass a callback function then an [IPromise](https://nevware21.github.io/ts-async/typedoc/interfaces/IPromise.html)\r\n     * will be returned which will resolve once the unload is complete. The actual implementation of the `IPromise`\r\n     * will be a native Promise (if supported) or the default as supplied by [ts-async library](https://github.com/nevware21/ts-async)\r\n     * @param isAsync - Can the unload be performed asynchronously (default)\r\n     * @param unloadComplete - An optional callback that will be called once the unload has completed\r\n     * @param cbTimeout - An optional timeout to wait for any flush operations to complete before proceeding with the\r\n     * unload. Defaults to 5 seconds.\r\n     * @return Nothing or if occurring asynchronously a [IPromise](https://nevware21.github.io/ts-async/typedoc/interfaces/IPromise.html)\r\n     * which will be resolved once the unload is complete, the [IPromise](https://nevware21.github.io/ts-async/typedoc/interfaces/IPromise.html)\r\n     * will only be returned when no callback is provided and isAsync is true\r\n     */\r\n    AppInsightsSku.prototype.unload = function (isAsync, unloadComplete, cbTimeout) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    AppInsightsSku.prototype.getPlugin = function (pluginIdentifier) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Add a new plugin to the installation\r\n     * @param plugin - The new plugin to add\r\n     * @param replaceExisting - should any existing plugin be replaced, default is false\r\n     * @param doAsync - Should the add be performed asynchronously\r\n     * @param addCb - [Optional] callback to call after the plugin has been added\r\n     */\r\n    AppInsightsSku.prototype.addPlugin = function (plugin, replaceExisting, doAsync, addCb) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Update the configuration used and broadcast the changes to all loaded plugins\r\n     * @param newConfig - The new configuration is apply\r\n     * @param mergeExisting - Should the new configuration merge with the existing or just replace it. Default is to merge.\r\n     */\r\n    AppInsightsSku.prototype.updateCfg = function (newConfig, mergeExisting) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Returns the unique event namespace that should be used\r\n     */\r\n    AppInsightsSku.prototype.evtNamespace = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Add an unload handler that will be called when the SDK is being unloaded\r\n     * @param handler - the handler\r\n     */\r\n    AppInsightsSku.prototype.addUnloadCb = function (handler) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Add an ajax listener which is called just prior to the request being sent and before the correlation headers are added, to allow you\r\n     * to access the headers and modify the values used to generate the distributed tracing correlation headers. (added in v2.8.4)\r\n     * @param dependencyListener - The Telemetry Initializer function\r\n     * @returns - A IDependencyListenerHandler to enable the initializer to be removed\r\n     */\r\n    AppInsightsSku.prototype.addDependencyListener = function (dependencyListener) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Add an dependency telemetry initializer callback function to allow populating additional properties or drop the request.\r\n     * It is called after the dependency call has completed and any available performance details are available. A dependency\r\n     * initializer is similar to the TelemetryInitializer function but it allows you to block the reporting of the dependency\r\n     * request so that it doesn't count against the `maxAjaxCallsPerView`.\r\n     * @param dependencyInitializer - The Dependency Telemetry Initializer function\r\n     * @returns - A IDependencyInitializerHandler to enable the initializer to be removed\r\n     */\r\n    AppInsightsSku.prototype.addDependencyInitializer = function (dependencyInitializer) {\r\n        return null;\r\n    };\r\n    /**\r\n     * Gets the current distributed trace context for this instance if available\r\n     */\r\n    AppInsightsSku.prototype.getTraceCtx = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Watches and tracks changes for accesses to the current config, and if the accessed config changes the\r\n     * handler will be recalled.\r\n     * @param handler\r\n     * @returns A watcher handler instance that can be used to remove itself when being unloaded\r\n     */\r\n    AppInsightsSku.prototype.onCfgChange = function (handler) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    return AppInsightsSku;\r\n}());\r\nexport { AppInsightsSku };\r\n// tslint:disable-next-line\r\nexport function _findSdkSourceFile() {\r\n    if (_internalSdkSrc) {\r\n        // Use the cached value\r\n        return _internalSdkSrc;\r\n    }\r\n    var sdkSrc = null;\r\n    var isModule = false;\r\n    var cdns = [\r\n        \"://js.monitor.azure.com/\",\r\n        \"://az416426.vo.msecnd.net/\"\r\n    ];\r\n    try {\r\n        // Try and determine whether the sdk is being loaded from the CDN\r\n        // currentScript is only valid during initial processing\r\n        var scrpt = (document || {}).currentScript;\r\n        if (scrpt) {\r\n            sdkSrc = scrpt.src;\r\n            // } else {\r\n            //     // We need to update to at least typescript 2.9 for this to work :-(\r\n            //     // Leaving as a stub for now so after we upgrade this breadcrumb is available\r\n            //     let meta = import.meta;\r\n            //     sdkSrc = (meta || {}).url;\r\n            //     isModule = true;\r\n        }\r\n    }\r\n    catch (e) {\r\n        // eslint-disable-next-line no-empty\r\n    }\r\n    if (sdkSrc) {\r\n        try {\r\n            var url_1 = sdkSrc.toLowerCase();\r\n            if (url_1) {\r\n                var src_1 = \"\";\r\n                arrForEach(cdns, function (value, idx) {\r\n                    if (strIndexOf(url_1, value) !== -1) {\r\n                        src_1 = \"cdn\" + (idx + 1);\r\n                        if (strIndexOf(url_1, \"/scripts/\") === -1) {\r\n                            if (strIndexOf(url_1, \"/next/\") !== -1) {\r\n                                src_1 += \"-next\";\r\n                            }\r\n                            else if (strIndexOf(url_1, \"/beta/\") !== -1) {\r\n                                src_1 += \"-beta\";\r\n                            }\r\n                        }\r\n                        _internalSdkSrc = src_1 + (isModule ? \".mod\" : \"\");\r\n                        return -1;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        catch (e) {\r\n            // eslint-disable-next-line no-empty\r\n        }\r\n        // Cache the found value so we don't have to look it up again\r\n        _internalSdkSrc = sdkSrc;\r\n    }\r\n    return _internalSdkSrc;\r\n}\r\n//# sourceMappingURL=AISku.js.map", "import { throwUnsupported } from \"@nevware21/ts-utils\";\r\nimport { AppInsightsSku } from \"./AISku\";\r\nimport { _DYN_UPDATE_SNIPPET_DEFIN3 } from \"./__DynamicConstants\";\r\nvar ApplicationInsightsContainer = /** @class */ (function () {\r\n    function ApplicationInsightsContainer() {\r\n    }\r\n    ApplicationInsightsContainer.getAppInsights = function (snippet, version) {\r\n        var theSku = new AppInsightsSku(snippet);\r\n        // Two target scenarios:\r\n        // Removed: 1. Customer runs v1 snippet + runtime. If customer updates just cdn location to new SDK, it will run in compat mode so old apis work\r\n        // 2. Customer updates to new snippet (that uses cdn location to new SDK. This is same as a new customer onboarding\r\n        // and all api signatures are expected to map to new SDK. Note new snippet specifies version\r\n        if (version >= 2.0) {\r\n            theSku[_DYN_UPDATE_SNIPPET_DEFIN3 /* @min:%2eupdateSnippetDefinitions */](snippet);\r\n            theSku.loadAppInsights(false);\r\n            return theSku; // default behavior with new snippet\r\n        }\r\n        throwUnsupported(\"V1 API compatibility is no longer supported\");\r\n    };\r\n    return ApplicationInsightsContainer;\r\n}());\r\nexport { ApplicationInsightsContainer };\r\n//# sourceMappingURL=ApplicationInsightsContainer.js.map"],
  "mappings": "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",
  "names": ["PageViewManager", "PageViewPerformanceManager", "PageVisitTimeManager", "PageVisitData", "Timing", "name", "AnalyticsPlugin", "Event", "_throwInternal", "_a", "_a", "_a", "CfgSyncPlugin", "_fetchFn", "_DYN_LENGTH", "_DYN_DATA_TYPE", "_DYN_ENVELOPE_TYPE", "_DYN_TO_STRING", "_DYN_DIAG_LOG", "_DYN_LENGTH", "tg", "_DYN_DATA_TYPE", "_DYN_ENVELOPE_TYPE", "Event", "_DYN_TO_STRING", "BaseSendBuffer", "_DYN_LENGTH", "ArraySendBuffer", "SessionStorageSendBuffer", "_b", "_DYN_LENGTH", "buffer", "_a", "Serializer", "_DYN_TO_STRING", "isArray", "_DYN_LENGTH", "HashCodeScoreGenerator", "_DYN_LENGTH", "SamplingScoreGenerator", "Sample", "_DYN_DATA_TYPE", "_a", "_chkSampling", "Event", "Sender", "_DYN_DIAG_LOG", "config", "_DYN_LENGTH", "objExtend", "STR_DURATION", "_DYN_LENGTH", "_DYN_TRACE_ID", "_DYN__ADD_HOOK", "_DYN_CORE", "_DYN_START_TIME", "_DYN_NAME", "_DYN_EXCEPTION", "STR_DURATION", "XHRMonitoringState", "ajaxRecord", "_a", "_DYN_TRACE_ID", "self", "_DYN_NAME", "_DYN_START_TIME", "_DYN_LENGTH", "traceCtx", "_a", "_a", "_b", "_DYN_EXCEPTION", "_DYN_LENGTH", "_DYN_CORE", "_DYN_TRACE_ID", "_defaultConfig", "AjaxMonitor", "_DYN__ADD_HOOK", "_DYN_START_TIME", "config", "fetch", "_getResponseText", "_DYN_NAME", "properties", "Application", "Device", "Internal", "Location", "_DYN_LENGTH", "Session", "_SessionManager", "_DYN_LENGTH", "TelemetryTrace", "User", "_DYN_LENGTH", "_DYN_LENGTH", "TelemetryContext", "_a", "_defaultConfig", "PropertiesPlugin", "_DYN_INSTRUMENTATION_KEY", "_DYN_CONTEXT", "_a", "_b", "UNDEFINED_VALUE", "_DYN_INSTRUMENTATION_KEY", "AppInsightsSku", "cs", "url", "ingest", "snippet", "_DYN_CONTEXT", "ApplicationInsightsContainer"]
}
