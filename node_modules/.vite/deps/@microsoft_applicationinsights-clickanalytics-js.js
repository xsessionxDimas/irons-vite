import {
  BaseTelemetryPlugin,
  PropertiesPluginIdentifier,
  __extendsFn,
  _throwInternal,
  arrForEach,
  cfgDfFunc,
  cfgDfMerge,
  cfgDfString,
  cfgDfValidate,
  createProcessTelemetryContext,
  createUniqueNamespace,
  dumpObj,
  dynamicProto,
  eventOff,
  eventOn,
  getDocument,
  getExceptionName,
  getLocation,
  getPerformance,
  getWindow,
  hasDocument,
  hasWindow,
  isFunction,
  isNullOrUndefined,
  mergeEvtNamespace,
  objDeepFreeze,
  objExtend2 as objExtend,
  objForEachKey,
  onConfigChange,
  strNotSpecified,
  strSubstring,
  strTrim,
  throwError,
  unloadComponents
} from "./chunk-6YZSP5GA.js";
import "./chunk-PR4QN5HX.js";

// node_modules/@microsoft/applicationinsights-clickanalytics-js/dist-es5/__DynamicConstants.js
var _DYN_INDEX_OF = "indexOf";
var _DYN_LENGTH = "length";
var _DYN_TRACK_PAGE_ACTION = "trackPageAction";
var _DYN_PAGE_ACTION_PAGE_TAG0 = "pageActionPageTags";
var _DYN__DO_UNLOAD = "_doUnload";
var _DYN_PAGE_NAME = "pageName";
var _DYN_CONTENT_NAME = "contentName";
var _DYN_REQUEST_URI = "requestUri";
var _DYN_PAGE_TYPE = "pageType";
var _DYN_USE_DEFAULT_CONTENT_1 = "useDefaultContentNameOrId";
var _DYN_CAPTURE_ALL_META_DAT2 = "captureAllMetaDataContent";
var _DYN_META_DATA_PREFIX = "metaDataPrefix";
var _DYN_PARENT_DATA_TAG = "parentDataTag";
var _DYN_BEHAVIOR_VALIDATOR = "behaviorValidator";
var _DYN_DEFAULT_RIGHT_CLICK_3 = "defaultRightClickBhvr";
var _DYN_TAG_NAME = "tagName";
var _DYN_TO_UPPER_CASE = "toUpperCase";
var _DYN_PATHNAME = "pathname";
var _DYN_CORE_DATA = "coreData";
var _DYN_GET_ATTRIBUTE = "getAttribute";
var _DYN_PARENT_NODE = "parentNode";
var _DYN_CUSTOM_DATA_PREFIX = "customDataPrefix";
var _DYN_NAME = "name";
var _DYN_DATA = "data";
var _DYN_PROPERTIES = "properties";
var _DYN_ACTION_TYPE = "actionType";
var _DYN_BEHAVIOR = "behavior";
var _DYN_CLICK_COORDINATES = "clickCoordinates";
var _DYN_CONTENT = "content";
var _DYN_REF_URI = "refUri";
var _DYN_PARENT_ID = "parentId";
var _DYN_CAPTURE_PAGE_ACTION = "capturePageAction";
var _DYN_SET_COMMON_PROPERTIE4 = "setCommonProperties";
var _DYN_GET_ELEMENT_CONTENT = "getElementContent";
var _DYN__GET_VALID_BEHAVIOR = "_getValidBehavior";
var _DYN__TRACE_LOGGER = "_traceLogger";
var _DYN_CLICK_COORDINATE_X = "clickCoordinateX";
var _DYN_CLICK_COORDINATE_Y = "clickCoordinateY";
var _DYN__CONFIG = "_config";
var _DYN_DATA_TAGS = "dataTags";
var _DYN__PAGE_TAGS = "_pageTags";
var _DYN__PAGE_TAGS_CALLBACK = "_pageTagsCallback";
var _DYN__META_TAGS = "_metaTags";
var _DYN_SET_BASIC_PROPERTIES = "setBasicProperties";
var _DYN__PAGE_TYPE_META_TAG = "_pageTypeMetaTag";
var _DYN__BEHAVIOR_META_TAG = "_behaviorMetaTag";
var _DYN_PARENT_ELEMENT = "parentElement";
var _DYN_ATTRIBUTES = "attributes";

// node_modules/@microsoft/applicationinsights-clickanalytics-js/dist-es5/common/Utils.js
var DEFAULT_DONOT_TRACK_TAG = "ai-dnt";
var DEFAULT_AI_BLOB_ATTRIBUTE_TAG = "ai-blob";
var DEFAULT_DATA_PREFIX = "data-";
function removeInvalidElements(object) {
  for (var property in object) {
    if (!isValueAssigned(object[property]) || JSON.stringify(object[property]) === "{}" && property !== "callback") {
      delete object[property];
    }
  }
}
function isValueAssigned(value) {
  return !(isNullOrUndefined(value) || value === "");
}
function isRightClick(evt) {
  try {
    if ("which" in evt) {
      return evt.which === 3;
    } else if ("button" in evt) {
      return evt.button === 2;
    }
  } catch (e) {
  }
}
function isLeftClick(evt) {
  try {
    if ("which" in evt) {
      return evt.which === 1;
    } else if ("button" in evt) {
      return evt.button === 1;
    }
  } catch (e) {
  }
}
function isMiddleClick(evt) {
  try {
    if ("which" in evt) {
      return evt.which === 2;
    } else if ("button" in evt) {
      return evt.button === 4;
    }
  } catch (e) {
  }
}
function isKeyboardEnter(evt) {
  try {
    if ("keyCode" in evt) {
      return evt.keyCode === 13;
    }
  } catch (e) {
  }
}
function isKeyboardSpace(evt) {
  try {
    if ("keyCode" in evt) {
      return evt.keyCode === 32;
    }
  } catch (e) {
  }
}
function isElementDnt(element, doNotTrackFieldName) {
  var dntElement = findClosestByAttribute(element, doNotTrackFieldName);
  if (!isValueAssigned(dntElement)) {
    return false;
  }
  return true;
}
function findClosestByAttribute(el, attribute) {
  return walkUpDomChainWithElementValidation(el, isAttributeInElement, attribute);
}
function isAttributeInElement(element, attributeToLookFor) {
  var value = element[
    _DYN_GET_ATTRIBUTE
    /* @min:%2egetAttribute */
  ](attributeToLookFor);
  return isValueAssigned(value);
}
function walkUpDomChainWithElementValidation(el, validationMethod, validationMethodParam) {
  var element = el;
  if (element) {
    while (!validationMethod(element, validationMethodParam)) {
      element = element[
        _DYN_PARENT_NODE
        /* @min:%2eparentNode */
      ];
      if (!element || !element[
        _DYN_GET_ATTRIBUTE
        /* @min:%2egetAttribute */
      ]) {
        return null;
      }
    }
    return element;
  }
}
function isElementAnAnchor(element) {
  return element.nodeName === "A";
}
function findClosestAnchor(element) {
  return walkUpDomChainWithElementValidation(element, isElementAnAnchor);
}
function extractFieldFromObject(obj, fieldName) {
  var fieldValue;
  if (obj && obj[fieldName]) {
    fieldValue = obj[fieldName];
    delete obj[fieldName];
  }
  return fieldValue;
}
function bracketIt(str) {
  return "[" + str + "]";
}
function BehaviorMapValidator(map) {
  return function(key) {
    return map[key] || "";
  };
}
function BehaviorValueValidator(behaviorArray) {
  return function(key) {
    var result;
    arrForEach(behaviorArray, function(value) {
      if (value === key) {
        result = value;
        return -1;
      }
    });
    return result || "";
  };
}
function BehaviorEnumValidator(enumObj) {
  return function(key) {
    return enumObj[key] || "";
  };
}

// node_modules/@microsoft/applicationinsights-clickanalytics-js/dist-es5/DataCollector.js
var clickCaptureInputTypes = { BUTTON: true, CHECKBOX: true, RADIO: true, RESET: true, SUBMIT: true };
function getImageHref(element) {
  var temp = element;
  if (temp) {
    var parent = findClosestAnchor(temp);
    if (parent[
      _DYN_LENGTH
      /* @min:%2elength */
    ] === 1) {
      var firstParent = parent[0];
      if (firstParent.href) {
        return firstParent.href;
      } else if (firstParent.src) {
        return firstParent.src;
      }
    }
  }
  return "";
}
function getClickTarget(element) {
  var clickTarget = "";
  switch (element[
    _DYN_TAG_NAME
    /* @min:%2etagName */
  ]) {
    case "A":
    case "AREA":
      clickTarget = element.href || "";
      break;
    case "IMG":
      clickTarget = getImageHref(element);
      break;
    case "INPUT":
      var type = element.type;
      if (type && clickCaptureInputTypes[type[
        _DYN_TO_UPPER_CASE
        /* @min:%2etoUpperCase */
      ]()]) {
        var loc = getLocation() || {};
        if (element.form) {
          clickTarget = element.form.action || (loc[
            _DYN_PATHNAME
            /* @min:%2epathname */
          ] || "");
        } else {
          clickTarget = loc[
            _DYN_PATHNAME
            /* @min:%2epathname */
          ] || "";
        }
      }
      break;
    default:
      break;
  }
  return clickTarget;
}
function getPageName(config, overrideValues) {
  if (overrideValues && overrideValues[
    _DYN_PAGE_NAME
    /* @min:%2epageName */
  ]) {
    return overrideValues[
      _DYN_PAGE_NAME
      /* @min:%2epageName */
    ];
  } else if (config.callback && isFunction(config.callback[
    _DYN_PAGE_NAME
    /* @min:%2epageName */
  ])) {
    return config.callback[
      _DYN_PAGE_NAME
      /* @min:%2epageName */
    ]();
  } else if (config.coreData && config.coreData[
    _DYN_PAGE_NAME
    /* @min:%2epageName */
  ]) {
    return config.coreData[
      _DYN_PAGE_NAME
      /* @min:%2epageName */
    ];
  } else {
    var doc = getDocument();
    return doc && doc.title || "";
  }
}
function sanitizeUrl(config, location) {
  if (!location) {
    return null;
  }
  var url = location.protocol + "//" + (location.hostname || location.host) + // location.hostname is not supported on Opera and Opera for Android
  (isValueAssigned(location.port) ? ":" + location.port : "") + location[
    _DYN_PATHNAME
    /* @min:%2epathname */
  ];
  if (!!config.urlCollectHash) {
    url += isValueAssigned(location.hash) ? location.hash : "";
  }
  if (!!config.urlCollectQuery) {
    url += isValueAssigned(location.search) ? location.search : "";
  }
  return url;
}
function getUri(config, location) {
  if (config.coreData && config.coreData[
    _DYN_REQUEST_URI
    /* @min:%2erequestUri */
  ] && config[
    _DYN_CORE_DATA
    /* @min:%2ecoreData */
  ][
    _DYN_REQUEST_URI
    /* @min:%2erequestUri */
  ] !== "") {
    return config.coreData[
      _DYN_REQUEST_URI
      /* @min:%2erequestUri */
    ];
  }
  return sanitizeUrl(config, location);
}

// node_modules/@microsoft/applicationinsights-clickanalytics-js/dist-es5/events/WebEvent.js
var WebEvent = (
  /** @class */
  function() {
    function WebEvent2(clickAnalyticsPlugin, config, contentHandler, pageTagsCallback, metaTags, traceLogger) {
      dynamicProto(WebEvent2, this, function(_self) {
        _initDefaults();
        function _initDefaults() {
          _self[
            _DYN__PAGE_TAGS
            /* @min:%2e_pageTags */
          ] = {};
          _self._clickAnalyticsPlugin = clickAnalyticsPlugin;
          _self[
            _DYN__CONFIG
            /* @min:%2e_config */
          ] = config;
          _self._contentHandler = contentHandler;
          _self[
            _DYN__PAGE_TAGS_CALLBACK
            /* @min:%2e_pageTagsCallback */
          ] = pageTagsCallback;
          _self[
            _DYN__META_TAGS
            /* @min:%2e_metaTags */
          ] = metaTags;
          _self[
            _DYN__TRACE_LOGGER
            /* @min:%2e_traceLogger */
          ] = traceLogger;
        }
        _self[
          _DYN_SET_BASIC_PROPERTIES
          /* @min:%2esetBasicProperties */
        ] = function(event, overrideValues) {
          if (!isValueAssigned(event[
            _DYN_NAME
            /* @min:%2ename */
          ])) {
            event[
              _DYN_PAGE_NAME
              /* @min:%2epageName */
            ] = getPageName(_self[
              _DYN__CONFIG
              /* @min:%2e_config */
            ], overrideValues);
          }
          if (!isValueAssigned(event.uri) && hasWindow()) {
            event.uri = getUri(_self[
              _DYN__CONFIG
              /* @min:%2e_config */
            ], getLocation());
          }
        };
        _self[
          _DYN_SET_COMMON_PROPERTIE4
          /* @min:%2esetCommonProperties */
        ] = function(event, overrideValues) {
          _self[
            _DYN_SET_BASIC_PROPERTIES
            /* @min:%2esetBasicProperties */
          ](event, overrideValues);
          _self._setPageTags(event, overrideValues);
          _self._pageTypeMetaTag = _getMetaData(_self._metaTags, _self._config[
            _DYN_CORE_DATA
            /* @min:%2ecoreData */
          ], "pageType");
          _self._behaviorMetaTag = _getMetaData(_self._metaTags, _self._config[
            _DYN_CORE_DATA
            /* @min:%2ecoreData */
          ], "behavior");
          if (isValueAssigned(overrideValues[
            _DYN_PAGE_TYPE
            /* @min:%2epageType */
          ])) {
            event[
              _DYN_PAGE_TYPE
              /* @min:%2epageType */
            ] = overrideValues[
              _DYN_PAGE_TYPE
              /* @min:%2epageType */
            ];
          }
          if (isValueAssigned(_self._pageTypeMetaTag) && !isValueAssigned(event[
            _DYN_PAGE_TYPE
            /* @min:%2epageType */
          ])) {
            event[
              _DYN_PAGE_TYPE
              /* @min:%2epageType */
            ] = _self[
              _DYN__PAGE_TYPE_META_TAG
              /* @min:%2e_pageTypeMetaTag */
            ];
          }
        };
        _self._setPageTags = function(event, overrideValues) {
          if (_self[
            _DYN__PAGE_TAGS_CALLBACK
            /* @min:%2e_pageTagsCallback */
          ]) {
            _self[
              _DYN__PAGE_TAGS
              /* @min:%2e_pageTags */
            ] = objExtend(true, _self[
              _DYN__PAGE_TAGS
              /* @min:%2e_pageTags */
            ], _self[
              _DYN__PAGE_TAGS_CALLBACK
              /* @min:%2e_pageTagsCallback */
            ]());
          }
          if (isValueAssigned(overrideValues.pageTags)) {
            _self[
              _DYN__PAGE_TAGS
              /* @min:%2e_pageTags */
            ] = objExtend(true, _self[
              _DYN__PAGE_TAGS
              /* @min:%2e_pageTags */
            ], overrideValues.pageTags);
          }
          if (_self[
            _DYN__META_TAGS
            /* @min:%2e_metaTags */
          ]) {
            _self[
              _DYN__PAGE_TAGS
              /* @min:%2e_pageTags */
            ].metaTags = {};
            for (var metaTag in _self[
              _DYN__META_TAGS
              /* @min:%2e_metaTags */
            ]) {
              if (metaTag != "behavior" && metaTag != "market" && metaTag != "pageType") {
                _self[
                  _DYN__PAGE_TAGS
                  /* @min:%2e_pageTags */
                ].metaTags[metaTag] = _self[
                  _DYN__META_TAGS
                  /* @min:%2e_metaTags */
                ][metaTag];
              }
            }
          }
          event[
            _DYN_PROPERTIES
            /* @min:%2eproperties */
          ] = event[
            _DYN_PROPERTIES
            /* @min:%2eproperties */
          ] || {};
          event[
            _DYN_PROPERTIES
            /* @min:%2eproperties */
          ]["pageTags"] = _self[
            _DYN__PAGE_TAGS
            /* @min:%2e_pageTags */
          ];
        };
        _self._getBehavior = function(overrideValues) {
          var behavior;
          if (overrideValues && isValueAssigned(overrideValues[
            _DYN_BEHAVIOR
            /* @min:%2ebehavior */
          ])) {
            behavior = overrideValues[
              _DYN_BEHAVIOR
              /* @min:%2ebehavior */
            ];
          } else if (isValueAssigned(_self[
            _DYN__BEHAVIOR_META_TAG
            /* @min:%2e_behaviorMetaTag */
          ])) {
            behavior = _self[
              _DYN__BEHAVIOR_META_TAG
              /* @min:%2e_behaviorMetaTag */
            ];
          }
          return _self[
            _DYN__GET_VALID_BEHAVIOR
            /* @min:%2e_getValidBehavior */
          ](behavior);
        };
        _self[
          _DYN__GET_VALID_BEHAVIOR
          /* @min:%2e_getValidBehavior */
        ] = function(behavior) {
          return _self._config[
            _DYN_BEHAVIOR_VALIDATOR
            /* @min:%2ebehaviorValidator */
          ](behavior);
        };
        _self[
          _DYN__DO_UNLOAD
          /* @min:%2e_doUnload */
        ] = function(unloadCtx, unloadState, asyncCallback) {
          _initDefaults();
        };
        function _getMetaData(metaTags2, coreData, metaTagName) {
          if (coreData && coreData[metaTagName]) {
            return coreData[metaTagName];
          }
          if (metaTags2) {
            return metaTags2[metaTagName];
          }
          return "";
        }
      });
    }
    WebEvent2.__ieDyn = 1;
    return WebEvent2;
  }()
);

// node_modules/@microsoft/applicationinsights-clickanalytics-js/dist-es5/events/PageAction.js
var PageAction = (
  /** @class */
  function(_super) {
    __extendsFn(PageAction2, _super);
    function PageAction2(clickAnalyticsPlugin, config, contentHandler, pageTagsCallback, metaTags, traceLogger) {
      var _this = _super.call(this, clickAnalyticsPlugin, config, contentHandler, pageTagsCallback, metaTags, traceLogger) || this;
      dynamicProto(PageAction2, _this, function(_self, _base) {
        _self[
          _DYN_TRACK_PAGE_ACTION
          /* @min:%2etrackPageAction */
        ] = function(pageActionEvent, properties) {
          var ext = {};
          ext["web"] = {};
          var event = {
            name: "Microsoft.ApplicationInsights.{0}.Event",
            baseType: "EventData",
            ext,
            data: {},
            baseData: {}
          };
          _populateEventDataIfPresent(event.baseData, "name", pageActionEvent[
            _DYN_NAME
            /* @min:%2ename */
          ]);
          _populateEventDataIfPresent(event[
            _DYN_DATA
            /* @min:%2edata */
          ], "baseTypeSource", "ClickEvent");
          _populateEventDataIfPresent(event[
            _DYN_DATA
            /* @min:%2edata */
          ], "uri", pageActionEvent.uri);
          _populateEventDataIfPresent(event.data, "pageType", pageActionEvent[
            _DYN_PAGE_TYPE
            /* @min:%2epageType */
          ]);
          _populateEventDataIfPresent(event[
            _DYN_DATA
            /* @min:%2edata */
          ], "properties", pageActionEvent[
            _DYN_PROPERTIES
            /* @min:%2eproperties */
          ]);
          _populateEventDataIfPresent(event[
            _DYN_DATA
            /* @min:%2edata */
          ], "actionType", pageActionEvent[
            _DYN_ACTION_TYPE
            /* @min:%2eactionType */
          ]);
          _populateEventDataIfPresent(event[
            _DYN_DATA
            /* @min:%2edata */
          ], "behavior", pageActionEvent[
            _DYN_BEHAVIOR
            /* @min:%2ebehavior */
          ]);
          _populateEventDataIfPresent(event[
            _DYN_DATA
            /* @min:%2edata */
          ], "clickCoordinates", pageActionEvent[
            _DYN_CLICK_COORDINATES
            /* @min:%2eclickCoordinates */
          ]);
          _populateEventDataIfPresent(event[
            _DYN_DATA
            /* @min:%2edata */
          ], "content", pageActionEvent[
            _DYN_CONTENT
            /* @min:%2econtent */
          ]);
          _populateEventDataIfPresent(event[
            _DYN_DATA
            /* @min:%2edata */
          ], "targetUri", pageActionEvent.targetUri);
          _populateEventDataIfPresent(event[
            _DYN_DATA
            /* @min:%2edata */
          ], "timeToAction", pageActionEvent.timeToAction);
          _populateEventDataIfPresent(event[
            _DYN_DATA
            /* @min:%2edata */
          ], "refUri", pageActionEvent[
            _DYN_REF_URI
            /* @min:%2erefUri */
          ]);
          _populateEventDataIfPresent(event.data, "pageName", pageActionEvent[
            _DYN_PAGE_NAME
            /* @min:%2epageName */
          ]);
          _populateEventDataIfPresent(event[
            _DYN_DATA
            /* @min:%2edata */
          ], "parentId", pageActionEvent[
            _DYN_PARENT_ID
            /* @min:%2eparentId */
          ]);
          if (properties) {
            objForEachKey(properties, function(property, value) {
              if (!event[
                _DYN_DATA
                /* @min:%2edata */
              ][property]) {
                _populateEventDataIfPresent(event[
                  _DYN_DATA
                  /* @min:%2edata */
                ], property, value);
              }
            });
          }
          _self._clickAnalyticsPlugin.core.track(event);
        };
        _self[
          _DYN_CAPTURE_PAGE_ACTION
          /* @min:%2ecapturePageAction */
        ] = function(element, overrideValues, customProperties, isRightClick2) {
          overrideValues = !isValueAssigned(overrideValues) ? {} : overrideValues;
          var pageActionEvent = { name: "" };
          var pageActionProperties = isValueAssigned(customProperties) ? customProperties : {};
          _self[
            _DYN_SET_COMMON_PROPERTIE4
            /* @min:%2esetCommonProperties */
          ](pageActionEvent, overrideValues);
          pageActionEvent[
            _DYN_BEHAVIOR
            /* @min:%2ebehavior */
          ] = _self._getBehavior(overrideValues);
          var elementContent = {};
          if (isRightClick2) {
            pageActionEvent.behavior = _self._config[
              _DYN_DEFAULT_RIGHT_CLICK_3
              /* @min:%2edefaultRightClickBhvr */
            ];
          }
          if (element) {
            pageActionEvent.targetUri = getClickTarget(element);
            elementContent = _self._contentHandler[
              _DYN_GET_ELEMENT_CONTENT
              /* @min:%2egetElementContent */
            ](element);
            if (elementContent.bhvr && !isValueAssigned(overrideValues[
              _DYN_BEHAVIOR
              /* @min:%2ebehavior */
            ])) {
              var currentBehavior = extractFieldFromObject(elementContent, "bhvr");
              pageActionEvent[
                _DYN_BEHAVIOR
                /* @min:%2ebehavior */
              ] = _self[
                _DYN__GET_VALID_BEHAVIOR
                /* @min:%2e_getValidBehavior */
              ](currentBehavior);
            }
            if (!isValueAssigned(elementContent.id) && !isValueAssigned(elementContent[
              _DYN_CONTENT_NAME
              /* @min:%2econtentName */
            ])) {
              _throwInternal(_self[
                _DYN__TRACE_LOGGER
                /* @min:%2e_traceLogger */
              ], 2, 102, "Missing attributes id or contentName in click event. Click event information will still be collected!");
            }
          }
          pageActionEvent.name = elementContent.id || elementContent[
            _DYN_CONTENT_NAME
            /* @min:%2econtentName */
          ] || strNotSpecified;
          pageActionEvent[
            _DYN_PARENT_ID
            /* @min:%2eparentId */
          ] = elementContent.parentid || elementContent.parentName || strNotSpecified;
          if (isValueAssigned(overrideValues[
            _DYN_ACTION_TYPE
            /* @min:%2eactionType */
          ])) {
            pageActionEvent[
              _DYN_ACTION_TYPE
              /* @min:%2eactionType */
            ] = overrideValues[
              _DYN_ACTION_TYPE
              /* @min:%2eactionType */
            ];
          }
          if (isValueAssigned(overrideValues[
            _DYN_CLICK_COORDINATE_X
            /* @min:%2eclickCoordinateX */
          ]) && isValueAssigned(overrideValues[
            _DYN_CLICK_COORDINATE_Y
            /* @min:%2eclickCoordinateY */
          ])) {
            pageActionEvent[
              _DYN_CLICK_COORDINATES
              /* @min:%2eclickCoordinates */
            ] = overrideValues[
              _DYN_CLICK_COORDINATE_X
              /* @min:%2eclickCoordinateX */
            ] + "X" + overrideValues[
              _DYN_CLICK_COORDINATE_Y
              /* @min:%2eclickCoordinateY */
            ];
          }
          _sanitizePageActionEventContent(elementContent);
          pageActionEvent[
            _DYN_CONTENT
            /* @min:%2econtent */
          ] = bracketIt(JSON.stringify(objExtend(elementContent, overrideValues && overrideValues.contentTags ? overrideValues.contentTags : {})));
          pageActionEvent.timeToAction = _getTimeToClick();
          pageActionEvent.refUri = isValueAssigned(overrideValues.refUri) ? overrideValues.refUri : _self._config[
            _DYN_CORE_DATA
            /* @min:%2ecoreData */
          ].referrerUri;
          if (_isUndefinedEvent(pageActionEvent)) {
            return;
          }
          _self[
            _DYN_TRACK_PAGE_ACTION
            /* @min:%2etrackPageAction */
          ](pageActionEvent, pageActionProperties);
        };
        function _getTimeToClick() {
          var perf = getPerformance();
          if (perf && perf.timing) {
            var isNavigationStart = perf.timing.navigationStart;
            if (isNavigationStart && isNavigationStart !== 0) {
              return (/* @__PURE__ */ new Date()).getTime() - isNavigationStart;
            }
          }
          return -1;
        }
        function _populateEventDataIfPresent(obj, property, value) {
          if (isValueAssigned(value)) {
            obj[property] = value;
          }
        }
        function _sanitizePageActionEventContent(pageActionContent) {
          if (pageActionContent) {
            delete pageActionContent.id;
            delete pageActionContent.parentid;
            delete pageActionContent.parentname;
            if (_self._config && _self._config.dataTags && isValueAssigned(_self._config.dataTags[
              _DYN_PARENT_DATA_TAG
              /* @min:%2eparentDataTag */
            ])) {
              delete pageActionContent[_self[
                _DYN__CONFIG
                /* @min:%2e_config */
              ][
                _DYN_DATA_TAGS
                /* @min:%2edataTags */
              ].parentDataTag];
            }
          }
        }
        function _isUndefinedEvent(pageActionEvent) {
          if (_self[
            _DYN__CONFIG
            /* @min:%2e_config */
          ].dropInvalidEvents) {
            if (pageActionEvent[
              _DYN_NAME
              /* @min:%2ename */
            ] === strNotSpecified && pageActionEvent[
              _DYN_PARENT_ID
              /* @min:%2eparentId */
            ] === strNotSpecified && pageActionEvent[
              _DYN_CONTENT
              /* @min:%2econtent */
            ] === "[{}]") {
              return true;
            }
          }
          return false;
        }
      });
      return _this;
    }
    PageAction2.__ieDyn = 1;
    return PageAction2;
  }(WebEvent)
);

// node_modules/@microsoft/applicationinsights-clickanalytics-js/dist-es5/Enums.js
var ActionType = {
  CLICKLEFT: "CL",
  CLICKRIGHT: "CR",
  CLICKMIDDLE: "CM",
  SCROLL: "S",
  ZOOM: "Z",
  RESIZE: "R",
  KEYBOARDENTER: "KE",
  KEYBOARDSPACE: "KS",
  OTHER: "O"
};

// node_modules/@microsoft/applicationinsights-clickanalytics-js/dist-es5/handlers/AutoCaptureHandler.js
var clickCaptureInputTypes2 = { BUTTON: true, CHECKBOX: true, RADIO: true, RESET: true, SUBMIT: true };
var AutoCaptureHandler = (
  /** @class */
  function() {
    function AutoCaptureHandler2(_analyticsPlugin, _config, _pageAction, _traceLogger) {
      this._analyticsPlugin = _analyticsPlugin;
      this._config = _config;
      this._pageAction = _pageAction;
      this._traceLogger = _traceLogger;
      var _evtNamespace = mergeEvtNamespace(createUniqueNamespace("AutoCaptureHandler"), _analyticsPlugin._evtNamespace);
      dynamicProto(AutoCaptureHandler2, this, function(_self) {
        _self.click = function() {
          var win = getWindow();
          var doc = getDocument();
          if (win) {
            var event_1 = navigator.appVersion[
              _DYN_INDEX_OF
              /* @min:%2eindexOf */
            ]("MSIE") !== -1 ? "click" : "mousedown";
            eventOn(win, event_1, _processClick, _evtNamespace);
            eventOn(win, "keyup", _processClick, _evtNamespace);
          } else if (doc) {
            eventOn(doc, "click", _processClick, _evtNamespace);
            eventOn(doc, "keyup", _processClick, _evtNamespace);
          }
        };
        _self[
          _DYN__DO_UNLOAD
          /* @min:%2e_doUnload */
        ] = function(unloadCtx, unloadState, asyncCallback) {
          eventOff(getWindow(), null, null, _evtNamespace);
          eventOff(getDocument(), null, null, _evtNamespace);
        };
        function _capturePageAction(element, overrideValues, customProperties, isRightClick2) {
          var donotTrackTag = _self._config.dataTags[
            _DYN_CUSTOM_DATA_PREFIX
            /* @min:%2ecustomDataPrefix */
          ] + _self[
            _DYN__CONFIG
            /* @min:%2e_config */
          ][
            _DYN_DATA_TAGS
            /* @min:%2edataTags */
          ].dntDataTag;
          if (!isElementDnt(element, donotTrackTag)) {
            _self._pageAction[
              _DYN_CAPTURE_PAGE_ACTION
              /* @min:%2ecapturePageAction */
            ](element, overrideValues, customProperties, isRightClick2);
          }
        }
        function _processClick(clickEvent) {
          var _a2;
          var clickCaptureElements = { A: true, BUTTON: true, AREA: true, INPUT: true };
          var win = getWindow();
          if (isNullOrUndefined(clickEvent) && win) {
            clickEvent = win.event;
          }
          if (clickEvent) {
            var element = clickEvent.srcElement || clickEvent.target;
            var overrideValues = (_a2 = {}, _a2[
              _DYN_CLICK_COORDINATE_X
              /* @min:clickCoordinateX */
            ] = clickEvent.pageX, _a2[
              _DYN_CLICK_COORDINATE_Y
              /* @min:clickCoordinateY */
            ] = clickEvent.pageY, _a2);
            var isRightClickObj = isRightClick(clickEvent);
            if (isRightClickObj) {
              overrideValues[
                _DYN_ACTION_TYPE
                /* @min:%2eactionType */
              ] = ActionType.CLICKRIGHT;
            } else if (isLeftClick(clickEvent)) {
              overrideValues[
                _DYN_ACTION_TYPE
                /* @min:%2eactionType */
              ] = ActionType.CLICKLEFT;
            } else if (isKeyboardEnter(clickEvent)) {
              overrideValues[
                _DYN_ACTION_TYPE
                /* @min:%2eactionType */
              ] = ActionType.KEYBOARDENTER;
            } else if (isKeyboardSpace(clickEvent)) {
              overrideValues[
                _DYN_ACTION_TYPE
                /* @min:%2eactionType */
              ] = ActionType.KEYBOARDSPACE;
            } else if (isMiddleClick(clickEvent)) {
              overrideValues[
                _DYN_ACTION_TYPE
                /* @min:%2eactionType */
              ] = ActionType.CLICKMIDDLE;
            } else {
              return;
            }
            while (element && element[
              _DYN_TAG_NAME
              /* @min:%2etagName */
            ]) {
              if (element.control && clickCaptureElements[element.control[
                _DYN_TAG_NAME
                /* @min:%2etagName */
              ][
                _DYN_TO_UPPER_CASE
                /* @min:%2etoUpperCase */
              ]()]) {
                element = element.control;
              }
              var tagNameUpperCased = element[
                _DYN_TAG_NAME
                /* @min:%2etagName */
              ][
                _DYN_TO_UPPER_CASE
                /* @min:%2etoUpperCase */
              ]();
              if (!clickCaptureElements[tagNameUpperCased]) {
                element = element.parentElement || element[
                  _DYN_PARENT_NODE
                  /* @min:%2eparentNode */
                ];
                continue;
              } else {
                var sendEvent = tagNameUpperCased === "INPUT" ? clickCaptureInputTypes2[element.type[
                  _DYN_TO_UPPER_CASE
                  /* @min:%2etoUpperCase */
                ]()] : true;
                if (sendEvent) {
                  _capturePageAction(element, overrideValues, {}, isRightClickObj);
                }
                break;
              }
            }
          }
        }
      });
    }
    AutoCaptureHandler2.__ieDyn = 1;
    return AutoCaptureHandler2;
  }()
);

// node_modules/@microsoft/applicationinsights-clickanalytics-js/dist-es5/handlers/DomContentHandler.js
var MAX_CONTENTNAME_LENGTH = 200;
var DomContentHandler = (
  /** @class */
  function() {
    function DomContentHandler2(_config, _traceLogger) {
      this._config = _config;
      this._traceLogger = _traceLogger;
      dynamicProto(DomContentHandler2, this, function(_self) {
        _self.getMetadata = function() {
          var dataTags = (_self[
            _DYN__CONFIG
            /* @min:%2e_config */
          ] || {})[
            _DYN_DATA_TAGS
            /* @min:%2edataTags */
          ];
          var metaTags = {};
          if (hasDocument()) {
            metaTags = isValueAssigned(dataTags.metaDataPrefix) ? _getMetaDataFromDOM(dataTags[
              _DYN_CAPTURE_ALL_META_DAT2
              /* @min:%2ecaptureAllMetaDataContent */
            ], dataTags[
              _DYN_META_DATA_PREFIX
              /* @min:%2emetaDataPrefix */
            ], false) : _getMetaDataFromDOM(dataTags[
              _DYN_CAPTURE_ALL_META_DAT2
              /* @min:%2ecaptureAllMetaDataContent */
            ], "", false);
          }
          return metaTags;
        };
        _self[
          _DYN_GET_ELEMENT_CONTENT
          /* @min:%2egetElementContent */
        ] = function(element) {
          if (!element) {
            return {};
          }
          var dataTags = (_self[
            _DYN__CONFIG
            /* @min:%2e_config */
          ] || {})[
            _DYN_DATA_TAGS
            /* @min:%2edataTags */
          ];
          var elementContent = {};
          var biBlobValue;
          var parentDataTagPrefix;
          var dataTagPrefix = dataTags[
            _DYN_CUSTOM_DATA_PREFIX
            /* @min:%2ecustomDataPrefix */
          ];
          var aiBlobAttributeTag = dataTagPrefix + dataTags.aiBlobAttributeTag;
          if (isValueAssigned(dataTags[
            _DYN_PARENT_DATA_TAG
            /* @min:%2eparentDataTag */
          ])) {
            parentDataTagPrefix = dataTagPrefix + dataTags[
              _DYN_PARENT_DATA_TAG
              /* @min:%2eparentDataTag */
            ];
          }
          if (!_isTracked(element, dataTagPrefix, aiBlobAttributeTag)) {
            biBlobValue = element[
              _DYN_GET_ATTRIBUTE
              /* @min:%2egetAttribute */
            ](aiBlobAttributeTag);
            if (biBlobValue) {
              try {
                elementContent = JSON.parse(biBlobValue);
              } catch (e) {
                _throwInternal(_self[
                  _DYN__TRACE_LOGGER
                  /* @min:%2e_traceLogger */
                ], 1, 101, "Can not parse " + biBlobValue);
              }
            } else {
              elementContent = objExtend(elementContent, _populateElementContent(element, dataTagPrefix, parentDataTagPrefix, aiBlobAttributeTag));
            }
          } else {
            elementContent = objExtend(elementContent, _populateElementContentwithDataTag(element, dataTagPrefix, parentDataTagPrefix, aiBlobAttributeTag));
          }
          removeInvalidElements(elementContent);
          if (parentDataTagPrefix) {
            elementContent = objExtend(elementContent, _getParentDetails(element, elementContent, dataTagPrefix, aiBlobAttributeTag));
          }
          return elementContent;
        };
        function _captureElementContentWithDataTag(contentElement, elementContent, dataTagPrefix) {
          for (var i = 0, attrib; i < contentElement.attributes[
            _DYN_LENGTH
            /* @min:%2elength */
          ]; i++) {
            attrib = contentElement[
              _DYN_ATTRIBUTES
              /* @min:%2eattributes */
            ][i];
            if (attrib.name[
              _DYN_INDEX_OF
              /* @min:%2eindexOf */
            ](dataTagPrefix) !== 0) {
              continue;
            }
            var attribName = attrib[
              _DYN_NAME
              /* @min:%2ename */
            ].replace(dataTagPrefix, "");
            elementContent[attribName] = attrib.value;
          }
        }
        function _walkUpDomChainCaptureData(el, elementContent, dataTagPrefix, parentDataTagPrefix, aiBlobAttributeTag) {
          var element = el;
          var parentDataTagFound = false;
          var elementLevelFlag = false;
          while (!isNullOrUndefined(element) && !isNullOrUndefined(element[
            _DYN_ATTRIBUTES
            /* @min:%2eattributes */
          ])) {
            var attributes = element[
              _DYN_ATTRIBUTES
              /* @min:%2eattributes */
            ];
            for (var i = 0; i < attributes[
              _DYN_LENGTH
              /* @min:%2elength */
            ]; i++) {
              var attrib = attributes[i];
              if (attrib.name[
                _DYN_INDEX_OF
                /* @min:%2eindexOf */
              ](dataTagPrefix) !== 0) {
                continue;
              }
              if (attrib.name[
                _DYN_INDEX_OF
                /* @min:%2eindexOf */
              ](parentDataTagPrefix) === 0) {
                parentDataTagFound = true;
              }
              if (attrib.name[
                _DYN_INDEX_OF
                /* @min:%2eindexOf */
              ](aiBlobAttributeTag) === 0) {
                continue;
              }
              var attribName = attrib[
                _DYN_NAME
                /* @min:%2ename */
              ].replace(dataTagPrefix, "");
              if (elementLevelFlag && attribName === "id") {
                continue;
              }
              if (!isValueAssigned(elementContent[attribName])) {
                elementContent[attribName] = attrib.value;
              }
            }
            if (parentDataTagFound) {
              break;
            }
            elementLevelFlag = true;
            element = element[
              _DYN_PARENT_NODE
              /* @min:%2eparentNode */
            ];
          }
        }
        function _populateElementContent(element, dataTagPrefix, parentDataTagPrefix, aiBlobAttributeTag) {
          var elementContent = {};
          if (!element) {
            return elementContent;
          }
          var htmlContent = _getHtmlIdAndContentName(element);
          elementContent = {
            id: htmlContent.id || "",
            contentName: htmlContent[
              _DYN_CONTENT_NAME
              /* @min:%2econtentName */
            ] || ""
          };
          if (isValueAssigned(parentDataTagPrefix)) {
            _walkUpDomChainCaptureData(element, elementContent, dataTagPrefix, parentDataTagPrefix, aiBlobAttributeTag);
          }
          if (!elementContent.id && !elementContent[
            _DYN_CONTENT_NAME
            /* @min:%2econtentName */
          ]) {
            _throwInternal(_traceLogger, 2, 102, "Invalid content blob.  Missing required attributes (id, contentName.  Content information will still be collected!");
          }
          return elementContent;
        }
        function _populateElementContentwithDataTag(element, dataTagPrefix, parentDataTagPrefix, aiBlobAttributeTag) {
          var dataTags = (_self[
            _DYN__CONFIG
            /* @min:%2e_config */
          ] || {})[
            _DYN_DATA_TAGS
            /* @min:%2edataTags */
          ];
          var elementContent = {};
          if (!element) {
            return elementContent;
          }
          var htmlContent = _getHtmlIdAndContentName(element);
          if (isValueAssigned(parentDataTagPrefix)) {
            _walkUpDomChainCaptureData(element, elementContent, dataTagPrefix, parentDataTagPrefix, aiBlobAttributeTag);
          } else {
            _captureElementContentWithDataTag(element, elementContent, dataTagPrefix);
          }
          if (dataTags[
            _DYN_USE_DEFAULT_CONTENT_1
            /* @min:%2euseDefaultContentNameOrId */
          ]) {
            if (!isValueAssigned(elementContent.id)) {
              elementContent.id = htmlContent.id || "";
            }
            elementContent[
              _DYN_CONTENT_NAME
              /* @min:%2econtentName */
            ] = htmlContent[
              _DYN_CONTENT_NAME
              /* @min:%2econtentName */
            ] || "";
          }
          if (!elementContent.id && !elementContent[
            _DYN_CONTENT_NAME
            /* @min:%2econtentName */
          ]) {
            _throwInternal(_traceLogger, 2, 102, "Invalid content blob.  Missing required attributes (id, contentName.  Content information will still be collected!");
          }
          return elementContent;
        }
        function _getMetaDataFromDOM(captureAllMetaDataContent, prefix, removePrefix) {
          var metaElements;
          var metaData = {};
          if (hasDocument()) {
            metaElements = getDocument().querySelectorAll("meta");
            for (var i = 0; i < metaElements[
              _DYN_LENGTH
              /* @min:%2elength */
            ]; i++) {
              var meta = metaElements[i];
              if (meta[
                _DYN_NAME
                /* @min:%2ename */
              ]) {
                if (captureAllMetaDataContent || meta.name[
                  _DYN_INDEX_OF
                  /* @min:%2eindexOf */
                ](prefix) === 0) {
                  var name_1 = removePrefix ? meta[
                    _DYN_NAME
                    /* @min:%2ename */
                  ].replace(prefix, "") : meta[
                    _DYN_NAME
                    /* @min:%2ename */
                  ];
                  metaData[name_1] = meta[
                    _DYN_CONTENT
                    /* @min:%2econtent */
                  ];
                }
              }
            }
          }
          return metaData;
        }
        function _getDefaultContentName(element, useDefaultContentName) {
          if (useDefaultContentName === false || !element[
            _DYN_TAG_NAME
            /* @min:%2etagName */
          ]) {
            return "";
          }
          var doc = getDocument() || {};
          var contentName;
          switch (element[
            _DYN_TAG_NAME
            /* @min:%2etagName */
          ]) {
            case "A":
              contentName = doc.all ? element.innerText || element.innerHTML : element.text || element.innerHTML;
              break;
            case "IMG":
            case "AREA":
              contentName = element.alt;
              break;
            default:
              contentName = element.value || element[
                _DYN_NAME
                /* @min:%2ename */
              ] || element.alt || element.innerText || element.id;
          }
          return strSubstring(contentName, 0, MAX_CONTENTNAME_LENGTH);
        }
        function _isTracked(element, dataTag, aiBlobAttributeTag) {
          var attrs = element[
            _DYN_ATTRIBUTES
            /* @min:%2eattributes */
          ];
          var dataTagFound = false;
          for (var i = 0; i < attrs[
            _DYN_LENGTH
            /* @min:%2elength */
          ]; i++) {
            var attributeName = attrs[i][
              _DYN_NAME
              /* @min:%2ename */
            ];
            if (attributeName === aiBlobAttributeTag) {
              return false;
            } else if (attributeName[
              _DYN_INDEX_OF
              /* @min:%2eindexOf */
            ](dataTag) === 0) {
              dataTagFound = true;
            }
          }
          return dataTagFound;
        }
        function _getHtmlIdAndContentName(element) {
          var _a2;
          var dataTags = (_self[
            _DYN__CONFIG
            /* @min:%2e_config */
          ] || {})[
            _DYN_DATA_TAGS
            /* @min:%2edataTags */
          ];
          var callback = (_self[
            _DYN__CONFIG
            /* @min:%2e_config */
          ] || {}).callback;
          var htmlContent = {};
          if (!element) {
            return htmlContent;
          }
          if (dataTags[
            _DYN_USE_DEFAULT_CONTENT_1
            /* @min:%2euseDefaultContentNameOrId */
          ]) {
            var customizedContentName = callback[
              _DYN_CONTENT_NAME
              /* @min:%2econtentName */
            ] ? callback[
              _DYN_CONTENT_NAME
              /* @min:%2econtentName */
            ](element, dataTags[
              _DYN_USE_DEFAULT_CONTENT_1
              /* @min:%2euseDefaultContentNameOrId */
            ]) : "";
            var defaultContentName = _getDefaultContentName(element, dataTags[
              _DYN_USE_DEFAULT_CONTENT_1
              /* @min:%2euseDefaultContentNameOrId */
            ]);
            htmlContent = (_a2 = {
              id: element.id
            }, _a2[
              _DYN_CONTENT_NAME
              /* @min:contentName */
            ] = customizedContentName || defaultContentName || element[
              _DYN_GET_ATTRIBUTE
              /* @min:%2egetAttribute */
            ]("alt"), _a2);
          }
          return htmlContent;
        }
        function _getParentDetails(element, elementContent, dataTagPrefix, aiBlobAttributeTag) {
          var parentId = elementContent["parentid"];
          var parentName = elementContent["parentname"];
          var parentInfo = {};
          if (parentId || parentName || !element) {
            return parentInfo;
          }
          return _populateParentInfo(element, dataTagPrefix, aiBlobAttributeTag);
        }
        function _populateParentInfo(element, dataTagPrefix, aiBlobAttributeTag) {
          var parentInfo = {};
          var parentId;
          var closestParentElement = walkUpDomChainWithElementValidation(element[
            _DYN_PARENT_ELEMENT
            /* @min:%2eparentElement */
          ], _isTracked, dataTagPrefix);
          if (closestParentElement) {
            var dataAttr = closestParentElement[
              _DYN_GET_ATTRIBUTE
              /* @min:%2egetAttribute */
            ](aiBlobAttributeTag) || element[aiBlobAttributeTag];
            if (dataAttr) {
              try {
                var telemetryObject = JSON.parse(dataAttr);
              } catch (e) {
                _throwInternal(_traceLogger, 1, 101, "Can not parse " + dataAttr);
              }
              if (telemetryObject) {
                parentId = telemetryObject.id;
              }
            } else {
              parentId = closestParentElement[
                _DYN_GET_ATTRIBUTE
                /* @min:%2egetAttribute */
              ](dataTagPrefix + "id");
            }
          }
          if (parentId) {
            parentInfo["parentid"] = parentId;
          } else {
            var htmlContent = _getHtmlIdAndContentName(element[
              _DYN_PARENT_ELEMENT
              /* @min:%2eparentElement */
            ]);
            parentInfo["parentid"] = htmlContent.id;
            parentInfo["parentname"] = htmlContent[
              _DYN_CONTENT_NAME
              /* @min:%2econtentName */
            ];
          }
          return parentInfo;
        }
      });
    }
    DomContentHandler2.__ieDyn = 1;
    return DomContentHandler2;
  }()
);

// node_modules/@microsoft/applicationinsights-clickanalytics-js/dist-es5/ClickAnalyticsPlugin.js
var _a;
var _b;
var _c;
var _d;
var defaultValues = objDeepFreeze((_a = {
  autoCapture: true,
  callback: cfgDfMerge((_b = {}, _b[
    _DYN_PAGE_ACTION_PAGE_TAG0
    /* @min:pageActionPageTags */
  ] = cfgDfFunc(), _b[
    _DYN_PAGE_NAME
    /* @min:pageName */
  ] = cfgDfFunc(), _b[
    _DYN_CONTENT_NAME
    /* @min:contentName */
  ] = cfgDfFunc(), _b)),
  pageTags: {},
  coreData: cfgDfMerge((_c = {
    referrerUri: hasDocument() ? getDocument().referrer : ""
  }, _c[
    _DYN_REQUEST_URI
    /* @min:requestUri */
  ] = cfgDfString(), _c[
    _DYN_PAGE_NAME
    /* @min:pageName */
  ] = cfgDfString(), _c[
    _DYN_PAGE_TYPE
    /* @min:pageType */
  ] = cfgDfString(), _c)),
  dataTags: cfgDfMerge((_d = {}, _d[
    _DYN_USE_DEFAULT_CONTENT_1
    /* @min:useDefaultContentNameOrId */
  ] = false, _d.aiBlobAttributeTag = DEFAULT_AI_BLOB_ATTRIBUTE_TAG, _d.customDataPrefix = cfgDfValidate(_dataPrefixChk, DEFAULT_DATA_PREFIX), _d[
    _DYN_CAPTURE_ALL_META_DAT2
    /* @min:captureAllMetaDataContent */
  ] = false, _d.dntDataTag = DEFAULT_DONOT_TRACK_TAG, _d[
    _DYN_META_DATA_PREFIX
    /* @min:metaDataPrefix */
  ] = cfgDfString(), _d[
    _DYN_PARENT_DATA_TAG
    /* @min:parentDataTag */
  ] = cfgDfString(), _d))
}, _a[
  _DYN_BEHAVIOR_VALIDATOR
  /* @min:behaviorValidator */
] = cfgDfFunc(function(key) {
  return key || "";
}), _a[
  _DYN_DEFAULT_RIGHT_CLICK_3
  /* @min:defaultRightClickBhvr */
] = cfgDfString(), _a.dropInvalidEvents = false, _a.urlCollectHash = false, _a.urlCollectQuery = false, _a));
function _dataPrefixChk(val) {
  return val && val[
    _DYN_INDEX_OF
    /* @min:%2eindexOf */
  ](DEFAULT_DATA_PREFIX) === 0;
}
var ClickAnalyticsPlugin = (
  /** @class */
  function(_super) {
    __extendsFn(ClickAnalyticsPlugin2, _super);
    function ClickAnalyticsPlugin2() {
      var _this = _super.call(this) || this;
      _this.identifier = "ClickAnalyticsPlugin";
      _this.priority = 181;
      var _config;
      var _pageAction;
      var _autoCaptureHandler;
      var _contentHandler;
      var _autoCapture;
      dynamicProto(ClickAnalyticsPlugin2, _this, function(_self, _base) {
        var _identifier = _self.identifier;
        _initDefaults();
        _self.initialize = function(config, core, extensions, pluginChain) {
          if (isNullOrUndefined(core)) {
            throwError("Error initializing");
          }
          _super.prototype.initialize.call(_this, config, core, extensions, pluginChain);
          _populateDefaults(config);
          var _propertiesExtension;
          arrForEach(extensions, function(extension) {
            if (extension.identifier === PropertiesPluginIdentifier) {
              _propertiesExtension = extension;
            }
          });
          if (_propertiesExtension && _propertiesExtension.context && _propertiesExtension.context.internal) {
            var theVersion = _propertiesExtension.context.internal.sdkVersion;
            if (theVersion) {
              theVersion += "_ClickPlugin" + ClickAnalyticsPlugin2.Version;
              if (theVersion[
                _DYN_LENGTH
                /* @min:%2elength */
              ] > 64) {
                theVersion = strTrim(strSubstring(theVersion, 0, 64));
              }
              _propertiesExtension.context.internal.sdkVersion = theVersion;
            }
          }
        };
        _self.processTelemetry = function(env, itemCtx) {
          _self.processNext(env, itemCtx);
        };
        _self[
          _DYN_TRACK_PAGE_ACTION
          /* @min:%2etrackPageAction */
        ] = function(pageAction, customProperties) {
          try {
            _pageAction[
              _DYN_TRACK_PAGE_ACTION
              /* @min:%2etrackPageAction */
            ](pageAction, customProperties);
          } catch (e) {
            _throwInternal(_self.diagLog(), 1, 103, "trackPageAction failed, page action event will not be collected: " + getExceptionName(e), { exception: dumpObj(e) });
          }
        };
        _self._doTeardown = function(unloadCtx, unloadState, asyncCallback) {
          return unloadComponents([
            _autoCaptureHandler,
            _contentHandler,
            _pageAction
          ], unloadCtx, unloadState, function() {
            _initDefaults();
            asyncCallback && asyncCallback();
          });
        };
        function _populateDefaults(config) {
          var core = _self.core;
          _self._addHook(onConfigChange(config, function(details) {
            var config2 = details.cfg;
            var ctx = createProcessTelemetryContext(null, config2, core);
            var _config2 = ctx.getExtCfg(_identifier, defaultValues);
            var logger = _self.diagLog();
            _contentHandler = new DomContentHandler(_config2, logger);
            var metaTags = _contentHandler.getMetadata();
            _pageAction = new PageAction(_self, _config2, _contentHandler, _config2.callback[
              _DYN_PAGE_ACTION_PAGE_TAG0
              /* @min:%2epageActionPageTags */
            ], metaTags, logger);
            if (_autoCaptureHandler) {
              _autoCaptureHandler[
                _DYN__DO_UNLOAD
                /* @min:%2e_doUnload */
              ]();
            }
            _autoCaptureHandler = new AutoCaptureHandler(_self, _config2, _pageAction, logger);
            var autoCapture = !!_config2.autoCapture;
            if (!_autoCapture && autoCapture) {
              _autoCaptureHandler.click();
            }
            _autoCapture = autoCapture;
          }));
        }
        function _initDefaults() {
          _config = null;
          _pageAction = null;
          _autoCaptureHandler = null;
          _contentHandler = null;
          _autoCapture = false;
        }
      });
      return _this;
    }
    ClickAnalyticsPlugin2.Version = "3.3.1";
    return ClickAnalyticsPlugin2;
  }(BaseTelemetryPlugin)
);
export {
  BehaviorEnumValidator,
  BehaviorMapValidator,
  BehaviorValueValidator,
  ClickAnalyticsPlugin
};
//# sourceMappingURL=@microsoft_applicationinsights-clickanalytics-js.js.map
