{
  "version": 3,
  "sources": ["../../@microsoft/applicationinsights-clickanalytics-js/dist-es5/__DynamicConstants.js", "../../@microsoft/applicationinsights-clickanalytics-js/dist-es5/common/Utils.js", "../../@microsoft/applicationinsights-clickanalytics-js/dist-es5/DataCollector.js", "../../@microsoft/applicationinsights-clickanalytics-js/dist-es5/events/WebEvent.js", "../../@microsoft/applicationinsights-clickanalytics-js/dist-es5/events/PageAction.js", "../../@microsoft/applicationinsights-clickanalytics-js/dist-es5/Enums.js", "../../@microsoft/applicationinsights-clickanalytics-js/dist-es5/handlers/AutoCaptureHandler.js", "../../@microsoft/applicationinsights-clickanalytics-js/dist-es5/handlers/DomContentHandler.js", "../../@microsoft/applicationinsights-clickanalytics-js/dist-es5/ClickAnalyticsPlugin.js"],
  "sourcesContent": ["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n// @skip-file-minify\r\n// ##############################################################\r\n// AUTO GENERATED FILE: This file is Auto Generated during build.\r\n// ##############################################################\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n// Note: DON'T Export these const from the package as we are still targeting ES3 this will export a mutable variables that someone could change!!!\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\nexport var _DYN_INDEX_OF = \"indexOf\"; // Count: 9\r\nexport var _DYN_LENGTH = \"length\"; // Count: 6\r\nexport var _DYN_TRACK_PAGE_ACTION = \"trackPageAction\"; // Count: 4\r\nexport var _DYN_PAGE_ACTION_PAGE_TAG0 = \"pageActionPageTags\"; // Count: 2\r\nexport var _DYN__DO_UNLOAD = \"_doUnload\"; // Count: 3\r\nexport var _DYN_PAGE_NAME = \"pageName\"; // Count: 10\r\nexport var _DYN_CONTENT_NAME = \"contentName\"; // Count: 13\r\nexport var _DYN_REQUEST_URI = \"requestUri\"; // Count: 4\r\nexport var _DYN_PAGE_TYPE = \"pageType\"; // Count: 7\r\nexport var _DYN_USE_DEFAULT_CONTENT_1 = \"useDefaultContentNameOrId\"; // Count: 5\r\nexport var _DYN_CAPTURE_ALL_META_DAT2 = \"captureAllMetaDataContent\"; // Count: 3\r\nexport var _DYN_META_DATA_PREFIX = \"metaDataPrefix\"; // Count: 3\r\nexport var _DYN_PARENT_DATA_TAG = \"parentDataTag\"; // Count: 4\r\nexport var _DYN_BEHAVIOR_VALIDATOR = \"behaviorValidator\"; // Count: 2\r\nexport var _DYN_DEFAULT_RIGHT_CLICK_3 = \"defaultRightClickBhvr\"; // Count: 2\r\nexport var _DYN_TAG_NAME = \"tagName\"; // Count: 4\r\nexport var _DYN_TO_UPPER_CASE = \"toUpperCase\"; // Count: 4\r\nexport var _DYN_PATHNAME = \"pathname\"; // Count: 3\r\nexport var _DYN_ADD_EVENT_LISTENER = \"addEventListener\"; // Count: 2\r\nexport var _DYN_CORE_DATA = \"coreData\"; // Count: 4\r\nexport var _DYN_GET_ATTRIBUTE = \"getAttribute\"; // Count: 6\r\nexport var _DYN_PARENT_NODE = \"parentNode\"; // Count: 3\r\nexport var _DYN_CUSTOM_DATA_PREFIX = \"customDataPrefix\"; // Count: 3\r\nexport var _DYN_NAME = \"name\"; // Count: 8\r\nexport var _DYN_DATA = \"data\"; // Count: 15\r\nexport var _DYN_PROPERTIES = \"properties\"; // Count: 4\r\nexport var _DYN_ACTION_TYPE = \"actionType\"; // Count: 9\r\nexport var _DYN_BEHAVIOR = \"behavior\"; // Count: 7\r\nexport var _DYN_CLICK_COORDINATES = \"clickCoordinates\"; // Count: 2\r\nexport var _DYN_CONTENT = \"content\"; // Count: 4\r\nexport var _DYN_REF_URI = \"refUri\"; // Count: 4\r\nexport var _DYN_PARENT_ID = \"parentId\"; // Count: 3\r\nexport var _DYN_CAPTURE_PAGE_ACTION = \"capturePageAction\"; // Count: 2\r\nexport var _DYN_SET_COMMON_PROPERTIE4 = \"setCommonProperties\"; // Count: 2\r\nexport var _DYN_GET_ELEMENT_CONTENT = \"getElementContent\"; // Count: 2\r\nexport var _DYN__GET_VALID_BEHAVIOR = \"_getValidBehavior\"; // Count: 3\r\nexport var _DYN__TRACE_LOGGER = \"_traceLogger\"; // Count: 3\r\nexport var _DYN_CLICK_COORDINATE_X = \"clickCoordinateX\"; // Count: 3\r\nexport var _DYN_CLICK_COORDINATE_Y = \"clickCoordinateY\"; // Count: 3\r\nexport var _DYN__CONFIG = \"_config\"; // Count: 9\r\nexport var _DYN_DATA_TAGS = \"dataTags\"; // Count: 6\r\nexport var _DYN__PAGE_TAGS = \"_pageTags\"; // Count: 6\r\nexport var _DYN__PAGE_TAGS_CALLBACK = \"_pageTagsCallback\"; // Count: 3\r\nexport var _DYN__META_TAGS = \"_metaTags\"; // Count: 6\r\nexport var _DYN_SET_BASIC_PROPERTIES = \"setBasicProperties\"; // Count: 2\r\nexport var _DYN__PAGE_TYPE_META_TAG = \"_pageTypeMetaTag\"; // Count: 3\r\nexport var _DYN__BEHAVIOR_META_TAG = \"_behaviorMetaTag\"; // Count: 3\r\nexport var _DYN_PARENT_ELEMENT = \"parentElement\"; // Count: 3\r\nexport var _DYN_ATTRIBUTES = \"attributes\"; // Count: 4\r\n//# sourceMappingURL=__DynamicConstants.js.map", "/**\r\n* @copyright Microsoft 2020\r\n* File containing utility functions.\r\n*/\r\nimport { arrForEach, isNullOrUndefined } from \"@microsoft/applicationinsights-core-js\";\r\nimport { _DYN_GET_ATTRIBUTE, _DYN_INDEX_OF, _DYN_PARENT_NODE } from \"../__DynamicConstants\";\r\nexport var DEFAULT_DONOT_TRACK_TAG = \"ai-dnt\";\r\nexport var DEFAULT_AI_BLOB_ATTRIBUTE_TAG = \"ai-blob\";\r\nexport var DEFAULT_DATA_PREFIX = \"data-\";\r\n/**\r\n * Finds attributes in overrideConfig which are invalid or should be objects\r\n * and deletes them. useful in override config\r\n * @param overrideConfig - override config object\r\n * @param attributeNamesExpectedObjects - attributes that should be objects in override config object\r\n */\r\nexport function removeNonObjectsAndInvalidElements(overrideConfig, attributeNamesExpectedObjects) {\r\n    removeInvalidElements(overrideConfig);\r\n    arrForEach(attributeNamesExpectedObjects, function (i) {\r\n        var objectName = attributeNamesExpectedObjects[i];\r\n        if (typeof overrideConfig[objectName] === \"object\") {\r\n            removeInvalidElements(overrideConfig[objectName]);\r\n        }\r\n        else {\r\n            delete overrideConfig[objectName];\r\n        }\r\n    });\r\n}\r\n/**\r\n * Finds attributes in object which are invalid\r\n * and deletes them. useful in override config\r\n * @param object - Input object\r\n */\r\nexport function removeInvalidElements(object) {\r\n    /// Because the config object 'callback' contains only functions,\r\n    /// when it is stringified it returns the empty object. This explains\r\n    /// the workaround regarding 'callback'\r\n    for (var property in object) {\r\n        if (!isValueAssigned(object[property]) ||\r\n            (JSON.stringify(object[property]) === \"{}\" && (property !== \"callback\"))) {\r\n            delete object[property];\r\n        }\r\n    }\r\n}\r\n/**\r\n * Checks if value is assigned to the given param.\r\n * @param value - The token from which the tenant id is to be extracted.\r\n * @returns True/false denoting if value is assigned to the param.\r\n */\r\nexport function isValueAssigned(value) {\r\n    /// <summary> takes a value and checks for undefined, null and empty string </summary>\r\n    /// <param type=\"any\"> value to be tested </param>\r\n    /// <returns> true if value is null undefined or emptyString </returns>\r\n    return !(isNullOrUndefined(value) || value === \"\");\r\n}\r\n/**\r\n * Determines whether an event is a right click or not\r\n * @param evt - Mouse event\r\n * @returns true if the event is a right click\r\n */\r\nexport function isRightClick(evt) {\r\n    try {\r\n        if (\"which\" in evt) { // Chrome, FF, ...\r\n            return (evt.which === 3);\r\n        }\r\n        else if (\"button\" in evt) { // IE, ...\r\n            return (evt.button === 2);\r\n        }\r\n    }\r\n    catch (e) {\r\n        // This can happen with some native browser objects, but should not happen for the type we are checking for\r\n    }\r\n}\r\n/**\r\n * Determines whether an event is a left click or not\r\n * @param evt - Mouse event\r\n * @returns true if the event is a left click\r\n */\r\nexport function isLeftClick(evt) {\r\n    try {\r\n        if (\"which\" in evt) { // Chrome, FF, ...\r\n            return (evt.which === 1);\r\n        }\r\n        else if (\"button\" in evt) { // IE, ...\r\n            return (evt.button === 1);\r\n        }\r\n    }\r\n    catch (e) {\r\n        // This can happen with some native browser objects, but should not happen for the type we are checking for\r\n    }\r\n}\r\n/**\r\n * Determines whether an event is a middle click or not\r\n * @param evt - Mouse event\r\n * @returns true if the event is a middle click\r\n */\r\nexport function isMiddleClick(evt) {\r\n    try {\r\n        if (\"which\" in evt) { // Chrome, FF, ...\r\n            return (evt.which === 2);\r\n        }\r\n        else if (\"button\" in evt) { // IE, ...\r\n            return (evt.button === 4);\r\n        }\r\n    }\r\n    catch (e) {\r\n        // This can happen with some native browser objects, but should not happen for the type we are checking for\r\n    }\r\n}\r\n/**\r\n *  Determines whether an event is a keyboard enter or not\r\n * @param evt - Keyboard event\r\n * @returns true if the event is a keyboard enter\r\n */\r\nexport function isKeyboardEnter(evt) {\r\n    try {\r\n        if (\"keyCode\" in evt) { // Chrome, FF, ...\r\n            return (evt.keyCode === 13);\r\n        }\r\n    }\r\n    catch (e) {\r\n        // This can happen with some native browser objects, but should not happen for the type we are checking for\r\n    }\r\n}\r\n/**\r\n *  Determines whether an event is a keyboard space or not\r\n * @param evt - Keyboard event\r\n * @returns true if the event is a space enter\r\n */\r\nexport function isKeyboardSpace(evt) {\r\n    try {\r\n        if (\"keyCode\" in evt) { // Chrome, FF, ...\r\n            return (evt.keyCode === 32);\r\n        }\r\n    }\r\n    catch (e) {\r\n        // This can happen with some native browser objects, but should not happen for the type we are checking for\r\n    }\r\n}\r\n/**\r\n *  Determines whether the elemt have a DNT(Do Not Track) tag\r\n * @param element - DOM element\r\n * @param doNotTrackFieldName - DOM element\r\n * @returns true if the element must not be tarcked\r\n */\r\nexport function isElementDnt(element, doNotTrackFieldName) {\r\n    var dntElement = findClosestByAttribute(element, doNotTrackFieldName);\r\n    if (!isValueAssigned(dntElement)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Walks up DOM tree to find element with attribute\r\n * @param el - DOM element\r\n * @param attribute - Attribute name\r\n * @returns Dom element which contains attribute\r\n */\r\nexport function findClosestByAttribute(el, attribute) {\r\n    return walkUpDomChainWithElementValidation(el, isAttributeInElement, attribute);\r\n}\r\n/**\r\n * checks if attribute is in element.\r\n * method checks for empty string, in case the attribute is set but no value is assigned to it\r\n * @param element - DOM element\r\n * @param attributeToLookFor - Attribute name\r\n * @returns true if attribute is in element, even if empty string\r\n */\r\nexport function isAttributeInElement(element, attributeToLookFor) {\r\n    var value = element[_DYN_GET_ATTRIBUTE /* @min:%2egetAttribute */](attributeToLookFor);\r\n    return isValueAssigned(value);\r\n}\r\n/**\r\n * Walks up DOM tree to find element which matches validationMethod\r\n * @param el - DOM element\r\n * @param validationMethod - DOM element validation method\r\n * @param validationMethodParam - DOM element validation method parameters\r\n * @returns Dom element which is an anchor\r\n */\r\nexport function walkUpDomChainWithElementValidation(el, validationMethod, validationMethodParam) {\r\n    var element = el;\r\n    if (element) {\r\n        while (!validationMethod(element, validationMethodParam)) {\r\n            element = element[_DYN_PARENT_NODE /* @min:%2eparentNode */];\r\n            if (!element || !(element[_DYN_GET_ATTRIBUTE /* @min:%2egetAttribute */])) {\r\n                return null;\r\n            }\r\n        }\r\n        return element;\r\n    }\r\n}\r\n/**\r\n * Determine if DOM element is an anchor\r\n * @param element - DOM element\r\n * @returns Is element an anchor\r\n */\r\nexport function isElementAnAnchor(element) {\r\n    return element.nodeName === \"A\";\r\n}\r\n/**\r\n * Walks up DOM tree to find anchor element\r\n * @param element - DOM element\r\n * @returns Dom element which is an anchor\r\n */\r\nexport function findClosestAnchor(element) {\r\n    /// <summary> Walks up DOM tree to find anchor element </summary>\r\n    /// <param type='object'> DOM element </param>\r\n    /// <returns> Dom element which is an anchor</returns>\r\n    return walkUpDomChainWithElementValidation(element, isElementAnAnchor);\r\n}\r\n/**\r\n * Returns the specified field and also removes the property from the object if exists.\r\n * @param obj - Input object\r\n * @param fieldName - >Name of the field/property to be extracted\r\n * @returns Value of the specified tag\r\n */\r\nexport function extractFieldFromObject(obj, fieldName) {\r\n    var fieldValue;\r\n    if (obj && obj[fieldName]) {\r\n        fieldValue = obj[fieldName];\r\n        delete obj[fieldName];\r\n    }\r\n    return fieldValue;\r\n}\r\n/**\r\n *  Adds surrounding square brackets to the passed in text\r\n * @param str - Input string\r\n * @returns String with surrounding brackets\r\n */\r\nexport function bracketIt(str) {\r\n    /// <summary>\r\n    ///  Adds surrounding square brackets to the passed in text\r\n    /// </summary>\r\n    return \"[\" + str + \"]\";\r\n}\r\nexport function validateContentNamePrefix(config, defaultDataPrefix) {\r\n    return isValueAssigned(config.dataTags.customDataPrefix) && (config.dataTags.customDataPrefix[_DYN_INDEX_OF /* @min:%2eindexOf */](defaultDataPrefix) === 0);\r\n}\r\nexport function BehaviorMapValidator(map) {\r\n    return function (key) { return map[key] || \"\"; };\r\n}\r\nexport function BehaviorValueValidator(behaviorArray) {\r\n    return function (key) {\r\n        var result;\r\n        arrForEach(behaviorArray, function (value) {\r\n            if (value === key) {\r\n                result = value;\r\n                return -1;\r\n            }\r\n        });\r\n        return result || \"\";\r\n    };\r\n}\r\nexport function BehaviorEnumValidator(enumObj) {\r\n    return function (key) { return enumObj[key] || \"\"; };\r\n}\r\n//# sourceMappingURL=Utils.js.map", "/**\r\n* @copyright Microsoft 2020\r\n*/\r\nimport { getDocument, getLocation, getWindow, hasDocument, isFunction } from \"@microsoft/applicationinsights-core-js\";\r\nimport { scheduleTimeout } from \"@nevware21/ts-utils\";\r\nimport { _DYN_ADD_EVENT_LISTENER, _DYN_CORE_DATA, _DYN_LENGTH, _DYN_PAGE_NAME, _DYN_PATHNAME, _DYN_REQUEST_URI, _DYN_TAG_NAME, _DYN_TO_UPPER_CASE } from \"./__DynamicConstants\";\r\nimport { findClosestAnchor, isValueAssigned } from \"./common/Utils\";\r\nvar clickCaptureInputTypes = { BUTTON: true, CHECKBOX: true, RADIO: true, RESET: true, SUBMIT: true };\r\n/**\r\n * Get Image href of a given HTMLImageElement\r\n * @param element - An html image element\r\n * @returns Href value.\r\n */\r\nexport function getImageHref(element) {\r\n    var temp = element;\r\n    if (temp) {\r\n        var parent = findClosestAnchor(temp);\r\n        if (parent[_DYN_LENGTH /* @min:%2elength */] === 1) {\r\n            var firstParent = parent[0];\r\n            if (firstParent.href) {\r\n                return firstParent.href;\r\n            }\r\n            else if (firstParent.src) {\r\n                return (firstParent.src);\r\n            }\r\n        }\r\n    }\r\n    return \"\";\r\n}\r\n/**\r\n * Get click target\r\n * @returns Click target URI\r\n */\r\nexport function getClickTarget(element) {\r\n    var clickTarget = \"\";\r\n    switch (element[_DYN_TAG_NAME /* @min:%2etagName */]) {\r\n        case \"A\":\r\n        case \"AREA\":\r\n            clickTarget = element.href || \"\";\r\n            break;\r\n        case \"IMG\":\r\n            clickTarget = getImageHref(element);\r\n            break;\r\n        case \"INPUT\":\r\n            var type = element.type;\r\n            if (type && (clickCaptureInputTypes[type[_DYN_TO_UPPER_CASE /* @min:%2etoUpperCase */]()])) {\r\n                var loc = getLocation() || {};\r\n                if (element.form) {\r\n                    clickTarget = element.form.action || (loc[_DYN_PATHNAME /* @min:%2epathname */] || \"\");\r\n                }\r\n                else {\r\n                    clickTarget = loc[_DYN_PATHNAME /* @min:%2epathname */] || \"\";\r\n                }\r\n            }\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    return clickTarget;\r\n}\r\n/**\r\n * Execute callback when DOM finish loading\r\n */\r\nexport function onDomLoaded(callback) {\r\n    onDomReadyDo(function () {\r\n        if (hasDocument() && getDocument().readyState === \"complete\") {\r\n            callback();\r\n        }\r\n        else {\r\n            var win = getWindow();\r\n            if (win) {\r\n                if (win[_DYN_ADD_EVENT_LISTENER /* @min:%2eaddEventListener */]) {\r\n                    win[_DYN_ADD_EVENT_LISTENER /* @min:%2eaddEventListener */](\"load\", function () {\r\n                        callback();\r\n                    }); // NB **not** 'onload'\r\n                }\r\n                else if (win.attachEvent) {\r\n                    win.attachEvent(\"onload\", function () {\r\n                        callback();\r\n                    }); // IE8\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n// use smallest domready ever for IE8. When IE8 is deprecated, use addEventListener('DomContentLoaded')\r\nfunction onDomReadyDo(f) {\r\n    /// <summary> fires function f on domRead </summary>\r\n    /// <param type='function'>function to call on domRead</param>\r\n    var doc = getDocument() || {};\r\n    /in/.test(doc.readyState) ? scheduleTimeout(function () {\r\n        onDomReadyDo(f);\r\n    }, 100) : f.call();\r\n}\r\n/**\r\n * Gets the pageName from the DOM or by calling a override if set.\r\n * @param config - configuration object\r\n * @returns Page name.\r\n */\r\nexport function getPageName(config, overrideValues) {\r\n    /// <summary>\r\n    ///  Gets the pageName from the DOM or by calling a override if set.\r\n    /// </summary>\r\n    if (overrideValues && overrideValues[_DYN_PAGE_NAME /* @min:%2epageName */]) {\r\n        return overrideValues[_DYN_PAGE_NAME /* @min:%2epageName */];\r\n    }\r\n    else if (config.callback && isFunction(config.callback[_DYN_PAGE_NAME /* @min:%2epageName */])) {\r\n        return config.callback[_DYN_PAGE_NAME /* @min:%2epageName */]();\r\n    }\r\n    else if (config.coreData && config.coreData[_DYN_PAGE_NAME /* @min:%2epageName */]) {\r\n        return config.coreData[_DYN_PAGE_NAME /* @min:%2epageName */];\r\n    }\r\n    else {\r\n        var doc = getDocument();\r\n        return doc && doc.title || \"\";\r\n    }\r\n}\r\n/**\r\n * Sanitize URL values\r\n * @param config - Configuration\r\n * @param location - window.location or document.location\r\n * @returns Flag indicating if an element is market PII.\r\n */\r\nexport function sanitizeUrl(config, location) {\r\n    if (!location) {\r\n        return null;\r\n    }\r\n    var url = location.protocol + \"//\" + (location.hostname || location.host) + // location.hostname is not supported on Opera and Opera for Android\r\n        (isValueAssigned(location.port) ? \":\" + location.port : \"\") +\r\n        location[_DYN_PATHNAME /* @min:%2epathname */];\r\n    if (!!config.urlCollectHash) { // false by default\r\n        url += (isValueAssigned(location.hash) ? location.hash : \"\");\r\n    }\r\n    if (!!config.urlCollectQuery) { // false by default\r\n        url += (isValueAssigned(location.search) ? location.search : \"\");\r\n    }\r\n    return url;\r\n}\r\n/**\r\n * Get URI, sanitize the value if configured on\r\n * @param config - Configuration\r\n * @param location - window.location or document.location\r\n * @returns Flag indicating if an element is market PII.\r\n */\r\nexport function getUri(config, location) {\r\n    if (config.coreData && config.coreData[_DYN_REQUEST_URI /* @min:%2erequestUri */] && config[_DYN_CORE_DATA /* @min:%2ecoreData */][_DYN_REQUEST_URI /* @min:%2erequestUri */] !== \"\") {\r\n        return config.coreData[_DYN_REQUEST_URI /* @min:%2erequestUri */];\r\n    }\r\n    return sanitizeUrl(config, location);\r\n}\r\n//# sourceMappingURL=DataCollector.js.map", "/**\r\n* @copyright Microsoft 2020\r\n*/\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { getLocation, hasWindow, objExtend } from \"@microsoft/applicationinsights-core-js\";\r\nimport { getPageName, getUri } from \"../DataCollector\";\r\nimport { _DYN_BEHAVIOR, _DYN_BEHAVIOR_VALIDATOR, _DYN_CORE_DATA, _DYN_NAME, _DYN_PAGE_NAME, _DYN_PAGE_TYPE, _DYN_PROPERTIES, _DYN_SET_BASIC_PROPERTIES, _DYN_SET_COMMON_PROPERTIE4, _DYN__BEHAVIOR_META_TAG, _DYN__CONFIG, _DYN__DO_UNLOAD, _DYN__GET_VALID_BEHAVIOR, _DYN__META_TAGS, _DYN__PAGE_TAGS, _DYN__PAGE_TAGS_CALLBACK, _DYN__PAGE_TYPE_META_TAG, _DYN__TRACE_LOGGER } from \"../__DynamicConstants\";\r\nimport { isValueAssigned } from \"../common/Utils\";\r\nvar WebEvent = /** @class */ (function () {\r\n    /**\r\n     * @param clickAnalyticsPlugin - Click Analytics plugin instance\r\n     * @param config - ClickAnalytics configuration object\r\n     * @param contentHandler - Content handler\r\n     * @param id - Id object\r\n     * @param pageTagsCallback - callback methods to get pageTags value\r\n     * @param metaTags - Meta tags\r\n     * @param traceLogger - Trace logger to log to console.\r\n     */\r\n    function WebEvent(clickAnalyticsPlugin, config, contentHandler, pageTagsCallback, metaTags, traceLogger) {\r\n        dynamicProto(WebEvent, this, function (_self) {\r\n            _initDefaults();\r\n            function _initDefaults() {\r\n                _self[_DYN__PAGE_TAGS /* @min:%2e_pageTags */] = {};\r\n                _self._clickAnalyticsPlugin = clickAnalyticsPlugin;\r\n                _self[_DYN__CONFIG /* @min:%2e_config */] = config;\r\n                _self._contentHandler = contentHandler;\r\n                _self[_DYN__PAGE_TAGS_CALLBACK /* @min:%2e_pageTagsCallback */] = pageTagsCallback;\r\n                _self[_DYN__META_TAGS /* @min:%2e_metaTags */] = metaTags;\r\n                _self[_DYN__TRACE_LOGGER /* @min:%2e_traceLogger */] = traceLogger;\r\n            }\r\n            _self[_DYN_SET_BASIC_PROPERTIES /* @min:%2esetBasicProperties */] = function (event, overrideValues) {\r\n                if (!isValueAssigned(event[_DYN_NAME /* @min:%2ename */])) {\r\n                    event[_DYN_PAGE_NAME /* @min:%2epageName */] = getPageName(_self[_DYN__CONFIG /* @min:%2e_config */], overrideValues);\r\n                }\r\n                if (!isValueAssigned(event.uri) && hasWindow()) {\r\n                    event.uri = getUri(_self[_DYN__CONFIG /* @min:%2e_config */], getLocation());\r\n                }\r\n            };\r\n            /**\r\n             * Sets common properties for events that are based on the WebEvent schema.\r\n             * @param event - The event\r\n             */\r\n            _self[_DYN_SET_COMMON_PROPERTIE4 /* @min:%2esetCommonProperties */] = function (event, overrideValues) {\r\n                _self[_DYN_SET_BASIC_PROPERTIES /* @min:%2esetBasicProperties */](event, overrideValues);\r\n                _self._setPageTags(event, overrideValues);\r\n                // extract specific meta tags out of the pageTags.metaTags collection.  These will go into assigned first class fields in the event.\r\n                // the rest will go into pageTags.metaTags collection as is.\r\n                _self._pageTypeMetaTag = _getMetaData(_self._metaTags, _self._config[_DYN_CORE_DATA /* @min:%2ecoreData */], \"pageType\");\r\n                _self._behaviorMetaTag = _getMetaData(_self._metaTags, _self._config[_DYN_CORE_DATA /* @min:%2ecoreData */], \"behavior\");\r\n                if (isValueAssigned(overrideValues[_DYN_PAGE_TYPE /* @min:%2epageType */])) {\r\n                    event[_DYN_PAGE_TYPE /* @min:%2epageType */] = overrideValues[_DYN_PAGE_TYPE /* @min:%2epageType */];\r\n                }\r\n                // Only assign if not overriden and meta data is available\r\n                if (isValueAssigned(_self._pageTypeMetaTag) && !isValueAssigned(event[_DYN_PAGE_TYPE /* @min:%2epageType */])) {\r\n                    event[_DYN_PAGE_TYPE /* @min:%2epageType */] = _self[_DYN__PAGE_TYPE_META_TAG /* @min:%2e_pageTypeMetaTag */];\r\n                }\r\n            };\r\n            /**\r\n             * Sets pageTags.\r\n             * @param event - The event\r\n             */\r\n            _self._setPageTags = function (event, overrideValues) {\r\n                // Prepare the pageTags object that is mostly the same for all events.  Event specific pageTags will be added inside event constructors.\r\n                if (_self[_DYN__PAGE_TAGS_CALLBACK /* @min:%2e_pageTagsCallback */]) {\r\n                    _self[_DYN__PAGE_TAGS /* @min:%2e_pageTags */] = objExtend(true, _self[_DYN__PAGE_TAGS /* @min:%2e_pageTags */], _self[_DYN__PAGE_TAGS_CALLBACK /* @min:%2e_pageTagsCallback */]());\r\n                }\r\n                if (isValueAssigned(overrideValues.pageTags)) {\r\n                    _self[_DYN__PAGE_TAGS /* @min:%2e_pageTags */] = objExtend(true, _self[_DYN__PAGE_TAGS /* @min:%2e_pageTags */], overrideValues.pageTags);\r\n                }\r\n                // If metadata is present add it to pageTags property\r\n                if (_self[_DYN__META_TAGS /* @min:%2e_metaTags */]) {\r\n                    _self[_DYN__PAGE_TAGS /* @min:%2e_pageTags */].metaTags = {};\r\n                    // Remove not supported meta data in pageTags.metaTags\r\n                    for (var metaTag in _self[_DYN__META_TAGS /* @min:%2e_metaTags */]) {\r\n                        if (metaTag != \"behavior\" && metaTag != \"market\" && metaTag != \"pageType\") {\r\n                            _self[_DYN__PAGE_TAGS /* @min:%2e_pageTags */].metaTags[metaTag] = _self[_DYN__META_TAGS /* @min:%2e_metaTags */][metaTag];\r\n                        }\r\n                    }\r\n                }\r\n                // All metadata tags that must be saved as properties have been extracted at this point.  Assign pageTags as is.\r\n                event[_DYN_PROPERTIES /* @min:%2eproperties */] = event[_DYN_PROPERTIES /* @min:%2eproperties */] || {};\r\n                event[_DYN_PROPERTIES /* @min:%2eproperties */][\"pageTags\"] = _self[_DYN__PAGE_TAGS /* @min:%2e_pageTags */];\r\n            };\r\n            _self._getBehavior = function (overrideValues) {\r\n                var behavior;\r\n                // If override specified\r\n                if (overrideValues && isValueAssigned(overrideValues[_DYN_BEHAVIOR /* @min:%2ebehavior */])) {\r\n                    behavior = overrideValues[_DYN_BEHAVIOR /* @min:%2ebehavior */];\r\n                }\r\n                else if (isValueAssigned(_self[_DYN__BEHAVIOR_META_TAG /* @min:%2e_behaviorMetaTag */])) {\r\n                    // If behavior meta tag available\r\n                    behavior = _self[_DYN__BEHAVIOR_META_TAG /* @min:%2e_behaviorMetaTag */];\r\n                }\r\n                return _self[_DYN__GET_VALID_BEHAVIOR /* @min:%2e_getValidBehavior */](behavior);\r\n            };\r\n            _self[_DYN__GET_VALID_BEHAVIOR /* @min:%2e_getValidBehavior */] = function (behavior) {\r\n                return _self._config[_DYN_BEHAVIOR_VALIDATOR /* @min:%2ebehaviorValidator */](behavior);\r\n            };\r\n            _self[_DYN__DO_UNLOAD /* @min:%2e_doUnload */] = function (unloadCtx, unloadState, asyncCallback) {\r\n                _initDefaults();\r\n            };\r\n            /**\r\n             * Get the specified metadata value from the collection\r\n             * If overrideValue is specified in the config that takes precedence.\r\n             * @param metaTags - Meta data.\r\n             * @param coreData - Coredata values from configuration.\r\n             * @param metaTagName - Name of the metaTag to get.\r\n             * @returns Meta data value\r\n             */\r\n            function _getMetaData(metaTags, coreData, metaTagName) {\r\n                if (coreData && coreData[metaTagName]) {\r\n                    return coreData[metaTagName];\r\n                }\r\n                if (metaTags) {\r\n                    return metaTags[metaTagName];\r\n                }\r\n                return \"\";\r\n            }\r\n        });\r\n    }\r\n    // Fill common PartB fields\r\n    WebEvent.prototype.setBasicProperties = function (event, overrideValues) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Sets common properties for events that are based on the WebEvent schema.\r\n     * @param event - The event\r\n     */\r\n    WebEvent.prototype.setCommonProperties = function (event, overrideValues) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Teardown / Unload hook to allow implementations to perform some additional unload operations before the BaseTelemetryPlugin\r\n     * finishes it's removal.\r\n     * @param unloadCtx - This is the context that should be used during unloading.\r\n     * @param unloadState - The details / state of the unload process, it holds details like whether it should be unloaded synchronously or asynchronously and the reason for the unload.\r\n     * @param asyncCallback - An optional callback that the plugin must call if it returns true to inform the caller that it has completed any async unload/teardown operations.\r\n     * @returns boolean - true if the plugin has or will call asyncCallback, this allows the plugin to perform any asynchronous operations.\r\n     */\r\n    WebEvent.prototype._doUnload = function (unloadCtx, unloadState, asyncCallback) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Sets pageTags.\r\n     * @param event - The event\r\n     */\r\n    WebEvent.prototype._setPageTags = function (event, overrideValues) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    WebEvent.prototype._getBehavior = function (overrideValues) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    WebEvent.prototype._getValidBehavior = function (behavior) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    return WebEvent;\r\n}());\r\nexport { WebEvent };\r\n//# sourceMappingURL=WebEvent.js.map", "/**\r\n* @copyright Microsoft 2020\r\n*/\r\nimport { __extends } from \"tslib\";\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { strNotSpecified } from \"@microsoft/applicationinsights-common\";\r\nimport { _throwInternal, getPerformance, objExtend, objForEachKey } from \"@microsoft/applicationinsights-core-js\";\r\nimport { getClickTarget } from \"../DataCollector\";\r\nimport { _DYN_ACTION_TYPE, _DYN_BEHAVIOR, _DYN_CAPTURE_PAGE_ACTION, _DYN_CLICK_COORDINATES, _DYN_CLICK_COORDINATE_X, _DYN_CLICK_COORDINATE_Y, _DYN_CONTENT, _DYN_CONTENT_NAME, _DYN_CORE_DATA, _DYN_DATA, _DYN_DATA_TAGS, _DYN_DEFAULT_RIGHT_CLICK_3, _DYN_GET_ELEMENT_CONTENT, _DYN_NAME, _DYN_PAGE_NAME, _DYN_PAGE_TYPE, _DYN_PARENT_DATA_TAG, _DYN_PARENT_ID, _DYN_PROPERTIES, _DYN_REF_URI, _DYN_SET_COMMON_PROPERTIE4, _DYN_TRACK_PAGE_ACTION, _DYN__CONFIG, _DYN__GET_VALID_BEHAVIOR, _DYN__TRACE_LOGGER } from \"../__DynamicConstants\";\r\nimport { bracketIt, extractFieldFromObject, isValueAssigned } from \"../common/Utils\";\r\nimport { WebEvent } from \"./WebEvent\";\r\nvar PageAction = /** @class */ (function (_super) {\r\n    __extends(PageAction, _super);\r\n    function PageAction(clickAnalyticsPlugin, config, contentHandler, pageTagsCallback, metaTags, traceLogger) {\r\n        var _this = _super.call(this, clickAnalyticsPlugin, config, contentHandler, pageTagsCallback, metaTags, traceLogger) || this;\r\n        dynamicProto(PageAction, _this, function (_self, _base) {\r\n            _self[_DYN_TRACK_PAGE_ACTION /* @min:%2etrackPageAction */] = function (pageActionEvent, properties) {\r\n                // Get part A properties\r\n                var ext = {};\r\n                ext[\"web\"] = {};\r\n                var event = {\r\n                    name: \"Microsoft.ApplicationInsights.{0}.Event\",\r\n                    baseType: \"EventData\",\r\n                    ext: ext,\r\n                    data: {},\r\n                    baseData: {}\r\n                };\r\n                _populateEventDataIfPresent(event.baseData, \"name\", pageActionEvent[_DYN_NAME /* @min:%2ename */]);\r\n                _populateEventDataIfPresent(event[_DYN_DATA /* @min:%2edata */], \"baseTypeSource\", \"ClickEvent\");\r\n                _populateEventDataIfPresent(event[_DYN_DATA /* @min:%2edata */], \"uri\", pageActionEvent.uri);\r\n                _populateEventDataIfPresent(event.data, \"pageType\", pageActionEvent[_DYN_PAGE_TYPE /* @min:%2epageType */]);\r\n                _populateEventDataIfPresent(event[_DYN_DATA /* @min:%2edata */], \"properties\", pageActionEvent[_DYN_PROPERTIES /* @min:%2eproperties */]);\r\n                _populateEventDataIfPresent(event[_DYN_DATA /* @min:%2edata */], \"actionType\", pageActionEvent[_DYN_ACTION_TYPE /* @min:%2eactionType */]);\r\n                _populateEventDataIfPresent(event[_DYN_DATA /* @min:%2edata */], \"behavior\", pageActionEvent[_DYN_BEHAVIOR /* @min:%2ebehavior */]);\r\n                _populateEventDataIfPresent(event[_DYN_DATA /* @min:%2edata */], \"clickCoordinates\", pageActionEvent[_DYN_CLICK_COORDINATES /* @min:%2eclickCoordinates */]);\r\n                _populateEventDataIfPresent(event[_DYN_DATA /* @min:%2edata */], \"content\", pageActionEvent[_DYN_CONTENT /* @min:%2econtent */]);\r\n                _populateEventDataIfPresent(event[_DYN_DATA /* @min:%2edata */], \"targetUri\", pageActionEvent.targetUri);\r\n                _populateEventDataIfPresent(event[_DYN_DATA /* @min:%2edata */], \"timeToAction\", pageActionEvent.timeToAction);\r\n                _populateEventDataIfPresent(event[_DYN_DATA /* @min:%2edata */], \"refUri\", pageActionEvent[_DYN_REF_URI /* @min:%2erefUri */]);\r\n                _populateEventDataIfPresent(event.data, \"pageName\", pageActionEvent[_DYN_PAGE_NAME /* @min:%2epageName */]);\r\n                _populateEventDataIfPresent(event[_DYN_DATA /* @min:%2edata */], \"parentId\", pageActionEvent[_DYN_PARENT_ID /* @min:%2eparentId */]);\r\n                if (properties) {\r\n                    objForEachKey(properties, function (property, value) {\r\n                        if (!event[_DYN_DATA /* @min:%2edata */][property]) {\r\n                            _populateEventDataIfPresent(event[_DYN_DATA /* @min:%2edata */], property, value);\r\n                        }\r\n                    });\r\n                }\r\n                _self._clickAnalyticsPlugin.core.track(event);\r\n            };\r\n            /**\r\n             * API to create and send a populated PageAction event\r\n             * @param element - DOM element\r\n             * @param overrideValues - PageAction overrides\r\n             * @param customProperties - Custom properties(Part C)\r\n             * @param isRightClick - Flag for mouse right clicks\r\n             */\r\n            _self[_DYN_CAPTURE_PAGE_ACTION /* @min:%2ecapturePageAction */] = function (element, overrideValues, customProperties, isRightClick) {\r\n                overrideValues = !isValueAssigned(overrideValues) ? {} : overrideValues;\r\n                var pageActionEvent = { name: \"\" };\r\n                var pageActionProperties = isValueAssigned(customProperties) ? customProperties : {};\r\n                _self[_DYN_SET_COMMON_PROPERTIE4 /* @min:%2esetCommonProperties */](pageActionEvent, overrideValues);\r\n                pageActionEvent[_DYN_BEHAVIOR /* @min:%2ebehavior */] = _self._getBehavior(overrideValues);\r\n                // element in scope is needed for below properties.  We cannot pass element into the plugin call chain.\r\n                // process them here.\r\n                var elementContent = {};\r\n                if (isRightClick) {\r\n                    // Default behavior for righ click\r\n                    pageActionEvent.behavior = _self._config[_DYN_DEFAULT_RIGHT_CLICK_3 /* @min:%2edefaultRightClickBhvr */];\r\n                }\r\n                // Fill PartB\r\n                if (element) {\r\n                    pageActionEvent.targetUri = getClickTarget(element);\r\n                    elementContent = _self._contentHandler[_DYN_GET_ELEMENT_CONTENT /* @min:%2egetElementContent */](element); // collect id,cn tags\r\n                    // if the element has a data-*-bhvr attrib defined, use it.\r\n                    if (elementContent.bhvr && !isValueAssigned(overrideValues[_DYN_BEHAVIOR /* @min:%2ebehavior */])) {\r\n                        var currentBehavior = extractFieldFromObject(elementContent, \"bhvr\");\r\n                        pageActionEvent[_DYN_BEHAVIOR /* @min:%2ebehavior */] = _self[_DYN__GET_VALID_BEHAVIOR /* @min:%2e_getValidBehavior */](currentBehavior);\r\n                    }\r\n                    // Validate to ensure the minimum required field 'contentName' or 'id' is present. However,\r\n                    // requiring these fields would result in majority of adopter's content from being collected.\r\n                    // Just throw a warning and continue collection.\r\n                    if (!isValueAssigned(elementContent.id) && !isValueAssigned(elementContent[_DYN_CONTENT_NAME /* @min:%2econtentName */])) {\r\n                        _throwInternal(_self[_DYN__TRACE_LOGGER /* @min:%2e_traceLogger */], 2 /* eLoggingSeverity.WARNING */, 102 /* _eInternalMessageId.InvalidContentBlob */, \"Missing attributes id or contentName in click event. Click event information will still be collected!\");\r\n                    }\r\n                }\r\n                pageActionEvent.name = elementContent.id || elementContent[_DYN_CONTENT_NAME /* @min:%2econtentName */] || strNotSpecified;\r\n                pageActionEvent[_DYN_PARENT_ID /* @min:%2eparentId */] = elementContent.parentid || elementContent.parentName || strNotSpecified;\r\n                if (isValueAssigned(overrideValues[_DYN_ACTION_TYPE /* @min:%2eactionType */])) {\r\n                    pageActionEvent[_DYN_ACTION_TYPE /* @min:%2eactionType */] = overrideValues[_DYN_ACTION_TYPE /* @min:%2eactionType */];\r\n                }\r\n                if (isValueAssigned(overrideValues[_DYN_CLICK_COORDINATE_X /* @min:%2eclickCoordinateX */]) && isValueAssigned(overrideValues[_DYN_CLICK_COORDINATE_Y /* @min:%2eclickCoordinateY */])) {\r\n                    pageActionEvent[_DYN_CLICK_COORDINATES /* @min:%2eclickCoordinates */] = overrideValues[_DYN_CLICK_COORDINATE_X /* @min:%2eclickCoordinateX */] + \"X\" + overrideValues[_DYN_CLICK_COORDINATE_Y /* @min:%2eclickCoordinateY */];\r\n                }\r\n                _sanitizePageActionEventContent(elementContent);\r\n                pageActionEvent[_DYN_CONTENT /* @min:%2econtent */] = bracketIt(JSON.stringify(objExtend(elementContent, overrideValues && overrideValues.contentTags ? overrideValues.contentTags : {})));\r\n                pageActionEvent.timeToAction = _getTimeToClick();\r\n                pageActionEvent.refUri = isValueAssigned(overrideValues.refUri) ? overrideValues.refUri : _self._config[_DYN_CORE_DATA /* @min:%2ecoreData */].referrerUri;\r\n                if (_isUndefinedEvent(pageActionEvent)) {\r\n                    return;\r\n                }\r\n                _self[_DYN_TRACK_PAGE_ACTION /* @min:%2etrackPageAction */](pageActionEvent, pageActionProperties);\r\n            };\r\n            // capture performance data into PageTags\r\n            function _getTimeToClick() {\r\n                var perf = getPerformance();\r\n                if (perf && perf.timing) {\r\n                    var isNavigationStart = perf.timing.navigationStart;\r\n                    if (isNavigationStart && isNavigationStart !== 0) {\r\n                        return new Date().getTime() - isNavigationStart;\r\n                    }\r\n                }\r\n                return -1;\r\n            }\r\n            function _populateEventDataIfPresent(obj, property, value) {\r\n                if (isValueAssigned(value)) {\r\n                    obj[property] = value;\r\n                }\r\n            }\r\n            function _sanitizePageActionEventContent(pageActionContent) {\r\n                if (pageActionContent) {\r\n                    delete pageActionContent.id;\r\n                    delete pageActionContent.parentid;\r\n                    delete pageActionContent.parentname;\r\n                    if (_self._config && _self._config.dataTags && isValueAssigned(_self._config.dataTags[_DYN_PARENT_DATA_TAG /* @min:%2eparentDataTag */])) {\r\n                        delete pageActionContent[_self[_DYN__CONFIG /* @min:%2e_config */][_DYN_DATA_TAGS /* @min:%2edataTags */].parentDataTag];\r\n                    }\r\n                }\r\n            }\r\n            function _isUndefinedEvent(pageActionEvent) {\r\n                if (_self[_DYN__CONFIG /* @min:%2e_config */].dropInvalidEvents) {\r\n                    if (pageActionEvent[_DYN_NAME /* @min:%2ename */] === strNotSpecified\r\n                        && pageActionEvent[_DYN_PARENT_ID /* @min:%2eparentId */] === strNotSpecified\r\n                        && pageActionEvent[_DYN_CONTENT /* @min:%2econtent */] === \"[{}]\") {\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n        return _this;\r\n    }\r\n    /**\r\n     * API to send pageAction event\r\n     * @param pageActionEvent - PageAction event\r\n     * @param properties - PageAction properties(Part C)\r\n     */\r\n    PageAction.prototype.trackPageAction = function (pageActionEvent, properties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * API to create and send a populated PageAction event\r\n     * @param element - DOM element\r\n     * @param overrideValues - PageAction overrides\r\n     * @param customProperties - Custom properties(Part C)\r\n     * @param isRightClick - Flag for mouse right clicks\r\n     */\r\n    PageAction.prototype.capturePageAction = function (element, overrideValues, customProperties, isRightClick) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    return PageAction;\r\n}(WebEvent));\r\nexport { PageAction };\r\n//# sourceMappingURL=PageAction.js.map", "/**\r\n* @copyright Microsoft 2020\r\n*/\r\nexport var ActionType = {\r\n    CLICKLEFT: \"CL\",\r\n    CLICKRIGHT: \"CR\",\r\n    CLICKMIDDLE: \"CM\",\r\n    SCROLL: \"S\",\r\n    ZOOM: \"Z\",\r\n    RESIZE: \"R\",\r\n    KEYBOARDENTER: \"KE\",\r\n    KEYBOARDSPACE: \"KS\",\r\n    OTHER: \"O\"\r\n};\r\n//# sourceMappingURL=Enums.js.map", "/**\r\n* @copyright Microsoft 2020\r\n*/\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { createUniqueNamespace, eventOff, eventOn, getDocument, getWindow, isNullOrUndefined, mergeEvtNamespace } from \"@microsoft/applicationinsights-core-js\";\r\nimport { ActionType } from \"../Enums\";\r\nimport { _DYN_ACTION_TYPE, _DYN_CAPTURE_PAGE_ACTION, _DYN_CLICK_COORDINATE_X, _DYN_CLICK_COORDINATE_Y, _DYN_CUSTOM_DATA_PREFIX, _DYN_DATA_TAGS, _DYN_INDEX_OF, _DYN_PARENT_NODE, _DYN_TAG_NAME, _DYN_TO_UPPER_CASE, _DYN__CONFIG, _DYN__DO_UNLOAD } from \"../__DynamicConstants\";\r\nimport { isElementDnt, isKeyboardEnter, isKeyboardSpace, isLeftClick, isMiddleClick, isRightClick } from \"../common/Utils\";\r\nvar clickCaptureInputTypes = { BUTTON: true, CHECKBOX: true, RADIO: true, RESET: true, SUBMIT: true };\r\nvar AutoCaptureHandler = /** @class */ (function () {\r\n    /**\r\n     * @param analyticsPlugin - WebAnalytics plugin\r\n     * @param traceLogger - Trace logger to log to console.\r\n     */\r\n    function AutoCaptureHandler(_analyticsPlugin, _config, _pageAction, _traceLogger) {\r\n        this._analyticsPlugin = _analyticsPlugin;\r\n        this._config = _config;\r\n        this._pageAction = _pageAction;\r\n        this._traceLogger = _traceLogger;\r\n        var _evtNamespace = mergeEvtNamespace(createUniqueNamespace(\"AutoCaptureHandler\"), _analyticsPlugin._evtNamespace);\r\n        dynamicProto(AutoCaptureHandler, this, function (_self) {\r\n            _self.click = function () {\r\n                var win = getWindow();\r\n                var doc = getDocument();\r\n                if (win) {\r\n                    // IE9 onwards addEventListener is available, 'click' event captures mouse click. mousedown works on other browsers\r\n                    var event_1 = (navigator.appVersion[_DYN_INDEX_OF /* @min:%2eindexOf */](\"MSIE\") !== -1) ? \"click\" : \"mousedown\";\r\n                    eventOn(win, event_1, _processClick, _evtNamespace);\r\n                    eventOn(win, \"keyup\", _processClick, _evtNamespace);\r\n                }\r\n                else if (doc) {\r\n                    // IE8 and below doesn't have addEventListener so it will use attachEvent\r\n                    // attaching to window does not work in IE8\r\n                    eventOn(doc, \"click\", _processClick, _evtNamespace);\r\n                    eventOn(doc, \"keyup\", _processClick, _evtNamespace);\r\n                }\r\n            };\r\n            _self[_DYN__DO_UNLOAD /* @min:%2e_doUnload */] = function (unloadCtx, unloadState, asyncCallback) {\r\n                eventOff(getWindow(), null, null, _evtNamespace);\r\n                eventOff(getDocument(), null, null, _evtNamespace);\r\n            };\r\n            function _capturePageAction(element, overrideValues, customProperties, isRightClick) {\r\n                var donotTrackTag = _self._config.dataTags[_DYN_CUSTOM_DATA_PREFIX /* @min:%2ecustomDataPrefix */] + _self[_DYN__CONFIG /* @min:%2e_config */][_DYN_DATA_TAGS /* @min:%2edataTags */].dntDataTag;\r\n                if (!isElementDnt(element, donotTrackTag)) {\r\n                    _self._pageAction[_DYN_CAPTURE_PAGE_ACTION /* @min:%2ecapturePageAction */](element, overrideValues, customProperties, isRightClick);\r\n                }\r\n            }\r\n            // Process click event\r\n            function _processClick(clickEvent) {\r\n                var _a;\r\n                var clickCaptureElements = { A: true, BUTTON: true, AREA: true, INPUT: true };\r\n                var win = getWindow();\r\n                if (isNullOrUndefined(clickEvent) && win) {\r\n                    clickEvent = win.event; // IE 8 does not pass the event\r\n                }\r\n                if (clickEvent) {\r\n                    var element = clickEvent.srcElement || clickEvent.target;\r\n                    // populate overrideValues\r\n                    var overrideValues = (_a = {},\r\n                        _a[_DYN_CLICK_COORDINATE_X /* @min:clickCoordinateX */] = clickEvent.pageX,\r\n                        _a[_DYN_CLICK_COORDINATE_Y /* @min:clickCoordinateY */] = clickEvent.pageY,\r\n                        _a);\r\n                    var isRightClickObj = isRightClick(clickEvent);\r\n                    if (isRightClickObj) {\r\n                        overrideValues[_DYN_ACTION_TYPE /* @min:%2eactionType */] = ActionType.CLICKRIGHT;\r\n                    }\r\n                    else if (isLeftClick(clickEvent)) {\r\n                        overrideValues[_DYN_ACTION_TYPE /* @min:%2eactionType */] = ActionType.CLICKLEFT;\r\n                    }\r\n                    else if (isKeyboardEnter(clickEvent)) {\r\n                        overrideValues[_DYN_ACTION_TYPE /* @min:%2eactionType */] = ActionType.KEYBOARDENTER;\r\n                    }\r\n                    else if (isKeyboardSpace(clickEvent)) {\r\n                        overrideValues[_DYN_ACTION_TYPE /* @min:%2eactionType */] = ActionType.KEYBOARDSPACE;\r\n                    }\r\n                    else if (isMiddleClick(clickEvent)) {\r\n                        overrideValues[_DYN_ACTION_TYPE /* @min:%2eactionType */] = ActionType.CLICKMIDDLE;\r\n                    }\r\n                    else {\r\n                        return;\r\n                    }\r\n                    while (element && element[_DYN_TAG_NAME /* @min:%2etagName */]) {\r\n                        // control property will be available for <label> elements with 'for' attribute, only use it when is a\r\n                        // valid JSLL capture element to avoid infinite loops\r\n                        if (element.control && clickCaptureElements[element.control[_DYN_TAG_NAME /* @min:%2etagName */][_DYN_TO_UPPER_CASE /* @min:%2etoUpperCase */]()]) {\r\n                            element = element.control;\r\n                        }\r\n                        var tagNameUpperCased = element[_DYN_TAG_NAME /* @min:%2etagName */][_DYN_TO_UPPER_CASE /* @min:%2etoUpperCase */]();\r\n                        if (!clickCaptureElements[tagNameUpperCased]) {\r\n                            element = element.parentElement || element[_DYN_PARENT_NODE /* @min:%2eparentNode */];\r\n                            continue;\r\n                        }\r\n                        else {\r\n                            // Check allowed INPUT types\r\n                            var sendEvent = tagNameUpperCased === \"INPUT\" ? clickCaptureInputTypes[element.type[_DYN_TO_UPPER_CASE /* @min:%2etoUpperCase */]()] : true;\r\n                            if (sendEvent) {\r\n                                _capturePageAction(element, overrideValues, {}, isRightClickObj);\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    // handle automatic event firing on user click\r\n    AutoCaptureHandler.prototype.click = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    AutoCaptureHandler.prototype._doUnload = function (unloadCtx, unloadState, asyncCallback) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    return AutoCaptureHandler;\r\n}());\r\nexport { AutoCaptureHandler };\r\n//# sourceMappingURL=AutoCaptureHandler.js.map", "/**\r\n* @copyright Microsoft 2020\r\n*/\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { _throwInternal, getDocument, hasDocument, isNullOrUndefined, objExtend } from \"@microsoft/applicationinsights-core-js\";\r\nimport { strSubstring } from \"@nevware21/ts-utils\";\r\nimport { _DYN_ATTRIBUTES, _DYN_CAPTURE_ALL_META_DAT2, _DYN_CONTENT, _DYN_CONTENT_NAME, _DYN_CUSTOM_DATA_PREFIX, _DYN_DATA_TAGS, _DYN_GET_ATTRIBUTE, _DYN_GET_ELEMENT_CONTENT, _DYN_INDEX_OF, _DYN_LENGTH, _DYN_META_DATA_PREFIX, _DYN_NAME, _DYN_PARENT_DATA_TAG, _DYN_PARENT_ELEMENT, _DYN_PARENT_NODE, _DYN_TAG_NAME, _DYN_USE_DEFAULT_CONTENT_1, _DYN__CONFIG, _DYN__TRACE_LOGGER } from \"../__DynamicConstants\";\r\nimport { isValueAssigned, removeInvalidElements, walkUpDomChainWithElementValidation } from \"../common/Utils\";\r\nvar MAX_CONTENTNAME_LENGTH = 200;\r\nvar DomContentHandler = /** @class */ (function () {\r\n    /**\r\n     * @param config - ClickAnalytics configuration object\r\n     * @param traceLogger - Trace logger to log to console.\r\n     */\r\n    function DomContentHandler(_config, _traceLogger) {\r\n        this._config = _config;\r\n        this._traceLogger = _traceLogger;\r\n        dynamicProto(DomContentHandler, this, function (_self) {\r\n            _self.getMetadata = function () {\r\n                var dataTags = (_self[_DYN__CONFIG /* @min:%2e_config */] || {})[_DYN_DATA_TAGS /* @min:%2edataTags */];\r\n                var metaTags = {};\r\n                if (hasDocument()) {\r\n                    metaTags = isValueAssigned(dataTags.metaDataPrefix) ? _getMetaDataFromDOM(dataTags[_DYN_CAPTURE_ALL_META_DAT2 /* @min:%2ecaptureAllMetaDataContent */], dataTags[_DYN_META_DATA_PREFIX /* @min:%2emetaDataPrefix */], false) :\r\n                        _getMetaDataFromDOM(dataTags[_DYN_CAPTURE_ALL_META_DAT2 /* @min:%2ecaptureAllMetaDataContent */], \"\", false);\r\n                }\r\n                return metaTags;\r\n            };\r\n            _self[_DYN_GET_ELEMENT_CONTENT /* @min:%2egetElementContent */] = function (element) {\r\n                if (!element) {\r\n                    return {};\r\n                }\r\n                var dataTags = (_self[_DYN__CONFIG /* @min:%2e_config */] || {})[_DYN_DATA_TAGS /* @min:%2edataTags */];\r\n                var elementContent = {};\r\n                var biBlobValue;\r\n                var parentDataTagPrefix;\r\n                var dataTagPrefix = dataTags[_DYN_CUSTOM_DATA_PREFIX /* @min:%2ecustomDataPrefix */];\r\n                var aiBlobAttributeTag = dataTagPrefix + dataTags.aiBlobAttributeTag;\r\n                if (isValueAssigned(dataTags[_DYN_PARENT_DATA_TAG /* @min:%2eparentDataTag */])) {\r\n                    parentDataTagPrefix = dataTagPrefix + dataTags[_DYN_PARENT_DATA_TAG /* @min:%2eparentDataTag */];\r\n                }\r\n                if (!_isTracked(element, dataTagPrefix, aiBlobAttributeTag)) {\r\n                    // capture blob from element or hierarchy\r\n                    biBlobValue = element[_DYN_GET_ATTRIBUTE /* @min:%2egetAttribute */](aiBlobAttributeTag);\r\n                    if (biBlobValue) {\r\n                        try {\r\n                            elementContent = JSON.parse(biBlobValue);\r\n                        }\r\n                        catch (e) {\r\n                            _throwInternal(_self[_DYN__TRACE_LOGGER /* @min:%2e_traceLogger */], 1 /* eLoggingSeverity.CRITICAL */, 101 /* _eInternalMessageId.CannotParseAiBlobValue */, \"Can not parse \" + biBlobValue);\r\n                        }\r\n                    }\r\n                    else {\r\n                        // traverse up the DOM to find the closest parent with data-* tag defined\r\n                        //contentElement = walkUpDomChainWithElementValidation(element, _self._isTracked, dataTagPrefix);\r\n                        elementContent = objExtend(elementContent, _populateElementContent(element, dataTagPrefix, parentDataTagPrefix, aiBlobAttributeTag));\r\n                    }\r\n                }\r\n                else {\r\n                    elementContent = objExtend(elementContent, _populateElementContentwithDataTag(element, dataTagPrefix, parentDataTagPrefix, aiBlobAttributeTag));\r\n                }\r\n                removeInvalidElements(elementContent);\r\n                if (parentDataTagPrefix) {\r\n                    elementContent = objExtend(elementContent, _getParentDetails(element, elementContent, dataTagPrefix, aiBlobAttributeTag));\r\n                }\r\n                return elementContent;\r\n            };\r\n            /**\r\n             * Capture current level Element content\r\n             */\r\n            function _captureElementContentWithDataTag(contentElement, elementContent, dataTagPrefix) {\r\n                for (var i = 0, attrib; i < contentElement.attributes[_DYN_LENGTH /* @min:%2elength */]; i++) {\r\n                    attrib = contentElement[_DYN_ATTRIBUTES /* @min:%2eattributes */][i];\r\n                    if (attrib.name[_DYN_INDEX_OF /* @min:%2eindexOf */](dataTagPrefix) !== 0) {\r\n                        continue;\r\n                    }\r\n                    var attribName = attrib[_DYN_NAME /* @min:%2ename */].replace(dataTagPrefix, \"\");\r\n                    elementContent[attribName] = attrib.value;\r\n                }\r\n            }\r\n            /**\r\n             * Walk Up the DOM to capture Element content\r\n             */\r\n            function _walkUpDomChainCaptureData(el, elementContent, dataTagPrefix, parentDataTagPrefix, aiBlobAttributeTag) {\r\n                var element = el;\r\n                var parentDataTagFound = false;\r\n                var elementLevelFlag = false; // Use this flag to capture 'id' only at the incoming html element level.\r\n                while (!isNullOrUndefined(element) && !isNullOrUndefined(element[_DYN_ATTRIBUTES /* @min:%2eattributes */])) {\r\n                    var attributes = element[_DYN_ATTRIBUTES /* @min:%2eattributes */];\r\n                    for (var i = 0; i < attributes[_DYN_LENGTH /* @min:%2elength */]; i++) {\r\n                        var attrib = attributes[i];\r\n                        if (attrib.name[_DYN_INDEX_OF /* @min:%2eindexOf */](dataTagPrefix) !== 0) {\r\n                            continue;\r\n                        }\r\n                        if (attrib.name[_DYN_INDEX_OF /* @min:%2eindexOf */](parentDataTagPrefix) === 0) {\r\n                            parentDataTagFound = true;\r\n                        }\r\n                        // Todo handle blob data\r\n                        if (attrib.name[_DYN_INDEX_OF /* @min:%2eindexOf */](aiBlobAttributeTag) === 0) {\r\n                            continue;\r\n                        }\r\n                        var attribName = attrib[_DYN_NAME /* @min:%2ename */].replace(dataTagPrefix, \"\");\r\n                        if (elementLevelFlag && attribName === \"id\") {\r\n                            continue; // skip capturing id if not at the first level.\r\n                        }\r\n                        if (!isValueAssigned(elementContent[attribName])) {\r\n                            elementContent[attribName] = attrib.value;\r\n                        }\r\n                    }\r\n                    // break after current level;\r\n                    if (parentDataTagFound) {\r\n                        break;\r\n                    }\r\n                    elementLevelFlag = true; // after the initial level set this flag to true.\r\n                    element = element[_DYN_PARENT_NODE /* @min:%2eparentNode */];\r\n                }\r\n            }\r\n            /**\r\n             * Capture Element content along with Data Tag attributes and values\r\n             */\r\n            function _populateElementContent(element, dataTagPrefix, parentDataTagPrefix, aiBlobAttributeTag) {\r\n                var elementContent = {};\r\n                if (!element) {\r\n                    return elementContent;\r\n                }\r\n                var htmlContent = _getHtmlIdAndContentName(element);\r\n                elementContent = {\r\n                    id: htmlContent.id || \"\",\r\n                    contentName: htmlContent[_DYN_CONTENT_NAME /* @min:%2econtentName */] || \"\"\r\n                };\r\n                if (isValueAssigned(parentDataTagPrefix)) {\r\n                    _walkUpDomChainCaptureData(element, elementContent, dataTagPrefix, parentDataTagPrefix, aiBlobAttributeTag);\r\n                }\r\n                // Validate to ensure the minimum required field 'id' or 'contentName' is present.\r\n                // The content schema defines id, aN and sN as required fields.  However,\r\n                // requiring these fields would result in majority of adopter's content from being collected.\r\n                // Just throw a warning and continue collection.\r\n                if (!elementContent.id && !elementContent[_DYN_CONTENT_NAME /* @min:%2econtentName */]) {\r\n                    _throwInternal(_traceLogger, 2 /* eLoggingSeverity.WARNING */, 102 /* _eInternalMessageId.InvalidContentBlob */, \"Invalid content blob.  Missing required attributes (id, contentName. \" +\r\n                        \" Content information will still be collected!\");\r\n                }\r\n                return elementContent;\r\n            }\r\n            /**\r\n             * Capture Element content along with Data Tag attributes and values\r\n             */\r\n            function _populateElementContentwithDataTag(element, dataTagPrefix, parentDataTagPrefix, aiBlobAttributeTag) {\r\n                var dataTags = (_self[_DYN__CONFIG /* @min:%2e_config */] || {})[_DYN_DATA_TAGS /* @min:%2edataTags */];\r\n                var elementContent = {};\r\n                if (!element) {\r\n                    return elementContent;\r\n                }\r\n                var htmlContent = _getHtmlIdAndContentName(element);\r\n                if (isValueAssigned(parentDataTagPrefix)) {\r\n                    _walkUpDomChainCaptureData(element, elementContent, dataTagPrefix, parentDataTagPrefix, aiBlobAttributeTag);\r\n                }\r\n                else {\r\n                    _captureElementContentWithDataTag(element, elementContent, dataTagPrefix);\r\n                }\r\n                if (dataTags[_DYN_USE_DEFAULT_CONTENT_1 /* @min:%2euseDefaultContentNameOrId */]) {\r\n                    if (!isValueAssigned(elementContent.id)) {\r\n                        elementContent.id = htmlContent.id || \"\";\r\n                    }\r\n                    elementContent[_DYN_CONTENT_NAME /* @min:%2econtentName */] = htmlContent[_DYN_CONTENT_NAME /* @min:%2econtentName */] || \"\";\r\n                }\r\n                // Validate to ensure the minimum required field 'id' or 'contentName' is present.\r\n                // The content schema defines id, aN and sN as required fields.  However,\r\n                // requiring these fields would result in majority of adopter's content from being collected.\r\n                // Just throw a warning and continue collection.\r\n                if (!elementContent.id && !elementContent[_DYN_CONTENT_NAME /* @min:%2econtentName */]) {\r\n                    _throwInternal(_traceLogger, 2 /* eLoggingSeverity.WARNING */, 102 /* _eInternalMessageId.InvalidContentBlob */, \"Invalid content blob.  Missing required attributes (id, contentName. \" +\r\n                        \" Content information will still be collected!\");\r\n                }\r\n                return elementContent;\r\n            }\r\n            /**\r\n             * Retrieve a specified metadata tag value from the DOM.\r\n             * @param captureAllMetaDataContent - Flag to capture all metadata content\r\n             * @param prefix - Prefix to search the metatags with.\r\n             * @param removePrefix - Specifies if the prefix must be excluded from key names in the returned collection.\r\n             * @returns Metadata collection/property bag\r\n             */\r\n            function _getMetaDataFromDOM(captureAllMetaDataContent, prefix, removePrefix) {\r\n                var metaElements;\r\n                var metaData = {};\r\n                if (hasDocument()) {\r\n                    metaElements = getDocument().querySelectorAll(\"meta\");\r\n                    for (var i = 0; i < metaElements[_DYN_LENGTH /* @min:%2elength */]; i++) {\r\n                        var meta = metaElements[i];\r\n                        if (meta[_DYN_NAME /* @min:%2ename */]) {\r\n                            if (captureAllMetaDataContent || meta.name[_DYN_INDEX_OF /* @min:%2eindexOf */](prefix) === 0) {\r\n                                var name_1 = removePrefix ? meta[_DYN_NAME /* @min:%2ename */].replace(prefix, \"\") : meta[_DYN_NAME /* @min:%2ename */];\r\n                                metaData[name_1] = meta[_DYN_CONTENT /* @min:%2econtent */];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return metaData;\r\n            }\r\n            /**\r\n             * Gets the default content name.\r\n             * @param element - An html element\r\n             * @param useDefaultContentNameOrId - Flag indicating if an element is market PII.\r\n             * @returns Content name\r\n             */\r\n            function _getDefaultContentName(element, useDefaultContentName) {\r\n                if (useDefaultContentName === false || !element[_DYN_TAG_NAME /* @min:%2etagName */]) {\r\n                    return \"\";\r\n                }\r\n                var doc = getDocument() || {};\r\n                var contentName;\r\n                switch (element[_DYN_TAG_NAME /* @min:%2etagName */]) {\r\n                    case \"A\":\r\n                        contentName = doc.all ? element.innerText || element.innerHTML : element.text || element.innerHTML;\r\n                        break;\r\n                    case \"IMG\":\r\n                    case \"AREA\":\r\n                        contentName = element.alt;\r\n                        break;\r\n                    default:\r\n                        contentName = element.value || element[_DYN_NAME /* @min:%2ename */] || element.alt || element.innerText || element.id;\r\n                }\r\n                return strSubstring(contentName, 0, MAX_CONTENTNAME_LENGTH);\r\n            }\r\n            /**\r\n             * Check if the user wants to track the element, which means if the element has any tags with data-* or customDataPrefix\r\n             * @param element - An html element\r\n             * @returns true if any data-* exist, otherwise return false\r\n             */\r\n            function _isTracked(element, dataTag, aiBlobAttributeTag) {\r\n                var attrs = element[_DYN_ATTRIBUTES /* @min:%2eattributes */];\r\n                var dataTagFound = false;\r\n                for (var i = 0; i < attrs[_DYN_LENGTH /* @min:%2elength */]; i++) {\r\n                    var attributeName = attrs[i][_DYN_NAME /* @min:%2ename */];\r\n                    if (attributeName === aiBlobAttributeTag) {\r\n                        // ignore if the attribute name is equal to aiBlobAttributeTag\r\n                        return false;\r\n                    }\r\n                    else if (attributeName[_DYN_INDEX_OF /* @min:%2eindexOf */](dataTag) === 0) {\r\n                        dataTagFound = true;\r\n                    }\r\n                }\r\n                return dataTagFound;\r\n            }\r\n            function _getHtmlIdAndContentName(element) {\r\n                var _a;\r\n                var dataTags = (_self[_DYN__CONFIG /* @min:%2e_config */] || {})[_DYN_DATA_TAGS /* @min:%2edataTags */];\r\n                var callback = (_self[_DYN__CONFIG /* @min:%2e_config */] || {}).callback;\r\n                var htmlContent = {};\r\n                if (!element) {\r\n                    return htmlContent;\r\n                }\r\n                if (dataTags[_DYN_USE_DEFAULT_CONTENT_1 /* @min:%2euseDefaultContentNameOrId */]) {\r\n                    var customizedContentName = callback[_DYN_CONTENT_NAME /* @min:%2econtentName */] ? callback[_DYN_CONTENT_NAME /* @min:%2econtentName */](element, dataTags[_DYN_USE_DEFAULT_CONTENT_1 /* @min:%2euseDefaultContentNameOrId */]) : \"\";\r\n                    var defaultContentName = _getDefaultContentName(element, dataTags[_DYN_USE_DEFAULT_CONTENT_1 /* @min:%2euseDefaultContentNameOrId */]);\r\n                    htmlContent = (_a = {\r\n                            id: element.id\r\n                        },\r\n                        _a[_DYN_CONTENT_NAME /* @min:contentName */] = customizedContentName || defaultContentName || element[_DYN_GET_ATTRIBUTE /* @min:%2egetAttribute */](\"alt\"),\r\n                        _a);\r\n                }\r\n                return htmlContent;\r\n            }\r\n            /**\r\n            * Computes the parentId of a given element.\r\n            * @param element - An html element\r\n            * @returns An object containing the closest parentId , can be empty if nothing was found\r\n            */\r\n            function _getParentDetails(element, elementContent, dataTagPrefix, aiBlobAttributeTag) {\r\n                var parentId = elementContent[\"parentid\"];\r\n                var parentName = elementContent[\"parentname\"];\r\n                var parentInfo = {};\r\n                if (parentId || parentName || !element) {\r\n                    return parentInfo;\r\n                }\r\n                return _populateParentInfo(element, dataTagPrefix, aiBlobAttributeTag);\r\n            }\r\n            /**\r\n            * Check if parent info already set up, if so take and put into content, if not walk up the DOM to find correct info\r\n            * @param element - An html element that the user wants to track\r\n            * @returns An object containing the parent info, can be empty if nothing was found\r\n            */\r\n            function _populateParentInfo(element, dataTagPrefix, aiBlobAttributeTag) {\r\n                var parentInfo = {};\r\n                var parentId;\r\n                // if the user does not set up parent info, walk to the DOM, find the closest parent element (with tags) and populate the info\r\n                var closestParentElement = walkUpDomChainWithElementValidation(element[_DYN_PARENT_ELEMENT /* @min:%2eparentElement */], _isTracked, dataTagPrefix);\r\n                if (closestParentElement) {\r\n                    var dataAttr = closestParentElement[_DYN_GET_ATTRIBUTE /* @min:%2egetAttribute */](aiBlobAttributeTag) || element[aiBlobAttributeTag];\r\n                    if (dataAttr) {\r\n                        try {\r\n                            var telemetryObject = JSON.parse(dataAttr);\r\n                        }\r\n                        catch (e) {\r\n                            _throwInternal(_traceLogger, 1 /* eLoggingSeverity.CRITICAL */, 101 /* _eInternalMessageId.CannotParseAiBlobValue */, \"Can not parse \" + dataAttr);\r\n                        }\r\n                        if (telemetryObject) {\r\n                            parentId = telemetryObject.id;\r\n                        }\r\n                    }\r\n                    else {\r\n                        parentId = closestParentElement[_DYN_GET_ATTRIBUTE /* @min:%2egetAttribute */](dataTagPrefix + \"id\");\r\n                    }\r\n                }\r\n                if (parentId) {\r\n                    parentInfo[\"parentid\"] = parentId;\r\n                }\r\n                else {\r\n                    var htmlContent = _getHtmlIdAndContentName(element[_DYN_PARENT_ELEMENT /* @min:%2eparentElement */]);\r\n                    parentInfo[\"parentid\"] = htmlContent.id;\r\n                    parentInfo[\"parentname\"] = htmlContent[_DYN_CONTENT_NAME /* @min:%2econtentName */];\r\n                }\r\n                return parentInfo;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Collect metatags from DOM.\r\n     * Collect data from meta tags.\r\n     * @returns {object} - Metatags collection/property bag\r\n     */\r\n    DomContentHandler.prototype.getMetadata = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Collect data-* attributes for the given element.\r\n     * All attributes with data-* prefix or user provided customDataPrefix are collected.'data-*' prefix is removed from the key name.\r\n     * @param element - The element from which attributes need to be collected.\r\n     * @returns String representation of the Json array of element attributes\r\n     */\r\n    DomContentHandler.prototype.getElementContent = function (element) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    return DomContentHandler;\r\n}());\r\nexport { DomContentHandler };\r\n//# sourceMappingURL=DomContentHandler.js.map", "/**\r\n* @copyright Microsoft 2020\r\n*/\r\nvar _a, _b, _c, _d;\r\nimport { __extends } from \"tslib\";\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { PropertiesPluginIdentifier } from \"@microsoft/applicationinsights-common\";\r\nimport { BaseTelemetryPlugin, _throwInternal, arrForEach, cfgDfFunc, cfgDfMerge, cfgDfString, cfgDfValidate, createProcessTelemetryContext, dumpObj, getExceptionName, isNullOrUndefined, onConfigChange, throwError, unloadComponents } from \"@microsoft/applicationinsights-core-js\";\r\nimport { getDocument, hasDocument, objDeepFreeze, strSubstring, strTrim } from \"@nevware21/ts-utils\";\r\nimport { _DYN_BEHAVIOR_VALIDATOR, _DYN_CAPTURE_ALL_META_DAT2, _DYN_CONTENT_NAME, _DYN_DEFAULT_RIGHT_CLICK_3, _DYN_INDEX_OF, _DYN_LENGTH, _DYN_META_DATA_PREFIX, _DYN_PAGE_ACTION_PAGE_TAG0, _DYN_PAGE_NAME, _DYN_PAGE_TYPE, _DYN_PARENT_DATA_TAG, _DYN_REQUEST_URI, _DYN_TRACK_PAGE_ACTION, _DYN_USE_DEFAULT_CONTENT_1, _DYN__DO_UNLOAD } from \"./__DynamicConstants\";\r\nimport { BehaviorEnumValidator, BehaviorMapValidator, BehaviorValueValidator, DEFAULT_AI_BLOB_ATTRIBUTE_TAG, DEFAULT_DATA_PREFIX, DEFAULT_DONOT_TRACK_TAG } from \"./common/Utils\";\r\nimport { PageAction } from \"./events/PageAction\";\r\nimport { AutoCaptureHandler } from \"./handlers/AutoCaptureHandler\";\r\nimport { DomContentHandler } from \"./handlers/DomContentHandler\";\r\nexport { BehaviorMapValidator, BehaviorValueValidator, BehaviorEnumValidator };\r\nvar defaultValues = objDeepFreeze((_a = {\r\n        autoCapture: true,\r\n        callback: cfgDfMerge((_b = {},\r\n            _b[_DYN_PAGE_ACTION_PAGE_TAG0 /* @min:pageActionPageTags */] = cfgDfFunc(),\r\n            _b[_DYN_PAGE_NAME /* @min:pageName */] = cfgDfFunc(),\r\n            _b[_DYN_CONTENT_NAME /* @min:contentName */] = cfgDfFunc(),\r\n            _b)),\r\n        pageTags: {},\r\n        coreData: cfgDfMerge((_c = {\r\n                referrerUri: hasDocument() ? getDocument().referrer : \"\"\r\n            },\r\n            _c[_DYN_REQUEST_URI /* @min:requestUri */] = cfgDfString(),\r\n            _c[_DYN_PAGE_NAME /* @min:pageName */] = cfgDfString(),\r\n            _c[_DYN_PAGE_TYPE /* @min:pageType */] = cfgDfString(),\r\n            _c)),\r\n        dataTags: cfgDfMerge((_d = {},\r\n            _d[_DYN_USE_DEFAULT_CONTENT_1 /* @min:useDefaultContentNameOrId */] = false,\r\n            _d.aiBlobAttributeTag = DEFAULT_AI_BLOB_ATTRIBUTE_TAG,\r\n            _d.customDataPrefix = cfgDfValidate(_dataPrefixChk, DEFAULT_DATA_PREFIX),\r\n            _d[_DYN_CAPTURE_ALL_META_DAT2 /* @min:captureAllMetaDataContent */] = false,\r\n            _d.dntDataTag = DEFAULT_DONOT_TRACK_TAG,\r\n            _d[_DYN_META_DATA_PREFIX /* @min:metaDataPrefix */] = cfgDfString(),\r\n            _d[_DYN_PARENT_DATA_TAG /* @min:parentDataTag */] = cfgDfString(),\r\n            _d))\r\n    },\r\n    _a[_DYN_BEHAVIOR_VALIDATOR /* @min:behaviorValidator */] = cfgDfFunc(function (key) { return key || \"\"; }),\r\n    _a[_DYN_DEFAULT_RIGHT_CLICK_3 /* @min:defaultRightClickBhvr */] = cfgDfString(),\r\n    _a.dropInvalidEvents = false,\r\n    _a.urlCollectHash = false,\r\n    _a.urlCollectQuery = false,\r\n    _a));\r\nfunction _dataPrefixChk(val) {\r\n    return val && val[_DYN_INDEX_OF /* @min:%2eindexOf */](DEFAULT_DATA_PREFIX) === 0;\r\n}\r\nvar ClickAnalyticsPlugin = /** @class */ (function (_super) {\r\n    __extends(ClickAnalyticsPlugin, _super);\r\n    function ClickAnalyticsPlugin() {\r\n        var _this = _super.call(this) || this;\r\n        _this.identifier = \"ClickAnalyticsPlugin\";\r\n        _this.priority = 181;\r\n        var _config;\r\n        var _pageAction;\r\n        var _autoCaptureHandler;\r\n        var _contentHandler;\r\n        var _autoCapture;\r\n        dynamicProto(ClickAnalyticsPlugin, _this, function (_self, _base) {\r\n            var _identifier = _self.identifier;\r\n            _initDefaults();\r\n            _self.initialize = function (config, core, extensions, pluginChain) {\r\n                if (isNullOrUndefined(core)) {\r\n                    throwError(\"Error initializing\");\r\n                }\r\n                _super.prototype.initialize.call(_this, config, core, extensions, pluginChain);\r\n                _populateDefaults(config);\r\n                // Find the properties plugin.\r\n                var _propertiesExtension;\r\n                arrForEach(extensions, function (extension) {\r\n                    if (extension.identifier === PropertiesPluginIdentifier) {\r\n                        _propertiesExtension = extension;\r\n                    }\r\n                });\r\n                // Append Click Analytics Plugin Version to SDK version.\r\n                if (_propertiesExtension && _propertiesExtension.context && _propertiesExtension.context.internal) {\r\n                    var theVersion = _propertiesExtension.context.internal.sdkVersion;\r\n                    if (theVersion) {\r\n                        theVersion += \"_ClickPlugin\" + ClickAnalyticsPlugin.Version;\r\n                        if (theVersion[_DYN_LENGTH /* @min:%2elength */] > 64) {\r\n                            theVersion = strTrim(strSubstring(theVersion, 0, 64));\r\n                        }\r\n                        _propertiesExtension.context.internal.sdkVersion = theVersion;\r\n                    }\r\n                }\r\n            };\r\n            _self.processTelemetry = function (env, itemCtx) {\r\n                _self.processNext(env, itemCtx);\r\n            };\r\n            _self[_DYN_TRACK_PAGE_ACTION /* @min:%2etrackPageAction */] = function (pageAction, customProperties) {\r\n                try {\r\n                    _pageAction[_DYN_TRACK_PAGE_ACTION /* @min:%2etrackPageAction */](pageAction, customProperties);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(_self.diagLog(), 1 /* eLoggingSeverity.CRITICAL */, 103 /* _eInternalMessageId.TrackPageActionEventFailed */, \"trackPageAction failed, page action event will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            _self._doTeardown = function (unloadCtx, unloadState, asyncCallback) {\r\n                return unloadComponents([\r\n                    _autoCaptureHandler,\r\n                    _contentHandler,\r\n                    _pageAction\r\n                ], unloadCtx, unloadState, function () {\r\n                    _initDefaults();\r\n                    asyncCallback && asyncCallback();\r\n                });\r\n            };\r\n            function _populateDefaults(config) {\r\n                var core = _self.core;\r\n                _self._addHook(onConfigChange(config, function (details) {\r\n                    var config = details.cfg;\r\n                    var ctx = createProcessTelemetryContext(null, config, core);\r\n                    var _config = ctx.getExtCfg(_identifier, defaultValues);\r\n                    var logger = _self.diagLog();\r\n                    _contentHandler = new DomContentHandler(_config, logger);\r\n                    var metaTags = _contentHandler.getMetadata();\r\n                    _pageAction = new PageAction(_self, _config, _contentHandler, _config.callback[_DYN_PAGE_ACTION_PAGE_TAG0 /* @min:%2epageActionPageTags */], metaTags, logger);\r\n                    // Default to DOM autoCapture handler\r\n                    if (_autoCaptureHandler) {\r\n                        _autoCaptureHandler[_DYN__DO_UNLOAD /* @min:%2e_doUnload */]();\r\n                    }\r\n                    _autoCaptureHandler = new AutoCaptureHandler(_self, _config, _pageAction, logger);\r\n                    var autoCapture = !!_config.autoCapture;\r\n                    if (!_autoCapture && autoCapture) {\r\n                        _autoCaptureHandler.click();\r\n                    }\r\n                    _autoCapture = autoCapture;\r\n                }));\r\n            }\r\n            function _initDefaults() {\r\n                _config = null;\r\n                _pageAction = null;\r\n                _autoCaptureHandler = null;\r\n                _contentHandler = null;\r\n                _autoCapture = false;\r\n            }\r\n        });\r\n        return _this;\r\n    }\r\n    ClickAnalyticsPlugin.prototype.initialize = function (config, core, extensions, pluginChain) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    ClickAnalyticsPlugin.prototype.processTelemetry = function (env, itemCtx) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Logs a page action event.\r\n     * @param IPageActionTelemetry\r\n     * @param customProperties - Additional data used to filter events and metrics. Defaults to empty.\r\n     */\r\n    ClickAnalyticsPlugin.prototype.trackPageAction = function (pageAction, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    ClickAnalyticsPlugin.Version = '3.3.1';\r\n    return ClickAnalyticsPlugin;\r\n}(BaseTelemetryPlugin));\r\nexport { ClickAnalyticsPlugin };\r\n//# sourceMappingURL=ClickAnalyticsPlugin.js.map"],
  "mappings": "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",
  "names": ["WebEvent", "metaTags", "PageAction", "isRightClick", "clickCaptureInputTypes", "AutoCaptureHandler", "isRightClick", "_a", "DomContentHandler", "_a", "ClickAnalyticsPlugin", "config", "_config"]
}
