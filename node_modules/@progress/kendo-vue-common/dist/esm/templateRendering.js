var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
// @ts-ignore
import * as Vue from 'vue';
import { isObject } from './isObject.js';
var allVue = Vue;
var isV3 = allVue.version && allVue.version[0] === '3';
/**
 * @hidden
 */
export var templateDefinition = {
    type: [String, Function, Object, Boolean],
    default: function () {
        return undefined;
    }
};
/**
 * @hidden
 */
export function templateRendering(template, listeners) {
    if (!template && template !== false) {
        return undefined;
    }
    if (template.kt) {
        return template;
    }
    var scopedSlot = isV3 ?
        this.$slots[template] ||
            (template.toLowerCase ? this.$slots[template.toLowerCase()]
                : null) :
        this.$scopedSlots[template] ||
            (template.toLowerCase ? this.$scopedSlots[template.toLowerCase()]
                : null);
    if (typeof template === 'string' && scopedSlot) {
        return { kt: true, type: 'slot', render: scopedSlot, listeners: listeners };
    }
    if (typeof template === 'string' || isObject(template) ||
        (typeof template === 'function' && template.component)) {
        return { kt: true, type: 'component', render: template, listeners: listeners };
    }
    return { kt: true, type: 'renderFunction', render: template, listeners: listeners };
}
/**
 * @hidden
 */
export function getTemplate(_a) {
    var h = _a.h, template = _a.template, defaultRendering = _a.defaultRendering, defaultSlots = _a.defaultSlots, additionalProps = _a.additionalProps, additionalListeners = _a.additionalListeners, swapDefaultSlots = _a.swapDefaultSlots;
    if (!template || (template && template.render === true)) {
        return defaultRendering;
    }
    var events;
    var props;
    var componentOptions;
    if (isV3) {
        var passedProps = defaultRendering ? defaultRendering.props : {};
        events = __assign(__assign({}, transformListeners(additionalListeners)), template.listeners);
        props = __assign(__assign(__assign({}, passedProps), additionalProps), events);
        componentOptions = __assign(__assign({}, props), events);
    }
    else {
        var hasComponentOptions = defaultRendering && defaultRendering.componentOptions;
        var defaultListeners = hasComponentOptions ?
            defaultRendering.componentOptions.listeners : {};
        var defaultProps = hasComponentOptions ?
            defaultRendering.componentOptions.propsData : {};
        events = __assign(__assign(__assign(__assign({}, defaultListeners), additionalListeners), transformListeners(additionalListeners)), template.listeners);
        props = __assign(__assign(__assign({}, defaultProps), additionalProps), events);
        componentOptions = { props: props, on: events };
    }
    if (template.type === 'slot') {
        var slotTemplate = template.render({ props: props, listeners: events, methods: events,
            defaultSlots: defaultSlots });
        return isV3
            ? slotTemplate
            : slotTemplate ? slotTemplate[0] : undefined;
    }
    else if (template.type === 'renderFunction') {
        if (swapDefaultSlots) {
            return template.render ? template.render(h, defaultRendering, defaultSlots, props, events) : undefined;
        }
        return template.render ? template.render(h, defaultRendering, props, events, defaultSlots) : undefined;
    }
    else {
        return h(template.render, componentOptions, isV3 ? function () { return [defaultSlots]; } : [defaultSlots]);
    }
}
/**
 * @hidden
 */
export function transformListeners(listeners) {
    if (!listeners) {
        return listeners;
    }
    var newListeners = {};
    var listenersKeys = Object.keys(listeners);
    for (var i = 0; i < listenersKeys.length; i++) {
        var currentKey = listenersKeys[i];
        newListeners['on' + currentKey.charAt(0).toUpperCase() + currentKey.slice(1)] =
            listeners[currentKey];
    }
    return newListeners;
}
