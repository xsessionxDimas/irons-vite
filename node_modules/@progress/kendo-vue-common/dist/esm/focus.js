import { Keys } from './keys.js';
var FOCUSABLE_SELECTOR = 'input, [tabindex]:not([tabindex="-1"])';
/**
 * @hidden
 */
export var firstFocusableChild = function (element) {
    if (element) {
        // should focus wrapper if it's focusable in future versions
        var elements = element.querySelectorAll(FOCUSABLE_SELECTOR);
        if (elements.length && elements[0].focus) {
            return elements[0];
        }
    }
    return undefined;
};
/**
 * @hidden
 */
export var lastFocusableChild = function (element) {
    if (element) {
        // should focus wrapper if it's focusable in future versions
        var elements = element.querySelectorAll(FOCUSABLE_SELECTOR);
        if (elements.length && elements[elements.length - 1].focus) {
            return elements[elements.length - 1];
        }
    }
    return undefined;
};
/**
 * @hidden
 */
export var focusFirstFocusableChild = function (element) {
    if (element) {
        // should focus wrapper if it's focusable in future versions
        var elements = element.querySelectorAll(FOCUSABLE_SELECTOR);
        if (elements.length && elements[0].focus) {
            elements[0].focus();
        }
    }
};
/**
 * @hidden
 */
export var focusLastFocusableChild = function (element) {
    if (element) {
        // should focus wrapper if it's focusable in future versions
        var elements = element.querySelectorAll(FOCUSABLE_SELECTOR);
        if (elements.length && elements[elements.length - 1].focus) {
            elements[elements.length - 1].focus();
        }
    }
};
/**
 * @hidden
 */
export var focusContainer = function (e, containerElement) {
    var focusState = true;
    if (e.keyCode !== Keys.enter && e.target === containerElement) {
        return false;
    }
    if (e.keyCode === Keys.enter && e.target === containerElement) {
        focusState = true;
        setTimeout(function () {
            focusFirstFocusableChild(containerElement);
        }, 1);
    }
    else if (e.keyCode === Keys.esc) {
        focusState = false;
        containerElement.focus();
    }
    else if (e.keyCode === Keys.tab) {
        var firstChild = firstFocusableChild(containerElement);
        var lastChild = lastFocusableChild(containerElement);
        if (lastChild && !e.shiftKey && e.target === lastChild) {
            e.preventDefault();
            firstChild.focus();
        }
        if (firstChild && e.shiftKey && e.target === firstChild) {
            e.preventDefault();
            lastChild.focus();
        }
    }
    return focusState;
};
