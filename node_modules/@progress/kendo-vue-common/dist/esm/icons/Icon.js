var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
import { FontIcon } from './FontIcon.js';
import { SvgIcon } from './SvgIcon.js';
/**
 * @hidden
 */
var IconVue2 = {
  name: 'KendoIcon',
  // @ts-ignore
  emits: {
    click: null
  },
  inject: {
    kendoIcons: {
      default: {
        type: 'svg',
        icons: {}
      }
    }
  },
  props: {
    name: String,
    icon: Object,
    title: String,
    themeColor: {
      type: String
    },
    size: {
      type: String
    },
    flip: {
      type: String
    },
    id: String,
    ariaLabel: String,
    viewBox: {
      type: String,
      default: '0 0 24 24'
    },
    tabIndex: Number
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var _a = this.$props,
      name = _a.name,
      icon = _a.icon,
      themeColor = _a.themeColor,
      size = _a.size,
      flip = _a.flip,
      id = _a.id,
      viewBox = _a.viewBox,
      tabIndex = _a.tabIndex,
      title = _a.title,
      ariaLabel = _a.ariaLabel;
    var svg = name && this.kendoIcons && this.kendoIcons.icons && this.kendoIcons.icons[name] || icon;
    var renderSVG = this.kendoIcons && this.kendoIcons.type === 'svg' && svg !== undefined;
    var newSize = this.kendoIcons && this.kendoIcons.size ? this.kendoIcons.size : size;
    var newFlip = this.kendoIcons && this.kendoIcons.flip ? this.kendoIcons.flip : flip;
    var resolvedName = name || (icon && icon.name ? icon.name : undefined);
    var commonProps = {
      themeColor: themeColor,
      size: newSize,
      flip: newFlip,
      id: id,
      tabIndex: tabIndex,
      title: title,
      ariaLabel: ariaLabel
    };
    var fontIcon = h(FontIcon, __assign(__assign({}, commonProps), {
      name: resolvedName,
      attrs: this.v3 ? undefined : __assign(__assign({}, commonProps), {
        name: resolvedName
      }),
      onClick: this.handleClick,
      on: this.v3 ? undefined : {
        'click': this.handleClick
      }
    }));
    var svgIcon = h(SvgIcon, __assign(__assign({}, commonProps), {
      icon: svg,
      viewBox: viewBox,
      name: resolvedName,
      attrs: this.v3 ? undefined : __assign(__assign({}, commonProps), {
        icon: svg,
        viewBox: viewBox,
        name: resolvedName
      }),
      onClick: this.handleClick,
      on: this.v3 ? undefined : {
        'click': this.handleClick
      }
    }));
    return renderSVG ? svgIcon : fontIcon;
  },
  methods: {
    handleClick: function handleClick(e) {
      this.$emit('click', e);
    }
  }
};
/**
 * @hidden
 */
var Icon = IconVue2;
export { Icon, IconVue2 };