var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
import { SIZE_CLASSES } from './constants.js';
import { getDefaultSlots } from '../defaultSlots.js';
/**
 * @hidden
 */
var SvgIconVue2 = {
  name: 'KendoSvgIcon',
  // @ts-ignore
  emits: {
    click: null
  },
  props: {
    name: String,
    icon: Object,
    themeColor: {
      type: String
    },
    size: {
      type: String
    },
    flip: {
      type: String
    },
    id: String,
    ariaLabel: String,
    title: String,
    viewBox: {
      type: String,
      default: '0 0 24 24'
    },
    tabIndex: Number,
    svgClassName: String,
    svgStyle: Object
  },
  computed: {
    wrapperClass: function wrapperClass() {
      var _a;
      var _b = this.$props,
        name = _b.name,
        flip = _b.flip,
        size = _b.size,
        themeColor = _b.themeColor;
      return _a = {
        'k-icon': true,
        'k-svg-icon': true
      }, _a['k-color-' + themeColor] = themeColor, _a['k-svg-i-' + name] = name, _a['k-flip-h'] = flip === 'horizontal' || flip === 'both', _a['k-flip-v'] = flip === 'vertical' || flip === 'both', _a[SIZE_CLASSES[size]] = size, _a;
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var defaultSlot = getDefaultSlots(this);
    var _a = this.$props,
      svgClassName = _a.svgClassName,
      icon = _a.icon,
      id = _a.id,
      tabIndex = _a.tabIndex,
      svgStyle = _a.svgStyle,
      viewBox = _a.viewBox,
      title = _a.title,
      ariaLabel = _a.ariaLabel;
    var innerHTML = icon ? icon.content : undefined;
    var attrs = {
      id: id,
      title: title,
      'aria-hidden': true,
      tabIndex: tabIndex,
      ariaLabel: ariaLabel,
      focusable: 'false',
      xmlns: 'http://www.w3.org/2000/svg',
      viewBox: icon ? icon.viewBox : viewBox
    };
    var svg = h('svg', __assign(__assign({}, attrs), {
      attrs: this.v3 ? undefined : attrs,
      domProps: this.v3 ? undefined : {
        innerHTML: innerHTML
      },
      innerHTML: innerHTML,
      'class': svgClassName,
      style: svgStyle
    }), icon ? [] : [defaultSlot]);
    return h("span", {
      "class": this.wrapperClass,
      onClick: this.handleClick,
      on: this.v3 ? undefined : {
        "click": this.handleClick
      }
    }, [svg]);
  },
  methods: {
    handleClick: function handleClick(e) {
      this.$emit('click', e);
    }
  }
};
/**
 * @hidden
 */
var SvgIcon = SvgIconVue2;
export { SvgIcon, SvgIconVue2 };