"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FontIconVue2 = exports.FontIcon = void 0;
// @ts-ignore
var Vue = require("vue");
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var constants_1 = require("./constants");
/**
 * @hidden
 */
var FontIconVue2 = {
  name: 'KendoFontIcon',
  // @ts-ignore
  emits: {
    click: null
  },
  props: {
    name: String,
    themeColor: {
      type: String
    },
    size: {
      type: String
    },
    flip: {
      type: String
    },
    id: String,
    ariaLabel: String,
    title: String,
    tabIndex: Number
  },
  computed: {
    fontClassNames: function fontClassNames() {
      var _a;
      var _b = this.$props,
        name = _b.name,
        flip = _b.flip,
        size = _b.size,
        themeColor = _b.themeColor;
      return _a = {
        'k-icon': true,
        'k-font-icon': true
      }, _a['k-i-' + name] = name, _a['k-color-' + themeColor] = themeColor, _a['k-flip-h'] = flip === 'horizontal' || flip === 'both', _a['k-flip-v'] = flip === 'vertical' || flip === 'both', _a[constants_1.SIZE_CLASSES[size]] = size, _a;
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var _a = this.$props,
      id = _a.id,
      title = _a.title,
      tabIndex = _a.tabIndex,
      ariaLabel = _a.ariaLabel;
    return h("span", {
      "class": this.fontClassNames,
      id: id,
      attrs: this.v3 ? undefined : {
        id: id,
        title: title,
        "aria-label": ariaLabel,
        tabIndex: tabIndex,
        role: "presentation"
      },
      title: title,
      "aria-label": ariaLabel,
      tabIndex: tabIndex,
      role: "presentation",
      onClick: this.handleClick,
      on: this.v3 ? undefined : {
        "click": this.handleClick
      }
    });
  },
  methods: {
    handleClick: function handleClick(e) {
      this.$emit('click', e);
    }
  }
};
exports.FontIconVue2 = FontIconVue2;
/**
 * @hidden
 */
var FontIcon = FontIconVue2;
exports.FontIcon = FontIcon;