"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.focusContainer = exports.focusLastFocusableChild = exports.focusFirstFocusableChild = exports.lastFocusableChild = exports.firstFocusableChild = void 0;
var keys_1 = require("./keys");
var FOCUSABLE_SELECTOR = 'input, [tabindex]:not([tabindex="-1"])';
/**
 * @hidden
 */
var firstFocusableChild = function (element) {
    if (element) {
        // should focus wrapper if it's focusable in future versions
        var elements = element.querySelectorAll(FOCUSABLE_SELECTOR);
        if (elements.length && elements[0].focus) {
            return elements[0];
        }
    }
    return undefined;
};
exports.firstFocusableChild = firstFocusableChild;
/**
 * @hidden
 */
var lastFocusableChild = function (element) {
    if (element) {
        // should focus wrapper if it's focusable in future versions
        var elements = element.querySelectorAll(FOCUSABLE_SELECTOR);
        if (elements.length && elements[elements.length - 1].focus) {
            return elements[elements.length - 1];
        }
    }
    return undefined;
};
exports.lastFocusableChild = lastFocusableChild;
/**
 * @hidden
 */
var focusFirstFocusableChild = function (element) {
    if (element) {
        // should focus wrapper if it's focusable in future versions
        var elements = element.querySelectorAll(FOCUSABLE_SELECTOR);
        if (elements.length && elements[0].focus) {
            elements[0].focus();
        }
    }
};
exports.focusFirstFocusableChild = focusFirstFocusableChild;
/**
 * @hidden
 */
var focusLastFocusableChild = function (element) {
    if (element) {
        // should focus wrapper if it's focusable in future versions
        var elements = element.querySelectorAll(FOCUSABLE_SELECTOR);
        if (elements.length && elements[elements.length - 1].focus) {
            elements[elements.length - 1].focus();
        }
    }
};
exports.focusLastFocusableChild = focusLastFocusableChild;
/**
 * @hidden
 */
var focusContainer = function (e, containerElement) {
    var focusState = true;
    if (e.keyCode !== keys_1.Keys.enter && e.target === containerElement) {
        return false;
    }
    if (e.keyCode === keys_1.Keys.enter && e.target === containerElement) {
        focusState = true;
        setTimeout(function () {
            (0, exports.focusFirstFocusableChild)(containerElement);
        }, 1);
    }
    else if (e.keyCode === keys_1.Keys.esc) {
        focusState = false;
        containerElement.focus();
    }
    else if (e.keyCode === keys_1.Keys.tab) {
        var firstChild = (0, exports.firstFocusableChild)(containerElement);
        var lastChild = (0, exports.lastFocusableChild)(containerElement);
        if (lastChild && !e.shiftKey && e.target === lastChild) {
            e.preventDefault();
            firstChild.focus();
        }
        if (firstChild && e.shiftKey && e.target === firstChild) {
            e.preventDefault();
            lastChild.focus();
        }
    }
    return focusState;
};
exports.focusContainer = focusContainer;
