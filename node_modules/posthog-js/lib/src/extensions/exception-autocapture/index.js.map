{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/extensions/exception-autocapture/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { window } from '../../utils/globals'\nimport { PostHog } from '../../posthog-core'\nimport { DecideResponse, Properties } from '../../types'\n\nimport { isObject } from '../../utils/type-utils'\nimport { logger } from '../../utils/logger'\nimport { EXCEPTION_CAPTURE_ENABLED_SERVER_SIDE, EXCEPTION_CAPTURE_ENDPOINT } from '../../constants'\nimport Config from '../../config'\n\n// TODO: move this to /x/ as default\nexport const BASE_ERROR_ENDPOINT = '/e/'\nconst LOGGER_PREFIX = '[Exception Capture]'\n\nexport class ExceptionObserver {\n    private _endpointSuffix: string\n    instance: PostHog\n    remoteEnabled: boolean | undefined\n    private originalOnUnhandledRejectionHandler: Window['onunhandledrejection'] | null | undefined = undefined\n    private unwrapOnError: (() => void) | undefined\n    private unwrapUnhandledRejection: (() => void) | undefined\n\n    constructor(instance: PostHog) {\n        this.instance = instance\n        this.remoteEnabled = !!this.instance.persistence?.props[EXCEPTION_CAPTURE_ENABLED_SERVER_SIDE]\n\n        // TODO: once BASE_ERROR_ENDPOINT is no longer /e/ this can be removed\n        this._endpointSuffix = this.instance.persistence?.props[EXCEPTION_CAPTURE_ENDPOINT] || BASE_ERROR_ENDPOINT\n\n        this.startIfEnabled()\n    }\n\n    get endpoint() {\n        // Always respect any api_host set by the client config\n        return this.instance.requestRouter.endpointFor('api', this._endpointSuffix)\n    }\n\n    get isEnabled() {\n        return this.remoteEnabled ?? false\n    }\n\n    get isCapturing() {\n        return !!(window?.onerror as any)?.__POSTHOG_INSTRUMENTED__\n    }\n\n    get hasHandlers() {\n        return this.originalOnUnhandledRejectionHandler || this.unwrapOnError\n    }\n\n    startIfEnabled(): void {\n        if (this.isEnabled && !this.isCapturing) {\n            logger.info(LOGGER_PREFIX + ' enabled, starting...')\n            this.loadScript(this.startCapturing)\n        }\n    }\n\n    private loadScript(cb: () => void): void {\n        if (this.hasHandlers) {\n            // already loaded\n            cb()\n        }\n\n        this.instance.requestRouter.loadScript(`/static/exception-autocapture.js?v=${Config.LIB_VERSION}`, (err) => {\n            if (err) {\n                return logger.error(LOGGER_PREFIX + ' failed to load script', err)\n            }\n            cb()\n        })\n    }\n\n    private startCapturing = () => {\n        if (!window || !this.isEnabled || this.hasHandlers || (window.onerror as any)?.__POSTHOG_INSTRUMENTED__) {\n            return\n        }\n\n        const wrapOnError = (window as any).posthogErrorWrappingFunctions.wrapOnError\n        const wrapUnhandledRejection = (window as any).posthogErrorWrappingFunctions.wrapUnhandledRejection\n\n        if (!wrapOnError || !wrapUnhandledRejection) {\n            logger.error(LOGGER_PREFIX + ' failed to load error wrapping functions - cannot start')\n            return\n        }\n\n        try {\n            this.unwrapOnError = wrapOnError(this.captureException.bind(this))\n            this.unwrapUnhandledRejection = wrapUnhandledRejection(this.captureException.bind(this))\n        } catch (e) {\n            logger.error(LOGGER_PREFIX + ' failed to start', e)\n            this.stopCapturing()\n        }\n    }\n\n    private stopCapturing() {\n        this.unwrapOnError?.()\n        this.unwrapUnhandledRejection?.()\n    }\n\n    afterDecideResponse(response: DecideResponse) {\n        const autocaptureExceptionsResponse = response.autocaptureExceptions\n\n        // store this in-memory in case persistence is disabled\n        this.remoteEnabled = !!autocaptureExceptionsResponse || false\n        this._endpointSuffix = isObject(autocaptureExceptionsResponse)\n            ? autocaptureExceptionsResponse.endpoint || BASE_ERROR_ENDPOINT\n            : BASE_ERROR_ENDPOINT\n\n        if (this.instance.persistence) {\n            this.instance.persistence.register({\n                [EXCEPTION_CAPTURE_ENABLED_SERVER_SIDE]: this.remoteEnabled,\n            })\n            // when we come to moving the endpoint to not /e/\n            // we'll want that to persist between startup and decide response\n            // TODO: once BASE_ENDPOINT is no longer /e/ this can be removed\n            this.instance.persistence.register({\n                [EXCEPTION_CAPTURE_ENDPOINT]: this._endpointSuffix,\n            })\n        }\n\n        this.startIfEnabled()\n    }\n\n    captureException(errorProperties: Properties) {\n        const posthogHost = this.instance.requestRouter.endpointFor('ui')\n\n        errorProperties.$exception_personURL = `${posthogHost}/project/${\n            this.instance.config.token\n        }/person/${this.instance.get_distinct_id()}`\n\n        this.sendExceptionEvent(errorProperties)\n    }\n\n    /**\n     * :TRICKY: Make sure we batch these requests\n     */\n    sendExceptionEvent(properties: { [key: string]: any }) {\n        this.instance.capture('$exception', properties, {\n            _noTruncate: true,\n            _batchKey: 'exceptionEvent',\n            _url: this.endpoint,\n        })\n    }\n}\n"]}