/*
 * Application Insights JavaScript SDK - Click Analytics, 3.3.1
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */
/**
* @copyright Microsoft 2020
*/
import dynamicProto from "@microsoft/dynamicproto-js";
import { createUniqueNamespace, eventOff, eventOn, getDocument, getWindow, isNullOrUndefined, mergeEvtNamespace } from "@microsoft/applicationinsights-core-js";
import { ActionType } from "../Enums";
import { _DYN_ACTION_TYPE, _DYN_CAPTURE_PAGE_ACTION, _DYN_CLICK_COORDINATE_X, _DYN_CLICK_COORDINATE_Y, _DYN_CUSTOM_DATA_PREFIX, _DYN_DATA_TAGS, _DYN_INDEX_OF, _DYN_PARENT_NODE, _DYN_TAG_NAME, _DYN_TO_UPPER_CASE, _DYN__CONFIG, _DYN__DO_UNLOAD } from "../__DynamicConstants";
import { isElementDnt, isKeyboardEnter, isKeyboardSpace, isLeftClick, isMiddleClick, isRightClick } from "../common/Utils";
var clickCaptureInputTypes = { BUTTON: true, CHECKBOX: true, RADIO: true, RESET: true, SUBMIT: true };
var AutoCaptureHandler = /** @class */ (function () {
    /**
     * @param analyticsPlugin - WebAnalytics plugin
     * @param traceLogger - Trace logger to log to console.
     */
    function AutoCaptureHandler(_analyticsPlugin, _config, _pageAction, _traceLogger) {
        this._analyticsPlugin = _analyticsPlugin;
        this._config = _config;
        this._pageAction = _pageAction;
        this._traceLogger = _traceLogger;
        var _evtNamespace = mergeEvtNamespace(createUniqueNamespace("AutoCaptureHandler"), _analyticsPlugin._evtNamespace);
        dynamicProto(AutoCaptureHandler, this, function (_self) {
            _self.click = function () {
                var win = getWindow();
                var doc = getDocument();
                if (win) {
                    // IE9 onwards addEventListener is available, 'click' event captures mouse click. mousedown works on other browsers
                    var event_1 = (navigator.appVersion[_DYN_INDEX_OF /* @min:%2eindexOf */]("MSIE") !== -1) ? "click" : "mousedown";
                    eventOn(win, event_1, _processClick, _evtNamespace);
                    eventOn(win, "keyup", _processClick, _evtNamespace);
                }
                else if (doc) {
                    // IE8 and below doesn't have addEventListener so it will use attachEvent
                    // attaching to window does not work in IE8
                    eventOn(doc, "click", _processClick, _evtNamespace);
                    eventOn(doc, "keyup", _processClick, _evtNamespace);
                }
            };
            _self[_DYN__DO_UNLOAD /* @min:%2e_doUnload */] = function (unloadCtx, unloadState, asyncCallback) {
                eventOff(getWindow(), null, null, _evtNamespace);
                eventOff(getDocument(), null, null, _evtNamespace);
            };
            function _capturePageAction(element, overrideValues, customProperties, isRightClick) {
                var donotTrackTag = _self._config.dataTags[_DYN_CUSTOM_DATA_PREFIX /* @min:%2ecustomDataPrefix */] + _self[_DYN__CONFIG /* @min:%2e_config */][_DYN_DATA_TAGS /* @min:%2edataTags */].dntDataTag;
                if (!isElementDnt(element, donotTrackTag)) {
                    _self._pageAction[_DYN_CAPTURE_PAGE_ACTION /* @min:%2ecapturePageAction */](element, overrideValues, customProperties, isRightClick);
                }
            }
            // Process click event
            function _processClick(clickEvent) {
                var _a;
                var clickCaptureElements = { A: true, BUTTON: true, AREA: true, INPUT: true };
                var win = getWindow();
                if (isNullOrUndefined(clickEvent) && win) {
                    clickEvent = win.event; // IE 8 does not pass the event
                }
                if (clickEvent) {
                    var element = clickEvent.srcElement || clickEvent.target;
                    // populate overrideValues
                    var overrideValues = (_a = {},
                        _a[_DYN_CLICK_COORDINATE_X /* @min:clickCoordinateX */] = clickEvent.pageX,
                        _a[_DYN_CLICK_COORDINATE_Y /* @min:clickCoordinateY */] = clickEvent.pageY,
                        _a);
                    var isRightClickObj = isRightClick(clickEvent);
                    if (isRightClickObj) {
                        overrideValues[_DYN_ACTION_TYPE /* @min:%2eactionType */] = ActionType.CLICKRIGHT;
                    }
                    else if (isLeftClick(clickEvent)) {
                        overrideValues[_DYN_ACTION_TYPE /* @min:%2eactionType */] = ActionType.CLICKLEFT;
                    }
                    else if (isKeyboardEnter(clickEvent)) {
                        overrideValues[_DYN_ACTION_TYPE /* @min:%2eactionType */] = ActionType.KEYBOARDENTER;
                    }
                    else if (isKeyboardSpace(clickEvent)) {
                        overrideValues[_DYN_ACTION_TYPE /* @min:%2eactionType */] = ActionType.KEYBOARDSPACE;
                    }
                    else if (isMiddleClick(clickEvent)) {
                        overrideValues[_DYN_ACTION_TYPE /* @min:%2eactionType */] = ActionType.CLICKMIDDLE;
                    }
                    else {
                        return;
                    }
                    while (element && element[_DYN_TAG_NAME /* @min:%2etagName */]) {
                        // control property will be available for <label> elements with 'for' attribute, only use it when is a
                        // valid JSLL capture element to avoid infinite loops
                        if (element.control && clickCaptureElements[element.control[_DYN_TAG_NAME /* @min:%2etagName */][_DYN_TO_UPPER_CASE /* @min:%2etoUpperCase */]()]) {
                            element = element.control;
                        }
                        var tagNameUpperCased = element[_DYN_TAG_NAME /* @min:%2etagName */][_DYN_TO_UPPER_CASE /* @min:%2etoUpperCase */]();
                        if (!clickCaptureElements[tagNameUpperCased]) {
                            element = element.parentElement || element[_DYN_PARENT_NODE /* @min:%2eparentNode */];
                            continue;
                        }
                        else {
                            // Check allowed INPUT types
                            var sendEvent = tagNameUpperCased === "INPUT" ? clickCaptureInputTypes[element.type[_DYN_TO_UPPER_CASE /* @min:%2etoUpperCase */]()] : true;
                            if (sendEvent) {
                                _capturePageAction(element, overrideValues, {}, isRightClickObj);
                            }
                            break;
                        }
                    }
                }
            }
        });
    }
    // handle automatic event firing on user click
// Removed Stub for AutoCaptureHandler.prototype.click.
// Removed Stub for AutoCaptureHandler.prototype._doUnload.
    // This is a workaround for an IE bug when using dynamicProto() with classes that don't have any
    // non-dynamic functions or static properties/functions when using uglify-js to minify the resulting code.
    AutoCaptureHandler.__ieDyn=1;

    return AutoCaptureHandler;
}());
export { AutoCaptureHandler };
//# sourceMappingURL=AutoCaptureHandler.js.map