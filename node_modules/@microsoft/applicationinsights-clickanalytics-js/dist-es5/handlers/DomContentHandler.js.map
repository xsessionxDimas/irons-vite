{"version":3,"file":"DomContentHandler.js.map","sources":["DomContentHandler.js"],"sourcesContent":["/**\r\n* @copyright Microsoft 2020\r\n*/\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { _throwInternal, getDocument, hasDocument, isNullOrUndefined, objExtend } from \"@microsoft/applicationinsights-core-js\";\r\nimport { strSubstring } from \"@nevware21/ts-utils\";\r\nimport { _DYN_ATTRIBUTES, _DYN_CAPTURE_ALL_META_DAT2, _DYN_CONTENT, _DYN_CONTENT_NAME, _DYN_CUSTOM_DATA_PREFIX, _DYN_DATA_TAGS, _DYN_GET_ATTRIBUTE, _DYN_GET_ELEMENT_CONTENT, _DYN_INDEX_OF, _DYN_LENGTH, _DYN_META_DATA_PREFIX, _DYN_NAME, _DYN_PARENT_DATA_TAG, _DYN_PARENT_ELEMENT, _DYN_PARENT_NODE, _DYN_TAG_NAME, _DYN_USE_DEFAULT_CONTENT_1, _DYN__CONFIG, _DYN__TRACE_LOGGER } from \"../__DynamicConstants\";\r\nimport { isValueAssigned, removeInvalidElements, walkUpDomChainWithElementValidation } from \"../common/Utils\";\r\nvar MAX_CONTENTNAME_LENGTH = 200;\r\nvar DomContentHandler = /** @class */ (function () {\r\n    /**\r\n     * @param config - ClickAnalytics configuration object\r\n     * @param traceLogger - Trace logger to log to console.\r\n     */\r\n    function DomContentHandler(_config, _traceLogger) {\r\n        this._config = _config;\r\n        this._traceLogger = _traceLogger;\r\n        dynamicProto(DomContentHandler, this, function (_self) {\r\n            _self.getMetadata = function () {\r\n                var dataTags = (_self[_DYN__CONFIG /* @min:%2e_config */] || {})[_DYN_DATA_TAGS /* @min:%2edataTags */];\r\n                var metaTags = {};\r\n                if (hasDocument()) {\r\n                    metaTags = isValueAssigned(dataTags.metaDataPrefix) ? _getMetaDataFromDOM(dataTags[_DYN_CAPTURE_ALL_META_DAT2 /* @min:%2ecaptureAllMetaDataContent */], dataTags[_DYN_META_DATA_PREFIX /* @min:%2emetaDataPrefix */], false) :\r\n                        _getMetaDataFromDOM(dataTags[_DYN_CAPTURE_ALL_META_DAT2 /* @min:%2ecaptureAllMetaDataContent */], \"\", false);\r\n                }\r\n                return metaTags;\r\n            };\r\n            _self[_DYN_GET_ELEMENT_CONTENT /* @min:%2egetElementContent */] = function (element) {\r\n                if (!element) {\r\n                    return {};\r\n                }\r\n                var dataTags = (_self[_DYN__CONFIG /* @min:%2e_config */] || {})[_DYN_DATA_TAGS /* @min:%2edataTags */];\r\n                var elementContent = {};\r\n                var biBlobValue;\r\n                var parentDataTagPrefix;\r\n                var dataTagPrefix = dataTags[_DYN_CUSTOM_DATA_PREFIX /* @min:%2ecustomDataPrefix */];\r\n                var aiBlobAttributeTag = dataTagPrefix + dataTags.aiBlobAttributeTag;\r\n                if (isValueAssigned(dataTags[_DYN_PARENT_DATA_TAG /* @min:%2eparentDataTag */])) {\r\n                    parentDataTagPrefix = dataTagPrefix + dataTags[_DYN_PARENT_DATA_TAG /* @min:%2eparentDataTag */];\r\n                }\r\n                if (!_isTracked(element, dataTagPrefix, aiBlobAttributeTag)) {\r\n                    // capture blob from element or hierarchy\r\n                    biBlobValue = element[_DYN_GET_ATTRIBUTE /* @min:%2egetAttribute */](aiBlobAttributeTag);\r\n                    if (biBlobValue) {\r\n                        try {\r\n                            elementContent = JSON.parse(biBlobValue);\r\n                        }\r\n                        catch (e) {\r\n                            _throwInternal(_self[_DYN__TRACE_LOGGER /* @min:%2e_traceLogger */], 1 /* eLoggingSeverity.CRITICAL */, 101 /* _eInternalMessageId.CannotParseAiBlobValue */, \"Can not parse \" + biBlobValue);\r\n                        }\r\n                    }\r\n                    else {\r\n                        // traverse up the DOM to find the closest parent with data-* tag defined\r\n                        //contentElement = walkUpDomChainWithElementValidation(element, _self._isTracked, dataTagPrefix);\r\n                        elementContent = objExtend(elementContent, _populateElementContent(element, dataTagPrefix, parentDataTagPrefix, aiBlobAttributeTag));\r\n                    }\r\n                }\r\n                else {\r\n                    elementContent = objExtend(elementContent, _populateElementContentwithDataTag(element, dataTagPrefix, parentDataTagPrefix, aiBlobAttributeTag));\r\n                }\r\n                removeInvalidElements(elementContent);\r\n                if (parentDataTagPrefix) {\r\n                    elementContent = objExtend(elementContent, _getParentDetails(element, elementContent, dataTagPrefix, aiBlobAttributeTag));\r\n                }\r\n                return elementContent;\r\n            };\r\n            /**\r\n             * Capture current level Element content\r\n             */\r\n            function _captureElementContentWithDataTag(contentElement, elementContent, dataTagPrefix) {\r\n                for (var i = 0, attrib; i < contentElement.attributes[_DYN_LENGTH /* @min:%2elength */]; i++) {\r\n                    attrib = contentElement[_DYN_ATTRIBUTES /* @min:%2eattributes */][i];\r\n                    if (attrib.name[_DYN_INDEX_OF /* @min:%2eindexOf */](dataTagPrefix) !== 0) {\r\n                        continue;\r\n                    }\r\n                    var attribName = attrib[_DYN_NAME /* @min:%2ename */].replace(dataTagPrefix, \"\");\r\n                    elementContent[attribName] = attrib.value;\r\n                }\r\n            }\r\n            /**\r\n             * Walk Up the DOM to capture Element content\r\n             */\r\n            function _walkUpDomChainCaptureData(el, elementContent, dataTagPrefix, parentDataTagPrefix, aiBlobAttributeTag) {\r\n                var element = el;\r\n                var parentDataTagFound = false;\r\n                var elementLevelFlag = false; // Use this flag to capture 'id' only at the incoming html element level.\r\n                while (!isNullOrUndefined(element) && !isNullOrUndefined(element[_DYN_ATTRIBUTES /* @min:%2eattributes */])) {\r\n                    var attributes = element[_DYN_ATTRIBUTES /* @min:%2eattributes */];\r\n                    for (var i = 0; i < attributes[_DYN_LENGTH /* @min:%2elength */]; i++) {\r\n                        var attrib = attributes[i];\r\n                        if (attrib.name[_DYN_INDEX_OF /* @min:%2eindexOf */](dataTagPrefix) !== 0) {\r\n                            continue;\r\n                        }\r\n                        if (attrib.name[_DYN_INDEX_OF /* @min:%2eindexOf */](parentDataTagPrefix) === 0) {\r\n                            parentDataTagFound = true;\r\n                        }\r\n                        // Todo handle blob data\r\n                        if (attrib.name[_DYN_INDEX_OF /* @min:%2eindexOf */](aiBlobAttributeTag) === 0) {\r\n                            continue;\r\n                        }\r\n                        var attribName = attrib[_DYN_NAME /* @min:%2ename */].replace(dataTagPrefix, \"\");\r\n                        if (elementLevelFlag && attribName === \"id\") {\r\n                            continue; // skip capturing id if not at the first level.\r\n                        }\r\n                        if (!isValueAssigned(elementContent[attribName])) {\r\n                            elementContent[attribName] = attrib.value;\r\n                        }\r\n                    }\r\n                    // break after current level;\r\n                    if (parentDataTagFound) {\r\n                        break;\r\n                    }\r\n                    elementLevelFlag = true; // after the initial level set this flag to true.\r\n                    element = element[_DYN_PARENT_NODE /* @min:%2eparentNode */];\r\n                }\r\n            }\r\n            /**\r\n             * Capture Element content along with Data Tag attributes and values\r\n             */\r\n            function _populateElementContent(element, dataTagPrefix, parentDataTagPrefix, aiBlobAttributeTag) {\r\n                var elementContent = {};\r\n                if (!element) {\r\n                    return elementContent;\r\n                }\r\n                var htmlContent = _getHtmlIdAndContentName(element);\r\n                elementContent = {\r\n                    id: htmlContent.id || \"\",\r\n                    contentName: htmlContent[_DYN_CONTENT_NAME /* @min:%2econtentName */] || \"\"\r\n                };\r\n                if (isValueAssigned(parentDataTagPrefix)) {\r\n                    _walkUpDomChainCaptureData(element, elementContent, dataTagPrefix, parentDataTagPrefix, aiBlobAttributeTag);\r\n                }\r\n                // Validate to ensure the minimum required field 'id' or 'contentName' is present.\r\n                // The content schema defines id, aN and sN as required fields.  However,\r\n                // requiring these fields would result in majority of adopter's content from being collected.\r\n                // Just throw a warning and continue collection.\r\n                if (!elementContent.id && !elementContent[_DYN_CONTENT_NAME /* @min:%2econtentName */]) {\r\n                    _throwInternal(_traceLogger, 2 /* eLoggingSeverity.WARNING */, 102 /* _eInternalMessageId.InvalidContentBlob */, \"Invalid content blob.  Missing required attributes (id, contentName. \" +\r\n                        \" Content information will still be collected!\");\r\n                }\r\n                return elementContent;\r\n            }\r\n            /**\r\n             * Capture Element content along with Data Tag attributes and values\r\n             */\r\n            function _populateElementContentwithDataTag(element, dataTagPrefix, parentDataTagPrefix, aiBlobAttributeTag) {\r\n                var dataTags = (_self[_DYN__CONFIG /* @min:%2e_config */] || {})[_DYN_DATA_TAGS /* @min:%2edataTags */];\r\n                var elementContent = {};\r\n                if (!element) {\r\n                    return elementContent;\r\n                }\r\n                var htmlContent = _getHtmlIdAndContentName(element);\r\n                if (isValueAssigned(parentDataTagPrefix)) {\r\n                    _walkUpDomChainCaptureData(element, elementContent, dataTagPrefix, parentDataTagPrefix, aiBlobAttributeTag);\r\n                }\r\n                else {\r\n                    _captureElementContentWithDataTag(element, elementContent, dataTagPrefix);\r\n                }\r\n                if (dataTags[_DYN_USE_DEFAULT_CONTENT_1 /* @min:%2euseDefaultContentNameOrId */]) {\r\n                    if (!isValueAssigned(elementContent.id)) {\r\n                        elementContent.id = htmlContent.id || \"\";\r\n                    }\r\n                    elementContent[_DYN_CONTENT_NAME /* @min:%2econtentName */] = htmlContent[_DYN_CONTENT_NAME /* @min:%2econtentName */] || \"\";\r\n                }\r\n                // Validate to ensure the minimum required field 'id' or 'contentName' is present.\r\n                // The content schema defines id, aN and sN as required fields.  However,\r\n                // requiring these fields would result in majority of adopter's content from being collected.\r\n                // Just throw a warning and continue collection.\r\n                if (!elementContent.id && !elementContent[_DYN_CONTENT_NAME /* @min:%2econtentName */]) {\r\n                    _throwInternal(_traceLogger, 2 /* eLoggingSeverity.WARNING */, 102 /* _eInternalMessageId.InvalidContentBlob */, \"Invalid content blob.  Missing required attributes (id, contentName. \" +\r\n                        \" Content information will still be collected!\");\r\n                }\r\n                return elementContent;\r\n            }\r\n            /**\r\n             * Retrieve a specified metadata tag value from the DOM.\r\n             * @param captureAllMetaDataContent - Flag to capture all metadata content\r\n             * @param prefix - Prefix to search the metatags with.\r\n             * @param removePrefix - Specifies if the prefix must be excluded from key names in the returned collection.\r\n             * @returns Metadata collection/property bag\r\n             */\r\n            function _getMetaDataFromDOM(captureAllMetaDataContent, prefix, removePrefix) {\r\n                var metaElements;\r\n                var metaData = {};\r\n                if (hasDocument()) {\r\n                    metaElements = getDocument().querySelectorAll(\"meta\");\r\n                    for (var i = 0; i < metaElements[_DYN_LENGTH /* @min:%2elength */]; i++) {\r\n                        var meta = metaElements[i];\r\n                        if (meta[_DYN_NAME /* @min:%2ename */]) {\r\n                            if (captureAllMetaDataContent || meta.name[_DYN_INDEX_OF /* @min:%2eindexOf */](prefix) === 0) {\r\n                                var name_1 = removePrefix ? meta[_DYN_NAME /* @min:%2ename */].replace(prefix, \"\") : meta[_DYN_NAME /* @min:%2ename */];\r\n                                metaData[name_1] = meta[_DYN_CONTENT /* @min:%2econtent */];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return metaData;\r\n            }\r\n            /**\r\n             * Gets the default content name.\r\n             * @param element - An html element\r\n             * @param useDefaultContentNameOrId - Flag indicating if an element is market PII.\r\n             * @returns Content name\r\n             */\r\n            function _getDefaultContentName(element, useDefaultContentName) {\r\n                if (useDefaultContentName === false || !element[_DYN_TAG_NAME /* @min:%2etagName */]) {\r\n                    return \"\";\r\n                }\r\n                var doc = getDocument() || {};\r\n                var contentName;\r\n                switch (element[_DYN_TAG_NAME /* @min:%2etagName */]) {\r\n                    case \"A\":\r\n                        contentName = doc.all ? element.innerText || element.innerHTML : element.text || element.innerHTML;\r\n                        break;\r\n                    case \"IMG\":\r\n                    case \"AREA\":\r\n                        contentName = element.alt;\r\n                        break;\r\n                    default:\r\n                        contentName = element.value || element[_DYN_NAME /* @min:%2ename */] || element.alt || element.innerText || element.id;\r\n                }\r\n                return strSubstring(contentName, 0, MAX_CONTENTNAME_LENGTH);\r\n            }\r\n            /**\r\n             * Check if the user wants to track the element, which means if the element has any tags with data-* or customDataPrefix\r\n             * @param element - An html element\r\n             * @returns true if any data-* exist, otherwise return false\r\n             */\r\n            function _isTracked(element, dataTag, aiBlobAttributeTag) {\r\n                var attrs = element[_DYN_ATTRIBUTES /* @min:%2eattributes */];\r\n                var dataTagFound = false;\r\n                for (var i = 0; i < attrs[_DYN_LENGTH /* @min:%2elength */]; i++) {\r\n                    var attributeName = attrs[i][_DYN_NAME /* @min:%2ename */];\r\n                    if (attributeName === aiBlobAttributeTag) {\r\n                        // ignore if the attribute name is equal to aiBlobAttributeTag\r\n                        return false;\r\n                    }\r\n                    else if (attributeName[_DYN_INDEX_OF /* @min:%2eindexOf */](dataTag) === 0) {\r\n                        dataTagFound = true;\r\n                    }\r\n                }\r\n                return dataTagFound;\r\n            }\r\n            function _getHtmlIdAndContentName(element) {\r\n                var _a;\r\n                var dataTags = (_self[_DYN__CONFIG /* @min:%2e_config */] || {})[_DYN_DATA_TAGS /* @min:%2edataTags */];\r\n                var callback = (_self[_DYN__CONFIG /* @min:%2e_config */] || {}).callback;\r\n                var htmlContent = {};\r\n                if (!element) {\r\n                    return htmlContent;\r\n                }\r\n                if (dataTags[_DYN_USE_DEFAULT_CONTENT_1 /* @min:%2euseDefaultContentNameOrId */]) {\r\n                    var customizedContentName = callback[_DYN_CONTENT_NAME /* @min:%2econtentName */] ? callback[_DYN_CONTENT_NAME /* @min:%2econtentName */](element, dataTags[_DYN_USE_DEFAULT_CONTENT_1 /* @min:%2euseDefaultContentNameOrId */]) : \"\";\r\n                    var defaultContentName = _getDefaultContentName(element, dataTags[_DYN_USE_DEFAULT_CONTENT_1 /* @min:%2euseDefaultContentNameOrId */]);\r\n                    htmlContent = (_a = {\r\n                            id: element.id\r\n                        },\r\n                        _a[_DYN_CONTENT_NAME /* @min:contentName */] = customizedContentName || defaultContentName || element[_DYN_GET_ATTRIBUTE /* @min:%2egetAttribute */](\"alt\"),\r\n                        _a);\r\n                }\r\n                return htmlContent;\r\n            }\r\n            /**\r\n            * Computes the parentId of a given element.\r\n            * @param element - An html element\r\n            * @returns An object containing the closest parentId , can be empty if nothing was found\r\n            */\r\n            function _getParentDetails(element, elementContent, dataTagPrefix, aiBlobAttributeTag) {\r\n                var parentId = elementContent[\"parentid\"];\r\n                var parentName = elementContent[\"parentname\"];\r\n                var parentInfo = {};\r\n                if (parentId || parentName || !element) {\r\n                    return parentInfo;\r\n                }\r\n                return _populateParentInfo(element, dataTagPrefix, aiBlobAttributeTag);\r\n            }\r\n            /**\r\n            * Check if parent info already set up, if so take and put into content, if not walk up the DOM to find correct info\r\n            * @param element - An html element that the user wants to track\r\n            * @returns An object containing the parent info, can be empty if nothing was found\r\n            */\r\n            function _populateParentInfo(element, dataTagPrefix, aiBlobAttributeTag) {\r\n                var parentInfo = {};\r\n                var parentId;\r\n                // if the user does not set up parent info, walk to the DOM, find the closest parent element (with tags) and populate the info\r\n                var closestParentElement = walkUpDomChainWithElementValidation(element[_DYN_PARENT_ELEMENT /* @min:%2eparentElement */], _isTracked, dataTagPrefix);\r\n                if (closestParentElement) {\r\n                    var dataAttr = closestParentElement[_DYN_GET_ATTRIBUTE /* @min:%2egetAttribute */](aiBlobAttributeTag) || element[aiBlobAttributeTag];\r\n                    if (dataAttr) {\r\n                        try {\r\n                            var telemetryObject = JSON.parse(dataAttr);\r\n                        }\r\n                        catch (e) {\r\n                            _throwInternal(_traceLogger, 1 /* eLoggingSeverity.CRITICAL */, 101 /* _eInternalMessageId.CannotParseAiBlobValue */, \"Can not parse \" + dataAttr);\r\n                        }\r\n                        if (telemetryObject) {\r\n                            parentId = telemetryObject.id;\r\n                        }\r\n                    }\r\n                    else {\r\n                        parentId = closestParentElement[_DYN_GET_ATTRIBUTE /* @min:%2egetAttribute */](dataTagPrefix + \"id\");\r\n                    }\r\n                }\r\n                if (parentId) {\r\n                    parentInfo[\"parentid\"] = parentId;\r\n                }\r\n                else {\r\n                    var htmlContent = _getHtmlIdAndContentName(element[_DYN_PARENT_ELEMENT /* @min:%2eparentElement */]);\r\n                    parentInfo[\"parentid\"] = htmlContent.id;\r\n                    parentInfo[\"parentname\"] = htmlContent[_DYN_CONTENT_NAME /* @min:%2econtentName */];\r\n                }\r\n                return parentInfo;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Collect metatags from DOM.\r\n     * Collect data from meta tags.\r\n     * @returns {object} - Metatags collection/property bag\r\n     */\r\n    DomContentHandler.prototype.getMetadata = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    /**\r\n     * Collect data-* attributes for the given element.\r\n     * All attributes with data-* prefix or user provided customDataPrefix are collected.'data-*' prefix is removed from the key name.\r\n     * @param element - The element from which attributes need to be collected.\r\n     * @returns String representation of the Json array of element attributes\r\n     */\r\n    DomContentHandler.prototype.getElementContent = function (element) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    };\r\n    return DomContentHandler;\r\n}());\r\nexport { DomContentHandler };\r\n//# sourceMappingURL=DomContentHandler.js.map"],"names":[],"mappingskEAkBM,CAAC;;;;;6BACsB;AAC7B;AACA;AACA"}