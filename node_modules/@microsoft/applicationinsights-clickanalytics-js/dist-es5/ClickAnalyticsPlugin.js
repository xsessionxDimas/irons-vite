/*
 * Application Insights JavaScript SDK - Click Analytics, 3.3.1
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */
/**
* @copyright Microsoft 2020
*/
var _a, _b, _c, _d;
import { __extendsFn as __extends } from "@microsoft/applicationinsights-shims";
import dynamicProto from "@microsoft/dynamicproto-js";
import { PropertiesPluginIdentifier } from "@microsoft/applicationinsights-common";
import { BaseTelemetryPlugin, _throwInternal, arrForEach, cfgDfFunc, cfgDfMerge, cfgDfString, cfgDfValidate, createProcessTelemetryContext, dumpObj, getExceptionName, isNullOrUndefined, onConfigChange, throwError, unloadComponents } from "@microsoft/applicationinsights-core-js";
import { getDocument, hasDocument, objDeepFreeze, strSubstring, strTrim } from "@nevware21/ts-utils";
import { _DYN_BEHAVIOR_VALIDATOR, _DYN_CAPTURE_ALL_META_DAT2, _DYN_CONTENT_NAME, _DYN_DEFAULT_RIGHT_CLICK_3, _DYN_INDEX_OF, _DYN_LENGTH, _DYN_META_DATA_PREFIX, _DYN_PAGE_ACTION_PAGE_TAG0, _DYN_PAGE_NAME, _DYN_PAGE_TYPE, _DYN_PARENT_DATA_TAG, _DYN_REQUEST_URI, _DYN_TRACK_PAGE_ACTION, _DYN_USE_DEFAULT_CONTENT_1, _DYN__DO_UNLOAD } from "./__DynamicConstants";
import { BehaviorEnumValidator, BehaviorMapValidator, BehaviorValueValidator, DEFAULT_AI_BLOB_ATTRIBUTE_TAG, DEFAULT_DATA_PREFIX, DEFAULT_DONOT_TRACK_TAG } from "./common/Utils";
import { PageAction } from "./events/PageAction";
import { AutoCaptureHandler } from "./handlers/AutoCaptureHandler";
import { DomContentHandler } from "./handlers/DomContentHandler";
export { BehaviorMapValidator, BehaviorValueValidator, BehaviorEnumValidator };
var defaultValues = objDeepFreeze((_a = {
        autoCapture: true,
        callback: cfgDfMerge((_b = {},
            _b[_DYN_PAGE_ACTION_PAGE_TAG0 /* @min:pageActionPageTags */] = cfgDfFunc(),
            _b[_DYN_PAGE_NAME /* @min:pageName */] = cfgDfFunc(),
            _b[_DYN_CONTENT_NAME /* @min:contentName */] = cfgDfFunc(),
            _b)),
        pageTags: {},
        coreData: cfgDfMerge((_c = {
                referrerUri: hasDocument() ? getDocument().referrer : ""
            },
            _c[_DYN_REQUEST_URI /* @min:requestUri */] = cfgDfString(),
            _c[_DYN_PAGE_NAME /* @min:pageName */] = cfgDfString(),
            _c[_DYN_PAGE_TYPE /* @min:pageType */] = cfgDfString(),
            _c)),
        dataTags: cfgDfMerge((_d = {},
            _d[_DYN_USE_DEFAULT_CONTENT_1 /* @min:useDefaultContentNameOrId */] = false,
            _d.aiBlobAttributeTag = DEFAULT_AI_BLOB_ATTRIBUTE_TAG,
            _d.customDataPrefix = cfgDfValidate(_dataPrefixChk, DEFAULT_DATA_PREFIX),
            _d[_DYN_CAPTURE_ALL_META_DAT2 /* @min:captureAllMetaDataContent */] = false,
            _d.dntDataTag = DEFAULT_DONOT_TRACK_TAG,
            _d[_DYN_META_DATA_PREFIX /* @min:metaDataPrefix */] = cfgDfString(),
            _d[_DYN_PARENT_DATA_TAG /* @min:parentDataTag */] = cfgDfString(),
            _d))
    },
    _a[_DYN_BEHAVIOR_VALIDATOR /* @min:behaviorValidator */] = cfgDfFunc(function (key) { return key || ""; }),
    _a[_DYN_DEFAULT_RIGHT_CLICK_3 /* @min:defaultRightClickBhvr */] = cfgDfString(),
    _a.dropInvalidEvents = false,
    _a.urlCollectHash = false,
    _a.urlCollectQuery = false,
    _a));
function _dataPrefixChk(val) {
    return val && val[_DYN_INDEX_OF /* @min:%2eindexOf */](DEFAULT_DATA_PREFIX) === 0;
}
var ClickAnalyticsPlugin = /** @class */ (function (_super) {
    __extends(ClickAnalyticsPlugin, _super);
    function ClickAnalyticsPlugin() {
        var _this = _super.call(this) || this;
        _this.identifier = "ClickAnalyticsPlugin";
        _this.priority = 181;
        var _config;
        var _pageAction;
        var _autoCaptureHandler;
        var _contentHandler;
        var _autoCapture;
        dynamicProto(ClickAnalyticsPlugin, _this, function (_self, _base) {
            var _identifier = _self.identifier;
            _initDefaults();
            _self.initialize = function (config, core, extensions, pluginChain) {
                if (isNullOrUndefined(core)) {
                    throwError("Error initializing");
                }
                _super.prototype.initialize.call(_this, config, core, extensions, pluginChain);
                _populateDefaults(config);
                // Find the properties plugin.
                var _propertiesExtension;
                arrForEach(extensions, function (extension) {
                    if (extension.identifier === PropertiesPluginIdentifier) {
                        _propertiesExtension = extension;
                    }
                });
                // Append Click Analytics Plugin Version to SDK version.
                if (_propertiesExtension && _propertiesExtension.context && _propertiesExtension.context.internal) {
                    var theVersion = _propertiesExtension.context.internal.sdkVersion;
                    if (theVersion) {
                        theVersion += "_ClickPlugin" + ClickAnalyticsPlugin.Version;
                        if (theVersion[_DYN_LENGTH /* @min:%2elength */] > 64) {
                            theVersion = strTrim(strSubstring(theVersion, 0, 64));
                        }
                        _propertiesExtension.context.internal.sdkVersion = theVersion;
                    }
                }
            };
            _self.processTelemetry = function (env, itemCtx) {
                _self.processNext(env, itemCtx);
            };
            _self[_DYN_TRACK_PAGE_ACTION /* @min:%2etrackPageAction */] = function (pageAction, customProperties) {
                try {
                    _pageAction[_DYN_TRACK_PAGE_ACTION /* @min:%2etrackPageAction */](pageAction, customProperties);
                }
                catch (e) {
                    _throwInternal(_self.diagLog(), 1 /* eLoggingSeverity.CRITICAL */, 103 /* _eInternalMessageId.TrackPageActionEventFailed */, "trackPageAction failed, page action event will not be collected: " + getExceptionName(e), { exception: dumpObj(e) });
                }
            };
            _self._doTeardown = function (unloadCtx, unloadState, asyncCallback) {
                return unloadComponents([
                    _autoCaptureHandler,
                    _contentHandler,
                    _pageAction
                ], unloadCtx, unloadState, function () {
                    _initDefaults();
                    asyncCallback && asyncCallback();
                });
            };
            function _populateDefaults(config) {
                var core = _self.core;
                _self._addHook(onConfigChange(config, function (details) {
                    var config = details.cfg;
                    var ctx = createProcessTelemetryContext(null, config, core);
                    var _config = ctx.getExtCfg(_identifier, defaultValues);
                    var logger = _self.diagLog();
                    _contentHandler = new DomContentHandler(_config, logger);
                    var metaTags = _contentHandler.getMetadata();
                    _pageAction = new PageAction(_self, _config, _contentHandler, _config.callback[_DYN_PAGE_ACTION_PAGE_TAG0 /* @min:%2epageActionPageTags */], metaTags, logger);
                    // Default to DOM autoCapture handler
                    if (_autoCaptureHandler) {
                        _autoCaptureHandler[_DYN__DO_UNLOAD /* @min:%2e_doUnload */]();
                    }
                    _autoCaptureHandler = new AutoCaptureHandler(_self, _config, _pageAction, logger);
                    var autoCapture = !!_config.autoCapture;
                    if (!_autoCapture && autoCapture) {
                        _autoCaptureHandler.click();
                    }
                    _autoCapture = autoCapture;
                }));
            }
            function _initDefaults() {
                _config = null;
                _pageAction = null;
                _autoCaptureHandler = null;
                _contentHandler = null;
                _autoCapture = false;
            }
        });
        return _this;
    }
// Removed Stub for ClickAnalyticsPlugin.prototype.initialize.
// Removed Stub for ClickAnalyticsPlugin.prototype.processTelemetry.
// Removed Stub for ClickAnalyticsPlugin.prototype.trackPageAction.
    ClickAnalyticsPlugin.Version = '3.3.1';
    return ClickAnalyticsPlugin;
}(BaseTelemetryPlugin));
export { ClickAnalyticsPlugin };
//# sourceMappingURL=ClickAnalyticsPlugin.js.map