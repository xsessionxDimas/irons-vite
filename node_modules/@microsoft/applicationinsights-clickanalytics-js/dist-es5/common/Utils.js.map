{"version":3,"file":"Utils.js.map","sources":["Utils.js"],"sourcesContent":["/**\r\n* @copyright Microsoft 2020\r\n* File containing utility functions.\r\n*/\r\nimport { arrForEach, isNullOrUndefined } from \"@microsoft/applicationinsights-core-js\";\r\nimport { _DYN_GET_ATTRIBUTE, _DYN_INDEX_OF, _DYN_PARENT_NODE } from \"../__DynamicConstants\";\r\nexport var DEFAULT_DONOT_TRACK_TAG = \"ai-dnt\";\r\nexport var DEFAULT_AI_BLOB_ATTRIBUTE_TAG = \"ai-blob\";\r\nexport var DEFAULT_DATA_PREFIX = \"data-\";\r\n/**\r\n * Finds attributes in overrideConfig which are invalid or should be objects\r\n * and deletes them. useful in override config\r\n * @param overrideConfig - override config object\r\n * @param attributeNamesExpectedObjects - attributes that should be objects in override config object\r\n */\r\nexport function removeNonObjectsAndInvalidElements(overrideConfig, attributeNamesExpectedObjects) {\r\n    removeInvalidElements(overrideConfig);\r\n    arrForEach(attributeNamesExpectedObjects, function (i) {\r\n        var objectName = attributeNamesExpectedObjects[i];\r\n        if (typeof overrideConfig[objectName] === \"object\") {\r\n            removeInvalidElements(overrideConfig[objectName]);\r\n        }\r\n        else {\r\n            delete overrideConfig[objectName];\r\n        }\r\n    });\r\n}\r\n/**\r\n * Finds attributes in object which are invalid\r\n * and deletes them. useful in override config\r\n * @param object - Input object\r\n */\r\nexport function removeInvalidElements(object) {\r\n    /// Because the config object 'callback' contains only functions,\r\n    /// when it is stringified it returns the empty object. This explains\r\n    /// the workaround regarding 'callback'\r\n    for (var property in object) {\r\n        if (!isValueAssigned(object[property]) ||\r\n            (JSON.stringify(object[property]) === \"{}\" && (property !== \"callback\"))) {\r\n            delete object[property];\r\n        }\r\n    }\r\n}\r\n/**\r\n * Checks if value is assigned to the given param.\r\n * @param value - The token from which the tenant id is to be extracted.\r\n * @returns True/false denoting if value is assigned to the param.\r\n */\r\nexport function isValueAssigned(value) {\r\n    /// <summary> takes a value and checks for undefined, null and empty string </summary>\r\n    /// <param type=\"any\"> value to be tested </param>\r\n    /// <returns> true if value is null undefined or emptyString </returns>\r\n    return !(isNullOrUndefined(value) || value === \"\");\r\n}\r\n/**\r\n * Determines whether an event is a right click or not\r\n * @param evt - Mouse event\r\n * @returns true if the event is a right click\r\n */\r\nexport function isRightClick(evt) {\r\n    try {\r\n        if (\"which\" in evt) { // Chrome, FF, ...\r\n            return (evt.which === 3);\r\n        }\r\n        else if (\"button\" in evt) { // IE, ...\r\n            return (evt.button === 2);\r\n        }\r\n    }\r\n    catch (e) {\r\n        // This can happen with some native browser objects, but should not happen for the type we are checking for\r\n    }\r\n}\r\n/**\r\n * Determines whether an event is a left click or not\r\n * @param evt - Mouse event\r\n * @returns true if the event is a left click\r\n */\r\nexport function isLeftClick(evt) {\r\n    try {\r\n        if (\"which\" in evt) { // Chrome, FF, ...\r\n            return (evt.which === 1);\r\n        }\r\n        else if (\"button\" in evt) { // IE, ...\r\n            return (evt.button === 1);\r\n        }\r\n    }\r\n    catch (e) {\r\n        // This can happen with some native browser objects, but should not happen for the type we are checking for\r\n    }\r\n}\r\n/**\r\n * Determines whether an event is a middle click or not\r\n * @param evt - Mouse event\r\n * @returns true if the event is a middle click\r\n */\r\nexport function isMiddleClick(evt) {\r\n    try {\r\n        if (\"which\" in evt) { // Chrome, FF, ...\r\n            return (evt.which === 2);\r\n        }\r\n        else if (\"button\" in evt) { // IE, ...\r\n            return (evt.button === 4);\r\n        }\r\n    }\r\n    catch (e) {\r\n        // This can happen with some native browser objects, but should not happen for the type we are checking for\r\n    }\r\n}\r\n/**\r\n *  Determines whether an event is a keyboard enter or not\r\n * @param evt - Keyboard event\r\n * @returns true if the event is a keyboard enter\r\n */\r\nexport function isKeyboardEnter(evt) {\r\n    try {\r\n        if (\"keyCode\" in evt) { // Chrome, FF, ...\r\n            return (evt.keyCode === 13);\r\n        }\r\n    }\r\n    catch (e) {\r\n        // This can happen with some native browser objects, but should not happen for the type we are checking for\r\n    }\r\n}\r\n/**\r\n *  Determines whether an event is a keyboard space or not\r\n * @param evt - Keyboard event\r\n * @returns true if the event is a space enter\r\n */\r\nexport function isKeyboardSpace(evt) {\r\n    try {\r\n        if (\"keyCode\" in evt) { // Chrome, FF, ...\r\n            return (evt.keyCode === 32);\r\n        }\r\n    }\r\n    catch (e) {\r\n        // This can happen with some native browser objects, but should not happen for the type we are checking for\r\n    }\r\n}\r\n/**\r\n *  Determines whether the elemt have a DNT(Do Not Track) tag\r\n * @param element - DOM element\r\n * @param doNotTrackFieldName - DOM element\r\n * @returns true if the element must not be tarcked\r\n */\r\nexport function isElementDnt(element, doNotTrackFieldName) {\r\n    var dntElement = findClosestByAttribute(element, doNotTrackFieldName);\r\n    if (!isValueAssigned(dntElement)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Walks up DOM tree to find element with attribute\r\n * @param el - DOM element\r\n * @param attribute - Attribute name\r\n * @returns Dom element which contains attribute\r\n */\r\nexport function findClosestByAttribute(el, attribute) {\r\n    return walkUpDomChainWithElementValidation(el, isAttributeInElement, attribute);\r\n}\r\n/**\r\n * checks if attribute is in element.\r\n * method checks for empty string, in case the attribute is set but no value is assigned to it\r\n * @param element - DOM element\r\n * @param attributeToLookFor - Attribute name\r\n * @returns true if attribute is in element, even if empty string\r\n */\r\nexport function isAttributeInElement(element, attributeToLookFor) {\r\n    var value = element[_DYN_GET_ATTRIBUTE /* @min:%2egetAttribute */](attributeToLookFor);\r\n    return isValueAssigned(value);\r\n}\r\n/**\r\n * Walks up DOM tree to find element which matches validationMethod\r\n * @param el - DOM element\r\n * @param validationMethod - DOM element validation method\r\n * @param validationMethodParam - DOM element validation method parameters\r\n * @returns Dom element which is an anchor\r\n */\r\nexport function walkUpDomChainWithElementValidation(el, validationMethod, validationMethodParam) {\r\n    var element = el;\r\n    if (element) {\r\n        while (!validationMethod(element, validationMethodParam)) {\r\n            element = element[_DYN_PARENT_NODE /* @min:%2eparentNode */];\r\n            if (!element || !(element[_DYN_GET_ATTRIBUTE /* @min:%2egetAttribute */])) {\r\n                return null;\r\n            }\r\n        }\r\n        return element;\r\n    }\r\n}\r\n/**\r\n * Determine if DOM element is an anchor\r\n * @param element - DOM element\r\n * @returns Is element an anchor\r\n */\r\nexport function isElementAnAnchor(element) {\r\n    return element.nodeName === \"A\";\r\n}\r\n/**\r\n * Walks up DOM tree to find anchor element\r\n * @param element - DOM element\r\n * @returns Dom element which is an anchor\r\n */\r\nexport function findClosestAnchor(element) {\r\n    /// <summary> Walks up DOM tree to find anchor element </summary>\r\n    /// <param type='object'> DOM element </param>\r\n    /// <returns> Dom element which is an anchor</returns>\r\n    return walkUpDomChainWithElementValidation(element, isElementAnAnchor);\r\n}\r\n/**\r\n * Returns the specified field and also removes the property from the object if exists.\r\n * @param obj - Input object\r\n * @param fieldName - >Name of the field/property to be extracted\r\n * @returns Value of the specified tag\r\n */\r\nexport function extractFieldFromObject(obj, fieldName) {\r\n    var fieldValue;\r\n    if (obj && obj[fieldName]) {\r\n        fieldValue = obj[fieldName];\r\n        delete obj[fieldName];\r\n    }\r\n    return fieldValue;\r\n}\r\n/**\r\n *  Adds surrounding square brackets to the passed in text\r\n * @param str - Input string\r\n * @returns String with surrounding brackets\r\n */\r\nexport function bracketIt(str) {\r\n    /// <summary>\r\n    ///  Adds surrounding square brackets to the passed in text\r\n    /// </summary>\r\n    return \"[\" + str + \"]\";\r\n}\r\nexport function validateContentNamePrefix(config, defaultDataPrefix) {\r\n    return isValueAssigned(config.dataTags.customDataPrefix) && (config.dataTags.customDataPrefix[_DYN_INDEX_OF /* @min:%2eindexOf */](defaultDataPrefix) === 0);\r\n}\r\nexport function BehaviorMapValidator(map) {\r\n    return function (key) { return map[key] || \"\"; };\r\n}\r\nexport function BehaviorValueValidator(behaviorArray) {\r\n    return function (key) {\r\n        var result;\r\n        arrForEach(behaviorArray, function (value) {\r\n            if (value === key) {\r\n                result = value;\r\n                return -1;\r\n            }\r\n        });\r\n        return result || \"\";\r\n    };\r\n}\r\nexport function BehaviorEnumValidator(enumObj) {\r\n    return function (key) { return enumObj[key] || \"\"; };\r\n}\r\n//# sourceMappingURL=Utils.js.map"],"names":[],"mappings}