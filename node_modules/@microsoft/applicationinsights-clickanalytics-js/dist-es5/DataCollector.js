/*
 * Application Insights JavaScript SDK - Click Analytics, 3.3.1
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */
/**
* @copyright Microsoft 2020
*/
import { getDocument, getLocation, getWindow, hasDocument, isFunction } from "@microsoft/applicationinsights-core-js";
import { scheduleTimeout } from "@nevware21/ts-utils";
import { _DYN_ADD_EVENT_LISTENER, _DYN_CORE_DATA, _DYN_LENGTH, _DYN_PAGE_NAME, _DYN_PATHNAME, _DYN_REQUEST_URI, _DYN_TAG_NAME, _DYN_TO_UPPER_CASE } from "./__DynamicConstants";
import { findClosestAnchor, isValueAssigned } from "./common/Utils";
var clickCaptureInputTypes = { BUTTON: true, CHECKBOX: true, RADIO: true, RESET: true, SUBMIT: true };
/**
 * Get Image href of a given HTMLImageElement
 * @param element - An html image element
 * @returns Href value.
 */
export function getImageHref(element) {
    var temp = element;
    if (temp) {
        var parent = findClosestAnchor(temp);
        if (parent[_DYN_LENGTH /* @min:%2elength */] === 1) {
            var firstParent = parent[0];
            if (firstParent.href) {
                return firstParent.href;
            }
            else if (firstParent.src) {
                return (firstParent.src);
            }
        }
    }
    return "";
}
/**
 * Get click target
 * @returns Click target URI
 */
export function getClickTarget(element) {
    var clickTarget = "";
    switch (element[_DYN_TAG_NAME /* @min:%2etagName */]) {
        case "A":
        case "AREA":
            clickTarget = element.href || "";
            break;
        case "IMG":
            clickTarget = getImageHref(element);
            break;
        case "INPUT":
            var type = element.type;
            if (type && (clickCaptureInputTypes[type[_DYN_TO_UPPER_CASE /* @min:%2etoUpperCase */]()])) {
                var loc = getLocation() || {};
                if (element.form) {
                    clickTarget = element.form.action || (loc[_DYN_PATHNAME /* @min:%2epathname */] || "");
                }
                else {
                    clickTarget = loc[_DYN_PATHNAME /* @min:%2epathname */] || "";
                }
            }
            break;
        default:
            break;
    }
    return clickTarget;
}
/**
 * Execute callback when DOM finish loading
 */
export function onDomLoaded(callback) {
    onDomReadyDo(function () {
        if (hasDocument() && getDocument().readyState === "complete") {
            callback();
        }
        else {
            var win = getWindow();
            if (win) {
                if (win[_DYN_ADD_EVENT_LISTENER /* @min:%2eaddEventListener */]) {
                    win[_DYN_ADD_EVENT_LISTENER /* @min:%2eaddEventListener */]("load", function () {
                        callback();
                    }); // NB **not** 'onload'
                }
                else if (win.attachEvent) {
                    win.attachEvent("onload", function () {
                        callback();
                    }); // IE8
                }
            }
        }
    });
}
// use smallest domready ever for IE8. When IE8 is deprecated, use addEventListener('DomContentLoaded')
function onDomReadyDo(f) {
    /// <summary> fires function f on domRead </summary>
    /// <param type='function'>function to call on domRead</param>
    var doc = getDocument() || {};
    /in/.test(doc.readyState) ? scheduleTimeout(function () {
        onDomReadyDo(f);
    }, 100) : f.call();
}
/**
 * Gets the pageName from the DOM or by calling a override if set.
 * @param config - configuration object
 * @returns Page name.
 */
export function getPageName(config, overrideValues) {
    /// <summary>
    ///  Gets the pageName from the DOM or by calling a override if set.
    /// </summary>
    if (overrideValues && overrideValues[_DYN_PAGE_NAME /* @min:%2epageName */]) {
        return overrideValues[_DYN_PAGE_NAME /* @min:%2epageName */];
    }
    else if (config.callback && isFunction(config.callback[_DYN_PAGE_NAME /* @min:%2epageName */])) {
        return config.callback[_DYN_PAGE_NAME /* @min:%2epageName */]();
    }
    else if (config.coreData && config.coreData[_DYN_PAGE_NAME /* @min:%2epageName */]) {
        return config.coreData[_DYN_PAGE_NAME /* @min:%2epageName */];
    }
    else {
        var doc = getDocument();
        return doc && doc.title || "";
    }
}
/**
 * Sanitize URL values
 * @param config - Configuration
 * @param location - window.location or document.location
 * @returns Flag indicating if an element is market PII.
 */
export function sanitizeUrl(config, location) {
    if (!location) {
        return null;
    }
    var url = location.protocol + "//" + (location.hostname || location.host) + // location.hostname is not supported on Opera and Opera for Android
        (isValueAssigned(location.port) ? ":" + location.port : "") +
        location[_DYN_PATHNAME /* @min:%2epathname */];
    if (!!config.urlCollectHash) { // false by default
        url += (isValueAssigned(location.hash) ? location.hash : "");
    }
    if (!!config.urlCollectQuery) { // false by default
        url += (isValueAssigned(location.search) ? location.search : "");
    }
    return url;
}
/**
 * Get URI, sanitize the value if configured on
 * @param config - Configuration
 * @param location - window.location or document.location
 * @returns Flag indicating if an element is market PII.
 */
export function getUri(config, location) {
    if (config.coreData && config.coreData[_DYN_REQUEST_URI /* @min:%2erequestUri */] && config[_DYN_CORE_DATA /* @min:%2ecoreData */][_DYN_REQUEST_URI /* @min:%2erequestUri */] !== "") {
        return config.coreData[_DYN_REQUEST_URI /* @min:%2erequestUri */];
    }
    return sanitizeUrl(config, location);
}
//# sourceMappingURL=DataCollector.js.map