/*
 * Application Insights JavaScript SDK - Click Analytics, 3.3.1
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */
/**
* @copyright Microsoft 2020
*/
import { __extendsFn as __extends } from "@microsoft/applicationinsights-shims";
import dynamicProto from "@microsoft/dynamicproto-js";
import { strNotSpecified } from "@microsoft/applicationinsights-common";
import { _throwInternal, getPerformance, objExtend, objForEachKey } from "@microsoft/applicationinsights-core-js";
import { getClickTarget } from "../DataCollector";
import { _DYN_ACTION_TYPE, _DYN_BEHAVIOR, _DYN_CAPTURE_PAGE_ACTION, _DYN_CLICK_COORDINATES, _DYN_CLICK_COORDINATE_X, _DYN_CLICK_COORDINATE_Y, _DYN_CONTENT, _DYN_CONTENT_NAME, _DYN_CORE_DATA, _DYN_DATA, _DYN_DATA_TAGS, _DYN_DEFAULT_RIGHT_CLICK_3, _DYN_GET_ELEMENT_CONTENT, _DYN_NAME, _DYN_PAGE_NAME, _DYN_PAGE_TYPE, _DYN_PARENT_DATA_TAG, _DYN_PARENT_ID, _DYN_PROPERTIES, _DYN_REF_URI, _DYN_SET_COMMON_PROPERTIE4, _DYN_TRACK_PAGE_ACTION, _DYN__CONFIG, _DYN__GET_VALID_BEHAVIOR, _DYN__TRACE_LOGGER } from "../__DynamicConstants";
import { bracketIt, extractFieldFromObject, isValueAssigned } from "../common/Utils";
import { WebEvent } from "./WebEvent";
var PageAction = /** @class */ (function (_super) {
    __extends(PageAction, _super);
    function PageAction(clickAnalyticsPlugin, config, contentHandler, pageTagsCallback, metaTags, traceLogger) {
        var _this = _super.call(this, clickAnalyticsPlugin, config, contentHandler, pageTagsCallback, metaTags, traceLogger) || this;
        dynamicProto(PageAction, _this, function (_self, _base) {
            _self[_DYN_TRACK_PAGE_ACTION /* @min:%2etrackPageAction */] = function (pageActionEvent, properties) {
                // Get part A properties
                var ext = {};
                ext["web"] = {};
                var event = {
                    name: "Microsoft.ApplicationInsights.{0}.Event",
                    baseType: "EventData",
                    ext: ext,
                    data: {},
                    baseData: {}
                };
                _populateEventDataIfPresent(event.baseData, "name", pageActionEvent[_DYN_NAME /* @min:%2ename */]);
                _populateEventDataIfPresent(event[_DYN_DATA /* @min:%2edata */], "baseTypeSource", "ClickEvent");
                _populateEventDataIfPresent(event[_DYN_DATA /* @min:%2edata */], "uri", pageActionEvent.uri);
                _populateEventDataIfPresent(event.data, "pageType", pageActionEvent[_DYN_PAGE_TYPE /* @min:%2epageType */]);
                _populateEventDataIfPresent(event[_DYN_DATA /* @min:%2edata */], "properties", pageActionEvent[_DYN_PROPERTIES /* @min:%2eproperties */]);
                _populateEventDataIfPresent(event[_DYN_DATA /* @min:%2edata */], "actionType", pageActionEvent[_DYN_ACTION_TYPE /* @min:%2eactionType */]);
                _populateEventDataIfPresent(event[_DYN_DATA /* @min:%2edata */], "behavior", pageActionEvent[_DYN_BEHAVIOR /* @min:%2ebehavior */]);
                _populateEventDataIfPresent(event[_DYN_DATA /* @min:%2edata */], "clickCoordinates", pageActionEvent[_DYN_CLICK_COORDINATES /* @min:%2eclickCoordinates */]);
                _populateEventDataIfPresent(event[_DYN_DATA /* @min:%2edata */], "content", pageActionEvent[_DYN_CONTENT /* @min:%2econtent */]);
                _populateEventDataIfPresent(event[_DYN_DATA /* @min:%2edata */], "targetUri", pageActionEvent.targetUri);
                _populateEventDataIfPresent(event[_DYN_DATA /* @min:%2edata */], "timeToAction", pageActionEvent.timeToAction);
                _populateEventDataIfPresent(event[_DYN_DATA /* @min:%2edata */], "refUri", pageActionEvent[_DYN_REF_URI /* @min:%2erefUri */]);
                _populateEventDataIfPresent(event.data, "pageName", pageActionEvent[_DYN_PAGE_NAME /* @min:%2epageName */]);
                _populateEventDataIfPresent(event[_DYN_DATA /* @min:%2edata */], "parentId", pageActionEvent[_DYN_PARENT_ID /* @min:%2eparentId */]);
                if (properties) {
                    objForEachKey(properties, function (property, value) {
                        if (!event[_DYN_DATA /* @min:%2edata */][property]) {
                            _populateEventDataIfPresent(event[_DYN_DATA /* @min:%2edata */], property, value);
                        }
                    });
                }
                _self._clickAnalyticsPlugin.core.track(event);
            };
            /**
             * API to create and send a populated PageAction event
             * @param element - DOM element
             * @param overrideValues - PageAction overrides
             * @param customProperties - Custom properties(Part C)
             * @param isRightClick - Flag for mouse right clicks
             */
            _self[_DYN_CAPTURE_PAGE_ACTION /* @min:%2ecapturePageAction */] = function (element, overrideValues, customProperties, isRightClick) {
                overrideValues = !isValueAssigned(overrideValues) ? {} : overrideValues;
                var pageActionEvent = { name: "" };
                var pageActionProperties = isValueAssigned(customProperties) ? customProperties : {};
                _self[_DYN_SET_COMMON_PROPERTIE4 /* @min:%2esetCommonProperties */](pageActionEvent, overrideValues);
                pageActionEvent[_DYN_BEHAVIOR /* @min:%2ebehavior */] = _self._getBehavior(overrideValues);
                // element in scope is needed for below properties.  We cannot pass element into the plugin call chain.
                // process them here.
                var elementContent = {};
                if (isRightClick) {
                    // Default behavior for righ click
                    pageActionEvent.behavior = _self._config[_DYN_DEFAULT_RIGHT_CLICK_3 /* @min:%2edefaultRightClickBhvr */];
                }
                // Fill PartB
                if (element) {
                    pageActionEvent.targetUri = getClickTarget(element);
                    elementContent = _self._contentHandler[_DYN_GET_ELEMENT_CONTENT /* @min:%2egetElementContent */](element); // collect id,cn tags
                    // if the element has a data-*-bhvr attrib defined, use it.
                    if (elementContent.bhvr && !isValueAssigned(overrideValues[_DYN_BEHAVIOR /* @min:%2ebehavior */])) {
                        var currentBehavior = extractFieldFromObject(elementContent, "bhvr");
                        pageActionEvent[_DYN_BEHAVIOR /* @min:%2ebehavior */] = _self[_DYN__GET_VALID_BEHAVIOR /* @min:%2e_getValidBehavior */](currentBehavior);
                    }
                    // Validate to ensure the minimum required field 'contentName' or 'id' is present. However,
                    // requiring these fields would result in majority of adopter's content from being collected.
                    // Just throw a warning and continue collection.
                    if (!isValueAssigned(elementContent.id) && !isValueAssigned(elementContent[_DYN_CONTENT_NAME /* @min:%2econtentName */])) {
                        _throwInternal(_self[_DYN__TRACE_LOGGER /* @min:%2e_traceLogger */], 2 /* eLoggingSeverity.WARNING */, 102 /* _eInternalMessageId.InvalidContentBlob */, "Missing attributes id or contentName in click event. Click event information will still be collected!");
                    }
                }
                pageActionEvent.name = elementContent.id || elementContent[_DYN_CONTENT_NAME /* @min:%2econtentName */] || strNotSpecified;
                pageActionEvent[_DYN_PARENT_ID /* @min:%2eparentId */] = elementContent.parentid || elementContent.parentName || strNotSpecified;
                if (isValueAssigned(overrideValues[_DYN_ACTION_TYPE /* @min:%2eactionType */])) {
                    pageActionEvent[_DYN_ACTION_TYPE /* @min:%2eactionType */] = overrideValues[_DYN_ACTION_TYPE /* @min:%2eactionType */];
                }
                if (isValueAssigned(overrideValues[_DYN_CLICK_COORDINATE_X /* @min:%2eclickCoordinateX */]) && isValueAssigned(overrideValues[_DYN_CLICK_COORDINATE_Y /* @min:%2eclickCoordinateY */])) {
                    pageActionEvent[_DYN_CLICK_COORDINATES /* @min:%2eclickCoordinates */] = overrideValues[_DYN_CLICK_COORDINATE_X /* @min:%2eclickCoordinateX */] + "X" + overrideValues[_DYN_CLICK_COORDINATE_Y /* @min:%2eclickCoordinateY */];
                }
                _sanitizePageActionEventContent(elementContent);
                pageActionEvent[_DYN_CONTENT /* @min:%2econtent */] = bracketIt(JSON.stringify(objExtend(elementContent, overrideValues && overrideValues.contentTags ? overrideValues.contentTags : {})));
                pageActionEvent.timeToAction = _getTimeToClick();
                pageActionEvent.refUri = isValueAssigned(overrideValues.refUri) ? overrideValues.refUri : _self._config[_DYN_CORE_DATA /* @min:%2ecoreData */].referrerUri;
                if (_isUndefinedEvent(pageActionEvent)) {
                    return;
                }
                _self[_DYN_TRACK_PAGE_ACTION /* @min:%2etrackPageAction */](pageActionEvent, pageActionProperties);
            };
            // capture performance data into PageTags
            function _getTimeToClick() {
                var perf = getPerformance();
                if (perf && perf.timing) {
                    var isNavigationStart = perf.timing.navigationStart;
                    if (isNavigationStart && isNavigationStart !== 0) {
                        return new Date().getTime() - isNavigationStart;
                    }
                }
                return -1;
            }
            function _populateEventDataIfPresent(obj, property, value) {
                if (isValueAssigned(value)) {
                    obj[property] = value;
                }
            }
            function _sanitizePageActionEventContent(pageActionContent) {
                if (pageActionContent) {
                    delete pageActionContent.id;
                    delete pageActionContent.parentid;
                    delete pageActionContent.parentname;
                    if (_self._config && _self._config.dataTags && isValueAssigned(_self._config.dataTags[_DYN_PARENT_DATA_TAG /* @min:%2eparentDataTag */])) {
                        delete pageActionContent[_self[_DYN__CONFIG /* @min:%2e_config */][_DYN_DATA_TAGS /* @min:%2edataTags */].parentDataTag];
                    }
                }
            }
            function _isUndefinedEvent(pageActionEvent) {
                if (_self[_DYN__CONFIG /* @min:%2e_config */].dropInvalidEvents) {
                    if (pageActionEvent[_DYN_NAME /* @min:%2ename */] === strNotSpecified
                        && pageActionEvent[_DYN_PARENT_ID /* @min:%2eparentId */] === strNotSpecified
                        && pageActionEvent[_DYN_CONTENT /* @min:%2econtent */] === "[{}]") {
                        return true;
                    }
                }
                return false;
            }
        });
        return _this;
    }
// Removed Stub for PageAction.prototype.trackPageAction.
// Removed Stub for PageAction.prototype.capturePageAction.
    // This is a workaround for an IE bug when using dynamicProto() with classes that don't have any
    // non-dynamic functions or static properties/functions when using uglify-js to minify the resulting code.
    PageAction.__ieDyn=1;

    return PageAction;
}(WebEvent));
export { PageAction };
//# sourceMappingURL=PageAction.js.map