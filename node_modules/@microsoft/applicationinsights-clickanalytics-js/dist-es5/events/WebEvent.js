/*
 * Application Insights JavaScript SDK - Click Analytics, 3.3.1
 * Copyright (c) Microsoft and contributors. All rights reserved.
 */
/**
* @copyright Microsoft 2020
*/
import dynamicProto from "@microsoft/dynamicproto-js";
import { getLocation, hasWindow, objExtend } from "@microsoft/applicationinsights-core-js";
import { getPageName, getUri } from "../DataCollector";
import { _DYN_BEHAVIOR, _DYN_BEHAVIOR_VALIDATOR, _DYN_CORE_DATA, _DYN_NAME, _DYN_PAGE_NAME, _DYN_PAGE_TYPE, _DYN_PROPERTIES, _DYN_SET_BASIC_PROPERTIES, _DYN_SET_COMMON_PROPERTIE4, _DYN__BEHAVIOR_META_TAG, _DYN__CONFIG, _DYN__DO_UNLOAD, _DYN__GET_VALID_BEHAVIOR, _DYN__META_TAGS, _DYN__PAGE_TAGS, _DYN__PAGE_TAGS_CALLBACK, _DYN__PAGE_TYPE_META_TAG, _DYN__TRACE_LOGGER } from "../__DynamicConstants";
import { isValueAssigned } from "../common/Utils";
var WebEvent = /** @class */ (function () {
    /**
     * @param clickAnalyticsPlugin - Click Analytics plugin instance
     * @param config - ClickAnalytics configuration object
     * @param contentHandler - Content handler
     * @param id - Id object
     * @param pageTagsCallback - callback methods to get pageTags value
     * @param metaTags - Meta tags
     * @param traceLogger - Trace logger to log to console.
     */
    function WebEvent(clickAnalyticsPlugin, config, contentHandler, pageTagsCallback, metaTags, traceLogger) {
        dynamicProto(WebEvent, this, function (_self) {
            _initDefaults();
            function _initDefaults() {
                _self[_DYN__PAGE_TAGS /* @min:%2e_pageTags */] = {};
                _self._clickAnalyticsPlugin = clickAnalyticsPlugin;
                _self[_DYN__CONFIG /* @min:%2e_config */] = config;
                _self._contentHandler = contentHandler;
                _self[_DYN__PAGE_TAGS_CALLBACK /* @min:%2e_pageTagsCallback */] = pageTagsCallback;
                _self[_DYN__META_TAGS /* @min:%2e_metaTags */] = metaTags;
                _self[_DYN__TRACE_LOGGER /* @min:%2e_traceLogger */] = traceLogger;
            }
            _self[_DYN_SET_BASIC_PROPERTIES /* @min:%2esetBasicProperties */] = function (event, overrideValues) {
                if (!isValueAssigned(event[_DYN_NAME /* @min:%2ename */])) {
                    event[_DYN_PAGE_NAME /* @min:%2epageName */] = getPageName(_self[_DYN__CONFIG /* @min:%2e_config */], overrideValues);
                }
                if (!isValueAssigned(event.uri) && hasWindow()) {
                    event.uri = getUri(_self[_DYN__CONFIG /* @min:%2e_config */], getLocation());
                }
            };
            /**
             * Sets common properties for events that are based on the WebEvent schema.
             * @param event - The event
             */
            _self[_DYN_SET_COMMON_PROPERTIE4 /* @min:%2esetCommonProperties */] = function (event, overrideValues) {
                _self[_DYN_SET_BASIC_PROPERTIES /* @min:%2esetBasicProperties */](event, overrideValues);
                _self._setPageTags(event, overrideValues);
                // extract specific meta tags out of the pageTags.metaTags collection.  These will go into assigned first class fields in the event.
                // the rest will go into pageTags.metaTags collection as is.
                _self._pageTypeMetaTag = _getMetaData(_self._metaTags, _self._config[_DYN_CORE_DATA /* @min:%2ecoreData */], "pageType");
                _self._behaviorMetaTag = _getMetaData(_self._metaTags, _self._config[_DYN_CORE_DATA /* @min:%2ecoreData */], "behavior");
                if (isValueAssigned(overrideValues[_DYN_PAGE_TYPE /* @min:%2epageType */])) {
                    event[_DYN_PAGE_TYPE /* @min:%2epageType */] = overrideValues[_DYN_PAGE_TYPE /* @min:%2epageType */];
                }
                // Only assign if not overriden and meta data is available
                if (isValueAssigned(_self._pageTypeMetaTag) && !isValueAssigned(event[_DYN_PAGE_TYPE /* @min:%2epageType */])) {
                    event[_DYN_PAGE_TYPE /* @min:%2epageType */] = _self[_DYN__PAGE_TYPE_META_TAG /* @min:%2e_pageTypeMetaTag */];
                }
            };
            /**
             * Sets pageTags.
             * @param event - The event
             */
            _self._setPageTags = function (event, overrideValues) {
                // Prepare the pageTags object that is mostly the same for all events.  Event specific pageTags will be added inside event constructors.
                if (_self[_DYN__PAGE_TAGS_CALLBACK /* @min:%2e_pageTagsCallback */]) {
                    _self[_DYN__PAGE_TAGS /* @min:%2e_pageTags */] = objExtend(true, _self[_DYN__PAGE_TAGS /* @min:%2e_pageTags */], _self[_DYN__PAGE_TAGS_CALLBACK /* @min:%2e_pageTagsCallback */]());
                }
                if (isValueAssigned(overrideValues.pageTags)) {
                    _self[_DYN__PAGE_TAGS /* @min:%2e_pageTags */] = objExtend(true, _self[_DYN__PAGE_TAGS /* @min:%2e_pageTags */], overrideValues.pageTags);
                }
                // If metadata is present add it to pageTags property
                if (_self[_DYN__META_TAGS /* @min:%2e_metaTags */]) {
                    _self[_DYN__PAGE_TAGS /* @min:%2e_pageTags */].metaTags = {};
                    // Remove not supported meta data in pageTags.metaTags
                    for (var metaTag in _self[_DYN__META_TAGS /* @min:%2e_metaTags */]) {
                        if (metaTag != "behavior" && metaTag != "market" && metaTag != "pageType") {
                            _self[_DYN__PAGE_TAGS /* @min:%2e_pageTags */].metaTags[metaTag] = _self[_DYN__META_TAGS /* @min:%2e_metaTags */][metaTag];
                        }
                    }
                }
                // All metadata tags that must be saved as properties have been extracted at this point.  Assign pageTags as is.
                event[_DYN_PROPERTIES /* @min:%2eproperties */] = event[_DYN_PROPERTIES /* @min:%2eproperties */] || {};
                event[_DYN_PROPERTIES /* @min:%2eproperties */]["pageTags"] = _self[_DYN__PAGE_TAGS /* @min:%2e_pageTags */];
            };
            _self._getBehavior = function (overrideValues) {
                var behavior;
                // If override specified
                if (overrideValues && isValueAssigned(overrideValues[_DYN_BEHAVIOR /* @min:%2ebehavior */])) {
                    behavior = overrideValues[_DYN_BEHAVIOR /* @min:%2ebehavior */];
                }
                else if (isValueAssigned(_self[_DYN__BEHAVIOR_META_TAG /* @min:%2e_behaviorMetaTag */])) {
                    // If behavior meta tag available
                    behavior = _self[_DYN__BEHAVIOR_META_TAG /* @min:%2e_behaviorMetaTag */];
                }
                return _self[_DYN__GET_VALID_BEHAVIOR /* @min:%2e_getValidBehavior */](behavior);
            };
            _self[_DYN__GET_VALID_BEHAVIOR /* @min:%2e_getValidBehavior */] = function (behavior) {
                return _self._config[_DYN_BEHAVIOR_VALIDATOR /* @min:%2ebehaviorValidator */](behavior);
            };
            _self[_DYN__DO_UNLOAD /* @min:%2e_doUnload */] = function (unloadCtx, unloadState, asyncCallback) {
                _initDefaults();
            };
            /**
             * Get the specified metadata value from the collection
             * If overrideValue is specified in the config that takes precedence.
             * @param metaTags - Meta data.
             * @param coreData - Coredata values from configuration.
             * @param metaTagName - Name of the metaTag to get.
             * @returns Meta data value
             */
            function _getMetaData(metaTags, coreData, metaTagName) {
                if (coreData && coreData[metaTagName]) {
                    return coreData[metaTagName];
                }
                if (metaTags) {
                    return metaTags[metaTagName];
                }
                return "";
            }
        });
    }
    // Fill common PartB fields
// Removed Stub for WebEvent.prototype.setBasicProperties.
// Removed Stub for WebEvent.prototype.setCommonProperties.
// Removed Stub for WebEvent.prototype._doUnload.
// Removed Stub for WebEvent.prototype._setPageTags.
// Removed Stub for WebEvent.prototype._getBehavior.
// Removed Stub for WebEvent.prototype._getValidBehavior.
    // This is a workaround for an IE bug when using dynamicProto() with classes that don't have any
    // non-dynamic functions or static properties/functions when using uglify-js to minify the resulting code.
    WebEvent.__ieDyn=1;

    return WebEvent;
}());
export { WebEvent };
//# sourceMappingURL=WebEvent.js.map