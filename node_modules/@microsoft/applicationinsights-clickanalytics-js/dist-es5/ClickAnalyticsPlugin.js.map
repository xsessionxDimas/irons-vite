{"version":3,"file":"ClickAnalyticsPlugin.js.map","sources":["ClickAnalyticsPlugin.js"],"sourcesContent":["/**\r\n* @copyright Microsoft 2020\r\n*/\r\nvar _a, _b, _c, _d;\r\nimport { __extends } from \"tslib\";\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\nimport { PropertiesPluginIdentifier } from \"@microsoft/applicationinsights-common\";\r\nimport { BaseTelemetryPlugin, _throwInternal, arrForEach, cfgDfFunc, cfgDfMerge, cfgDfString, cfgDfValidate, createProcessTelemetryContext, dumpObj, getExceptionName, isNullOrUndefined, onConfigChange, throwError, unloadComponents } from \"@microsoft/applicationinsights-core-js\";\r\nimport { getDocument, hasDocument, objDeepFreeze, strSubstring, strTrim } from \"@nevware21/ts-utils\";\r\nimport { _DYN_BEHAVIOR_VALIDATOR, _DYN_CAPTURE_ALL_META_DAT2, _DYN_CONTENT_NAME, _DYN_DEFAULT_RIGHT_CLICK_3, _DYN_INDEX_OF, _DYN_LENGTH, _DYN_META_DATA_PREFIX, _DYN_PAGE_ACTION_PAGE_TAG0, _DYN_PAGE_NAME, _DYN_PAGE_TYPE, _DYN_PARENT_DATA_TAG, _DYN_REQUEST_URI, _DYN_TRACK_PAGE_ACTION, _DYN_USE_DEFAULT_CONTENT_1, _DYN__DO_UNLOAD } from \"./__DynamicConstants\";\r\nimport { BehaviorEnumValidator, BehaviorMapValidator, BehaviorValueValidator, DEFAULT_AI_BLOB_ATTRIBUTE_TAG, DEFAULT_DATA_PREFIX, DEFAULT_DONOT_TRACK_TAG } from \"./common/Utils\";\r\nimport { PageAction } from \"./events/PageAction\";\r\nimport { AutoCaptureHandler } from \"./handlers/AutoCaptureHandler\";\r\nimport { DomContentHandler } from \"./handlers/DomContentHandler\";\r\nexport { BehaviorMapValidator, BehaviorValueValidator, BehaviorEnumValidator };\r\nvar defaultValues = objDeepFreeze((_a = {\r\n        autoCapture: true,\r\n        callback: cfgDfMerge((_b = {},\r\n            _b[_DYN_PAGE_ACTION_PAGE_TAG0 /* @min:pageActionPageTags */] = cfgDfFunc(),\r\n            _b[_DYN_PAGE_NAME /* @min:pageName */] = cfgDfFunc(),\r\n            _b[_DYN_CONTENT_NAME /* @min:contentName */] = cfgDfFunc(),\r\n            _b)),\r\n        pageTags: {},\r\n        coreData: cfgDfMerge((_c = {\r\n                referrerUri: hasDocument() ? getDocument().referrer : \"\"\r\n            },\r\n            _c[_DYN_REQUEST_URI /* @min:requestUri */] = cfgDfString(),\r\n            _c[_DYN_PAGE_NAME /* @min:pageName */] = cfgDfString(),\r\n            _c[_DYN_PAGE_TYPE /* @min:pageType */] = cfgDfString(),\r\n            _c)),\r\n        dataTags: cfgDfMerge((_d = {},\r\n            _d[_DYN_USE_DEFAULT_CONTENT_1 /* @min:useDefaultContentNameOrId */] = false,\r\n            _d.aiBlobAttributeTag = DEFAULT_AI_BLOB_ATTRIBUTE_TAG,\r\n            _d.customDataPrefix = cfgDfValidate(_dataPrefixChk, DEFAULT_DATA_PREFIX),\r\n            _d[_DYN_CAPTURE_ALL_META_DAT2 /* @min:captureAllMetaDataContent */] = false,\r\n            _d.dntDataTag = DEFAULT_DONOT_TRACK_TAG,\r\n            _d[_DYN_META_DATA_PREFIX /* @min:metaDataPrefix */] = cfgDfString(),\r\n            _d[_DYN_PARENT_DATA_TAG /* @min:parentDataTag */] = cfgDfString(),\r\n            _d))\r\n    },\r\n    _a[_DYN_BEHAVIOR_VALIDATOR /* @min:behaviorValidator */] = cfgDfFunc(function (key) { return key || \"\"; }),\r\n    _a[_DYN_DEFAULT_RIGHT_CLICK_3 /* @min:defaultRightClickBhvr */] = cfgDfString(),\r\n    _a.dropInvalidEvents = false,\r\n    _a.urlCollectHash = false,\r\n    _a.urlCollectQuery = false,\r\n    _a));\r\nfunction _dataPrefixChk(val) {\r\n    return val && val[_DYN_INDEX_OF /* @min:%2eindexOf */](DEFAULT_DATA_PREFIX) === 0;\r\n}\r\nvar ClickAnalyticsPlugin = /** @class */ (function (_super) {\r\n    __extends(ClickAnalyticsPlugin, _super);\r\n    function ClickAnalyticsPlugin() {\r\n        var _this = _super.call(this) || this;\r\n        _this.identifier = \"ClickAnalyticsPlugin\";\r\n        _this.priority = 181;\r\n        var _config;\r\n        var _pageAction;\r\n        var _autoCaptureHandler;\r\n        var _contentHandler;\r\n        var _autoCapture;\r\n        dynamicProto(ClickAnalyticsPlugin, _this, function (_self, _base) {\r\n            var _identifier = _self.identifier;\r\n            _initDefaults();\r\n            _self.initialize = function (config, core, extensions, pluginChain) {\r\n                if (isNullOrUndefined(core)) {\r\n                    throwError(\"Error initializing\");\r\n                }\r\n                _super.prototype.initialize.call(_this, config, core, extensions, pluginChain);\r\n                _populateDefaults(config);\r\n                // Find the properties plugin.\r\n                var _propertiesExtension;\r\n                arrForEach(extensions, function (extension) {\r\n                    if (extension.identifier === PropertiesPluginIdentifier) {\r\n                        _propertiesExtension = extension;\r\n                    }\r\n                });\r\n                // Append Click Analytics Plugin Version to SDK version.\r\n                if (_propertiesExtension && _propertiesExtension.context && _propertiesExtension.context.internal) {\r\n                    var theVersion = _propertiesExtension.context.internal.sdkVersion;\r\n                    if (theVersion) {\r\n                        theVersion += \"_ClickPlugin\" + ClickAnalyticsPlugin.Version;\r\n                        if (theVersion[_DYN_LENGTH /* @min:%2elength */] > 64) {\r\n                            theVersion = strTrim(strSubstring(theVersion, 0, 64));\r\n                        }\r\n                        _propertiesExtension.context.internal.sdkVersion = theVersion;\r\n                    }\r\n                }\r\n            };\r\n            _self.processTelemetry = function (env, itemCtx) {\r\n                _self.processNext(env, itemCtx);\r\n            };\r\n            _self[_DYN_TRACK_PAGE_ACTION /* @min:%2etrackPageAction */] = function (pageAction, customProperties) {\r\n                try {\r\n                    _pageAction[_DYN_TRACK_PAGE_ACTION /* @min:%2etrackPageAction */](pageAction, customProperties);\r\n                }\r\n                catch (e) {\r\n                    _throwInternal(_self.diagLog(), 1 /* eLoggingSeverity.CRITICAL */, 103 /* _eInternalMessageId.TrackPageActionEventFailed */, \"trackPageAction failed, page action event will not be collected: \" + getExceptionName(e), { exception: dumpObj(e) });\r\n                }\r\n            };\r\n            _self._doTeardown = function (unloadCtx, unloadState, asyncCallback) {\r\n                return unloadComponents([\r\n                    _autoCaptureHandler,\r\n                    _contentHandler,\r\n                    _pageAction\r\n                ], unloadCtx, unloadState, function () {\r\n                    _initDefaults();\r\n                    asyncCallback && asyncCallback();\r\n                });\r\n            };\r\n            function _populateDefaults(config) {\r\n                var core = _self.core;\r\n                _self._addHook(onConfigChange(config, function (details) {\r\n                    var config = details.cfg;\r\n                    var ctx = createProcessTelemetryContext(null, config, core);\r\n                    var _config = ctx.getExtCfg(_identifier, defaultValues);\r\n                    var logger = _self.diagLog();\r\n                    _contentHandler = new DomContentHandler(_config, logger);\r\n                    var metaTags = _contentHandler.getMetadata();\r\n                    _pageAction = new PageAction(_self, _config, _contentHandler, _config.callback[_DYN_PAGE_ACTION_PAGE_TAG0 /* @min:%2epageActionPageTags */], metaTags, logger);\r\n                    // Default to DOM autoCapture handler\r\n                    if (_autoCaptureHandler) {\r\n                        _autoCaptureHandler[_DYN__DO_UNLOAD /* @min:%2e_doUnload */]();\r\n                    }\r\n                    _autoCaptureHandler = new AutoCaptureHandler(_self, _config, _pageAction, logger);\r\n                    var autoCapture = !!_config.autoCapture;\r\n                    if (!_autoCapture && autoCapture) {\r\n                        _autoCaptureHandler.click();\r\n                    }\r\n                    _autoCapture = autoCapture;\r\n                }));\r\n            }\r\n            function _initDefaults() {\r\n                _config = null;\r\n                _pageAction = null;\r\n                _autoCaptureHandler = null;\r\n                _contentHandler = null;\r\n                _autoCapture = false;\r\n            }\r\n        });\r\n        return _this;\r\n    }\r\n    ClickAnalyticsPlugin.prototype.initialize = function (config, core, extensions, pluginChain) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    ClickAnalyticsPlugin.prototype.processTelemetry = function (env, itemCtx) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    /**\r\n     * Logs a page action event.\r\n     * @param IPageActionTelemetry\r\n     * @param customProperties - Additional data used to filter events and metrics. Defaults to empty.\r\n     */\r\n    ClickAnalyticsPlugin.prototype.trackPageAction = function (pageAction, customProperties) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n    ClickAnalyticsPlugin.Version = '3.3.1';\r\n    return ClickAnalyticsPlugin;\r\n}(BaseTelemetryPlugin));\r\nexport { ClickAnalyticsPlugin };\r\n//# sourceMappingURL=ClickAnalyticsPlugin.js.map"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA,gFAAkC;AAClmEAaM;AACN;AACA;AACA;AACA;AACA"}